; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?hal_init@@YAXXZ				; hal_init
PUBLIC	?hal_set_vect@@YAX_KP6AX0PEAX@Z@Z		; hal_set_vect
PUBLIC	?inportb@@YAEG@Z				; inportb
PUBLIC	?inportw@@YAGG@Z				; inportw
PUBLIC	?inportd@@YAIG@Z				; inportd
PUBLIC	?outportb@@YAXGE@Z				; outportb
PUBLIC	?outportw@@YAXGG@Z				; outportw
PUBLIC	?outportd@@YAXGI@Z				; outportd
PUBLIC	?interrupt_end@@YAXXZ				; interrupt_end
PUBLIC	?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z		; interrupt_set
EXTRN	?apic_local_eoi@@YAXXZ:PROC			; apic_local_eoi
EXTRN	x64_inportb:PROC
EXTRN	x64_inportw:PROC
EXTRN	x64_inportd:PROC
EXTRN	x64_outportb:PROC
EXTRN	x64_outportw:PROC
EXTRN	x64_outportd:PROC
EXTRN	?hal_x86_64_init@@YAXXZ:PROC			; hal_x86_64_init
EXTRN	?setvect@@YAX_KP6AX0PEAX@Z@Z:PROC		; setvect
EXTRN	?ioapic_register_irq@@YAX_KP6AX0PEAX@ZE@Z:PROC	; ioapic_register_irq
pdata	SEGMENT
$pdata$?hal_init@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?hal_init@@YAXXZ
$pdata$?hal_set_vect@@YAX_KP6AX0PEAX@Z@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?hal_set_vect@@YAX_KP6AX0PEAX@Z@Z
$pdata$?inportb@@YAEG@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?inportb@@YAEG@Z
$pdata$?inportw@@YAGG@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?inportw@@YAGG@Z
$pdata$?inportd@@YAIG@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?inportd@@YAIG@Z
$pdata$?outportb@@YAXGE@Z DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$?outportb@@YAXGE@Z
$pdata$?outportw@@YAXGG@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?outportw@@YAXGG@Z
$pdata$?outportd@@YAXGI@Z DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$?outportd@@YAXGI@Z
$pdata$?interrupt_end@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?interrupt_end@@YAXXZ
$pdata$?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?hal_init@@YAXXZ DD 010401H
	DD	04204H
$unwind$?hal_set_vect@@YAX_KP6AX0PEAX@Z@Z DD 010e01H
	DD	0420eH
$unwind$?inportb@@YAEG@Z DD 010901H
	DD	04209H
$unwind$?inportw@@YAGG@Z DD 010901H
	DD	04209H
$unwind$?inportd@@YAIG@Z DD 010901H
	DD	04209H
$unwind$?outportb@@YAXGE@Z DD 010d01H
	DD	0420dH
$unwind$?outportw@@YAXGG@Z DD 010e01H
	DD	0420eH
$unwind$?outportd@@YAXGI@Z DD 010d01H
	DD	0420dH
$unwind$?interrupt_end@@YAXXZ DD 010401H
	DD	04204H
$unwind$?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z DD 011301H
	DD	04213H
xdata	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\hal.cpp
_TEXT	SEGMENT
vector$ = 48
fn$ = 56
irq$ = 64
?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z PROC		; interrupt_set

; 131  : void interrupt_set (size_t vector, void (*fn)(size_t, void* p),uint8_t irq){

$LN3:
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 132  : #ifdef ARCH_X64
; 133  : 	ioapic_register_irq(vector,fn,irq);

	movzx	r8d, BYTE PTR irq$[rsp]
	mov	rdx, QWORD PTR fn$[rsp]
	mov	rcx, QWORD PTR vector$[rsp]
	call	?ioapic_register_irq@@YAX_KP6AX0PEAX@ZE@Z ; ioapic_register_irq

; 134  : #elif  ARCH_ARM
; 135  : 	//! update comming soon..
; 136  : #elif ARCH_ARM64
; 137  : 	//! update comming soon...
; 138  : #endif
; 139  : }

	add	rsp, 40					; 00000028H
	ret	0
?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z ENDP		; interrupt_set
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\hal.cpp
_TEXT	SEGMENT
?interrupt_end@@YAXXZ PROC				; interrupt_end

; 121  : void interrupt_end () { 

$LN3:
	sub	rsp, 40					; 00000028H

; 122  : #ifdef ARCH_X64
; 123  : 	apic_local_eoi ();

	call	?apic_local_eoi@@YAXXZ			; apic_local_eoi

; 124  : #elif ARCH_ARM
; 125  : 	//! update comming soon..
; 126  : #elif ARCH_ARM64
; 127  : 	//! update comming soon..
; 128  : #endif
; 129  : }

	add	rsp, 40					; 00000028H
	ret	0
?interrupt_end@@YAXXZ ENDP				; interrupt_end
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\hal.cpp
_TEXT	SEGMENT
port$ = 48
data$ = 56
?outportd@@YAXGI@Z PROC					; outportd

; 110  : void  outportd (uint16_t port, uint32_t data) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 40					; 00000028H

; 111  : #ifdef ARCH_X64
; 112  : 	x64_outportd (port, data);

	mov	edx, DWORD PTR data$[rsp]
	movzx	ecx, WORD PTR port$[rsp]
	call	x64_outportd

; 113  : #elif ARCH_ARM
; 114  : 	//! arm32_outportd (port, data);
; 115  : #elif ARCH_ARM64
; 116  : 	//! arm64_outportw (port, data);
; 117  : #endif
; 118  : }

	add	rsp, 40					; 00000028H
	ret	0
?outportd@@YAXGI@Z ENDP					; outportd
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\hal.cpp
_TEXT	SEGMENT
port$ = 48
data$ = 56
?outportw@@YAXGG@Z PROC					; outportw

; 98   : void outportw (uint16_t port, uint16_t data) {

$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 40					; 00000028H

; 99   : #ifdef ARCH_X64
; 100  : 	x64_outportw (port, data);

	movzx	edx, WORD PTR data$[rsp]
	movzx	ecx, WORD PTR port$[rsp]
	call	x64_outportw

; 101  : #elif  ARCH_ARM
; 102  : 	//! arm32_outportw (port, data);
; 103  : #elif ARCH_ARM64
; 104  : 	//! arm64_outportw (port, data);
; 105  : #endif
; 106  : }

	add	rsp, 40					; 00000028H
	ret	0
?outportw@@YAXGG@Z ENDP					; outportw
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\hal.cpp
_TEXT	SEGMENT
port$ = 48
data$ = 56
?outportb@@YAXGE@Z PROC					; outportb

; 86   : void  outportb (uint16_t port, uint8_t data ) {

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 40					; 00000028H

; 87   : #ifdef ARCH_X64
; 88   : 	x64_outportb (port,data);

	movzx	edx, BYTE PTR data$[rsp]
	movzx	ecx, WORD PTR port$[rsp]
	call	x64_outportb

; 89   : #elif ARCH_ARM
; 90   : 	//!arm32_outportb (port, data);
; 91   : #elif ARCH_ARM64
; 92   : 	//!arm64_outportb (port, data);
; 93   : #endif
; 94   : }

	add	rsp, 40					; 00000028H
	ret	0
?outportb@@YAXGE@Z ENDP					; outportb
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\hal.cpp
_TEXT	SEGMENT
port$ = 48
?inportd@@YAIG@Z PROC					; inportd

; 73   : uint32_t  inportd (uint16_t port) {

$LN3:
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 40					; 00000028H

; 74   : #ifdef ARCH_X64
; 75   : 	return x64_inportd (port);

	movzx	ecx, WORD PTR port$[rsp]
	call	x64_inportd

; 76   : #elif ARCH_ARM
; 77   : 	//! return arm32_inportd (port);
; 78   : #elif ARCH_ARM64
; 79   : 	//! return arm64_inportd (port);
; 80   : #endif
; 81   : 
; 82   : }

	add	rsp, 40					; 00000028H
	ret	0
?inportd@@YAIG@Z ENDP					; inportd
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\hal.cpp
_TEXT	SEGMENT
port$ = 48
?inportw@@YAGG@Z PROC					; inportw

; 61   : uint16_t inportw (uint16_t port) {

$LN3:
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 40					; 00000028H

; 62   : #ifdef ARCH_X64
; 63   : 	return x64_inportw (port);

	movzx	ecx, WORD PTR port$[rsp]
	call	x64_inportw

; 64   : #elif ARCH_ARM
; 65   : 	//return arm32_inportw (port);
; 66   : #elif ARCH_ARM64
; 67   : 	//return arm64_inportw (port);
; 68   : #endif
; 69   : 
; 70   : }

	add	rsp, 40					; 00000028H
	ret	0
?inportw@@YAGG@Z ENDP					; inportw
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\hal.cpp
_TEXT	SEGMENT
port$ = 48
?inportb@@YAEG@Z PROC					; inportb

; 50   : uint8_t inportb (uint16_t port) {

$LN3:
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 40					; 00000028H

; 51   : #ifdef ARCH_X64
; 52   : 	return x64_inportb (port);

	movzx	ecx, WORD PTR port$[rsp]
	call	x64_inportb

; 53   : #elif ARCH_ARM
; 54   : 	//return arm32_inportb (port);
; 55   : #elif ARCH_ARM64
; 56   : 	//return arm64_inportb (port);
; 57   : #endif
; 58   : }

	add	rsp, 40					; 00000028H
	ret	0
?inportb@@YAEG@Z ENDP					; inportb
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\hal.cpp
_TEXT	SEGMENT
vector$ = 48
function$ = 56
?hal_set_vect@@YAX_KP6AX0PEAX@Z@Z PROC			; hal_set_vect

; 16   : void hal_set_vect (size_t vector, void (*function)(size_t vector, void* param)) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 17   : #ifdef ARCH_X64
; 18   : 	//! initialize x86_64 hal initializer
; 19   : 	setvect (vector,function);

	mov	rdx, QWORD PTR function$[rsp]
	mov	rcx, QWORD PTR vector$[rsp]
	call	?setvect@@YAX_KP6AX0PEAX@Z@Z		; setvect

; 20   : #elif  ARCH_ARM
; 21   : 	//! initialize arm32 hal initializer
; 22   : 	arm_set_vect(vector,function);
; 23   : #elif  ARCH_ARM64
; 24   : 	//! initialize arm64 hal initializer
; 25   : 	arm64_set_vect(vector,function);
; 26   : #endif
; 27   : }

	add	rsp, 40					; 00000028H
	ret	0
?hal_set_vect@@YAX_KP6AX0PEAX@Z@Z ENDP			; hal_set_vect
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\hal.cpp
_TEXT	SEGMENT
?hal_init@@YAXXZ PROC					; hal_init

; 31   : void hal_init () {

$LN3:
	sub	rsp, 40					; 00000028H

; 32   : 
; 33   : 	//! Check processor type
; 34   : #ifdef ARCH_X64
; 35   : 	//! initialize x86_64 hal initializer
; 36   : 	hal_x86_64_init ();

	call	?hal_x86_64_init@@YAXXZ			; hal_x86_64_init

; 37   : #elif  ARCH_ARM
; 38   : 	//! initialize arm32 hal initializer
; 39   : 	hal_arm_init ();
; 40   : #elif  ARCH_ARM64
; 41   : 	//! initialize arm64 hal initializer
; 42   : 	hal_arm64_init ();
; 43   : #endif
; 44   : 
; 45   : }

	add	rsp, 40					; 00000028H
	ret	0
?hal_init@@YAXXZ ENDP					; hal_init
_TEXT	ENDS
END
