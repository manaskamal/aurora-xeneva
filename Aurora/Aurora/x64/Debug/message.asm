; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?message_init@@YAXXZ				; message_init
PUBLIC	?message_send@@YAXGPEAU_message_@@@Z		; message_send
PUBLIC	?message_receive@@YAXPEAU_message_@@@Z		; message_receive
EXTRN	?memset@@YAXPEAXEI@Z:PROC			; memset
EXTRN	memcpy:PROC
EXTRN	?pmmngr_alloc@@YAPEAXXZ:PROC			; pmmngr_alloc
EXTRN	?pmmngr_free@@YAXPEAX@Z:PROC			; pmmngr_free
EXTRN	x64_cli:PROC
EXTRN	?unblock_thread@@YAXPEAU_thread_@@@Z:PROC	; unblock_thread
EXTRN	?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z:PROC ; thread_iterate_ready_list
EXTRN	?thread_iterate_block_list@@YAPEAU_thread_@@H@Z:PROC ; thread_iterate_block_list
EXTRN	?create_mutex@@YAPEAUmutex_t@@XZ:PROC		; create_mutex
EXTRN	?mutex_lock@@YAXPEAUmutex_t@@@Z:PROC		; mutex_lock
EXTRN	?mutex_unlock@@YAXPEAUmutex_t@@@Z:PROC		; mutex_unlock
_BSS	SEGMENT
ipc_mutex_msg DQ 01H DUP (?)
ipc_rcv_msg DQ	01H DUP (?)
queue	DQ	01H DUP (?)
head_pointer DQ	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$?message_init@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$?message_init@@YAXXZ
$pdata$?message_send@@YAXGPEAU_message_@@@Z DD imagerel $LN13
	DD	imagerel $LN13+329
	DD	imagerel $unwind$?message_send@@YAXGPEAU_message_@@@Z
$pdata$?message_receive@@YAXPEAU_message_@@@Z DD imagerel $LN6
	DD	imagerel $LN6+193
	DD	imagerel $unwind$?message_receive@@YAXPEAU_message_@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eipc_mutex_msg@@YAXXZ DD imagerel ??__Eipc_mutex_msg@@YAXXZ
	DD	imagerel ??__Eipc_mutex_msg@@YAXXZ+21
	DD	imagerel $unwind$??__Eipc_mutex_msg@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eipc_rcv_msg@@YAXXZ DD imagerel ??__Eipc_rcv_msg@@YAXXZ
	DD	imagerel ??__Eipc_rcv_msg@@YAXXZ+21
	DD	imagerel $unwind$??__Eipc_rcv_msg@@YAXXZ
pdata	ENDS
CRT$XCU	SEGMENT
ipc_mutex_msg$initializer$ DQ FLAT:??__Eipc_mutex_msg@@YAXXZ
CRT$XCU	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eipc_rcv_msg@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eipc_mutex_msg@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
xdata	SEGMENT
$unwind$?message_init@@YAXXZ DD 010401H
	DD	04204H
$unwind$?message_send@@YAXGPEAU_message_@@@Z DD 010e01H
	DD	0a20eH
$unwind$?message_receive@@YAXPEAU_message_@@@Z DD 010901H
	DD	06209H
xdata	ENDS
CRT$XCU	SEGMENT
ipc_rcv_msg$initializer$ DQ FLAT:??__Eipc_rcv_msg@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\ipc\message.cpp
;	COMDAT ??__Eipc_rcv_msg@@YAXXZ
text$yc	SEGMENT
??__Eipc_rcv_msg@@YAXXZ PROC				; `dynamic initializer for 'ipc_rcv_msg'', COMDAT

; 20   : static mutex_t *ipc_rcv_msg = create_mutex();

	sub	rsp, 40					; 00000028H
	call	?create_mutex@@YAPEAUmutex_t@@XZ	; create_mutex
	mov	QWORD PTR ipc_rcv_msg, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Eipc_rcv_msg@@YAXXZ ENDP				; `dynamic initializer for 'ipc_rcv_msg''
text$yc	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\ipc\message.cpp
;	COMDAT ??__Eipc_mutex_msg@@YAXXZ
text$yc	SEGMENT
??__Eipc_mutex_msg@@YAXXZ PROC				; `dynamic initializer for 'ipc_mutex_msg'', COMDAT

; 19   : static mutex_t *ipc_mutex_msg = create_mutex();

	sub	rsp, 40					; 00000028H
	call	?create_mutex@@YAPEAUmutex_t@@XZ	; create_mutex
	mov	QWORD PTR ipc_mutex_msg, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Eipc_mutex_msg@@YAXXZ ENDP				; `dynamic initializer for 'ipc_mutex_msg''
text$yc	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\ipc\message.cpp
_TEXT	SEGMENT
kq$ = 32
msg$ = 64
?message_receive@@YAXPEAU_message_@@@Z PROC		; message_receive

; 72   : void message_receive (message_t* msg) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 73   : 	x64_cli ();

	call	x64_cli

; 74   : 	mutex_lock(ipc_rcv_msg);

	mov	rcx, QWORD PTR ipc_rcv_msg
	call	?mutex_lock@@YAXPEAUmutex_t@@@Z		; mutex_lock

; 75   : 
; 76   : 	kernel_message_queue_t *kq = (kernel_message_queue_t*)queue;

	mov	rax, QWORD PTR queue
	mov	QWORD PTR kq$[rsp], rax

; 77   : 
; 78   : 	memcpy (msg,&kq->msg,sizeof (message_t));

	mov	rax, QWORD PTR kq$[rsp]
	mov	r8d, 64					; 00000040H
	mov	rdx, rax
	mov	rcx, QWORD PTR msg$[rsp]
	call	memcpy

; 79   : 	queue = queue->next;

	mov	rax, QWORD PTR queue
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR queue, rax

; 80   : 	
; 81   : 	//!FIXME: Some buggy
; 82   : 	if (queue == NULL) {

	cmp	QWORD PTR queue, 0
	jne	SHORT $LN3@message_re

; 83   : 		if (queue->next == 0x0) {

	mov	rax, QWORD PTR queue
	cmp	QWORD PTR [rax+64], 0
	jne	SHORT $LN2@message_re

; 84   : 			memset (kq,0,sizeof(kernel_message_queue_t));

	mov	r8d, 72					; 00000048H
	xor	edx, edx
	mov	rcx, QWORD PTR kq$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 85   : 			queue = head_pointer;

	mov	rax, QWORD PTR head_pointer
	mov	QWORD PTR queue, rax

; 86   : 			goto end;

	jmp	SHORT $LN1@message_re
	jmp	SHORT $end$7
$LN2@message_re:

; 87   : 		}
; 88   : 		queue = queue->next;	

	mov	rax, QWORD PTR queue
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR queue, rax
$LN3@message_re:

; 89   : 	}
; 90   : 	memset (kq,0,sizeof(kernel_message_queue_t));

	mov	r8d, 72					; 00000048H
	xor	edx, edx
	mov	rcx, QWORD PTR kq$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset
$LN1@message_re:
$end$7:

; 91   : 
; 92   : end:
; 93   : 	mutex_unlock(ipc_rcv_msg);

	mov	rcx, QWORD PTR ipc_rcv_msg
	call	?mutex_unlock@@YAXPEAUmutex_t@@@Z	; mutex_unlock

; 94   : }

	add	rsp, 56					; 00000038H
	ret	0
?message_receive@@YAXPEAU_message_@@@Z ENDP		; message_receive
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\ipc\message.cpp
_TEXT	SEGMENT
km$1 = 32
tmsgq$2 = 40
km$3 = 48
blocked_thread$4 = 56
dest_thread$ = 64
dest_id$ = 96
msg$ = 104
?message_send@@YAXGPEAU_message_@@@Z PROC		; message_send

; 35   : void message_send (uint16_t dest_id, message_t *msg) {

$LN13:
	mov	QWORD PTR [rsp+16], rdx
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 88					; 00000058H

; 36   : 	x64_cli ();

	call	x64_cli

; 37   : 	mutex_lock (ipc_mutex_msg);

	mov	rcx, QWORD PTR ipc_mutex_msg
	call	?mutex_lock@@YAXPEAUmutex_t@@@Z		; mutex_lock

; 38   : 	thread_t * dest_thread = thread_iterate_ready_list (dest_id);

	movzx	ecx, WORD PTR dest_id$[rsp]
	call	?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z ; thread_iterate_ready_list
	mov	QWORD PTR dest_thread$[rsp], rax

; 39   : 	if (!dest_thread) {

	cmp	QWORD PTR dest_thread$[rsp], 0
	jne	SHORT $LN10@message_se

; 40   : 		thread_t * blocked_thread = thread_iterate_block_list (dest_id);

	movzx	eax, WORD PTR dest_id$[rsp]
	mov	ecx, eax
	call	?thread_iterate_block_list@@YAPEAU_thread_@@H@Z ; thread_iterate_block_list
	mov	QWORD PTR blocked_thread$4[rsp], rax

; 41   : 		if (blocked_thread  != NULL)

	cmp	QWORD PTR blocked_thread$4[rsp], 0
	je	SHORT $LN9@message_se

; 42   : 			unblock_thread (blocked_thread);

	mov	rcx, QWORD PTR blocked_thread$4[rsp]
	call	?unblock_thread@@YAXPEAU_thread_@@@Z	; unblock_thread

; 43   : 		else

	jmp	SHORT $LN8@message_se
$LN9@message_se:

; 44   : 			goto end;

	jmp	$LN7@message_se
	jmp	$end$14
$LN8@message_se:
$LN10@message_se:

; 45   : 	}
; 46   : 	
; 47   : 	if (queue->msg.type == 0 ) {

	mov	rax, QWORD PTR queue
	movzx	eax, WORD PTR [rax+56]
	test	eax, eax
	jne	SHORT $LN6@message_se

; 48   : 		kernel_message_queue_t *km = (kernel_message_queue_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR km$1[rsp], rax

; 49   : 		memcpy (&km->msg, msg,sizeof(message_t));

	mov	rax, QWORD PTR km$1[rsp]
	mov	r8d, 64					; 00000040H
	mov	rdx, QWORD PTR msg$[rsp]
	mov	rcx, rax
	call	memcpy

; 50   : 		km->next = NULL;

	mov	rax, QWORD PTR km$1[rsp]
	mov	QWORD PTR [rax+64], 0

; 51   : 		memcpy (queue, km,sizeof (kernel_message_queue_t));

	mov	r8d, 72					; 00000048H
	mov	rdx, QWORD PTR km$1[rsp]
	mov	rcx, QWORD PTR queue
	call	memcpy

; 52   : 		pmmngr_free(km);

	mov	rcx, QWORD PTR km$1[rsp]
	call	?pmmngr_free@@YAXPEAX@Z			; pmmngr_free
	jmp	SHORT $LN5@message_se
$LN6@message_se:

; 53   : 	} else if (queue->msg.type != 0){

	mov	rax, QWORD PTR queue
	movzx	eax, WORD PTR [rax+56]
	test	eax, eax
	je	SHORT $LN4@message_se

; 54   : 		kernel_message_queue_t *tmsgq = queue;

	mov	rax, QWORD PTR queue
	mov	QWORD PTR tmsgq$2[rsp], rax
$LN3@message_se:

; 55   : 		do {
; 56   : 			tmsgq = tmsgq->next;

	mov	rax, QWORD PTR tmsgq$2[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR tmsgq$2[rsp], rax

; 57   : 		}while (tmsgq->next != NULL);

	mov	rax, QWORD PTR tmsgq$2[rsp]
	cmp	QWORD PTR [rax+64], 0
	jne	SHORT $LN3@message_se

; 58   : 		kernel_message_queue_t *km = (kernel_message_queue_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR km$3[rsp], rax

; 59   : 		memcpy (&km->msg,msg,sizeof(message_t));

	mov	rax, QWORD PTR km$3[rsp]
	mov	r8d, 64					; 00000040H
	mov	rdx, QWORD PTR msg$[rsp]
	mov	rcx, rax
	call	memcpy

; 60   : 		km->next = NULL;

	mov	rax, QWORD PTR km$3[rsp]
	mov	QWORD PTR [rax+64], 0

; 61   : 		tmsgq->next = km;

	mov	rax, QWORD PTR tmsgq$2[rsp]
	mov	rcx, QWORD PTR km$3[rsp]
	mov	QWORD PTR [rax+64], rcx
$LN4@message_se:
$LN5@message_se:
$LN7@message_se:
$end$14:

; 62   : 	}
; 63   : end:
; 64   : 	mutex_unlock (ipc_mutex_msg);

	mov	rcx, QWORD PTR ipc_mutex_msg
	call	?mutex_unlock@@YAXPEAUmutex_t@@@Z	; mutex_unlock

; 65   : }

	add	rsp, 88					; 00000058H
	ret	0
?message_send@@YAXGPEAU_message_@@@Z ENDP		; message_send
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\ipc\message.cpp
_TEXT	SEGMENT
?message_init@@YAXXZ PROC				; message_init

; 24   : void message_init () {

$LN3:
	sub	rsp, 40					; 00000028H

; 25   : 	queue = (kernel_message_queue_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR queue, rax

; 26   : 	head_pointer = queue;

	mov	rax, QWORD PTR queue
	mov	QWORD PTR head_pointer, rax

; 27   : 	memset (queue,0,4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR queue
	call	?memset@@YAXPEAXEI@Z			; memset

; 28   : 	memset (&queue->msg,0,sizeof (message_t));

	mov	rax, QWORD PTR queue
	mov	r8d, 64					; 00000040H
	xor	edx, edx
	mov	rcx, rax
	call	?memset@@YAXPEAXEI@Z			; memset

; 29   : 	queue->next == NULL;
; 30   : 	//queue->prev == NULL;
; 31   : }

	add	rsp, 40					; 00000028H
	ret	0
?message_init@@YAXXZ ENDP				; message_init
_TEXT	ENDS
END
