; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?mmio_base_address@@3PEA_KEA			; mmio_base_address
PUBLIC	?root_cr3@@3PEA_KEA				; root_cr3
PUBLIC	?first@@3_NA					; first
_BSS	SEGMENT
?mmio_base_address@@3PEA_KEA DQ 01H DUP (?)		; mmio_base_address
?root_cr3@@3PEA_KEA DQ 01H DUP (?)			; root_cr3
?first@@3_NA DB	01H DUP (?)				; first
_BSS	ENDS
CONST	SEGMENT
$SG3661	DB	'Already present -> %x ', 0aH, 00H
CONST	ENDS
PUBLIC	?pml4_index@@YA_K_K@Z				; pml4_index
PUBLIC	?pdp_index@@YA_K_K@Z				; pdp_index
PUBLIC	?pd_index@@YA_K_K@Z				; pd_index
PUBLIC	?pt_index@@YA_K_K@Z				; pt_index
PUBLIC	?p_index@@YA_K_K@Z				; p_index
PUBLIC	?AuPagingInit@@YAXXZ				; AuPagingInit
PUBLIC	AuMapPage
PUBLIC	?AuMapPageEx@@YA_NPEA_K_K1E@Z			; AuMapPageEx
PUBLIC	?AuUnmapPageEx@@YAXPEA_K_K_N@Z			; AuUnmapPageEx
PUBLIC	AuUnmapPage
PUBLIC	?AuCreateAddressSpace@@YAPEA_KXZ		; AuCreateAddressSpace
PUBLIC	AuGetPhysicalAddress
PUBLIC	AuGetFreePage
PUBLIC	AuGetRootPageTable
PUBLIC	AuFreePages
PUBLIC	AuMapMMIO
PUBLIC	?AuPagingClearLow@@YAXXZ			; AuPagingClearLow
EXTRN	AuPmmngrAlloc:PROC
EXTRN	AuPmmngrFree:PROC
EXTRN	?AuPmmngrMoveHigher@@YAXXZ:PROC			; AuPmmngrMoveHigher
EXTRN	p2v:PROC
EXTRN	v2p:PROC
EXTRN	x64_mfence:PROC
EXTRN	x64_read_cr3:PROC
EXTRN	x64_write_cr3:PROC
EXTRN	flush_tlb:PROC
EXTRN	memset:PROC
EXTRN	printf:PROC
pdata	SEGMENT
$pdata$?AuPagingInit@@YAXXZ DD imagerel $LN12
	DD	imagerel $LN12+396
	DD	imagerel $unwind$?AuPagingInit@@YAXXZ
$pdata$AuMapPage DD imagerel $LN6
	DD	imagerel $LN6+585
	DD	imagerel $unwind$AuMapPage
$pdata$?AuMapPageEx@@YA_NPEA_K_K1E@Z DD imagerel $LN9
	DD	imagerel $LN9+659
	DD	imagerel $unwind$?AuMapPageEx@@YA_NPEA_K_K1E@Z
$pdata$?AuUnmapPageEx@@YAXPEA_K_K_N@Z DD imagerel $LN5
	DD	imagerel $LN5+246
	DD	imagerel $unwind$?AuUnmapPageEx@@YAXPEA_K_K_N@Z
$pdata$AuUnmapPage DD imagerel $LN5
	DD	imagerel $LN5+277
	DD	imagerel $unwind$AuUnmapPage
$pdata$?AuCreateAddressSpace@@YAPEA_KXZ DD imagerel $LN9
	DD	imagerel $LN9+182
	DD	imagerel $unwind$?AuCreateAddressSpace@@YAPEA_KXZ
$pdata$AuGetPhysicalAddress DD imagerel $LN4
	DD	imagerel $LN4+201
	DD	imagerel $unwind$AuGetPhysicalAddress
$pdata$AuGetFreePage DD imagerel $LN13
	DD	imagerel $LN13+403
	DD	imagerel $unwind$AuGetFreePage
$pdata$AuFreePages DD imagerel $LN8
	DD	imagerel $LN8+343
	DD	imagerel $unwind$AuFreePages
$pdata$AuMapMMIO DD imagerel $LN6
	DD	imagerel $LN6+171
	DD	imagerel $unwind$AuMapMMIO
$pdata$?AuPagingClearLow@@YAXXZ DD imagerel $LN6
	DD	imagerel $LN6+69
	DD	imagerel $unwind$?AuPagingClearLow@@YAXXZ
$pdata$?clear@@YAXPEAX@Z DD imagerel ?clear@@YAXPEAX@Z
	DD	imagerel ?clear@@YAXPEAX@Z+74
	DD	imagerel $unwind$?clear@@YAXPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?AuPagingInit@@YAXXZ DD 010401H
	DD	0c204H
$unwind$AuMapPage DD 021601H
	DD	0110116H
$unwind$?AuMapPageEx@@YA_NPEA_K_K1E@Z DD 011801H
	DD	0e218H
$unwind$?AuUnmapPageEx@@YAXPEA_K_K_N@Z DD 011301H
	DD	0a213H
$unwind$AuUnmapPage DD 010d01H
	DD	0a20dH
$unwind$?AuCreateAddressSpace@@YAPEA_KXZ DD 010401H
	DD	08204H
$unwind$AuGetPhysicalAddress DD 010e01H
	DD	0a20eH
$unwind$AuGetFreePage DD 011201H
	DD	0c212H
$unwind$AuFreePages DD 011201H
	DD	0c212H
$unwind$AuMapMMIO DD 010e01H
	DD	0820eH
$unwind$?AuPagingClearLow@@YAXXZ DD 010401H
	DD	06204H
$unwind$?clear@@YAXPEAX@Z DD 010901H
	DD	02209H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
n$1 = 0
t$ = 8
addr$ = 32
?clear@@YAXPEAX@Z PROC					; clear

; 77   : static void clear(void* addr){

	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 78   : 	uint64_t* t = (uint64_t*)addr;

	mov	rax, QWORD PTR addr$[rsp]
	mov	QWORD PTR t$[rsp], rax

; 79   : 	for (size_t n = 0; n < 4096 / sizeof(uint64_t); ++n){

	mov	QWORD PTR n$1[rsp], 0
	jmp	SHORT $LN3@clear
$LN2@clear:
	mov	rax, QWORD PTR n$1[rsp]
	inc	rax
	mov	QWORD PTR n$1[rsp], rax
$LN3@clear:
	cmp	QWORD PTR n$1[rsp], 512			; 00000200H
	jae	SHORT $LN1@clear

; 80   : 		t[n] = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR n$1[rsp]
	mov	QWORD PTR [rax+rcx*8], 0

; 81   : 	}

	jmp	SHORT $LN2@clear
$LN1@clear:

; 82   : }

	add	rsp, 24
	ret	0
?clear@@YAXPEAX@Z ENDP					; clear
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
i$1 = 32
cr3$ = 40
?AuPagingClearLow@@YAXXZ PROC				; AuPagingClearLow

; 331  : void AuPagingClearLow() {

$LN6:
	sub	rsp, 56					; 00000038H

; 332  : 	uint64_t* cr3 = (uint64_t*)x64_read_cr3();

	call	x64_read_cr3
	mov	QWORD PTR cr3$[rsp], rax

; 333  : 	for (int i = 0; i < 256; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@AuPagingCl
$LN2@AuPagingCl:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@AuPagingCl:
	cmp	DWORD PTR i$1[rsp], 256			; 00000100H
	jge	SHORT $LN1@AuPagingCl

; 334  : 		cr3[i] = 0;

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
	jmp	SHORT $LN2@AuPagingCl
$LN1@AuPagingCl:

; 335  : }

	add	rsp, 56					; 00000038H
	ret	0
?AuPagingClearLow@@YAXXZ ENDP				; AuPagingClearLow
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
i$1 = 32
out$ = 40
address$ = 48
phys_addr$ = 80
page_count$ = 88
AuMapMMIO PROC

; 407  : void* AuMapMMIO (uint64_t phys_addr, size_t page_count) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 408  : 	uint64_t out = (uint64_t)mmio_base_address;

	mov	rax, QWORD PTR ?mmio_base_address@@3PEA_KEA ; mmio_base_address
	mov	QWORD PTR out$[rsp], rax

; 409  : 	for (size_t i = 0; i < page_count; i++) {

	mov	QWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@AuMapMMIO
$LN2@AuMapMMIO:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN3@AuMapMMIO:
	mov	rax, QWORD PTR page_count$[rsp]
	cmp	QWORD PTR i$1[rsp], rax
	jae	SHORT $LN1@AuMapMMIO

; 410  : 		AuMapPage(phys_addr + i * 4096, out + i * 4096,0x04 | 0x08);  //

	mov	rax, QWORD PTR i$1[rsp]
	imul	rax, 4096				; 00001000H
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR i$1[rsp]
	imul	rcx, 4096				; 00001000H
	mov	rdx, QWORD PTR phys_addr$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8b, 12
	mov	rdx, rax
	call	AuMapPage

; 411  : 	}

	jmp	SHORT $LN2@AuMapMMIO
$LN1@AuMapMMIO:

; 412  : 
; 413  : 	uint64_t address = out;

	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR address$[rsp], rax

; 414  : 	mmio_base_address = (uint64_t*)(address + (page_count * 4096));

	mov	rax, QWORD PTR page_count$[rsp]
	imul	rax, 4096				; 00001000H
	mov	rcx, QWORD PTR address$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR ?mmio_base_address@@3PEA_KEA, rax ; mmio_base_address

; 415  : 
; 416  : 	return (void*)out;

	mov	rax, QWORD PTR out$[rsp]

; 417  : }

	add	rsp, 72					; 00000048H
	ret	0
AuMapMMIO ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
i$1 = 32
i1$ = 36
pt$2 = 40
page$3 = 48
tv68 = 56
pml4_$4 = 64
pdpt$5 = 72
pd$6 = 80
virt_addr$ = 112
free_physical$ = 120
s$ = 128
AuFreePages PROC

; 229  : void AuFreePages(uint64_t virt_addr, bool free_physical, size_t s){

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H

; 230  : 	
; 231  : 	const long i1 = pml4_index(virt_addr);

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	DWORD PTR i1$[rsp], eax

; 232  : 
; 233  : 	for (int i = 0; i < (s /  4096) + 1; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN5@AuFreePage
$LN4@AuFreePage:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN5@AuFreePage:
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	QWORD PTR tv68[rsp], rax
	xor	edx, edx
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, 4096				; 00001000H
	div	rcx
	inc	rax
	mov	rcx, QWORD PTR tv68[rsp]
	cmp	rcx, rax
	jae	$LN3@AuFreePage

; 234  : 		uint64_t *pml4_ = (uint64_t*)x64_read_cr3();

	call	x64_read_cr3
	mov	QWORD PTR pml4_$4[rsp], rax

; 235  : 		uint64_t *pdpt = (uint64_t*)(pml4_[pml4_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR pml4_$4[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pdpt$5[rsp], rax

; 236  : 		uint64_t *pd = (uint64_t*)(pdpt[pdp_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pdp_index@@YA_K_K@Z			; pdp_index
	mov	rcx, QWORD PTR pdpt$5[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pd$6[rsp], rax

; 237  : 		uint64_t *pt = (uint64_t*)(pd[pd_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pd_index@@YA_K_K@Z			; pd_index
	mov	rcx, QWORD PTR pd$6[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pt$2[rsp], rax

; 238  : 		uint64_t *page = (uint64_t*)(pt[pt_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pt_index@@YA_K_K@Z			; pt_index
	mov	rcx, QWORD PTR pt$2[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR page$3[rsp], rax

; 239  : 
; 240  : 		if ((pt[pt_index(virt_addr)] & PAGING_PRESENT) != 0) {

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pt_index@@YA_K_K@Z			; pt_index
	mov	rcx, QWORD PTR pt$2[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN2@AuFreePage

; 241  : 			pt[pt_index(virt_addr)] = 0;

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pt_index@@YA_K_K@Z			; pt_index
	mov	rcx, QWORD PTR pt$2[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
$LN2@AuFreePage:

; 242  : 		}
; 243  : 
; 244  : 		if (free_physical && page != 0) 

	movzx	eax, BYTE PTR free_physical$[rsp]
	test	eax, eax
	je	SHORT $LN1@AuFreePage
	cmp	QWORD PTR page$3[rsp], 0
	je	SHORT $LN1@AuFreePage

; 245  : 			AuPmmngrFree(page);

	mov	rcx, QWORD PTR page$3[rsp]
	call	AuPmmngrFree
$LN1@AuFreePage:

; 246  : 
; 247  : 		virt_addr = virt_addr + i * 4096;

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR virt_addr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR virt_addr$[rsp], rax

; 248  : 	}

	jmp	$LN4@AuFreePage
$LN3@AuFreePage:

; 249  : 
; 250  : }

	add	rsp, 104				; 00000068H
	ret	0
AuFreePages ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
AuGetRootPageTable PROC

; 421  : 	return root_cr3;

	mov	rax, QWORD PTR ?root_cr3@@3PEA_KEA	; root_cr3

; 422  : }

	ret	0
AuGetRootPageTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
start$ = 32
pml4$ = 40
pdpt$1 = 48
pd$2 = 56
pt$3 = 64
page$ = 72
end$ = 80
s$ = 112
user$ = 120
ptr$ = 128
AuGetFreePage PROC

; 364  : uint64_t* AuGetFreePage (size_t s, bool user, void* ptr) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H

; 365  : 	uint64_t* page = 0;

	mov	QWORD PTR page$[rsp], 0

; 366  : 	uint64_t start = 0;

	mov	QWORD PTR start$[rsp], 0

; 367  : 	if (user) {

	movzx	eax, BYTE PTR user$[rsp]
	test	eax, eax
	je	SHORT $LN10@AuGetFreeP

; 368  : 		if (ptr)

	cmp	QWORD PTR ptr$[rsp], 0
	je	SHORT $LN9@AuGetFreeP

; 369  : 			start = (uint64_t)ptr;

	mov	rax, QWORD PTR ptr$[rsp]
	mov	QWORD PTR start$[rsp], rax

; 370  : 		else

	jmp	SHORT $LN8@AuGetFreeP
$LN9@AuGetFreeP:

; 371  : 			start = USER_BASE_ADDRESS;

	mov	QWORD PTR start$[rsp], 1610612736	; 60000000H
$LN8@AuGetFreeP:

; 372  : 	}else

	jmp	SHORT $LN7@AuGetFreeP
$LN10@AuGetFreeP:

; 373  : 		start = KERNEL_BASE_ADDRESS;

	mov	rax, -35184372088832			; ffffe00000000000H
	mov	QWORD PTR start$[rsp], rax
$LN7@AuGetFreeP:

; 374  : 
; 375  : 	uint64_t* end = 0;

	mov	QWORD PTR end$[rsp], 0

; 376  : 	uint64_t *pml4 = (uint64_t*)p2v(x64_read_cr3());

	call	x64_read_cr3
	mov	rcx, rax
	call	p2v
	mov	QWORD PTR pml4$[rsp], rax
$LN6@AuGetFreeP:

; 377  : 	
; 378  : 	/* Walk through every page tables */
; 379  : 	for (;;) {
; 380  : 		if (!(pml4[pml4_index(start)] & PAGING_PRESENT))

	mov	rcx, QWORD PTR start$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR pml4$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN4@AuGetFreeP

; 381  : 			return (uint64_t*)start;

	mov	rax, QWORD PTR start$[rsp]
	jmp	$LN11@AuGetFreeP
$LN4@AuGetFreeP:

; 382  : 
; 383  : 		uint64_t *pdpt = (uint64_t*)(p2v(pml4[pml4_index(start)]) & ~(4096 - 1));

	mov	rcx, QWORD PTR start$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR pml4$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	p2v
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pdpt$1[rsp], rax

; 384  : 		if (!(pdpt[pdp_index(start)] & PAGING_PRESENT))

	mov	rcx, QWORD PTR start$[rsp]
	call	?pdp_index@@YA_K_K@Z			; pdp_index
	mov	rcx, QWORD PTR pdpt$1[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN3@AuGetFreeP

; 385  : 			return (uint64_t*)start;

	mov	rax, QWORD PTR start$[rsp]
	jmp	$LN11@AuGetFreeP
$LN3@AuGetFreeP:

; 386  : 
; 387  : 		uint64_t *pd = (uint64_t*)(p2v(pdpt[pdp_index(start)]) & ~(4096 - 1));

	mov	rcx, QWORD PTR start$[rsp]
	call	?pdp_index@@YA_K_K@Z			; pdp_index
	mov	rcx, QWORD PTR pdpt$1[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	p2v
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pd$2[rsp], rax

; 388  : 		if (!(pd[pd_index(start)] & PAGING_PRESENT))

	mov	rcx, QWORD PTR start$[rsp]
	call	?pd_index@@YA_K_K@Z			; pd_index
	mov	rcx, QWORD PTR pd$2[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN2@AuGetFreeP

; 389  : 			return (uint64_t*)start;

	mov	rax, QWORD PTR start$[rsp]
	jmp	SHORT $LN11@AuGetFreeP
$LN2@AuGetFreeP:

; 390  : 
; 391  : 		uint64_t *pt = (uint64_t*)(p2v(pd[pd_index(start)]) & ~(4096 - 1));

	mov	rcx, QWORD PTR start$[rsp]
	call	?pd_index@@YA_K_K@Z			; pd_index
	mov	rcx, QWORD PTR pd$2[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	p2v
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pt$3[rsp], rax

; 392  : 
; 393  : 		if (!(pt[pt_index(start)] & PAGING_PRESENT))

	mov	rcx, QWORD PTR start$[rsp]
	call	?pt_index@@YA_K_K@Z			; pt_index
	mov	rcx, QWORD PTR pt$3[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN1@AuGetFreeP

; 394  : 			return (uint64_t*)start;

	mov	rax, QWORD PTR start$[rsp]
	jmp	SHORT $LN11@AuGetFreeP
$LN1@AuGetFreeP:

; 395  : 		
; 396  : 		start += 4096;

	mov	rax, QWORD PTR start$[rsp]
	add	rax, 4096				; 00001000H
	mov	QWORD PTR start$[rsp], rax

; 397  : 	}

	jmp	$LN6@AuGetFreeP

; 398  : 	return 0;

	xor	eax, eax
$LN11@AuGetFreeP:

; 399  : }

	add	rsp, 104				; 00000068H
	ret	0
AuGetFreePage ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
i1$ = 32
page$ = 40
pml4$ = 48
pdpt$ = 56
pd$ = 64
pt$ = 72
cr3$ = 96
virt_addr$ = 104
AuGetPhysicalAddress PROC

; 254  : uint64_t* AuGetPhysicalAddress (uint64_t cr3,uint64_t virt_addr) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 255  : 	const long i1 = pml4_index(virt_addr);

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	DWORD PTR i1$[rsp], eax

; 256  : 
; 257  : 	uint64_t *pml4 = (uint64_t*)p2v(cr3);

	mov	rcx, QWORD PTR cr3$[rsp]
	call	p2v
	mov	QWORD PTR pml4$[rsp], rax

; 258  : 	uint64_t *pdpt = (uint64_t*)(p2v(pml4[pml4_index(virt_addr)]) & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR pml4$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	p2v
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pdpt$[rsp], rax

; 259  : 	uint64_t *pd = (uint64_t*)(p2v(pdpt[pdp_index(virt_addr)]) & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pdp_index@@YA_K_K@Z			; pdp_index
	mov	rcx, QWORD PTR pdpt$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	p2v
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pd$[rsp], rax

; 260  : 	uint64_t *pt = (uint64_t*)(p2v(pd[pd_index(virt_addr)]) & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pd_index@@YA_K_K@Z			; pd_index
	mov	rcx, QWORD PTR pd$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	p2v
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pt$[rsp], rax

; 261  : 	uint64_t *page = (uint64_t*)(p2v(pt[pt_index(virt_addr)]) & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pt_index@@YA_K_K@Z			; pt_index
	mov	rcx, QWORD PTR pt$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	p2v
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR page$[rsp], rax

; 262  : 
; 263  : 	if (page != NULL)

	cmp	QWORD PTR page$[rsp], 0
	je	SHORT $LN1@AuGetPhysi

; 264  : 		return page;

	mov	rax, QWORD PTR page$[rsp]
$LN1@AuGetPhysi:

; 265  : }

	add	rsp, 88					; 00000058H
	ret	0
AuGetPhysicalAddress ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
i$1 = 32
new_cr3$ = 40
cr3$ = 48
?AuCreateAddressSpace@@YAPEA_KXZ PROC			; AuCreateAddressSpace

; 339  : uint64_t *AuCreateAddressSpace (){

$LN9:
	sub	rsp, 72					; 00000048H

; 340  : 	
; 341  : 	uint64_t *cr3 = (uint64_t*)p2v((uint64_t)root_cr3);

	mov	rcx, QWORD PTR ?root_cr3@@3PEA_KEA	; root_cr3
	call	p2v
	mov	QWORD PTR cr3$[rsp], rax

; 342  : 	uint64_t *new_cr3 = (uint64_t*)p2v((size_t)AuPmmngrAlloc());

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	p2v
	mov	QWORD PTR new_cr3$[rsp], rax

; 343  : 	memset(new_cr3,0,4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR new_cr3$[rsp]
	call	memset

; 344  : 
; 345  : 	//! For now, copy the 4 GiB identity mapping from old pml4
; 346  : 	//! but later, we should avoid this by mapping only those physical
; 347  : 	//! addresses that are needed, like physical addresses allocated for 
; 348  : 	//! paging tables creations and memory mapped I/O which are not
; 349  : 	//! virtually allocated in higher half sections
; 350  : 	//! Copy Kernel's Higher Half section
; 351  : 	for (int i = 0; i < 512; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN6@AuCreateAd
$LN5@AuCreateAd:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN6@AuCreateAd:
	cmp	DWORD PTR i$1[rsp], 512			; 00000200H
	jge	SHORT $LN4@AuCreateAd

; 352  : 		if (i < 256)

	cmp	DWORD PTR i$1[rsp], 256			; 00000100H
	jge	SHORT $LN3@AuCreateAd

; 353  : 			continue;

	jmp	SHORT $LN5@AuCreateAd
$LN3@AuCreateAd:

; 354  : 		if ((cr3[i] & PAGING_PRESENT))

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN2@AuCreateAd

; 355  : 			new_cr3[i] = cr3[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR new_cr3$[rsp]
	mov	r8, QWORD PTR cr3$[rsp]
	mov	rax, QWORD PTR [r8+rax*8]
	mov	QWORD PTR [rdx+rcx*8], rax

; 356  : 		else

	jmp	SHORT $LN1@AuCreateAd
$LN2@AuCreateAd:

; 357  : 			new_cr3[i] = 0;

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR new_cr3$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
$LN1@AuCreateAd:

; 358  : 	}

	jmp	SHORT $LN5@AuCreateAd
$LN4@AuCreateAd:

; 359  : 
; 360  : 	return new_cr3;

	mov	rax, QWORD PTR new_cr3$[rsp]

; 361  : }

	add	rsp, 72					; 00000048H
	ret	0
?AuCreateAddressSpace@@YAPEA_KXZ ENDP			; AuCreateAddressSpace
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
i1$ = 32
pt$ = 40
page$ = 48
pml4_$ = 56
pdpt$ = 64
pd$ = 72
virt_addr$ = 96
free_physical$ = 104
AuUnmapPage PROC

; 188  : void AuUnmapPage(uint64_t virt_addr, bool free_physical){

$LN5:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 189  : 	
; 190  : 	const long i1 = pml4_index(virt_addr);

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	DWORD PTR i1$[rsp], eax

; 191  : 
; 192  : 	uint64_t *pml4_ = (uint64_t*)p2v(x64_read_cr3());

	call	x64_read_cr3
	mov	rcx, rax
	call	p2v
	mov	QWORD PTR pml4_$[rsp], rax

; 193  : 	uint64_t *pdpt = (uint64_t*)(p2v(pml4_[pml4_index(virt_addr)]) & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR pml4_$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	p2v
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pdpt$[rsp], rax

; 194  : 	uint64_t *pd = (uint64_t*)(p2v(pdpt[pdp_index(virt_addr)]) & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pdp_index@@YA_K_K@Z			; pdp_index
	mov	rcx, QWORD PTR pdpt$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	p2v
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pd$[rsp], rax

; 195  : 	uint64_t *pt = (uint64_t*)(p2v(pd[pd_index(virt_addr)]) & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pd_index@@YA_K_K@Z			; pd_index
	mov	rcx, QWORD PTR pd$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	p2v
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pt$[rsp], rax

; 196  : 	uint64_t *page = (uint64_t*)(p2v(pt[pt_index(virt_addr)]) & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pt_index@@YA_K_K@Z			; pt_index
	mov	rcx, QWORD PTR pt$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	p2v
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR page$[rsp], rax

; 197  : 	
; 198  : 	if ((pt[pt_index(virt_addr)] & PAGING_PRESENT) != 0) {

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pt_index@@YA_K_K@Z			; pt_index
	mov	rcx, QWORD PTR pt$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN2@AuUnmapPag

; 199  : 		
; 200  : 		pt[pt_index(virt_addr)] = 0;

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pt_index@@YA_K_K@Z			; pt_index
	mov	rcx, QWORD PTR pt$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
$LN2@AuUnmapPag:

; 201  : 	}
; 202  : 
; 203  : 	if (page != 0 && free_physical == true) {

	cmp	QWORD PTR page$[rsp], 0
	je	SHORT $LN1@AuUnmapPag
	movzx	eax, BYTE PTR free_physical$[rsp]
	cmp	eax, 1
	jne	SHORT $LN1@AuUnmapPag

; 204  : 		AuPmmngrFree((void*)v2p((size_t)page));

	mov	rcx, QWORD PTR page$[rsp]
	call	v2p
	mov	rcx, rax
	call	AuPmmngrFree
$LN1@AuUnmapPag:

; 205  : 	}
; 206  : }

	add	rsp, 88					; 00000058H
	ret	0
AuUnmapPage ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
i1$ = 32
pt$ = 40
page$ = 48
pml4_$ = 56
pdpt$ = 64
pd$ = 72
cr3$ = 96
virt_addr$ = 104
free_physical$ = 112
?AuUnmapPageEx@@YAXPEA_K_K_N@Z PROC			; AuUnmapPageEx

; 209  : void AuUnmapPageEx(uint64_t* cr3, uint64_t virt_addr, bool free_physical){

$LN5:
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 210  : 	
; 211  : 	const long i1 = pml4_index(virt_addr);

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	DWORD PTR i1$[rsp], eax

; 212  : 
; 213  : 	uint64_t *pml4_ = cr3;

	mov	rax, QWORD PTR cr3$[rsp]
	mov	QWORD PTR pml4_$[rsp], rax

; 214  : 	uint64_t *pdpt = (uint64_t*)(pml4_[pml4_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR pml4_$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pdpt$[rsp], rax

; 215  : 	uint64_t *pd = (uint64_t*)(pdpt[pdp_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pdp_index@@YA_K_K@Z			; pdp_index
	mov	rcx, QWORD PTR pdpt$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pd$[rsp], rax

; 216  : 	uint64_t *pt = (uint64_t*)(pd[pd_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pd_index@@YA_K_K@Z			; pd_index
	mov	rcx, QWORD PTR pd$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pt$[rsp], rax

; 217  : 	uint64_t *page = (uint64_t*)(pt[pt_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pt_index@@YA_K_K@Z			; pt_index
	mov	rcx, QWORD PTR pt$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR page$[rsp], rax

; 218  : 
; 219  : 	if ((pt[pt_index(virt_addr)] & PAGING_PRESENT) != 0) {

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pt_index@@YA_K_K@Z			; pt_index
	mov	rcx, QWORD PTR pt$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN2@AuUnmapPag

; 220  : 		pt[pt_index(virt_addr)] = 0;

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pt_index@@YA_K_K@Z			; pt_index
	mov	rcx, QWORD PTR pt$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
$LN2@AuUnmapPag:

; 221  : 	}
; 222  : 
; 223  : 	if (free_physical && page != 0) 

	movzx	eax, BYTE PTR free_physical$[rsp]
	test	eax, eax
	je	SHORT $LN1@AuUnmapPag
	cmp	QWORD PTR page$[rsp], 0
	je	SHORT $LN1@AuUnmapPag

; 224  : 		AuPmmngrFree(page);

	mov	rcx, QWORD PTR page$[rsp]
	call	AuPmmngrFree
$LN1@AuUnmapPag:

; 225  : 
; 226  : }

	add	rsp, 88					; 00000058H
	ret	0
?AuUnmapPageEx@@YAXPEA_K_K_N@Z ENDP			; AuUnmapPageEx
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
i2$ = 32
i4$ = 36
i3$ = 40
flags$ = 48
i1$ = 56
page$1 = 64
page$2 = 72
page$3 = 80
pml2$ = 88
pml3$ = 96
pml1$ = 104
pml4i$ = 128
physical_address$ = 136
virtual_address$ = 144
attrib$ = 152
?AuMapPageEx@@YA_NPEA_K_K1E@Z PROC			; AuMapPageEx

; 269  : bool AuMapPageEx (uint64_t *pml4i,uint64_t physical_address, uint64_t virtual_address, uint8_t attrib){

$LN9:
	mov	BYTE PTR [rsp+32], r9b
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 270  : 
; 271  : 
; 272  : 	size_t flags = 0;

	mov	QWORD PTR flags$[rsp], 0

; 273  : 	if (attrib == PAGING_USER)

	movzx	eax, BYTE PTR attrib$[rsp]
	cmp	eax, 4
	jne	SHORT $LN6@AuMapPageE

; 274  : 		flags  = PAGING_PRESENT | PAGING_WRITABLE | PAGING_USER;

	mov	QWORD PTR flags$[rsp], 7

; 275  : 	else

	jmp	SHORT $LN5@AuMapPageE
$LN6@AuMapPageE:

; 276  : 		flags = PAGING_PRESENT | PAGING_WRITABLE;

	mov	QWORD PTR flags$[rsp], 3
$LN5@AuMapPageE:

; 277  : 
; 278  : 	const long i4 = (virtual_address >> 39) & 0x1FF;

	mov	rax, QWORD PTR virtual_address$[rsp]
	shr	rax, 39					; 00000027H
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i4$[rsp], eax

; 279  : 	const long i3 = (virtual_address >> 30) & 0x1FF;

	mov	rax, QWORD PTR virtual_address$[rsp]
	shr	rax, 30
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i3$[rsp], eax

; 280  : 	const long i2 = (virtual_address >> 21) & 0x1FF;

	mov	rax, QWORD PTR virtual_address$[rsp]
	shr	rax, 21
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i2$[rsp], eax

; 281  : 	const long i1 = (virtual_address >> 12) & 0x1FF;

	mov	rax, QWORD PTR virtual_address$[rsp]
	shr	rax, 12
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i1$[rsp], eax

; 282  : 
; 283  : 	if (!(pml4i[i4] & PAGING_PRESENT)){

	movsxd	rax, DWORD PTR i4$[rsp]
	mov	rcx, QWORD PTR pml4i$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN4@AuMapPageE

; 284  : 		const uint64_t page = (uint64_t)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR page$1[rsp], rax

; 285  : 		pml4i[i4] = page | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR page$1[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i4$[rsp]
	mov	rdx, QWORD PTR pml4i$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 286  : 		clear((void*)p2v(page));

	mov	rcx, QWORD PTR page$1[rsp]
	call	p2v
	mov	rcx, rax
	call	?clear@@YAXPEAX@Z			; clear

; 287  : 		flush_tlb((void*)page);

	mov	rcx, QWORD PTR page$1[rsp]
	call	flush_tlb

; 288  : 		x64_mfence();

	call	x64_mfence
$LN4@AuMapPageE:

; 289  : 	}
; 290  : 	uint64_t* pml3 = (uint64_t*)(p2v(pml4i[i4]) & ~(4096 - 1));

	movsxd	rax, DWORD PTR i4$[rsp]
	mov	rcx, QWORD PTR pml4i$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	p2v
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pml3$[rsp], rax

; 291  : 
; 292  : 	if (!(pml3[i3] & PAGING_PRESENT)){

	movsxd	rax, DWORD PTR i3$[rsp]
	mov	rcx, QWORD PTR pml3$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN3@AuMapPageE

; 293  : 		const uint64_t page = (uint64_t)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR page$3[rsp], rax

; 294  : 		pml3[i3] = page | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR page$3[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i3$[rsp]
	mov	rdx, QWORD PTR pml3$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 295  : 		clear((void*)p2v(page));

	mov	rcx, QWORD PTR page$3[rsp]
	call	p2v
	mov	rcx, rax
	call	?clear@@YAXPEAX@Z			; clear

; 296  : 		flush_tlb((void*)page);

	mov	rcx, QWORD PTR page$3[rsp]
	call	flush_tlb

; 297  : 		x64_mfence();

	call	x64_mfence
$LN3@AuMapPageE:

; 298  : 		
; 299  : 	}
; 300  : 
; 301  : 	uint64_t* pml2 = (uint64_t*)(p2v(pml3[i3]) & ~(4096 - 1));

	movsxd	rax, DWORD PTR i3$[rsp]
	mov	rcx, QWORD PTR pml3$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	p2v
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pml2$[rsp], rax

; 302  : 	if (!(pml2[i2] & PAGING_PRESENT)){

	movsxd	rax, DWORD PTR i2$[rsp]
	mov	rcx, QWORD PTR pml2$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN2@AuMapPageE

; 303  : 
; 304  : 		const uint64_t page = (uint64_t)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR page$2[rsp], rax

; 305  : 		pml2[i2] = page | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR page$2[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i2$[rsp]
	mov	rdx, QWORD PTR pml2$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 306  : 		clear((void*)p2v(page));

	mov	rcx, QWORD PTR page$2[rsp]
	call	p2v
	mov	rcx, rax
	call	?clear@@YAXPEAX@Z			; clear

; 307  : 		flush_tlb((void*)page);

	mov	rcx, QWORD PTR page$2[rsp]
	call	flush_tlb

; 308  : 		x64_mfence();

	call	x64_mfence
$LN2@AuMapPageE:

; 309  : 		
; 310  : 	}
; 311  : 
; 312  : 	uint64_t* pml1 = (uint64_t*)(p2v(pml2[i2]) & ~(4096 - 1));

	movsxd	rax, DWORD PTR i2$[rsp]
	mov	rcx, QWORD PTR pml2$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	p2v
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pml1$[rsp], rax

; 313  : 
; 314  : 	if (pml1[i1] & PAGING_PRESENT){

	movsxd	rax, DWORD PTR i1$[rsp]
	mov	rcx, QWORD PTR pml1$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN1@AuMapPageE

; 315  : 		AuPmmngrFree((void*)physical_address);

	mov	rcx, QWORD PTR physical_address$[rsp]
	call	AuPmmngrFree

; 316  : 		printf ("Already present -> %x \n", virtual_address);

	mov	rdx, QWORD PTR virtual_address$[rsp]
	lea	rcx, OFFSET FLAT:$SG3661
	call	printf

; 317  : 		return false;

	xor	al, al
	jmp	SHORT $LN7@AuMapPageE
$LN1@AuMapPageE:

; 318  : 	}
; 319  : 
; 320  : 	pml1[i1] = physical_address | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR physical_address$[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i1$[rsp]
	mov	rdx, QWORD PTR pml1$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 321  : 	flush_tlb ((void*)virtual_address);

	mov	rcx, QWORD PTR virtual_address$[rsp]
	call	flush_tlb

; 322  : 	x64_mfence ();

	call	x64_mfence

; 323  : 	return true;

	mov	al, 1
$LN7@AuMapPageE:

; 324  : }

	add	rsp, 120				; 00000078H
	ret	0
?AuMapPageEx@@YA_NPEA_K_K1E@Z ENDP			; AuMapPageEx
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
i3$ = 32
i2$ = 36
i4$ = 40
flags$ = 48
page$1 = 56
pml3$ = 64
i1$ = 72
page$2 = 80
page$3 = 88
pml2$ = 96
pml4i$ = 104
pml1$ = 112
physical_address$ = 144
virtual_address$ = 152
attrib$ = 160
AuMapPage PROC

; 129  : bool AuMapPage(uint64_t physical_address, uint64_t virtual_address, uint8_t attrib){

$LN6:
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H

; 130  : 	size_t flags = PAGING_WRITABLE | PAGING_PRESENT | attrib;

	movzx	eax, BYTE PTR attrib$[rsp]
	or	eax, 3
	cdqe
	mov	QWORD PTR flags$[rsp], rax

; 131  : 	
; 132  : 	const long i4 = (virtual_address >> 39) & 0x1FF;

	mov	rax, QWORD PTR virtual_address$[rsp]
	shr	rax, 39					; 00000027H
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i4$[rsp], eax

; 133  : 	const long i3 = (virtual_address >> 30) & 0x1FF;

	mov	rax, QWORD PTR virtual_address$[rsp]
	shr	rax, 30
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i3$[rsp], eax

; 134  : 	const long i2 = (virtual_address >> 21) & 0x1FF;

	mov	rax, QWORD PTR virtual_address$[rsp]
	shr	rax, 21
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i2$[rsp], eax

; 135  : 	const long i1 = (virtual_address >> 12) & 0x1FF;

	mov	rax, QWORD PTR virtual_address$[rsp]
	shr	rax, 12
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i1$[rsp], eax

; 136  : 
; 137  : 	uint64_t *pml4i = (uint64_t*)p2v(x64_read_cr3());

	call	x64_read_cr3
	mov	rcx, rax
	call	p2v
	mov	QWORD PTR pml4i$[rsp], rax

; 138  : 
; 139  : 	if (!(pml4i[i4] & PAGING_PRESENT))

	movsxd	rax, DWORD PTR i4$[rsp]
	mov	rcx, QWORD PTR pml4i$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN3@AuMapPage

; 140  : 	{
; 141  : 		
; 142  : 		const uint64_t page = (uint64_t)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR page$1[rsp], rax

; 143  : 		pml4i[i4] = page | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR page$1[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i4$[rsp]
	mov	rdx, QWORD PTR pml4i$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 144  : 		clear((void*)p2v(page));

	mov	rcx, QWORD PTR page$1[rsp]
	call	p2v
	mov	rcx, rax
	call	?clear@@YAXPEAX@Z			; clear

; 145  : 		flush_tlb((void*)page);

	mov	rcx, QWORD PTR page$1[rsp]
	call	flush_tlb

; 146  : 		x64_mfence();

	call	x64_mfence
$LN3@AuMapPage:

; 147  : 	}
; 148  : 	uint64_t* pml3 = (uint64_t*)(p2v(pml4i[i4]) & ~(4096 - 1));

	movsxd	rax, DWORD PTR i4$[rsp]
	mov	rcx, QWORD PTR pml4i$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	p2v
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pml3$[rsp], rax

; 149  : 	
; 150  : 	if (!(pml3[i3] & PAGING_PRESENT))

	movsxd	rax, DWORD PTR i3$[rsp]
	mov	rcx, QWORD PTR pml3$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN2@AuMapPage

; 151  : 	{
; 152  : 		
; 153  : 		const uint64_t page = (uint64_t)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR page$3[rsp], rax

; 154  : 		pml3[i3] = page | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR page$3[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i3$[rsp]
	mov	rdx, QWORD PTR pml3$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 155  : 		clear((void*)p2v(page));

	mov	rcx, QWORD PTR page$3[rsp]
	call	p2v
	mov	rcx, rax
	call	?clear@@YAXPEAX@Z			; clear

; 156  : 		flush_tlb((void*)page);

	mov	rcx, QWORD PTR page$3[rsp]
	call	flush_tlb

; 157  : 		x64_mfence();

	call	x64_mfence
$LN2@AuMapPage:

; 158  : 		
; 159  : 	}
; 160  :     
; 161  : 	
; 162  : 	uint64_t* pml2 = (uint64_t*)(p2v(pml3[i3]) & ~(4096 - 1));

	movsxd	rax, DWORD PTR i3$[rsp]
	mov	rcx, QWORD PTR pml3$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	p2v
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pml2$[rsp], rax

; 163  : 	
; 164  : 	if (!(pml2[i2] & PAGING_PRESENT))

	movsxd	rax, DWORD PTR i2$[rsp]
	mov	rcx, QWORD PTR pml2$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN1@AuMapPage

; 165  : 	{
; 166  : 		const uint64_t page = (uint64_t)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR page$2[rsp], rax

; 167  : 		pml2[i2] = page | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR page$2[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i2$[rsp]
	mov	rdx, QWORD PTR pml2$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 168  : 		clear((void*)p2v(page));

	mov	rcx, QWORD PTR page$2[rsp]
	call	p2v
	mov	rcx, rax
	call	?clear@@YAXPEAX@Z			; clear

; 169  : 		flush_tlb((void*)page);

	mov	rcx, QWORD PTR page$2[rsp]
	call	flush_tlb

; 170  : 		x64_mfence();

	call	x64_mfence
$LN1@AuMapPage:

; 171  : 		
; 172  : 	}
; 173  : 	
; 174  : 	uint64_t* pml1 = (uint64_t*)(p2v(pml2[i2]) & ~(4096 - 1));

	movsxd	rax, DWORD PTR i2$[rsp]
	mov	rcx, QWORD PTR pml2$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	p2v
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pml1$[rsp], rax

; 175  : 	/*if (pml1[i1] & PAGING_PRESENT)
; 176  : 	{
; 177  : 		AuPmmngrFree((void*)physical_address);
; 178  : 		return false;
; 179  : 	}*/
; 180  : 
; 181  : 	pml1[i1] = physical_address | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR physical_address$[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i1$[rsp]
	mov	rdx, QWORD PTR pml1$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 182  : 	flush_tlb ((void*)virtual_address);

	mov	rcx, QWORD PTR virtual_address$[rsp]
	call	flush_tlb

; 183  : 	x64_mfence ();

	call	x64_mfence

; 184  : 	return true;

	mov	al, 1

; 185  : }

	add	rsp, 136				; 00000088H
	ret	0
AuMapPage ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
i$1 = 32
new_cr3$ = 40
i$2 = 48
pdpt$ = 56
cr3$ = 64
tv95 = 72
tv140 = 80
?AuPagingInit@@YAXXZ PROC				; AuPagingInit

; 89   : void AuPagingInit() {

$LN12:
	sub	rsp, 104				; 00000068H

; 90   : 
; 91   : 	uint64_t *cr3 = (uint64_t*)x64_read_cr3();

	call	x64_read_cr3
	mov	QWORD PTR cr3$[rsp], rax

; 92   : 	uint64_t *new_cr3 = (uint64_t*)AuPmmngrAlloc();    

	call	AuPmmngrAlloc
	mov	QWORD PTR new_cr3$[rsp], rax

; 93   : 
; 94   : 	memset (new_cr3, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR new_cr3$[rsp]
	call	memset

; 95   : 	mmio_base_address = (uint64_t*)MMIO_BASE;

	mov	rax, -1030792151040			; ffffff1000000000H
	mov	QWORD PTR ?mmio_base_address@@3PEA_KEA, rax ; mmio_base_address

; 96   : 
; 97   : 	//! Copy all higher half mappings to new mapping
; 98   : 	for (int i = 0; i < 512; ++i) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN9@AuPagingIn
$LN8@AuPagingIn:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN9@AuPagingIn:
	cmp	DWORD PTR i$1[rsp], 512			; 00000200H
	jge	SHORT $LN7@AuPagingIn

; 99   : 		if (i == 511)

	cmp	DWORD PTR i$1[rsp], 511			; 000001ffH
	jne	SHORT $LN6@AuPagingIn

; 100  : 			continue;

	jmp	SHORT $LN8@AuPagingIn
$LN6@AuPagingIn:

; 101  : 
; 102  : 		if (cr3[i] & PAGING_PRESENT) {

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN5@AuPagingIn

; 103  : 			new_cr3[i] = cr3[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR new_cr3$[rsp]
	mov	r8, QWORD PTR cr3$[rsp]
	mov	rax, QWORD PTR [r8+rax*8]
	mov	QWORD PTR [rdx+rcx*8], rax

; 104  : 		}else {

	jmp	SHORT $LN4@AuPagingIn
$LN5@AuPagingIn:

; 105  : 			new_cr3[i] = 0;

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR new_cr3$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
$LN4@AuPagingIn:

; 106  : 		}
; 107  : 		
; 108  : 	}

	jmp	SHORT $LN8@AuPagingIn
$LN7@AuPagingIn:

; 109  : 
; 110  : 	uint64_t* pdpt = (uint64_t*)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR pdpt$[rsp], rax

; 111  : 	memset(pdpt, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR pdpt$[rsp]
	call	memset

; 112  : 
; 113  : 	new_cr3[pml4_index(PHYSICAL_MEMORY_BASE)] = (uint64_t)pdpt | PAGING_PRESENT | PAGING_WRITABLE;

	mov	rax, QWORD PTR pdpt$[rsp]
	or	rax, 1
	or	rax, 2
	mov	QWORD PTR tv95[rsp], rax
	mov	rcx, -140737488355328			; ffff800000000000H
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR new_cr3$[rsp]
	mov	rdx, QWORD PTR tv95[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx

; 114  : 
; 115  : 	for (size_t i = 0; i < 512; i++)

	mov	QWORD PTR i$2[rsp], 0
	jmp	SHORT $LN3@AuPagingIn
$LN2@AuPagingIn:
	mov	rax, QWORD PTR i$2[rsp]
	inc	rax
	mov	QWORD PTR i$2[rsp], rax
$LN3@AuPagingIn:
	cmp	QWORD PTR i$2[rsp], 512			; 00000200H
	jae	SHORT $LN1@AuPagingIn

; 116  : 		pdpt[pdp_index(PHYSICAL_MEMORY_BASE) + i] = i * 512 * 512 * 4096 | 0x80 | PAGING_PRESENT | PAGING_WRITABLE;

	mov	rax, QWORD PTR i$2[rsp]
	imul	rax, 512				; 00000200H
	imul	rax, 512				; 00000200H
	imul	rax, 4096				; 00001000H
	bts	rax, 7
	or	rax, 1
	or	rax, 2
	mov	QWORD PTR tv140[rsp], rax
	mov	rcx, -140737488355328			; ffff800000000000H
	call	?pdp_index@@YA_K_K@Z			; pdp_index
	add	rax, QWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR pdpt$[rsp]
	mov	rdx, QWORD PTR tv140[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
	jmp	SHORT $LN2@AuPagingIn
$LN1@AuPagingIn:

; 117  : 
; 118  : 	//! Store the kernel's address space
; 119  : 	root_cr3 = new_cr3;

	mov	rax, QWORD PTR new_cr3$[rsp]
	mov	QWORD PTR ?root_cr3@@3PEA_KEA, rax	; root_cr3

; 120  : 
; 121  : 	//! Switch to new mapping!!!
; 122  : 	x64_write_cr3 ((size_t)new_cr3);

	mov	rcx, QWORD PTR new_cr3$[rsp]
	call	x64_write_cr3

; 123  : 
; 124  : 	AuPmmngrMoveHigher();

	call	?AuPmmngrMoveHigher@@YAXXZ		; AuPmmngrMoveHigher

; 125  : }

	add	rsp, 104				; 00000068H
	ret	0
?AuPagingInit@@YAXXZ ENDP				; AuPagingInit
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
addr$ = 8
?p_index@@YA_K_K@Z PROC					; p_index

; 71   : size_t p_index (uint64_t addr){

	mov	QWORD PTR [rsp+8], rcx

; 72   : 	return (addr & 0x7ff);

	mov	rax, QWORD PTR addr$[rsp]
	and	rax, 2047				; 000007ffH

; 73   : }

	ret	0
?p_index@@YA_K_K@Z ENDP					; p_index
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
addr$ = 8
?pt_index@@YA_K_K@Z PROC				; pt_index

; 67   : size_t pt_index (uint64_t addr){

	mov	QWORD PTR [rsp+8], rcx

; 68   : 	return (addr >> 12) & 0x1ff;

	mov	rax, QWORD PTR addr$[rsp]
	shr	rax, 12
	and	rax, 511				; 000001ffH

; 69   : }

	ret	0
?pt_index@@YA_K_K@Z ENDP				; pt_index
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
addr$ = 8
?pd_index@@YA_K_K@Z PROC				; pd_index

; 63   : size_t pd_index (uint64_t addr){

	mov	QWORD PTR [rsp+8], rcx

; 64   : 	return (addr >> 21) & 0x1ff;

	mov	rax, QWORD PTR addr$[rsp]
	shr	rax, 21
	and	rax, 511				; 000001ffH

; 65   : }

	ret	0
?pd_index@@YA_K_K@Z ENDP				; pd_index
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
addr$ = 8
?pdp_index@@YA_K_K@Z PROC				; pdp_index

; 59   : size_t pdp_index (uint64_t addr){

	mov	QWORD PTR [rsp+8], rcx

; 60   : 	return (addr >> 30) & 0x1ff;

	mov	rax, QWORD PTR addr$[rsp]
	shr	rax, 30
	and	rax, 511				; 000001ffH

; 61   : }

	ret	0
?pdp_index@@YA_K_K@Z ENDP				; pdp_index
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\paging.cpp
_TEXT	SEGMENT
addr$ = 8
?pml4_index@@YA_K_K@Z PROC				; pml4_index

; 55   : size_t  pml4_index (uint64_t addr){

	mov	QWORD PTR [rsp+8], rcx

; 56   : 	return (addr >> 39) & 0x1ff;

	mov	rax, QWORD PTR addr$[rsp]
	shr	rax, 39					; 00000027H
	and	rax, 511				; 000001ffH

; 57   : }

	ret	0
?pml4_index@@YA_K_K@Z ENDP				; pml4_index
_TEXT	ENDS
END
