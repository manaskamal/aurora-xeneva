; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?registered_dev@@3PEAU_sound_@@EA		; registered_dev
PUBLIC	?registered_thr@@3PEAU_thread_@@EA		; registered_thr
_BSS	SEGMENT
?registered_dev@@3PEAU_sound_@@EA DQ 01H DUP (?)	; registered_dev
?registered_thr@@3PEAU_thread_@@EA DQ 01H DUP (?)	; registered_thr
_BSS	ENDS
CONST	SEGMENT
$SG3748	DB	'dsp', 00H
	ORG $+4
$SG3749	DB	'/dev/dsp', 00H
CONST	ENDS
PUBLIC	?AuSoundInitialize@@YAXXZ			; AuSoundInitialize
PUBLIC	AuSoundRegisterDevice
PUBLIC	AuSoundRequestNext
PUBLIC	?AuSoundOutputStart@@YAXXZ			; AuSoundOutputStart
PUBLIC	?AuSoundOutputStop@@YAXXZ			; AuSoundOutputStop
PUBLIC	?AuSoundWrite@@YAXPEAU_vfs_node_@@PEA_KI@Z	; AuSoundWrite
PUBLIC	?AuSoundRead@@YAXPEAU_vfs_node_@@PEA_KI@Z	; AuSoundRead
PUBLIC	?AuSoundIOQuery@@YAHPEAU_vfs_node_@@HPEAX@Z	; AuSoundIOQuery
EXTRN	strcpy:PROC
EXTRN	vfs_mount:PROC
EXTRN	malloc:PROC
EXTRN	get_current_thread:PROC
pdata	SEGMENT
$pdata$?AuSoundInitialize@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+201
	DD	imagerel $unwind$?AuSoundInitialize@@YAXXZ
$pdata$?AuSoundOutputStart@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+31
	DD	imagerel $unwind$?AuSoundOutputStart@@YAXXZ
$pdata$?AuSoundOutputStop@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+31
	DD	imagerel $unwind$?AuSoundOutputStop@@YAXXZ
$pdata$?AuSoundWrite@@YAXPEAU_vfs_node_@@PEA_KI@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$?AuSoundWrite@@YAXPEAU_vfs_node_@@PEA_KI@Z
$pdata$?AuSoundIOQuery@@YAHPEAU_vfs_node_@@HPEAX@Z DD imagerel $LN11
	DD	imagerel $LN11+109
	DD	imagerel $unwind$?AuSoundIOQuery@@YAHPEAU_vfs_node_@@HPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?AuSoundInitialize@@YAXXZ DD 010401H
	DD	06204H
$unwind$?AuSoundOutputStart@@YAXXZ DD 010401H
	DD	04204H
$unwind$?AuSoundOutputStop@@YAXXZ DD 010401H
	DD	04204H
$unwind$?AuSoundWrite@@YAXPEAU_vfs_node_@@PEA_KI@Z DD 011301H
	DD	06213H
$unwind$?AuSoundIOQuery@@YAHPEAU_vfs_node_@@HPEAX@Z DD 011201H
	DD	06212H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\sound.cpp
_TEXT	SEGMENT
tv65 = 32
node$ = 64
code$ = 72
arg$ = 80
?AuSoundIOQuery@@YAHPEAU_vfs_node_@@HPEAX@Z PROC	; AuSoundIOQuery

; 56   : int AuSoundIOQuery (vfs_node_t *node, int code, void* arg) {

$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 57   : 	if (registered_dev == NULL)

	cmp	QWORD PTR ?registered_dev@@3PEAU_sound_@@EA, 0 ; registered_dev
	jne	SHORT $LN8@AuSoundIOQ

; 58   : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN9@AuSoundIOQ
$LN8@AuSoundIOQ:

; 59   : 
; 60   : 	switch (code)

	mov	eax, DWORD PTR code$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 100		; 00000064H
	je	SHORT $LN5@AuSoundIOQ
	cmp	DWORD PTR tv65[rsp], 102		; 00000066H
	je	SHORT $LN4@AuSoundIOQ
	cmp	DWORD PTR tv65[rsp], 103		; 00000067H
	je	SHORT $LN3@AuSoundIOQ
	jmp	SHORT $LN6@AuSoundIOQ
$LN5@AuSoundIOQ:

; 61   : 	{
; 62   : 	case SOUND_REGISTER_MEDIAPLAYER:
; 63   : 		registered_thr = get_current_thread();

	call	get_current_thread
	mov	QWORD PTR ?registered_thr@@3PEAU_thread_@@EA, rax ; registered_thr

; 64   : 		break;

	jmp	SHORT $LN6@AuSoundIOQ
$LN4@AuSoundIOQ:

; 65   : 	case SOUND_START_OUTPUT:
; 66   : 		registered_dev->start_output_stream();

	mov	rax, QWORD PTR ?registered_dev@@3PEAU_sound_@@EA ; registered_dev
	call	QWORD PTR [rax+56]

; 67   : 		break;

	jmp	SHORT $LN6@AuSoundIOQ
$LN3@AuSoundIOQ:

; 68   : 	case SOUND_STOP_OUTPUT:
; 69   : 		registered_dev->stop_output_stream();

	mov	rax, QWORD PTR ?registered_dev@@3PEAU_sound_@@EA ; registered_dev
	call	QWORD PTR [rax+48]
$LN6@AuSoundIOQ:

; 70   : 		break;
; 71   : 	case SOUND_START_INPUT: //Not implemented
; 72   : 		break;
; 73   : 	case SOUND_STOP_INPUT:
; 74   : 		break;  //Not implemented
; 75   : 	}
; 76   : 
; 77   : 	return 0;

	xor	eax, eax
$LN9@AuSoundIOQ:

; 78   : }

	add	rsp, 56					; 00000038H
	ret	0
?AuSoundIOQuery@@YAHPEAU_vfs_node_@@HPEAX@Z ENDP	; AuSoundIOQuery
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\sound.cpp
_TEXT	SEGMENT
file$ = 8
buffer$ = 16
length$ = 24
?AuSoundRead@@YAXPEAU_vfs_node_@@PEA_KI@Z PROC		; AuSoundRead

; 43   : void AuSoundRead (vfs_node_t *file, uint64_t* buffer, uint32_t length) {

	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 44   : 	if (registered_dev == NULL)
; 45   : 		return;
; 46   : }

	ret	0
?AuSoundRead@@YAXPEAU_vfs_node_@@PEA_KI@Z ENDP		; AuSoundRead
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\sound.cpp
_TEXT	SEGMENT
aligned_buf$ = 32
file$ = 64
buffer$ = 72
length$ = 80
?AuSoundWrite@@YAXPEAU_vfs_node_@@PEA_KI@Z PROC		; AuSoundWrite

; 48   : void AuSoundWrite (vfs_node_t *file, uint64_t* buffer, uint32_t length) {

$LN4:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 49   : 	if (registered_dev == NULL)

	cmp	QWORD PTR ?registered_dev@@3PEAU_sound_@@EA, 0 ; registered_dev
	jne	SHORT $LN1@AuSoundWri

; 50   : 		return;

	jmp	SHORT $LN2@AuSoundWri
$LN1@AuSoundWri:

; 51   : 	uint8_t* aligned_buf = (uint8_t*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR aligned_buf$[rsp], rax

; 52   : 	registered_dev->write(aligned_buf, length);

	mov	eax, DWORD PTR length$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR aligned_buf$[rsp]
	mov	rax, QWORD PTR ?registered_dev@@3PEAU_sound_@@EA ; registered_dev
	call	QWORD PTR [rax+32]
$LN2@AuSoundWri:

; 53   : }

	add	rsp, 56					; 00000038H
	ret	0
?AuSoundWrite@@YAXPEAU_vfs_node_@@PEA_KI@Z ENDP		; AuSoundWrite
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\sound.cpp
_TEXT	SEGMENT
?AuSoundOutputStop@@YAXXZ PROC				; AuSoundOutputStop

; 115  : void AuSoundOutputStop() {

$LN4:
	sub	rsp, 40					; 00000028H

; 116  : 	if (registered_dev == NULL)

	cmp	QWORD PTR ?registered_dev@@3PEAU_sound_@@EA, 0 ; registered_dev
	jne	SHORT $LN1@AuSoundOut

; 117  : 		return;

	jmp	SHORT $LN2@AuSoundOut
$LN1@AuSoundOut:

; 118  : 	registered_dev->stop_output_stream();

	mov	rax, QWORD PTR ?registered_dev@@3PEAU_sound_@@EA ; registered_dev
	call	QWORD PTR [rax+48]
$LN2@AuSoundOut:

; 119  : }

	add	rsp, 40					; 00000028H
	ret	0
?AuSoundOutputStop@@YAXXZ ENDP				; AuSoundOutputStop
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\sound.cpp
_TEXT	SEGMENT
?AuSoundOutputStart@@YAXXZ PROC				; AuSoundOutputStart

; 109  : void AuSoundOutputStart() {

$LN4:
	sub	rsp, 40					; 00000028H

; 110  : 	if (registered_dev == NULL)

	cmp	QWORD PTR ?registered_dev@@3PEAU_sound_@@EA, 0 ; registered_dev
	jne	SHORT $LN1@AuSoundOut

; 111  : 		return;

	jmp	SHORT $LN2@AuSoundOut
$LN1@AuSoundOut:

; 112  : 	registered_dev->start_output_stream();

	mov	rax, QWORD PTR ?registered_dev@@3PEAU_sound_@@EA ; registered_dev
	call	QWORD PTR [rax+56]
$LN2@AuSoundOut:

; 113  : }

	add	rsp, 40					; 00000028H
	ret	0
?AuSoundOutputStart@@YAXXZ ENDP				; AuSoundOutputStart
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\sound.cpp
_TEXT	SEGMENT
buffer$ = 8
AuSoundRequestNext PROC

; 105  : void AuSoundRequestNext (uint8_t *buffer) {

	mov	QWORD PTR [rsp+8], rcx

; 106  : 
; 107  : }

	ret	0
AuSoundRequestNext ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\sound.cpp
_TEXT	SEGMENT
dev$ = 8
AuSoundRegisterDevice PROC

; 98   : void AuSoundRegisterDevice(sound_t * dev) {

	mov	QWORD PTR [rsp+8], rcx

; 99   : 	if (registered_dev)

	cmp	QWORD PTR ?registered_dev@@3PEAU_sound_@@EA, 0 ; registered_dev
	je	SHORT $LN1@AuSoundReg

; 100  : 		return;

	jmp	SHORT $LN2@AuSoundReg
$LN1@AuSoundReg:

; 101  : 	registered_dev = dev;

	mov	rax, QWORD PTR dev$[rsp]
	mov	QWORD PTR ?registered_dev@@3PEAU_sound_@@EA, rax ; registered_dev
$LN2@AuSoundReg:

; 102  : }

	fatret	0
AuSoundRegisterDevice ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\sound.cpp
_TEXT	SEGMENT
dsp$ = 32
?AuSoundInitialize@@YAXXZ PROC				; AuSoundInitialize

; 81   : void AuSoundInitialize () {

$LN3:
	sub	rsp, 56					; 00000038H

; 82   : 	vfs_node_t *dsp = (vfs_node_t*)malloc(sizeof(vfs_node_t));

	mov	ecx, 104				; 00000068H
	call	malloc
	mov	QWORD PTR dsp$[rsp], rax

; 83   : 	strcpy (dsp->filename, "dsp");

	mov	rax, QWORD PTR dsp$[rsp]
	lea	rdx, OFFSET FLAT:$SG3748
	mov	rcx, rax
	call	strcpy

; 84   : 	dsp->size = 0;

	mov	rax, QWORD PTR dsp$[rsp]
	mov	DWORD PTR [rax+32], 0

; 85   : 	dsp->eof = 0;

	mov	rax, QWORD PTR dsp$[rsp]
	mov	BYTE PTR [rax+36], 0

; 86   : 	dsp->pos = 0;

	mov	rax, QWORD PTR dsp$[rsp]
	mov	DWORD PTR [rax+40], 0

; 87   : 	dsp->current = 0;

	mov	rax, QWORD PTR dsp$[rsp]
	mov	DWORD PTR [rax+44], 0

; 88   : 	dsp->flags = FS_FLAG_GENERAL;

	mov	rax, QWORD PTR dsp$[rsp]
	mov	BYTE PTR [rax+48], 2

; 89   : 	dsp->status = 0;

	mov	rax, QWORD PTR dsp$[rsp]
	mov	BYTE PTR [rax+49], 0

; 90   : 	dsp->open = 0;

	mov	rax, QWORD PTR dsp$[rsp]
	mov	QWORD PTR [rax+64], 0

; 91   : 	dsp->read = AuSoundRead;

	mov	rax, QWORD PTR dsp$[rsp]
	lea	rcx, OFFSET FLAT:?AuSoundRead@@YAXPEAU_vfs_node_@@PEA_KI@Z ; AuSoundRead
	mov	QWORD PTR [rax+72], rcx

; 92   : 	dsp->write = AuSoundWrite;

	mov	rax, QWORD PTR dsp$[rsp]
	lea	rcx, OFFSET FLAT:?AuSoundWrite@@YAXPEAU_vfs_node_@@PEA_KI@Z ; AuSoundWrite
	mov	QWORD PTR [rax+80], rcx

; 93   : 	dsp->read_blk = 0;

	mov	rax, QWORD PTR dsp$[rsp]
	mov	QWORD PTR [rax+88], 0

; 94   : 	dsp->ioquery = AuSoundIOQuery;

	mov	rax, QWORD PTR dsp$[rsp]
	lea	rcx, OFFSET FLAT:?AuSoundIOQuery@@YAHPEAU_vfs_node_@@HPEAX@Z ; AuSoundIOQuery
	mov	QWORD PTR [rax+96], rcx

; 95   : 	vfs_mount ("/dev/dsp", dsp, 0);

	xor	r8d, r8d
	mov	rdx, QWORD PTR dsp$[rsp]
	lea	rcx, OFFSET FLAT:$SG3749
	call	vfs_mount

; 96   : }

	add	rsp, 56					; 00000038H
	ret	0
?AuSoundInitialize@@YAXXZ ENDP				; AuSoundInitialize
_TEXT	ENDS
END
