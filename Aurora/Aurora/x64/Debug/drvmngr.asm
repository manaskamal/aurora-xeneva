; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?drivers@@3PAU_aurora_driver_@@A		; drivers
_BSS	SEGMENT
?drivers@@3PAU_aurora_driver_@@A DB 02800H DUP (?)	; drivers
driver_class_unique_id DD 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
$SG3316	DB	'aurora_init_driver', 00H
	ORG $+5
$SG3318	DB	'aurora_close_driver', 00H
$SG3324	DB	'sb16', 00H
CONST	ENDS
PUBLIC	?driver_mngr_initialize@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z ; driver_mngr_initialize
PUBLIC	?request_driver_class_uid@@YAIXZ		; request_driver_class_uid
PUBLIC	?decreament_driver_class_uid@@YAXXZ		; decreament_driver_class_uid
PUBLIC	?create_driver_parameter@@YAPEAU_driver_param_@@XZ ; create_driver_parameter
EXTRN	?apic_local_eoi@@YAXXZ:PROC			; apic_local_eoi
EXTRN	?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z:PROC	; interrupt_set
EXTRN	?memset@@YAXPEAXEI@Z:PROC			; memset
EXTRN	?pmmngr_alloc@@YAPEAXXZ:PROC			; pmmngr_alloc
EXTRN	?printf@@YAXPEBDZZ:PROC				; printf
EXTRN	?pci_find_device@@YA_NGGPEAU_pci_address_@@@Z:PROC ; pci_find_device
EXTRN	?pci_get_bar_addr@@YAIPEBU_pci_address_@@H@Z:PROC ; pci_get_bar_addr
EXTRN	?pci_set_mem_enable@@YAXPEBU_pci_address_@@_N@Z:PROC ; pci_set_mem_enable
EXTRN	?GetProcAddress@@YAPEAXPEAXPEBD@Z:PROC		; GetProcAddress
pdata	SEGMENT
$pdata$?driver_mngr_initialize@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z DD imagerel $LN8
	DD	imagerel $LN8+352
	DD	imagerel $unwind$?driver_mngr_initialize@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z
$pdata$?request_driver_class_uid@@YAIXZ DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$?request_driver_class_uid@@YAIXZ
$pdata$?create_driver_parameter@@YAPEAU_driver_param_@@XZ DD imagerel $LN3
	DD	imagerel $LN3+119
	DD	imagerel $unwind$?create_driver_parameter@@YAPEAU_driver_param_@@XZ
pdata	ENDS
xdata	SEGMENT
$unwind$?driver_mngr_initialize@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z DD 010901H
	DD	0c209H
$unwind$?request_driver_class_uid@@YAIXZ DD 010401H
	DD	02204H
$unwind$?create_driver_parameter@@YAPEAU_driver_param_@@XZ DD 010401H
	DD	06204H
xdata	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drvmngr.cpp
_TEXT	SEGMENT
param$ = 32
?create_driver_parameter@@YAPEAU_driver_param_@@XZ PROC	; create_driver_parameter

; 34   : driver_param_t * create_driver_parameter () {

$LN3:
	sub	rsp, 56					; 00000038H

; 35   : 	driver_param_t* param = (driver_param_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR param$[rsp], rax

; 36   : 	param->kdebug = printf;

	mov	rax, QWORD PTR param$[rsp]
	lea	rcx, OFFSET FLAT:?printf@@YAXPEBDZZ	; printf
	mov	QWORD PTR [rax], rcx

; 37   : 	param->irq_eoi = apic_local_eoi;

	mov	rax, QWORD PTR param$[rsp]
	lea	rcx, OFFSET FLAT:?apic_local_eoi@@YAXXZ	; apic_local_eoi
	mov	QWORD PTR [rax+8], rcx

; 38   : 	param->interrupt_set = interrupt_set;

	mov	rax, QWORD PTR param$[rsp]
	lea	rcx, OFFSET FLAT:?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z ; interrupt_set
	mov	QWORD PTR [rax+16], rcx

; 39   : 	param->pci_find_device = pci_find_device;

	mov	rax, QWORD PTR param$[rsp]
	lea	rcx, OFFSET FLAT:?pci_find_device@@YA_NGGPEAU_pci_address_@@@Z ; pci_find_device
	mov	QWORD PTR [rax+24], rcx

; 40   : 	param->pci_get_bar = pci_get_bar_addr;

	mov	rax, QWORD PTR param$[rsp]
	lea	rcx, OFFSET FLAT:?pci_get_bar_addr@@YAIPEBU_pci_address_@@H@Z ; pci_get_bar_addr
	mov	QWORD PTR [rax+32], rcx

; 41   : 	param->pci_set_mem_enable = pci_set_mem_enable;

	mov	rax, QWORD PTR param$[rsp]
	lea	rcx, OFFSET FLAT:?pci_set_mem_enable@@YAXPEBU_pci_address_@@_N@Z ; pci_set_mem_enable
	mov	QWORD PTR [rax+40], rcx

; 42   : 	return param;

	mov	rax, QWORD PTR param$[rsp]

; 43   : }

	add	rsp, 56					; 00000038H
	ret	0
?create_driver_parameter@@YAPEAU_driver_param_@@XZ ENDP	; create_driver_parameter
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drvmngr.cpp
_TEXT	SEGMENT
?decreament_driver_class_uid@@YAXXZ PROC		; decreament_driver_class_uid

; 31   : 	driver_class_unique_id--;

	mov	eax, DWORD PTR driver_class_unique_id
	dec	eax
	mov	DWORD PTR driver_class_unique_id, eax

; 32   : }

	ret	0
?decreament_driver_class_uid@@YAXXZ ENDP		; decreament_driver_class_uid
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drvmngr.cpp
_TEXT	SEGMENT
uid$ = 0
?request_driver_class_uid@@YAIXZ PROC			; request_driver_class_uid

; 23   : uint32_t request_driver_class_uid () {

$LN3:
	sub	rsp, 24

; 24   : 	uint32_t uid = driver_class_unique_id;

	mov	eax, DWORD PTR driver_class_unique_id
	mov	DWORD PTR uid$[rsp], eax

; 25   : 	driver_class_unique_id++;

	mov	eax, DWORD PTR driver_class_unique_id
	inc	eax
	mov	DWORD PTR driver_class_unique_id, eax

; 26   : 	return uid;

	mov	eax, DWORD PTR uid$[rsp]

; 27   : }

	add	rsp, 24
	ret	0
?request_driver_class_uid@@YAIXZ ENDP			; request_driver_class_uid
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drvmngr.cpp
_TEXT	SEGMENT
uid$1 = 32
i$2 = 36
init_address$3 = 40
close_address$4 = 48
i$5 = 56
c$6 = 64
param$ = 72
tv150 = 80
info$ = 112
?driver_mngr_initialize@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z PROC ; driver_mngr_initialize

; 45   : void driver_mngr_initialize (KERNEL_BOOT_INFO *info) {

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H

; 46   :    
; 47   : 	memset (drivers,0,sizeof(aurora_driver_t));

	mov	r8d, 40					; 00000028H
	xor	edx, edx
	lea	rcx, OFFSET FLAT:?drivers@@3PAU_aurora_driver_@@A ; drivers
	call	?memset@@YAXPEAXEI@Z			; memset

; 48   : 
; 49   : 	//!First of all register the pre-boot driver classes
; 50   : 	if (info->driver_entry1 != NULL) {  

	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax+98], 0
	je	$LN5@driver_mng

; 51   : 		void* init_address = GetProcAddress (info->driver_entry1,"aurora_init_driver");

	lea	rdx, OFFSET FLAT:$SG3316
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rax+98]
	call	?GetProcAddress@@YAPEAXPEAXPEBD@Z	; GetProcAddress
	mov	QWORD PTR init_address$3[rsp], rax

; 52   : 		void* close_address = GetProcAddress (info->driver_entry1, "aurora_close_driver");

	lea	rdx, OFFSET FLAT:$SG3318
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rax+98]
	call	?GetProcAddress@@YAPEAXPEAXPEBD@Z	; GetProcAddress
	mov	QWORD PTR close_address$4[rsp], rax

; 53   : 		init i = (init)init_address;

	mov	rax, QWORD PTR init_address$3[rsp]
	mov	QWORD PTR i$5[rsp], rax

; 54   : 		close c = (close)close_address;

	mov	rax, QWORD PTR close_address$4[rsp]
	mov	QWORD PTR c$6[rsp], rax

; 55   : 	    uint32_t uid = request_driver_class_uid();

	call	?request_driver_class_uid@@YAIXZ	; request_driver_class_uid
	mov	DWORD PTR uid$1[rsp], eax

; 56   : 		drivers[uid].class_type = DRIVER_CLASS_AUDIO;

	mov	eax, DWORD PTR uid$1[rsp]
	imul	rax, 40					; 00000028H
	lea	rcx, OFFSET FLAT:?drivers@@3PAU_aurora_driver_@@A ; drivers
	mov	DWORD PTR [rcx+rax], 1

; 57   : 		drivers[uid].name = "sb16";

	mov	eax, DWORD PTR uid$1[rsp]
	imul	rax, 40					; 00000028H
	lea	rcx, OFFSET FLAT:?drivers@@3PAU_aurora_driver_@@A ; drivers
	lea	rdx, OFFSET FLAT:$SG3324
	mov	QWORD PTR [rcx+rax+8], rdx

; 58   : 		drivers[uid].present = true;

	mov	eax, DWORD PTR uid$1[rsp]
	imul	rax, 40					; 00000028H
	lea	rcx, OFFSET FLAT:?drivers@@3PAU_aurora_driver_@@A ; drivers
	mov	BYTE PTR [rcx+rax+16], 1

; 59   : 		drivers[uid].aurora_init_driver = i;

	mov	eax, DWORD PTR uid$1[rsp]
	imul	rax, 40					; 00000028H
	lea	rcx, OFFSET FLAT:?drivers@@3PAU_aurora_driver_@@A ; drivers
	mov	rdx, QWORD PTR i$5[rsp]
	mov	QWORD PTR [rcx+rax+24], rdx

; 60   : 		drivers[uid].aurora_close_driver = c;

	mov	eax, DWORD PTR uid$1[rsp]
	imul	rax, 40					; 00000028H
	lea	rcx, OFFSET FLAT:?drivers@@3PAU_aurora_driver_@@A ; drivers
	mov	rdx, QWORD PTR c$6[rsp]
	mov	QWORD PTR [rcx+rax+32], rdx
$LN5@driver_mng:

; 61   : 	}
; 62   : 
; 63   :     driver_param_t *param = create_driver_parameter ();

	call	?create_driver_parameter@@YAPEAU_driver_param_@@XZ ; create_driver_parameter
	mov	QWORD PTR param$[rsp], rax

; 64   : 	for (int i = 0; i < 256; i++) { 

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@driver_mng
$LN3@driver_mng:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN4@driver_mng:
	cmp	DWORD PTR i$2[rsp], 256			; 00000100H
	jge	SHORT $LN2@driver_mng

; 65   : 		if (drivers[i].present)

	movsxd	rax, DWORD PTR i$2[rsp]
	imul	rax, 40					; 00000028H
	lea	rcx, OFFSET FLAT:?drivers@@3PAU_aurora_driver_@@A ; drivers
	movzx	eax, BYTE PTR [rcx+rax+16]
	test	eax, eax
	je	SHORT $LN1@driver_mng

; 66   : 			drivers[i].aurora_init_driver(param);

	movsxd	rax, DWORD PTR i$2[rsp]
	imul	rax, 40					; 00000028H
	lea	rcx, OFFSET FLAT:?drivers@@3PAU_aurora_driver_@@A ; drivers
	mov	QWORD PTR tv150[rsp], rcx
	mov	rcx, QWORD PTR param$[rsp]
	mov	rdx, QWORD PTR tv150[rsp]
	call	QWORD PTR [rdx+rax+24]
$LN1@driver_mng:

; 67   : 	}

	jmp	SHORT $LN3@driver_mng
$LN2@driver_mng:

; 68   : 
; 69   : }

	add	rsp, 104				; 00000068H
	ret	0
?driver_mngr_initialize@@YAXPEAU_KERNEL_BOOT_INFO_@@@Z ENDP ; driver_mngr_initialize
_TEXT	ENDS
END
