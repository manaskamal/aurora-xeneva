; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?debug_mode@@3_NA				; debug_mode
PUBLIC	?ap_started@@3_NA				; ap_started
_BSS	SEGMENT
x2apic	DB	01H DUP (?)
	ALIGN	8

apic	DQ	01H DUP (?)
?debug_mode@@3_NA DB 01H DUP (?)			; debug_mode
	ALIGN	4

apic_timer_count DD 01H DUP (?)
?ap_started@@3_NA DB 01H DUP (?)			; ap_started
_BSS	ENDS
CONST	SEGMENT
$SG3328	DB	'APIC initialized ', 0aH, 00H
	ORG $+5
$SG3337	DB	'New APIC -> %x', 0aH, 00H
CONST	ENDS
PUBLIC	?initialize_apic@@YAX_N@Z			; initialize_apic
PUBLIC	apic_local_eoi
PUBLIC	?read_apic_register@@YA_KG@Z			; read_apic_register
PUBLIC	?write_apic_register@@YAXG_K@Z			; write_apic_register
PUBLIC	?AuInitializeCpu@@YAXE@Z			; AuInitializeCpu
PUBLIC	?AuAPStarted@@YAXXZ				; AuAPStarted
PUBLIC	?AuAPICMoveToHigher@@YAXXZ			; AuAPICMoveToHigher
PUBLIC	?timer_sleep@@YAXI@Z				; timer_sleep
PUBLIC	APICDebug
PUBLIC	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z		; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
PUBLIC	?x2apic_supported@@YA_NXZ			; x2apic_supported
PUBLIC	?apic_spurious_interrupt@@YAX_KPEAX@Z		; apic_spurious_interrupt
PUBLIC	?apic_timer_interrupt@@YAX_KPEAX@Z		; apic_timer_interrupt
PUBLIC	?icr_dest@@YA_KI@Z				; icr_dest
PUBLIC	?icr_busy@@YA_NXZ				; icr_busy
EXTRN	x64_outportb:PROC
EXTRN	x64_read_msr:PROC
EXTRN	x64_write_msr:PROC
EXTRN	x64_mfence:PROC
EXTRN	x64_pause:PROC
EXTRN	x64_cpuid:PROC
EXTRN	?setvect@@YAX_KP6AX0PEAX@Z@Z:PROC		; setvect
EXTRN	?ioapic_init@@YAXPEAX@Z:PROC			; ioapic_init
EXTRN	AuPmmngrAlloc:PROC
EXTRN	p2v:PROC
EXTRN	AuGetRootPageTable:PROC
EXTRN	AuMapMMIO:PROC
EXTRN	printf:PROC
EXTRN	?AuApInit@@YAXPEAX@Z:PROC			; AuApInit
pdata	SEGMENT
$pdata$?initialize_apic@@YAX_N@Z DD imagerel $LN10
	DD	imagerel $LN10+392
	DD	imagerel $unwind$?initialize_apic@@YAX_N@Z
$pdata$apic_local_eoi DD imagerel $LN3
	DD	imagerel $LN3+23
	DD	imagerel $unwind$apic_local_eoi
$pdata$?read_apic_register@@YA_KG@Z DD imagerel $LN6
	DD	imagerel $LN6+191
	DD	imagerel $unwind$?read_apic_register@@YA_KG@Z
$pdata$?write_apic_register@@YAXG_K@Z DD imagerel $LN6
	DD	imagerel $LN6+231
	DD	imagerel $unwind$?write_apic_register@@YAXG_K@Z
$pdata$?AuInitializeCpu@@YAXE@Z DD imagerel $LN23
	DD	imagerel $LN23+496
	DD	imagerel $unwind$?AuInitializeCpu@@YAXE@Z
$pdata$?AuAPICMoveToHigher@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$?AuAPICMoveToHigher@@YAXXZ
$pdata$?timer_sleep@@YAXI@Z DD imagerel $LN5
	DD	imagerel $LN5+43
	DD	imagerel $unwind$?timer_sleep@@YAXI@Z
$pdata$?x2apic_supported@@YA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$?x2apic_supported@@YA_NXZ
$pdata$?io_wait@@YAXXZ DD imagerel ?io_wait@@YAXXZ
	DD	imagerel ?io_wait@@YAXXZ+44
	DD	imagerel $unwind$?io_wait@@YAXXZ
$pdata$?apic_timer_interrupt@@YAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$?apic_timer_interrupt@@YAX_KPEAX@Z
$pdata$?icr_busy@@YA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+52
	DD	imagerel $unwind$?icr_busy@@YA_NXZ
pdata	ENDS
xdata	SEGMENT
$unwind$?initialize_apic@@YAX_N@Z DD 010801H
	DD	08208H
$unwind$apic_local_eoi DD 010401H
	DD	04204H
$unwind$?read_apic_register@@YA_KG@Z DD 010901H
	DD	08209H
$unwind$?write_apic_register@@YAXG_K@Z DD 010e01H
	DD	0a20eH
$unwind$?AuInitializeCpu@@YAXE@Z DD 010801H
	DD	0e208H
$unwind$?AuAPICMoveToHigher@@YAXXZ DD 010401H
	DD	04204H
$unwind$?timer_sleep@@YAXI@Z DD 010801H
	DD	02208H
$unwind$?x2apic_supported@@YA_NXZ DD 010401H
	DD	0a204H
$unwind$?io_wait@@YAXXZ DD 010401H
	DD	02204H
$unwind$?apic_timer_interrupt@@YAX_KPEAX@Z DD 010e01H
	DD	0420eH
$unwind$?icr_busy@@YA_NXZ DD 010401H
	DD	06204H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
tv68 = 32
?icr_busy@@YA_NXZ PROC					; icr_busy

; 210  : bool icr_busy () {

$LN5:
	sub	rsp, 56					; 00000038H

; 211  : 	return (read_apic_register (LAPIC_REGISTER_ICR) & (1 << 12)) != 0;

	mov	cx, 48					; 00000030H
	call	?read_apic_register@@YA_KG@Z		; read_apic_register
	and	rax, 4096				; 00001000H
	test	rax, rax
	je	SHORT $LN3@icr_busy
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@icr_busy
$LN3@icr_busy:
	mov	DWORD PTR tv68[rsp], 0
$LN4@icr_busy:
	movzx	eax, BYTE PTR tv68[rsp]

; 212  : }

	add	rsp, 56					; 00000038H
	ret	0
?icr_busy@@YA_NXZ ENDP					; icr_busy
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
processor$ = 8
?icr_dest@@YA_KI@Z PROC					; icr_dest

; 203  : uint64_t icr_dest (uint32_t processor ) {

	mov	DWORD PTR [rsp+8], ecx

; 204  : 	if (x2apic)

	movzx	eax, BYTE PTR x2apic
	test	eax, eax
	je	SHORT $LN2@icr_dest

; 205  : 		return ((uint64_t)processor << 32);

	mov	eax, DWORD PTR processor$[rsp]
	shl	rax, 32					; 00000020H
	jmp	SHORT $LN3@icr_dest

; 206  : 	else

	jmp	SHORT $LN1@icr_dest
$LN2@icr_dest:

; 207  : 		return ((uint64_t)processor << 56);

	mov	eax, DWORD PTR processor$[rsp]
	shl	rax, 56					; 00000038H
$LN1@icr_dest:
$LN3@icr_dest:

; 208  : }

	fatret	0
?icr_dest@@YA_KI@Z ENDP					; icr_dest
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
p$ = 48
param$ = 56
?apic_timer_interrupt@@YAX_KPEAX@Z PROC			; apic_timer_interrupt

; 130  : void  apic_timer_interrupt (size_t p, void* param) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 131  : 	apic_timer_count++;

	mov	eax, DWORD PTR apic_timer_count
	inc	eax
	mov	DWORD PTR apic_timer_count, eax

; 132  : 	apic_local_eoi();

	call	apic_local_eoi

; 133  : }

	add	rsp, 40					; 00000028H
	ret	0
?apic_timer_interrupt@@YAX_KPEAX@Z ENDP			; apic_timer_interrupt
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
p$ = 8
param$ = 16
?apic_spurious_interrupt@@YAX_KPEAX@Z PROC		; apic_spurious_interrupt

; 104  : void apic_spurious_interrupt (size_t p, void* param) {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 105  : }

	ret	0
?apic_spurious_interrupt@@YAX_KPEAX@Z ENDP		; apic_spurious_interrupt
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
counter$ = 0
?io_wait@@YAXXZ PROC					; io_wait

; 98   : static void io_wait(){

	sub	rsp, 24

; 99   : 	volatile size_t counter = 0;

	mov	QWORD PTR counter$[rsp], 0
	jmp	SHORT $LN3@io_wait
$LN2@io_wait:

; 100  : 	for(; counter < 1000; ++counter);

	mov	rax, QWORD PTR counter$[rsp]
	inc	rax
	mov	QWORD PTR counter$[rsp], rax
$LN3@io_wait:
	mov	rax, QWORD PTR counter$[rsp]
	cmp	rax, 1000				; 000003e8H
	jae	SHORT $LN1@io_wait
	jmp	SHORT $LN2@io_wait
$LN1@io_wait:

; 101  : }

	add	rsp, 24
	ret	0
?io_wait@@YAXXZ ENDP					; io_wait
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
d$ = 48
c$ = 56
b$ = 64
a$ = 72
?x2apic_supported@@YA_NXZ PROC				; x2apic_supported

; 91   : bool x2apic_supported(){

$LN3:
	sub	rsp, 88					; 00000058H

; 92   : 
; 93   : 	size_t a, b, c, d;
; 94   : 	x64_cpuid(0x1, &a, &b, &c, &d);

	mov	QWORD PTR [rsp+40], 0
	lea	rax, QWORD PTR d$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR c$[rsp]
	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	ecx, 1
	call	x64_cpuid

; 95   : 	return false; //(c & (1 << 21)) != 0;

	xor	al, al

; 96   : }

	add	rsp, 88					; 00000058H
	ret	0
?x2apic_supported@@YA_NXZ ENDP				; x2apic_supported
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z PROC		; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z ENDP		; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
debug$ = 8
APICDebug PROC

; 283  : void APICDebug (bool debug){

	mov	BYTE PTR [rsp+8], cl

; 284  : 	debug_mode = debug;

	movzx	eax, BYTE PTR debug$[rsp]
	mov	BYTE PTR ?debug_mode@@3_NA, al		; debug_mode

; 285  : }

	ret	0
APICDebug ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
tick$ = 0
ms$ = 32
?timer_sleep@@YAXI@Z PROC				; timer_sleep

; 196  : void timer_sleep(uint32_t ms) {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 197  : 	uint32_t tick = ms + apic_timer_count;

	mov	eax, DWORD PTR apic_timer_count
	mov	ecx, DWORD PTR ms$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tick$[rsp], eax
$LN2@timer_slee:

; 198  : 	while (tick > apic_timer_count)

	mov	eax, DWORD PTR apic_timer_count
	cmp	DWORD PTR tick$[rsp], eax
	jbe	SHORT $LN1@timer_slee

; 199  : 		;

	jmp	SHORT $LN2@timer_slee
$LN1@timer_slee:

; 200  : }

	add	rsp, 24
	ret	0
?timer_sleep@@YAXI@Z ENDP				; timer_sleep
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
?AuAPICMoveToHigher@@YAXXZ PROC				; AuAPICMoveToHigher

; 191  : void AuAPICMoveToHigher() {

$LN3:
	sub	rsp, 40					; 00000028H

; 192  : 	apic = (void*)p2v((size_t)apic);

	mov	rcx, QWORD PTR apic
	call	p2v
	mov	QWORD PTR apic, rax

; 193  : 	printf ("New APIC -> %x\n", apic);

	mov	rdx, QWORD PTR apic
	lea	rcx, OFFSET FLAT:$SG3337
	call	printf

; 194  : }

	add	rsp, 40					; 00000028H
	ret	0
?AuAPICMoveToHigher@@YAXXZ ENDP				; AuAPICMoveToHigher
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
?AuAPStarted@@YAXXZ PROC				; AuAPStarted

; 280  : 	ap_started = true;

	mov	BYTE PTR ?ap_started@@3_NA, 1		; ap_started

; 281  : }

	ret	0
?AuAPStarted@@YAXXZ ENDP				; AuAPStarted
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
i$1 = 32
i$2 = 36
i$3 = 40
ap_aligned_address$ = 48
cpu$4 = 56
cpu_struc$5 = 64
apdata$ = 72
startup_ipi$6 = 80
pml4$ = 88
stack_address$7 = 96
ap_init_address$ = 104
num_cpu$ = 128
?AuInitializeCpu@@YAXE@Z PROC				; AuInitializeCpu

; 222  : void AuInitializeCpu(uint8_t num_cpu) {

$LN23:
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 120				; 00000078H

; 223  : 	if (num_cpu == 0)

	movzx	eax, BYTE PTR num_cpu$[rsp]
	test	eax, eax
	jne	SHORT $LN20@AuInitiali

; 224  : 		return;

	jmp	$LN21@AuInitiali
$LN20@AuInitiali:

; 225  : 
; 226  : 	//! fixed address
; 227  : 	uint64_t *apdata = (uint64_t*)0xA000;

	mov	QWORD PTR apdata$[rsp], 40960		; 0000a000H

; 228  : 	uint64_t ap_init_address = (uint64_t)AuApInit;

	lea	rax, OFFSET FLAT:?AuApInit@@YAXPEAX@Z	; AuApInit
	mov	QWORD PTR ap_init_address$[rsp], rax

; 229  : 	uint64_t ap_aligned_address = (uint64_t)apdata;

	mov	rax, QWORD PTR apdata$[rsp]
	mov	QWORD PTR ap_aligned_address$[rsp], rax

; 230  : 
; 231  : 	uint64_t *pml4 = (uint64_t*)AuGetRootPageTable();

	call	AuGetRootPageTable
	mov	QWORD PTR pml4$[rsp], rax

; 232  : 
; 233  : 	
; 234  : 
; 235  : 	for (int i = 1; i <= num_cpu; i++) {

	mov	DWORD PTR i$1[rsp], 1
	jmp	SHORT $LN19@AuInitiali
$LN18@AuInitiali:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN19@AuInitiali:
	movzx	eax, BYTE PTR num_cpu$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN17@AuInitiali

; 236  : 		if (i == 8)

	cmp	DWORD PTR i$1[rsp], 8
	jne	SHORT $LN16@AuInitiali

; 237  : 			break;

	jmp	$LN17@AuInitiali
$LN16@AuInitiali:

; 238  : 		ap_started = false;

	mov	BYTE PTR ?ap_started@@3_NA, 0		; ap_started

; 239  : 
; 240  : 		void *stack_address = AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR stack_address$7[rsp], rax

; 241  : 		*(uint64_t*)(ap_aligned_address + 8) = (uint64_t)pml4;

	mov	rax, QWORD PTR ap_aligned_address$[rsp]
	mov	rcx, QWORD PTR pml4$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 242  : 		*(uint64_t*)(ap_aligned_address + 16) = (uint64_t)stack_address;

	mov	rax, QWORD PTR ap_aligned_address$[rsp]
	mov	rcx, QWORD PTR stack_address$7[rsp]
	mov	QWORD PTR [rax+16], rcx

; 243  : 		*(uint64_t*)(ap_aligned_address + 24) = ap_init_address;

	mov	rax, QWORD PTR ap_aligned_address$[rsp]
	mov	rcx, QWORD PTR ap_init_address$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 244  : 		*(uint64_t*)(ap_aligned_address + 32) = (uint64_t)p2v((size_t)AuPmmngrAlloc());

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	p2v
	mov	rcx, QWORD PTR ap_aligned_address$[rsp]
	mov	QWORD PTR [rcx+32], rax

; 245  : 		void* cpu_struc = (void*)p2v((uint64_t)AuPmmngrAlloc());

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	p2v
	mov	QWORD PTR cpu_struc$5[rsp], rax

; 246  : 		cpu_t *cpu = (cpu_t*)cpu_struc;

	mov	rax, QWORD PTR cpu_struc$5[rsp]
	mov	QWORD PTR cpu$4[rsp], rax

; 247  : 		cpu->cpu_id = i;

	mov	rax, QWORD PTR cpu$4[rsp]
	movzx	ecx, BYTE PTR i$1[rsp]
	mov	BYTE PTR [rax], cl

; 248  : 		cpu->au_current_thread = 0;

	mov	rax, QWORD PTR cpu$4[rsp]
	mov	QWORD PTR [rax+1], 0

; 249  : 		cpu->kernel_tss = 0;

	mov	rax, QWORD PTR cpu$4[rsp]
	mov	QWORD PTR [rax+9], 0

; 250  : 		*(uint64_t*)(ap_aligned_address + 40) = (uint64_t)cpu_struc;

	mov	rax, QWORD PTR ap_aligned_address$[rsp]
	mov	rcx, QWORD PTR cpu_struc$5[rsp]
	mov	QWORD PTR [rax+40], rcx

; 251  : 		
; 252  : 		
; 253  : 
; 254  : 		write_apic_register(LAPIC_REGISTER_ICR, icr_dest(i) | 0x4500);

	mov	ecx, DWORD PTR i$1[rsp]
	call	?icr_dest@@YA_KI@Z			; icr_dest
	or	rax, 17664				; 00004500H
	mov	rdx, rax
	mov	cx, 48					; 00000030H
	call	?write_apic_register@@YAXG_K@Z		; write_apic_register
$LN15@AuInitiali:

; 255  : 		while (icr_busy());

	call	?icr_busy@@YA_NXZ			; icr_busy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN14@AuInitiali
	jmp	SHORT $LN15@AuInitiali
$LN14@AuInitiali:

; 256  : 
; 257  : 
; 258  : 		size_t startup_ipi = icr_dest(i) | 0x4600 | ((size_t)apdata >> 12);

	mov	ecx, DWORD PTR i$1[rsp]
	call	?icr_dest@@YA_KI@Z			; icr_dest
	or	rax, 17920				; 00004600H
	mov	rcx, QWORD PTR apdata$[rsp]
	shr	rcx, 12
	or	rax, rcx
	mov	QWORD PTR startup_ipi$6[rsp], rax

; 259  : 		write_apic_register(LAPIC_REGISTER_ICR, startup_ipi);

	mov	rdx, QWORD PTR startup_ipi$6[rsp]
	mov	cx, 48					; 00000030H
	call	?write_apic_register@@YAXG_K@Z		; write_apic_register
$LN13@AuInitiali:

; 260  : 		while (icr_busy());

	call	?icr_busy@@YA_NXZ			; icr_busy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@AuInitiali
	jmp	SHORT $LN13@AuInitiali
$LN12@AuInitiali:

; 261  : 		for (int i = 0; i < 10000000; i++)

	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN11@AuInitiali
$LN10@AuInitiali:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN11@AuInitiali:
	cmp	DWORD PTR i$3[rsp], 10000000		; 00989680H
	jge	SHORT $LN9@AuInitiali

; 262  : 			;

	jmp	SHORT $LN10@AuInitiali
$LN9@AuInitiali:

; 263  : 		write_apic_register(LAPIC_REGISTER_ICR, startup_ipi);

	mov	rdx, QWORD PTR startup_ipi$6[rsp]
	mov	cx, 48					; 00000030H
	call	?write_apic_register@@YAXG_K@Z		; write_apic_register
$LN8@AuInitiali:

; 264  : 		while (icr_busy());

	call	?icr_busy@@YA_NXZ			; icr_busy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@AuInitiali
	jmp	SHORT $LN8@AuInitiali
$LN7@AuInitiali:

; 265  : 		
; 266  : 		for (int i = 0; i < 10000000; i++)

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN6@AuInitiali
$LN5@AuInitiali:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN6@AuInitiali:
	cmp	DWORD PTR i$2[rsp], 10000000		; 00989680H
	jge	SHORT $LN4@AuInitiali

; 267  : 			;

	jmp	SHORT $LN5@AuInitiali
$LN4@AuInitiali:
$LN3@AuInitiali:

; 268  : 	
; 269  : 		do {
; 270  : 			x64_pause();

	call	x64_pause

; 271  : 		} while (!ap_started);

	movzx	eax, BYTE PTR ?ap_started@@3_NA		; ap_started
	test	eax, eax
	je	SHORT $LN3@AuInitiali

; 272  : 	}

	jmp	$LN18@AuInitiali
$LN17@AuInitiali:
$LN21@AuInitiali:

; 273  : 
; 274  : }

	add	rsp, 120				; 00000078H
	ret	0
?AuInitializeCpu@@YAXE@Z ENDP				; AuInitializeCpu
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
high_part$1 = 32
low_part$2 = 36
msr$3 = 40
reg_next_addr$4 = 48
reg_addr$5 = 56
reg_addr$6 = 64
reg$ = 96
value$ = 104
?write_apic_register@@YAXG_K@Z PROC			; write_apic_register

; 60   : void write_apic_register(uint16_t reg, uint64_t value){

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 88					; 00000058H

; 61   : 
; 62   : 	if (x2apic){

	movzx	eax, BYTE PTR x2apic
	test	eax, eax
	je	SHORT $LN3@write_apic

; 63   : 
; 64   : 		size_t msr = IA32_X2APIC_REGISTER_BASE_MSR + reg;

	movzx	eax, WORD PTR reg$[rsp]
	add	eax, 2048				; 00000800H
	cdqe
	mov	QWORD PTR msr$3[rsp], rax

; 65   : 		x64_write_msr(msr, value);

	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR msr$3[rsp]
	call	x64_write_msr

; 66   : 	} else {

	jmp	$LN2@write_apic
$LN3@write_apic:

; 67   : 
; 68   : 		if (reg == LAPIC_REGISTER_ICR){

	movzx	eax, WORD PTR reg$[rsp]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN1@write_apic

; 69   : 
; 70   : 			volatile uint32_t* reg_addr = raw_offset<volatile uint32_t*>(apic, reg << 4);

	movzx	eax, WORD PTR reg$[rsp]
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_addr$5[rsp], rax

; 71   : 			volatile uint32_t* reg_next_addr = raw_offset<volatile uint32_t*>(apic, (reg + 1) << 4);

	movzx	eax, WORD PTR reg$[rsp]
	inc	eax
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_next_addr$4[rsp], rax

; 72   : 			uint32_t low_part = value & UINT32_MAX;

	mov	eax, -1					; ffffffffH
	mov	rcx, QWORD PTR value$[rsp]
	and	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR low_part$2[rsp], eax

; 73   : 			uint32_t high_part = (value >> 32);

	mov	rax, QWORD PTR value$[rsp]
	shr	rax, 32					; 00000020H
	mov	DWORD PTR high_part$1[rsp], eax

; 74   : 			*reg_next_addr = high_part;

	mov	rax, QWORD PTR reg_next_addr$4[rsp]
	mov	ecx, DWORD PTR high_part$1[rsp]
	mov	DWORD PTR [rax], ecx

; 75   : 			x64_mfence();

	call	x64_mfence

; 76   : 			*reg_addr = low_part;

	mov	rax, QWORD PTR reg_addr$5[rsp]
	mov	ecx, DWORD PTR low_part$2[rsp]
	mov	DWORD PTR [rax], ecx
$LN1@write_apic:

; 77   : 		}
; 78   : 		volatile uint32_t* reg_addr = raw_offset<volatile uint32_t*>(apic, reg << 4);

	movzx	eax, WORD PTR reg$[rsp]
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_addr$6[rsp], rax

; 79   : 		*reg_addr = value;

	mov	rax, QWORD PTR reg_addr$6[rsp]
	mov	ecx, DWORD PTR value$[rsp]
	mov	DWORD PTR [rax], ecx
$LN2@write_apic:

; 80   : 	}
; 81   : }

	add	rsp, 88					; 00000058H
	ret	0
?write_apic_register@@YAXG_K@Z ENDP			; write_apic_register
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
msr$1 = 32
reg_addr$2 = 40
reg_next_addr$3 = 48
reg_addr$4 = 56
reg$ = 80
?read_apic_register@@YA_KG@Z PROC			; read_apic_register

; 41   : uint64_t read_apic_register(uint16_t reg){

$LN6:
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 72					; 00000048H

; 42   : 
; 43   : 	if (x2apic){

	movzx	eax, BYTE PTR x2apic
	test	eax, eax
	je	SHORT $LN3@read_apic_

; 44   : 		size_t msr = IA32_X2APIC_REGISTER_BASE_MSR + reg;

	movzx	eax, WORD PTR reg$[rsp]
	add	eax, 2048				; 00000800H
	cdqe
	mov	QWORD PTR msr$1[rsp], rax

; 45   : 		return x64_read_msr(msr);

	mov	rcx, QWORD PTR msr$1[rsp]
	call	x64_read_msr
	jmp	$LN4@read_apic_

; 46   : 	} else{

	jmp	$LN2@read_apic_
$LN3@read_apic_:

; 47   : 
; 48   : 		if (reg == LAPIC_REGISTER_ICR){

	movzx	eax, WORD PTR reg$[rsp]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN1@read_apic_

; 49   : 			volatile uint32_t* reg_addr = raw_offset<volatile uint32_t*>(apic, reg << 4);

	movzx	eax, WORD PTR reg$[rsp]
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_addr$2[rsp], rax

; 50   : 			volatile uint32_t* reg_next_addr = raw_offset<volatile uint32_t*>(apic, (reg+1) << 4);

	movzx	eax, WORD PTR reg$[rsp]
	inc	eax
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_next_addr$3[rsp], rax

; 51   : 			return *reg_addr | ((uint64_t)*reg_next_addr << 32);

	mov	rax, QWORD PTR reg_addr$2[rsp]
	mov	eax, DWORD PTR [rax]
	mov	eax, eax
	mov	rcx, QWORD PTR reg_next_addr$3[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	ecx, ecx
	shl	rcx, 32					; 00000020H
	or	rax, rcx
	jmp	SHORT $LN4@read_apic_
$LN1@read_apic_:

; 52   : 		}
; 53   : 		volatile uint32_t* reg_addr = raw_offset<volatile uint32_t*>(apic, reg << 4);

	movzx	eax, WORD PTR reg$[rsp]
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_addr$4[rsp], rax

; 54   : 		return *reg_addr;

	mov	rax, QWORD PTR reg_addr$4[rsp]
	mov	eax, DWORD PTR [rax]
	mov	eax, eax
$LN2@read_apic_:
$LN4@read_apic_:

; 55   : 	}
; 56   : }

	add	rsp, 72					; 00000048H
	ret	0
?read_apic_register@@YA_KG@Z ENDP			; read_apic_register
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
apic_local_eoi PROC

; 85   : extern void apic_local_eoi(){

$LN3:
	sub	rsp, 40					; 00000028H

; 86   : 	write_apic_register(LAPIC_REGISTER_EOI, 1);

	mov	edx, 1
	mov	cx, 11
	call	?write_apic_register@@YAXG_K@Z		; write_apic_register

; 87   : }

	add	rsp, 40					; 00000028H
	ret	0
apic_local_eoi ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
tv81 = 32
apic_base$ = 40
timer_vector$ = 48
timer_reg$ = 56
bsp$ = 80
?initialize_apic@@YAX_N@Z PROC				; initialize_apic

; 138  : void initialize_apic (bool bsp) {

$LN10:
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 72					; 00000048H

; 139  : 
; 140  : 	size_t apic_base;
; 141  : 	if (bsp) {

	movzx	eax, BYTE PTR bsp$[rsp]
	test	eax, eax
	je	SHORT $LN5@initialize

; 142  : 		apic_base = (size_t)0xFEE00000;

	mov	eax, -18874368				; fee00000H
	mov	QWORD PTR apic_base$[rsp], rax

; 143  : 
; 144  : 		apic_timer_count = 0;

	mov	DWORD PTR apic_timer_count, 0

; 145  : 
; 146  : 
; 147  : 		if (x2apic_supported() ) {

	call	?x2apic_supported@@YA_NXZ		; x2apic_supported
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@initialize

; 148  : 			x2apic = true;

	mov	BYTE PTR x2apic, 1

; 149  : 			apic_base |= IA32_APIC_BASE_MSR_X2APIC;

	mov	rax, QWORD PTR apic_base$[rsp]
	bts	rax, 10
	mov	QWORD PTR apic_base$[rsp], rax

; 150  : 		}else {

	jmp	SHORT $LN3@initialize
$LN4@initialize:

; 151  : 			apic = (void*)AuMapMMIO(apic_base,2);

	mov	edx, 2
	mov	rcx, QWORD PTR apic_base$[rsp]
	call	AuMapMMIO
	mov	QWORD PTR apic, rax
$LN3@initialize:

; 152  : 		}
; 153  : 
; 154  : 		apic_base |= IA32_APIC_BASE_MSR_ENABLE;

	mov	rax, QWORD PTR apic_base$[rsp]
	bts	rax, 11
	mov	QWORD PTR apic_base$[rsp], rax

; 155  : 		x64_write_msr (IA32_APIC_BASE_MSR, apic_base);

	mov	rdx, QWORD PTR apic_base$[rsp]
	mov	ecx, 27
	call	x64_write_msr

; 156  : 	} else {

	jmp	SHORT $LN2@initialize
$LN5@initialize:

; 157  : 		x64_write_msr(IA32_APIC_BASE_MSR, x64_read_msr(IA32_APIC_BASE_MSR) | IA32_APIC_BASE_MSR_ENABLE | (x2apic ? IA32_APIC_BASE_MSR_X2APIC : 0));

	movzx	eax, BYTE PTR x2apic
	test	eax, eax
	je	SHORT $LN8@initialize
	mov	DWORD PTR tv81[rsp], 1024		; 00000400H
	jmp	SHORT $LN9@initialize
$LN8@initialize:
	mov	DWORD PTR tv81[rsp], 0
$LN9@initialize:
	mov	ecx, 27
	call	x64_read_msr
	bts	rax, 11
	movsxd	rcx, DWORD PTR tv81[rsp]
	or	rax, rcx
	mov	rdx, rax
	mov	ecx, 27
	call	x64_write_msr
$LN2@initialize:

; 158  : 	}
; 159  : 
; 160  : 	printf ("APIC initialized \n");

	lea	rcx, OFFSET FLAT:$SG3328
	call	printf

; 161  : 
; 162  : 	setvect (0xFF, apic_spurious_interrupt);

	lea	rdx, OFFSET FLAT:?apic_spurious_interrupt@@YAX_KPEAX@Z ; apic_spurious_interrupt
	mov	ecx, 255				; 000000ffH
	call	?setvect@@YAX_KP6AX0PEAX@Z@Z		; setvect

; 163  : 	write_apic_register (LAPIC_REGISTER_SVR, read_apic_register (LAPIC_REGISTER_SVR) | 
; 164  : 		                                     IA32_APIC_SVR_ENABLE | 0xFF);

	mov	cx, 15
	call	?read_apic_register@@YA_KG@Z		; read_apic_register
	bts	rax, 8
	or	rax, 255				; 000000ffH
	mov	rdx, rax
	mov	cx, 15
	call	?write_apic_register@@YAXG_K@Z		; write_apic_register

; 165  : 
; 166  : 
; 167  : 	//!Register the time speed
; 168  : 	write_apic_register (LAPIC_REGISTER_TMRDIV,0x3);  //0xa

	mov	edx, 3
	mov	cx, 62					; 0000003eH
	call	?write_apic_register@@YAXG_K@Z		; write_apic_register

; 169  : 
; 170  : 	/*! timer initialized*/
; 171  : 	size_t timer_vector = 0x40;

	mov	QWORD PTR timer_vector$[rsp], 64	; 00000040H

; 172  : 	setvect (timer_vector, apic_timer_interrupt);

	lea	rdx, OFFSET FLAT:?apic_timer_interrupt@@YAX_KPEAX@Z ; apic_timer_interrupt
	mov	rcx, QWORD PTR timer_vector$[rsp]
	call	?setvect@@YAX_KP6AX0PEAX@Z@Z		; setvect

; 173  : 
; 174  : 	size_t timer_reg = (1 << 17) | timer_vector;

	mov	rax, QWORD PTR timer_vector$[rsp]
	bts	rax, 17
	mov	QWORD PTR timer_reg$[rsp], rax

; 175  : 	write_apic_register (LAPIC_REGISTER_LVT_TIMER, timer_reg);

	mov	rdx, QWORD PTR timer_reg$[rsp]
	mov	cx, 50					; 00000032H
	call	?write_apic_register@@YAXG_K@Z		; write_apic_register

; 176  : 	io_wait ();

	call	?io_wait@@YAXXZ				; io_wait

; 177  : 	write_apic_register (LAPIC_REGISTER_TMRINITCNT,1000);  //100 , 500

	mov	edx, 1000				; 000003e8H
	mov	cx, 56					; 00000038H
	call	?write_apic_register@@YAXG_K@Z		; write_apic_register

; 178  : 	
; 179  : 
; 180  : 	x64_outportb(PIC1_DATA, 0xFF);

	mov	dl, 255					; 000000ffH
	mov	cx, 33					; 00000021H
	call	x64_outportb

; 181  : 	io_wait();

	call	?io_wait@@YAXXZ				; io_wait

; 182  : 	x64_outportb(PIC2_DATA, 0xFF);

	mov	dl, 255					; 000000ffH
	mov	cx, 161					; 000000a1H
	call	x64_outportb

; 183  : 
; 184  : 	//! Finally Intialize I/O APIC
; 185  : 	//map_page (ioapic_base,ioapic_base,0);
; 186  : 	if (bsp)

	movzx	eax, BYTE PTR bsp$[rsp]
	test	eax, eax
	je	SHORT $LN1@initialize

; 187  : 		ioapic_init ((void*)0xfec00000);

	mov	ecx, -20971520				; fffffffffec00000H
	call	?ioapic_init@@YAXPEAX@Z			; ioapic_init
$LN1@initialize:

; 188  : 
; 189  : }

	add	rsp, 72					; 00000048H
	ret	0
?initialize_apic@@YAX_N@Z ENDP				; initialize_apic
_TEXT	ENDS
END
