; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
x2apic	DB	01H DUP (?)
	ALIGN	8

apic	DQ	01H DUP (?)
_BSS	ENDS
PUBLIC	?initialize_apic@@YAXXZ				; initialize_apic
PUBLIC	?apic_local_eoi@@YAXXZ				; apic_local_eoi
PUBLIC	?read_apic_register@@YA_KG@Z			; read_apic_register
PUBLIC	?write_apic_register@@YAXG_K@Z			; write_apic_register
PUBLIC	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z		; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
PUBLIC	?x2apic_supported@@YA_NXZ			; x2apic_supported
PUBLIC	?apic_timer_interrupt@@YAX_KPEAX@Z		; apic_timer_interrupt
PUBLIC	?apic_spurious_interrupt@@YAX_KPEAX@Z		; apic_spurious_interrupt
EXTRN	x64_cli:PROC
EXTRN	x64_sti:PROC
EXTRN	x64_read_msr:PROC
EXTRN	x64_write_msr:PROC
EXTRN	x64_mfence:PROC
EXTRN	x64_cpuid:PROC
EXTRN	?setvect@@YAX_KP6AX0PEAX@Z@Z:PROC		; setvect
EXTRN	?ioapic_init@@YAXPEAX@Z:PROC			; ioapic_init
pdata	SEGMENT
$pdata$?initialize_apic@@YAXXZ DD imagerel $LN7
	DD	imagerel $LN7+326
	DD	imagerel $unwind$?initialize_apic@@YAXXZ
$pdata$?apic_local_eoi@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?apic_local_eoi@@YAXXZ
$pdata$?read_apic_register@@YA_KG@Z DD imagerel $LN6
	DD	imagerel $LN6+191
	DD	imagerel $unwind$?read_apic_register@@YA_KG@Z
$pdata$?write_apic_register@@YAXG_K@Z DD imagerel $LN6
	DD	imagerel $LN6+231
	DD	imagerel $unwind$?write_apic_register@@YAXG_K@Z
$pdata$?x2apic_supported@@YA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$?x2apic_supported@@YA_NXZ
$pdata$?io_wait@@YAXXZ DD imagerel ?io_wait@@YAXXZ
	DD	imagerel ?io_wait@@YAXXZ+44
	DD	imagerel $unwind$?io_wait@@YAXXZ
$pdata$?apic_timer_interrupt@@YAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?apic_timer_interrupt@@YAX_KPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?initialize_apic@@YAXXZ DD 010401H
	DD	0a204H
$unwind$?apic_local_eoi@@YAXXZ DD 010401H
	DD	04204H
$unwind$?read_apic_register@@YA_KG@Z DD 010901H
	DD	08209H
$unwind$?write_apic_register@@YAXG_K@Z DD 010e01H
	DD	0a20eH
$unwind$?x2apic_supported@@YA_NXZ DD 010401H
	DD	0c204H
$unwind$?io_wait@@YAXXZ DD 010401H
	DD	02204H
$unwind$?apic_timer_interrupt@@YAX_KPEAX@Z DD 010e01H
	DD	0420eH
xdata	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
p$ = 8
param$ = 16
?apic_spurious_interrupt@@YAX_KPEAX@Z PROC		; apic_spurious_interrupt

; 102  : void apic_spurious_interrupt (size_t p, void* param) {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 103  : }

	ret	0
?apic_spurious_interrupt@@YAX_KPEAX@Z ENDP		; apic_spurious_interrupt
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
p$ = 48
param$ = 56
?apic_timer_interrupt@@YAX_KPEAX@Z PROC			; apic_timer_interrupt

; 97   : void  apic_timer_interrupt (size_t p, void* param) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 98   : 	apic_local_eoi();

	call	?apic_local_eoi@@YAXXZ			; apic_local_eoi

; 99   : }

	add	rsp, 40					; 00000028H
	ret	0
?apic_timer_interrupt@@YAX_KPEAX@Z ENDP			; apic_timer_interrupt
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
counter$ = 0
?io_wait@@YAXXZ PROC					; io_wait

; 90   : static void io_wait(){

	sub	rsp, 24

; 91   : 	volatile size_t counter = 0;

	mov	QWORD PTR counter$[rsp], 0
	jmp	SHORT $LN3@io_wait
$LN2@io_wait:

; 92   : 	for(; counter < 1000; ++counter);

	mov	rax, QWORD PTR counter$[rsp]
	inc	rax
	mov	QWORD PTR counter$[rsp], rax
$LN3@io_wait:
	mov	rax, QWORD PTR counter$[rsp]
	cmp	rax, 1000				; 000003e8H
	jae	SHORT $LN1@io_wait
	jmp	SHORT $LN2@io_wait
$LN1@io_wait:

; 93   : }

	add	rsp, 24
	ret	0
?io_wait@@YAXXZ ENDP					; io_wait
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
tv72 = 48
c$ = 56
d$ = 64
b$ = 72
a$ = 80
?x2apic_supported@@YA_NXZ PROC				; x2apic_supported

; 83   : bool x2apic_supported(){

$LN5:
	sub	rsp, 104				; 00000068H

; 84   : 
; 85   : 	size_t a, b, c, d;
; 86   : 	x64_cpuid(0x1, &a, &b, &c, &d);

	mov	QWORD PTR [rsp+40], 0
	lea	rax, QWORD PTR d$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR c$[rsp]
	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	ecx, 1
	call	x64_cpuid

; 87   : 	return (c & (1 << 21)) != 0;

	mov	rax, QWORD PTR c$[rsp]
	and	rax, 2097152				; 00200000H
	test	rax, rax
	je	SHORT $LN3@x2apic_sup
	mov	DWORD PTR tv72[rsp], 1
	jmp	SHORT $LN4@x2apic_sup
$LN3@x2apic_sup:
	mov	DWORD PTR tv72[rsp], 0
$LN4@x2apic_sup:
	movzx	eax, BYTE PTR tv72[rsp]

; 88   : }

	add	rsp, 104				; 00000068H
	ret	0
?x2apic_supported@@YA_NXZ ENDP				; x2apic_supported
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z PROC		; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>, COMDAT

; 182  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 183  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 184  : 	}

	ret	0
??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z ENDP		; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
high_part$1 = 32
low_part$2 = 36
msr$3 = 40
reg_next_addr$4 = 48
reg_addr$5 = 56
reg_addr$6 = 64
reg$ = 96
value$ = 104
?write_apic_register@@YAXG_K@Z PROC			; write_apic_register

; 51   : void write_apic_register(uint16_t reg, uint64_t value){

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 88					; 00000058H

; 52   : 
; 53   : 	if (x2apic){

	movzx	eax, BYTE PTR x2apic
	test	eax, eax
	je	SHORT $LN3@write_apic

; 54   : 
; 55   : 		size_t msr = IA32_X2APIC_REGISTER_BASE_MSR + reg;

	movzx	eax, WORD PTR reg$[rsp]
	add	eax, 2048				; 00000800H
	cdqe
	mov	QWORD PTR msr$3[rsp], rax

; 56   : 		x64_write_msr(msr, value);

	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR msr$3[rsp]
	call	x64_write_msr

; 57   : 	} else {

	jmp	$LN2@write_apic
$LN3@write_apic:

; 58   : 
; 59   : 		if (reg == LAPIC_REGISTER_ICR){

	movzx	eax, WORD PTR reg$[rsp]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN1@write_apic

; 60   : 
; 61   : 			volatile uint32_t* reg_addr = raw_offset<volatile uint32_t*>(apic, reg << 4);

	movzx	eax, WORD PTR reg$[rsp]
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_addr$5[rsp], rax

; 62   : 			volatile uint32_t* reg_next_addr = raw_offset<volatile uint32_t*>(apic, (reg + 1) << 4);

	movzx	eax, WORD PTR reg$[rsp]
	inc	eax
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_next_addr$4[rsp], rax

; 63   : 			uint32_t low_part = value & UINT32_MAX;

	mov	eax, -1					; ffffffffH
	mov	rcx, QWORD PTR value$[rsp]
	and	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR low_part$2[rsp], eax

; 64   : 			uint32_t high_part = (value >> 32);

	mov	rax, QWORD PTR value$[rsp]
	shr	rax, 32					; 00000020H
	mov	DWORD PTR high_part$1[rsp], eax

; 65   : 			*reg_next_addr = high_part;

	mov	rax, QWORD PTR reg_next_addr$4[rsp]
	mov	ecx, DWORD PTR high_part$1[rsp]
	mov	DWORD PTR [rax], ecx

; 66   : 			x64_mfence();

	call	x64_mfence

; 67   : 			*reg_addr = low_part;

	mov	rax, QWORD PTR reg_addr$5[rsp]
	mov	ecx, DWORD PTR low_part$2[rsp]
	mov	DWORD PTR [rax], ecx
$LN1@write_apic:

; 68   : 		}
; 69   : 		volatile uint32_t* reg_addr = raw_offset<volatile uint32_t*>(apic, reg << 4);

	movzx	eax, WORD PTR reg$[rsp]
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_addr$6[rsp], rax

; 70   : 		*reg_addr = value;

	mov	rax, QWORD PTR reg_addr$6[rsp]
	mov	ecx, DWORD PTR value$[rsp]
	mov	DWORD PTR [rax], ecx
$LN2@write_apic:

; 71   : 	}
; 72   : }

	add	rsp, 88					; 00000058H
	ret	0
?write_apic_register@@YAXG_K@Z ENDP			; write_apic_register
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
msr$1 = 32
reg_addr$2 = 40
reg_next_addr$3 = 48
reg_addr$4 = 56
reg$ = 80
?read_apic_register@@YA_KG@Z PROC			; read_apic_register

; 32   : uint64_t read_apic_register(uint16_t reg){

$LN6:
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 72					; 00000048H

; 33   : 
; 34   : 	if (x2apic){

	movzx	eax, BYTE PTR x2apic
	test	eax, eax
	je	SHORT $LN3@read_apic_

; 35   : 		size_t msr = IA32_X2APIC_REGISTER_BASE_MSR + reg;

	movzx	eax, WORD PTR reg$[rsp]
	add	eax, 2048				; 00000800H
	cdqe
	mov	QWORD PTR msr$1[rsp], rax

; 36   : 		return x64_read_msr(msr);

	mov	rcx, QWORD PTR msr$1[rsp]
	call	x64_read_msr
	jmp	$LN4@read_apic_

; 37   : 	} else{

	jmp	$LN2@read_apic_
$LN3@read_apic_:

; 38   : 
; 39   : 		if (reg == LAPIC_REGISTER_ICR){

	movzx	eax, WORD PTR reg$[rsp]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN1@read_apic_

; 40   : 			volatile uint32_t* reg_addr = raw_offset<volatile uint32_t*>(apic, reg << 4);

	movzx	eax, WORD PTR reg$[rsp]
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_addr$2[rsp], rax

; 41   : 			volatile uint32_t* reg_next_addr = raw_offset<volatile uint32_t*>(apic, (reg+1) << 4);

	movzx	eax, WORD PTR reg$[rsp]
	inc	eax
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_next_addr$3[rsp], rax

; 42   : 			return *reg_addr | ((uint64_t)*reg_next_addr << 32);

	mov	rax, QWORD PTR reg_addr$2[rsp]
	mov	eax, DWORD PTR [rax]
	mov	eax, eax
	mov	rcx, QWORD PTR reg_next_addr$3[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	ecx, ecx
	shl	rcx, 32					; 00000020H
	or	rax, rcx
	jmp	SHORT $LN4@read_apic_
$LN1@read_apic_:

; 43   : 		}
; 44   : 		volatile uint32_t* reg_addr = raw_offset<volatile uint32_t*>(apic, reg << 4);

	movzx	eax, WORD PTR reg$[rsp]
	shl	eax, 4
	mov	edx, eax
	mov	rcx, QWORD PTR apic
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR reg_addr$4[rsp], rax

; 45   : 		return *reg_addr;

	mov	rax, QWORD PTR reg_addr$4[rsp]
	mov	eax, DWORD PTR [rax]
	mov	eax, eax
$LN2@read_apic_:
$LN4@read_apic_:

; 46   : 	}
; 47   : }

	add	rsp, 72					; 00000048H
	ret	0
?read_apic_register@@YA_KG@Z ENDP			; read_apic_register
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
?apic_local_eoi@@YAXXZ PROC				; apic_local_eoi

; 76   : extern void apic_local_eoi(){

$LN3:
	sub	rsp, 40					; 00000028H

; 77   : 
; 78   : 	write_apic_register(LAPIC_REGISTER_EOI, 0);

	xor	edx, edx
	mov	cx, 11
	call	?write_apic_register@@YAXG_K@Z		; write_apic_register

; 79   : }

	add	rsp, 40					; 00000028H
	ret	0
?apic_local_eoi@@YAXXZ ENDP				; apic_local_eoi
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\apic.cpp
_TEXT	SEGMENT
n$1 = 32
apic_base$ = 40
timer_vector$ = 48
timer_reg$ = 56
ioapic_base$ = 64
?initialize_apic@@YAXXZ PROC				; initialize_apic

; 108  : void initialize_apic () {

$LN7:
	sub	rsp, 88					; 00000058H

; 109  : 
; 110  : 	//! Clear interrupts
; 111  : 	x64_cli ();

	call	x64_cli

; 112  : 
; 113  : 
; 114  : 	size_t apic_base;
; 115  : 	apic_base = (size_t)0xFEE00000;

	mov	eax, -18874368				; fee00000H
	mov	QWORD PTR apic_base$[rsp], rax

; 116  : 
; 117  : 	apic = (void*)apic_base;

	mov	rax, QWORD PTR apic_base$[rsp]
	mov	QWORD PTR apic, rax

; 118  : 
; 119  : 	if (x2apic_supported() ) {

	call	?x2apic_supported@@YA_NXZ		; x2apic_supported
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@initialize

; 120  : 		x2apic = true;

	mov	BYTE PTR x2apic, 1

; 121  : 		apic_base |= IA32_APIC_BASE_MSR_X2APIC;

	mov	rax, QWORD PTR apic_base$[rsp]
	bts	rax, 10
	mov	QWORD PTR apic_base$[rsp], rax
$LN4@initialize:

; 122  : 	}
; 123  : 
; 124  : 	apic_base |= IA32_APIC_BASE_MSR_ENABLE;

	mov	rax, QWORD PTR apic_base$[rsp]
	bts	rax, 11
	mov	QWORD PTR apic_base$[rsp], rax

; 125  : 	x64_write_msr (IA32_APIC_BASE_MSR, apic_base);

	mov	rdx, QWORD PTR apic_base$[rsp]
	mov	ecx, 27
	call	x64_write_msr

; 126  : 	setvect (0xFF, &apic_spurious_interrupt);

	lea	rdx, OFFSET FLAT:?apic_spurious_interrupt@@YAX_KPEAX@Z ; apic_spurious_interrupt
	mov	ecx, 255				; 000000ffH
	call	?setvect@@YAX_KP6AX0PEAX@Z@Z		; setvect

; 127  : 	write_apic_register (LAPIC_REGISTER_SVR, read_apic_register (LAPIC_REGISTER_SVR) | 
; 128  : 		                                     IA32_APIC_SVR_ENABLE | 0xFF);

	mov	cx, 15
	call	?read_apic_register@@YA_KG@Z		; read_apic_register
	bts	rax, 8
	or	rax, 255				; 000000ffH
	mov	rdx, rax
	mov	cx, 15
	call	?write_apic_register@@YAXG_K@Z		; write_apic_register

; 129  : 
; 130  : 	for (unsigned n = 0; n < LAPIC_REGISTER_LVT_ERROR - LAPIC_REGISTER_LVT_TIMER; ++n) {

	mov	DWORD PTR n$1[rsp], 0
	jmp	SHORT $LN3@initialize
$LN2@initialize:
	mov	eax, DWORD PTR n$1[rsp]
	inc	eax
	mov	DWORD PTR n$1[rsp], eax
$LN3@initialize:
	cmp	DWORD PTR n$1[rsp], 5
	jae	SHORT $LN1@initialize

; 131  : 		write_apic_register (LAPIC_REGISTER_LVT_TIMER + n, read_apic_register (LAPIC_REGISTER_LVT_TIMER + n) | IA32_APIC_LVT_MASK);

	mov	eax, DWORD PTR n$1[rsp]
	add	eax, 50					; 00000032H
	movzx	ecx, ax
	call	?read_apic_register@@YA_KG@Z		; read_apic_register
	bts	rax, 16
	mov	ecx, DWORD PTR n$1[rsp]
	add	ecx, 50					; 00000032H
	mov	rdx, rax
	call	?write_apic_register@@YAXG_K@Z		; write_apic_register

; 132  : 	}

	jmp	SHORT $LN2@initialize
$LN1@initialize:

; 133  : 
; 134  : 	//!Register the time speed
; 135  : 	write_apic_register (LAPIC_REGISTER_TMRDIV, 0xa);

	mov	edx, 10
	mov	cx, 62					; 0000003eH
	call	?write_apic_register@@YAXG_K@Z		; write_apic_register

; 136  : 
; 137  : 	//! timer initialized
; 138  : 	size_t timer_vector = 0x40;

	mov	QWORD PTR timer_vector$[rsp], 64	; 00000040H

; 139  : 	setvect (timer_vector, apic_timer_interrupt);

	lea	rdx, OFFSET FLAT:?apic_timer_interrupt@@YAX_KPEAX@Z ; apic_timer_interrupt
	mov	rcx, QWORD PTR timer_vector$[rsp]
	call	?setvect@@YAX_KP6AX0PEAX@Z@Z		; setvect

; 140  : 
; 141  : 	size_t timer_reg = (1 << 17) | timer_vector;

	mov	rax, QWORD PTR timer_vector$[rsp]
	bts	rax, 17
	mov	QWORD PTR timer_reg$[rsp], rax

; 142  : 	write_apic_register (LAPIC_REGISTER_LVT_TIMER, timer_reg);

	mov	rdx, QWORD PTR timer_reg$[rsp]
	mov	cx, 50					; 00000032H
	call	?write_apic_register@@YAXG_K@Z		; write_apic_register

; 143  : 	io_wait ();

	call	?io_wait@@YAXXZ				; io_wait

; 144  : 	write_apic_register (LAPIC_REGISTER_TMRINITCNT, 0x1000);

	mov	edx, 4096				; 00001000H
	mov	cx, 56					; 00000038H
	call	?write_apic_register@@YAXG_K@Z		; write_apic_register

; 145  : 
; 146  : 
; 147  : 	//! Finally Intialize I/O APIC
; 148  : 	size_t ioapic_base = (size_t)0xFEC00000;

	mov	eax, -20971520				; fec00000H
	mov	QWORD PTR ioapic_base$[rsp], rax

; 149  : 
; 150  : 	ioapic_init (&ioapic_base);

	lea	rcx, QWORD PTR ioapic_base$[rsp]
	call	?ioapic_init@@YAXPEAX@Z			; ioapic_init

; 151  : 
; 152  : 	x64_sti();

	call	x64_sti

; 153  : }

	add	rsp, 88					; 00000058H
	ret	0
?initialize_apic@@YAXXZ ENDP				; initialize_apic
_TEXT	ENDS
END
