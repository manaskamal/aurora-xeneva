; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?map_shared_memory@@YAXG_K0@Z			; map_shared_memory
PUBLIC	?copy_memory@@YAXG_K0@Z				; copy_memory
PUBLIC	?unmap_shared_memory@@YAXG_K0@Z			; unmap_shared_memory
PUBLIC	?sys_get_used_ram@@YA_KXZ			; sys_get_used_ram
PUBLIC	?sys_get_free_ram@@YA_KXZ			; sys_get_free_ram
EXTRN	AuPmmngrAlloc:PROC
EXTRN	?pmmngr_get_free_ram@@YA_KXZ:PROC		; pmmngr_get_free_ram
EXTRN	?pmmngr_get_used_ram@@YA_KXZ:PROC		; pmmngr_get_used_ram
EXTRN	x64_cli:PROC
EXTRN	?pml4_index@@YA_K_K@Z:PROC			; pml4_index
EXTRN	AuMapPage:PROC
EXTRN	AuUnmapPage:PROC
EXTRN	get_current_thread:PROC
EXTRN	?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z:PROC ; thread_iterate_ready_list
EXTRN	?thread_iterate_block_list@@YAPEAU_thread_@@H@Z:PROC ; thread_iterate_block_list
pdata	SEGMENT
$pdata$?map_shared_memory@@YAXG_K0@Z DD imagerel $LN7
	DD	imagerel $LN7+251
	DD	imagerel $unwind$?map_shared_memory@@YAXG_K0@Z
$pdata$?copy_memory@@YAXG_K0@Z DD imagerel $LN7
	DD	imagerel $LN7+251
	DD	imagerel $unwind$?copy_memory@@YAXG_K0@Z
$pdata$?unmap_shared_memory@@YAXG_K0@Z DD imagerel $LN7
	DD	imagerel $LN7+174
	DD	imagerel $unwind$?unmap_shared_memory@@YAXG_K0@Z
$pdata$?sys_get_used_ram@@YA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$?sys_get_used_ram@@YA_KXZ
$pdata$?sys_get_free_ram@@YA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$?sys_get_free_ram@@YA_KXZ
pdata	ENDS
xdata	SEGMENT
$unwind$?map_shared_memory@@YAXG_K0@Z DD 011301H
	DD	0a213H
$unwind$?copy_memory@@YAXG_K0@Z DD 011301H
	DD	0a213H
$unwind$?unmap_shared_memory@@YAXG_K0@Z DD 011301H
	DD	08213H
$unwind$?sys_get_used_ram@@YA_KXZ DD 010401H
	DD	04204H
$unwind$?sys_get_free_ram@@YA_KXZ DD 010401H
	DD	04204H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\sysserv\sysmem.cpp
_TEXT	SEGMENT
?sys_get_free_ram@@YA_KXZ PROC				; sys_get_free_ram

; 71   : uint64_t sys_get_free_ram () {

$LN3:
	sub	rsp, 40					; 00000028H

; 72   : 	x64_cli ();

	call	x64_cli

; 73   : 	return pmmngr_get_free_ram ();

	call	?pmmngr_get_free_ram@@YA_KXZ		; pmmngr_get_free_ram

; 74   : }

	add	rsp, 40					; 00000028H
	ret	0
?sys_get_free_ram@@YA_KXZ ENDP				; sys_get_free_ram
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\sysserv\sysmem.cpp
_TEXT	SEGMENT
?sys_get_used_ram@@YA_KXZ PROC				; sys_get_used_ram

; 66   : uint64_t sys_get_used_ram () {

$LN3:
	sub	rsp, 40					; 00000028H

; 67   : 	x64_cli ();

	call	x64_cli

; 68   : 	return pmmngr_get_used_ram ();

	call	?pmmngr_get_used_ram@@YA_KXZ		; pmmngr_get_used_ram

; 69   : }

	add	rsp, 40					; 00000028H
	ret	0
?sys_get_used_ram@@YA_KXZ ENDP				; sys_get_used_ram
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\sysserv\sysmem.cpp
_TEXT	SEGMENT
i$1 = 32
t$ = 40
tv72 = 48
cr3$ = 56
dest_id$ = 80
pos$ = 88
size$ = 96
?unmap_shared_memory@@YAXG_K0@Z PROC			; unmap_shared_memory

; 50   : void unmap_shared_memory (uint16_t dest_id, uint64_t pos, size_t size) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 72					; 00000048H

; 51   : 	x64_cli ();

	call	x64_cli

; 52   : 
; 53   : 	thread_t* t = thread_iterate_ready_list (dest_id);

	movzx	ecx, WORD PTR dest_id$[rsp]
	call	?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z ; thread_iterate_ready_list
	mov	QWORD PTR t$[rsp], rax

; 54   : 	if (t == NULL) {

	cmp	QWORD PTR t$[rsp], 0
	jne	SHORT $LN4@unmap_shar

; 55   : 		t = thread_iterate_block_list(dest_id);

	movzx	eax, WORD PTR dest_id$[rsp]
	mov	ecx, eax
	call	?thread_iterate_block_list@@YAPEAU_thread_@@H@Z ; thread_iterate_block_list
	mov	QWORD PTR t$[rsp], rax
$LN4@unmap_shar:

; 56   : 	}
; 57   : 	uint64_t *cr3 = (uint64_t*)t->cr3;

	mov	rax, QWORD PTR t$[rsp]
	mov	rax, QWORD PTR [rax+192]
	mov	QWORD PTR cr3$[rsp], rax

; 58   : 
; 59   : 	for (int i = 0; i < size/4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@unmap_shar
$LN2@unmap_shar:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@unmap_shar:
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	QWORD PTR tv72[rsp], rax
	xor	edx, edx
	mov	rax, QWORD PTR size$[rsp]
	mov	ecx, 4096				; 00001000H
	div	rcx
	mov	rcx, QWORD PTR tv72[rsp]
	cmp	rcx, rax
	jae	SHORT $LN1@unmap_shar

; 60   : 		AuUnmapPage(pos + i * 4096);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR pos$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	AuUnmapPage

; 61   : 		//unmap_page_ex(cr3,pos + i * 4096, false);
; 62   : 	}

	jmp	SHORT $LN2@unmap_shar
$LN1@unmap_shar:

; 63   : }

	add	rsp, 72					; 00000048H
	ret	0
?unmap_shared_memory@@YAXG_K0@Z ENDP			; unmap_shared_memory
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\sysserv\sysmem.cpp
_TEXT	SEGMENT
i$1 = 32
t$ = 40
tv74 = 48
cr3$ = 56
current_cr3$ = 64
tv84 = 72
dest_id$ = 96
pos$ = 104
size$ = 112
?copy_memory@@YAXG_K0@Z PROC				; copy_memory

; 36   : void copy_memory (uint16_t dest_id, uint64_t pos, size_t size) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 88					; 00000058H

; 37   : 	x64_cli();

	call	x64_cli

; 38   : 	thread_t* t = thread_iterate_ready_list (dest_id);

	movzx	ecx, WORD PTR dest_id$[rsp]
	call	?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z ; thread_iterate_ready_list
	mov	QWORD PTR t$[rsp], rax

; 39   : 	if (t == NULL) {

	cmp	QWORD PTR t$[rsp], 0
	jne	SHORT $LN4@copy_memor

; 40   : 		t = thread_iterate_block_list(dest_id);

	movzx	eax, WORD PTR dest_id$[rsp]
	mov	ecx, eax
	call	?thread_iterate_block_list@@YAPEAU_thread_@@H@Z ; thread_iterate_block_list
	mov	QWORD PTR t$[rsp], rax
$LN4@copy_memor:

; 41   : 	}
; 42   : 	uint64_t *current_cr3 = (uint64_t*)get_current_thread()->cr3;

	call	get_current_thread
	mov	rax, QWORD PTR [rax+192]
	mov	QWORD PTR current_cr3$[rsp], rax

; 43   : 	uint64_t *cr3 = (uint64_t*)t->cr3;

	mov	rax, QWORD PTR t$[rsp]
	mov	rax, QWORD PTR [rax+192]
	mov	QWORD PTR cr3$[rsp], rax

; 44   : 
; 45   : 	for (int i = 0; i < size/4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@copy_memor
$LN2@copy_memor:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@copy_memor:
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	QWORD PTR tv74[rsp], rax
	xor	edx, edx
	mov	rax, QWORD PTR size$[rsp]
	mov	ecx, 4096				; 00001000H
	div	rcx
	mov	rcx, QWORD PTR tv74[rsp]
	cmp	rcx, rax
	jae	SHORT $LN1@copy_memor

; 46   : 		cr3[pml4_index(pos + i * 4096)] = current_cr3[pml4_index(pos + i * 4096)];

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR pos$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	QWORD PTR tv84[rsp], rax
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, 4096				; 00001000H
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pos$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR cr3$[rsp]
	mov	rdx, QWORD PTR current_cr3$[rsp]
	mov	r8, QWORD PTR tv84[rsp]
	mov	rdx, QWORD PTR [rdx+r8*8]
	mov	QWORD PTR [rcx+rax*8], rdx

; 47   : 	}

	jmp	$LN2@copy_memor
$LN1@copy_memor:

; 48   : }

	add	rsp, 88					; 00000058H
	ret	0
?copy_memory@@YAXG_K0@Z ENDP				; copy_memory
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\sysserv\sysmem.cpp
_TEXT	SEGMENT
i$1 = 32
t$ = 40
tv79 = 48
cr3$ = 56
current_cr3$ = 64
tv86 = 72
dest_id$ = 96
pos$ = 104
size$ = 112
?map_shared_memory@@YAXG_K0@Z PROC			; map_shared_memory

; 20   : void map_shared_memory (uint16_t dest_id,uint64_t pos, size_t size) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 88					; 00000058H

; 21   : 	x64_cli ();

	call	x64_cli

; 22   : 
; 23   : 	thread_t* t = thread_iterate_ready_list (dest_id);

	movzx	ecx, WORD PTR dest_id$[rsp]
	call	?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z ; thread_iterate_ready_list
	mov	QWORD PTR t$[rsp], rax

; 24   : 	if (t == NULL) {

	cmp	QWORD PTR t$[rsp], 0
	jne	SHORT $LN4@map_shared

; 25   : 		t = thread_iterate_block_list(dest_id);

	movzx	eax, WORD PTR dest_id$[rsp]
	mov	ecx, eax
	call	?thread_iterate_block_list@@YAPEAU_thread_@@H@Z ; thread_iterate_block_list
	mov	QWORD PTR t$[rsp], rax
$LN4@map_shared:

; 26   : 	}
; 27   : 	uint64_t *current_cr3 = (uint64_t*)get_current_thread()->cr3;

	call	get_current_thread
	mov	rax, QWORD PTR [rax+192]
	mov	QWORD PTR current_cr3$[rsp], rax

; 28   : 	uint64_t *cr3 = (uint64_t*)t->cr3;

	mov	rax, QWORD PTR t$[rsp]
	mov	rax, QWORD PTR [rax+192]
	mov	QWORD PTR cr3$[rsp], rax

; 29   : 
; 30   : 	for (size_t i = 0; i < size/4096; i++) {

	mov	QWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@map_shared
$LN2@map_shared:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN3@map_shared:
	xor	edx, edx
	mov	rax, QWORD PTR size$[rsp]
	mov	ecx, 4096				; 00001000H
	div	rcx
	cmp	QWORD PTR i$1[rsp], rax
	jae	SHORT $LN1@map_shared

; 31   : 		AuMapPage((uint64_t)AuPmmngrAlloc(),pos + i * 4096, PAGING_USER);

	mov	rax, QWORD PTR i$1[rsp]
	imul	rax, 4096				; 00001000H
	mov	rcx, QWORD PTR pos$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv79[rsp], rax
	call	AuPmmngrAlloc
	mov	r8b, 4
	mov	rcx, QWORD PTR tv79[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	AuMapPage

; 32   : 	}

	jmp	SHORT $LN2@map_shared
$LN1@map_shared:

; 33   : 	cr3[pml4_index(pos)] = current_cr3[pml4_index(pos)];

	mov	rcx, QWORD PTR pos$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	QWORD PTR tv86[rsp], rax
	mov	rcx, QWORD PTR pos$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR cr3$[rsp]
	mov	rdx, QWORD PTR current_cr3$[rsp]
	mov	r8, QWORD PTR tv86[rsp]
	mov	rdx, QWORD PTR [rdx+r8*8]
	mov	QWORD PTR [rcx+rax*8], rdx

; 34   : }

	add	rsp, 88					; 00000058H
	ret	0
?map_shared_memory@@YAXG_K0@Z ENDP			; map_shared_memory
_TEXT	ENDS
END
