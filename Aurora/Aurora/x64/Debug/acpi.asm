; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?kern_acpi@@3PEAU_aurora_acpi_@@EA		; kern_acpi
_BSS	SEGMENT
?kern_acpi@@3PEAU_aurora_acpi_@@EA DQ 01H DUP (?)	; kern_acpi
_BSS	ENDS
CONST	SEGMENT
$SG3218	DB	'[ACPI]: data structures are incomplete', 0aH, 00H
$SG3221	DB	'[ACPI]: Already enabled', 0aH, 00H
	ORG $+7
$SG3223	DB	'PM1aCTRLBlock -> %x', 0aH, 00H
	ORG $+3
$SG3225	DB	'[ACPI]: Enabled successfully', 0aH, 00H
	ORG $+2
$SG3227	DB	'[ACPI]: Verifying pm1bCtrlBlock ', 0aH, 00H
	ORG $+6
$SG3230	DB	'[ACPI]: Enabled successfully', 0aH, 00H
	ORG $+2
$SG3235	DB	'[ACPI]: Fadt interrupt fired', 0aH, 00H
	ORG $+2
$SG3256	DB	'FACP', 00H
	ORG $+3
$SG3257	DB	'FACP', 00H
	ORG $+3
$SG3259	DB	'[ACPI]: Fadt table found', 0aH, 00H
	ORG $+2
$SG3262	DB	'CIPA', 00H
	ORG $+3
$SG3263	DB	'APIC', 00H
	ORG $+7
$SG3265	DB	'[ACPI]: Madt table found', 0aH, 00H
	ORG $+2
$SG3268	DB	'SRAT', 00H
	ORG $+3
$SG3269	DB	'SRAT', 00H
	ORG $+7
$SG3270	DB	'[ACPI]: Srat table found', 0aH, 00H
	ORG $+2
$SG3273	DB	'MCFG', 00H
	ORG $+3
$SG3274	DB	'MCFG', 00H
	ORG $+3
$SG3295	DB	'HPET', 00H
	ORG $+7
$SG3292	DB	'PCIe Start bus num -> %d, End bus num -> %d, base addres'
	DB	's-> %x', 0aH, 00H
$SG3296	DB	'HPET', 00H
	ORG $+3
$SG3297	DB	'[ACPI]: HPET table found', 0aH, 00H
	ORG $+2
$SG3300	DB	'MCHI', 00H
	ORG $+3
$SG3301	DB	'MCHI', 00H
	ORG $+7
$SG3302	DB	'[ACPI]: Management Controller Host Interface Table', 0aH
	DB	00H
	ORG $+4
$SG3307	DB	'[ACPI]: Dsdt found -> %x', 0aH, 00H
	ORG $+6
$SG3308	DB	'[ACPI]: Sci Interrupt -> %d', 0aH, 00H
	ORG $+3
$SG3311	DB	'S5Block found', 0aH, 00H
	ORG $+1
$SG3314	DB	'[ACPI]: SLP_typA -> %x, SLP_typB -> %x', 0aH, 00H
$SG3335	DB	'[ACPI]: Madt entry -> LAPIC id -> %d', 0aH, 00H
	ORG $+2
$SG3339	DB	'[ACPI]: Madt entry -> I/O APIC address -> %x, GSI -> %d', 0aH
	DB	00H
	ORG $+7
$SG3343	DB	'[ACPI]: Interrupt Source Override, GSI -> %d, SRC -> %d', 0aH
	DB	00H
	ORG $+7
$SG3345	DB	'[ACPI]: Madt entry type = %d', 0aH, 00H
	ORG $+2
$SG3355	DB	'[ACPI]: Reset Address -> %x, Reset value -> %x', 0aH, 00H
$SG3359	DB	'Shutdown step1 complete', 0aH, 00H
	ORG $+7
$SG3361	DB	'[ACPI] pm1bCtrlBlock -> %x', 0aH, 00H
	ORG $+4
$SG3362	DB	0aH, 'Shutdown step2 complete', 0aH, 00H
	ORG $+6
$SG3363	DB	'[ACPI]: Shutdown failed', 0aH, 00H
CONST	ENDS
PUBLIC	?initialize_acpi@@YAXPEAX@Z			; initialize_acpi
PUBLIC	?acpi_parse_madt@@YAXXZ				; acpi_parse_madt
PUBLIC	?acpi_system_reboot@@YAXXZ			; acpi_system_reboot
PUBLIC	?search_s5@@YAPEAEPEAUacpiDsdt@@@Z		; search_s5
PUBLIC	?acpi_shutdown@@YAXXZ				; acpi_shutdown
PUBLIC	?acpi_pcie_supported@@YA_NXZ			; acpi_pcie_supported
PUBLIC	?acpi_get_mcfg@@YAPEAUacpiMcfg@@XZ		; acpi_get_mcfg
PUBLIC	?acpi_power_button_enable@@YAXXZ		; acpi_power_button_enable
PUBLIC	?acpi_enable@@YAXXZ				; acpi_enable
PUBLIC	?fadt_handler@@YAX_KPEAX@Z			; fadt_handler
PUBLIC	??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; mem_after<acpiMcfgAlloc * __ptr64,acpiMcfg>
PUBLIC	??$raw_diff@UacpiMcfgAlloc@@UacpiMcfg@@@@YAHPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; raw_diff<acpiMcfgAlloc,acpiMcfg>
PUBLIC	??$raw_diff@U_acpi_apic_header_@@UacpiMadt@@@@YAHPEAU_acpi_apic_header_@@PEAUacpiMadt@@@Z ; raw_diff<_acpi_apic_header_,acpiMadt>
PUBLIC	??$raw_offset@PEAU_acpi_apic_header_@@PEAU1@@@YAPEAU_acpi_apic_header_@@PEAU0@H@Z ; raw_offset<_acpi_apic_header_ * __ptr64,_acpi_apic_header_ * __ptr64>
EXTRN	x64_cli:PROC
EXTRN	x64_inportw:PROC
EXTRN	x64_outportb:PROC
EXTRN	x64_outportw:PROC
EXTRN	x64_outportd:PROC
EXTRN	?strlen@@YA_KPEBD@Z:PROC			; strlen
EXTRN	?strncmp@@YAHPEBD0_K@Z:PROC			; strncmp
EXTRN	?strncpy@@YAPEADPEADPEBD_K@Z:PROC		; strncpy
EXTRN	?memset@@YAXPEAXEI@Z:PROC			; memset
EXTRN	?pmmngr_alloc@@YAPEAXXZ:PROC			; pmmngr_alloc
EXTRN	?printf@@YAXPEBDZZ:PROC				; printf
EXTRN	?interrupt_end@@YAXI@Z:PROC			; interrupt_end
EXTRN	?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z:PROC	; interrupt_set
pdata	SEGMENT
$pdata$?initialize_acpi@@YAXPEAX@Z DD imagerel $LN25
	DD	imagerel $LN25+1146
	DD	imagerel $unwind$?initialize_acpi@@YAXPEAX@Z
$pdata$?acpi_parse_madt@@YAXXZ DD imagerel $LN11
	DD	imagerel $LN11+278
	DD	imagerel $unwind$?acpi_parse_madt@@YAXXZ
$pdata$?acpi_system_reboot@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$?acpi_system_reboot@@YAXXZ
$pdata$?search_s5@@YAPEAEPEAUacpiDsdt@@@Z DD imagerel $LN6
	DD	imagerel $LN6+104
	DD	imagerel $unwind$?search_s5@@YAPEAEPEAUacpiDsdt@@@Z
$pdata$?acpi_shutdown@@YAXXZ DD imagerel $LN7
	DD	imagerel $LN7+210
	DD	imagerel $unwind$?acpi_shutdown@@YAXXZ
$pdata$?acpi_power_button_enable@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$?acpi_power_button_enable@@YAXXZ
$pdata$?acpi_enable@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+307
	DD	imagerel $unwind$?acpi_enable@@YAXXZ
$pdata$?fadt_handler@@YAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?fadt_handler@@YAX_KPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?initialize_acpi@@YAXPEAX@Z DD 010901H
	DD	0e209H
$unwind$?acpi_parse_madt@@YAXXZ DD 010401H
	DD	0a204H
$unwind$?acpi_system_reboot@@YAXXZ DD 010401H
	DD	04204H
$unwind$?search_s5@@YAPEAEPEAUacpiDsdt@@@Z DD 010901H
	DD	02209H
$unwind$?acpi_shutdown@@YAXXZ DD 010401H
	DD	04204H
$unwind$?acpi_power_button_enable@@YAXXZ DD 010401H
	DD	04204H
$unwind$?acpi_enable@@YAXXZ DD 010401H
	DD	06204H
$unwind$?fadt_handler@@YAX_KPEAX@Z DD 010e01H
	DD	0420eH
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEAU_acpi_apic_header_@@PEAU1@@@YAPEAU_acpi_apic_header_@@PEAU0@H@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAU_acpi_apic_header_@@PEAU1@@@YAPEAU_acpi_apic_header_@@PEAU0@H@Z PROC ; raw_offset<_acpi_apic_header_ * __ptr64,_acpi_apic_header_ * __ptr64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PEAU_acpi_apic_header_@@PEAU1@@@YAPEAU_acpi_apic_header_@@PEAU0@H@Z ENDP ; raw_offset<_acpi_apic_header_ * __ptr64,_acpi_apic_header_ * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_diff@U_acpi_apic_header_@@UacpiMadt@@@@YAHPEAU_acpi_apic_header_@@PEAUacpiMadt@@@Z
_TEXT	SEGMENT
p1$ = 8
p2$ = 16
??$raw_diff@U_acpi_apic_header_@@UacpiMadt@@@@YAHPEAU_acpi_apic_header_@@PEAUacpiMadt@@@Z PROC ; raw_diff<_acpi_apic_header_,acpiMadt>, COMDAT

; 179  : 	{

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 180  : 		return (intptr_t)p1 - (intptr_t)p2;

	mov	eax, DWORD PTR p2$[rsp]
	mov	ecx, DWORD PTR p1$[rsp]
	sub	ecx, eax
	mov	eax, ecx

; 181  : 	};

	ret	0
??$raw_diff@U_acpi_apic_header_@@UacpiMadt@@@@YAHPEAU_acpi_apic_header_@@PEAUacpiMadt@@@Z ENDP ; raw_diff<_acpi_apic_header_,acpiMadt>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_diff@UacpiMcfgAlloc@@UacpiMcfg@@@@YAHPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z
_TEXT	SEGMENT
p1$ = 8
p2$ = 16
??$raw_diff@UacpiMcfgAlloc@@UacpiMcfg@@@@YAHPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z PROC ; raw_diff<acpiMcfgAlloc,acpiMcfg>, COMDAT

; 179  : 	{

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 180  : 		return (intptr_t)p1 - (intptr_t)p2;

	mov	eax, DWORD PTR p2$[rsp]
	mov	ecx, DWORD PTR p1$[rsp]
	sub	ecx, eax
	mov	eax, ecx

; 181  : 	};

	ret	0
??$raw_diff@UacpiMcfgAlloc@@UacpiMcfg@@@@YAHPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ENDP ; raw_diff<acpiMcfgAlloc,acpiMcfg>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z
_TEXT	SEGMENT
p1$ = 8
??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z PROC ; mem_after<acpiMcfgAlloc * __ptr64,acpiMcfg>, COMDAT

; 187  : 	{

	mov	QWORD PTR [rsp+8], rcx

; 188  : 		return (T) (&p1[1]);

	mov	eax, 44					; 0000002cH
	imul	rax, 1
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 189  : 	};

	ret	0
??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ENDP ; mem_after<acpiMcfgAlloc * __ptr64,acpiMcfg>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\acpi\acpi.cpp
_TEXT	SEGMENT
v$ = 48
p$ = 56
?fadt_handler@@YAX_KPEAX@Z PROC				; fadt_handler

; 68   : void fadt_handler (size_t v, void* p) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 69   : 	printf ("[ACPI]: Fadt interrupt fired\n");

	lea	rcx, OFFSET FLAT:$SG3235
	call	?printf@@YAXPEBDZZ			; printf

; 70   : 	interrupt_end(9);

	mov	ecx, 9
	call	?interrupt_end@@YAXI@Z			; interrupt_end

; 71   : }

	add	rsp, 40					; 00000028H
	ret	0
?fadt_handler@@YAX_KPEAX@Z ENDP				; fadt_handler
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\acpi\acpi.cpp
_TEXT	SEGMENT
word$ = 32
word_1$ = 36
word_3$1 = 40
?acpi_enable@@YAXXZ PROC				; acpi_enable

; 36   : void acpi_enable () {

$LN9:
	sub	rsp, 56					; 00000038H

; 37   : 	if (!kern_acpi->fadt || !kern_acpi->fadt->pm1aCtrlBlock) {

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	cmp	QWORD PTR [rax+9], 0
	je	SHORT $LN5@acpi_enabl
	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	cmp	DWORD PTR [rax+64], 0
	jne	SHORT $LN6@acpi_enabl
$LN5@acpi_enabl:

; 38   : 		printf ("[ACPI]: data structures are incomplete\n");

	lea	rcx, OFFSET FLAT:$SG3218
	call	?printf@@YAXPEBDZZ			; printf

; 39   : 		return;

	jmp	$LN7@acpi_enabl
$LN6@acpi_enabl:

; 40   : 	}
; 41   : 	uint16_t word = x64_inportw(kern_acpi->fadt->pm1aCtrlBlock);

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	movzx	ecx, WORD PTR [rax+64]
	call	x64_inportw
	mov	WORD PTR word$[rsp], ax

; 42   : 	if ((word & ACPI_PMCTRL_SCI_EN) == 1) {

	movzx	eax, WORD PTR word$[rsp]
	and	eax, 1
	cmp	eax, 1
	jne	SHORT $LN4@acpi_enabl

; 43   : 		printf ("[ACPI]: Already enabled\n");

	lea	rcx, OFFSET FLAT:$SG3221
	call	?printf@@YAXPEBDZZ			; printf

; 44   : 		return;

	jmp	$LN7@acpi_enabl
$LN4@acpi_enabl:

; 45   : 	}
; 46   : 	x64_outportb (kern_acpi->fadt->sciCmdPort, kern_acpi->fadt->acpiEnable);

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	mov	rcx, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rcx, QWORD PTR [rcx+9]
	movzx	edx, BYTE PTR [rax+52]
	movzx	ecx, WORD PTR [rcx+48]
	call	x64_outportb

; 47   : 	uint16_t word_1 = x64_inportw(kern_acpi->fadt->pm1aCtrlBlock);	

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	movzx	ecx, WORD PTR [rax+64]
	call	x64_inportw
	mov	WORD PTR word_1$[rsp], ax

; 48   : 	printf ("PM1aCTRLBlock -> %x\n", kern_acpi->fadt->pm1aCtrlBlock);

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	mov	edx, DWORD PTR [rax+64]
	lea	rcx, OFFSET FLAT:$SG3223
	call	?printf@@YAXPEBDZZ			; printf

; 49   : 	if ((word_1 & ACPI_PMCTRL_SCI_EN) == 1){

	movzx	eax, WORD PTR word_1$[rsp]
	and	eax, 1
	cmp	eax, 1
	jne	SHORT $LN3@acpi_enabl

; 50   : 
; 51   : 		printf ("[ACPI]: Enabled successfully\n");

	lea	rcx, OFFSET FLAT:$SG3225
	call	?printf@@YAXPEBDZZ			; printf
$LN3@acpi_enabl:

; 52   : 
; 53   : 	}
; 54   : 
; 55   : 	if (kern_acpi->fadt->pm1bCtrlBlock){

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	cmp	DWORD PTR [rax+68], 0
	je	SHORT $LN2@acpi_enabl

; 56   : 		printf ("[ACPI]: Verifying pm1bCtrlBlock \n");

	lea	rcx, OFFSET FLAT:$SG3227
	call	?printf@@YAXPEBDZZ			; printf

; 57   : 		uint16_t word_3 = x64_inportw(kern_acpi->fadt->pm1bCtrlBlock);

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	movzx	ecx, WORD PTR [rax+68]
	call	x64_inportw
	mov	WORD PTR word_3$1[rsp], ax

; 58   : 		if ((word_3 & ACPI_PMCTRL_SCI_EN) == 1){

	movzx	eax, WORD PTR word_3$1[rsp]
	and	eax, 1
	cmp	eax, 1
	jne	SHORT $LN1@acpi_enabl

; 59   : 			printf ("[ACPI]: Enabled successfully\n");

	lea	rcx, OFFSET FLAT:$SG3230
	call	?printf@@YAXPEBDZZ			; printf
$LN1@acpi_enabl:
$LN2@acpi_enabl:

; 60   : 		}
; 61   : 	}
; 62   : 
; 63   : 	acpi_power_button_enable();

	call	?acpi_power_button_enable@@YAXXZ	; acpi_power_button_enable
$LN7@acpi_enabl:

; 64   : 	return;
; 65   : }

	add	rsp, 56					; 00000038H
	ret	0
?acpi_enable@@YAXXZ ENDP				; acpi_enable
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\acpi\acpi.cpp
_TEXT	SEGMENT
?acpi_power_button_enable@@YAXXZ PROC			; acpi_power_button_enable

; 27   : void acpi_power_button_enable () {

$LN3:
	sub	rsp, 40					; 00000028H

; 28   : 	x64_outportw (kern_acpi->fadt->pm1aEventBlock, (1<<5));

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	mov	dx, 32					; 00000020H
	movzx	ecx, WORD PTR [rax+56]
	call	x64_outportw

; 29   : 	x64_outportw (kern_acpi->fadt->pm1aEventBlock, (1<<8));

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	mov	dx, 256					; 00000100H
	movzx	ecx, WORD PTR [rax+56]
	call	x64_outportw

; 30   : 	x64_outportw (kern_acpi->fadt->pm1aEventBlock, (1<<5));

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	mov	dx, 32					; 00000020H
	movzx	ecx, WORD PTR [rax+56]
	call	x64_outportw

; 31   : 	x64_outportw (kern_acpi->fadt->pm1aEventBlock, POWER_BUTTON_ENABLE);

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	mov	dx, 256					; 00000100H
	movzx	ecx, WORD PTR [rax+56]
	call	x64_outportw

; 32   : 	x64_outportw (kern_acpi->fadt->pm1aEventBlock, (1<<9));

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	mov	dx, 512					; 00000200H
	movzx	ecx, WORD PTR [rax+56]
	call	x64_outportw

; 33   : }

	add	rsp, 40					; 00000028H
	ret	0
?acpi_power_button_enable@@YAXXZ ENDP			; acpi_power_button_enable
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\acpi\acpi.cpp
_TEXT	SEGMENT
?acpi_get_mcfg@@YAPEAUacpiMcfg@@XZ PROC			; acpi_get_mcfg

; 240  : 	return kern_acpi->mcfg;

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+33]

; 241  : }

	ret	0
?acpi_get_mcfg@@YAPEAUacpiMcfg@@XZ ENDP			; acpi_get_mcfg
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\acpi\acpi.cpp
_TEXT	SEGMENT
?acpi_pcie_supported@@YA_NXZ PROC			; acpi_pcie_supported

; 231  : 	if (!kern_acpi->mcfg) {

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	cmp	QWORD PTR [rax+33], 0
	jne	SHORT $LN1@acpi_pcie_

; 232  : 		return false;

	xor	al, al
	jmp	SHORT $LN2@acpi_pcie_
$LN1@acpi_pcie_:

; 233  : 	} 
; 234  : 	//! for now let's use pci legacy mode
; 235  : 	return true;

	mov	al, 1
$LN2@acpi_pcie_:

; 236  : }

	fatret	0
?acpi_pcie_supported@@YA_NXZ ENDP			; acpi_pcie_supported
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\acpi\acpi.cpp
_TEXT	SEGMENT
?acpi_shutdown@@YAXXZ PROC				; acpi_shutdown

; 194  : void acpi_shutdown () {

$LN7:
	sub	rsp, 40					; 00000028H

; 195  : 	x64_cli();

	call	x64_cli

; 196  : 	x64_outportd (kern_acpi->fadt->sciCmdPort, 0);

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	xor	edx, edx
	movzx	ecx, WORD PTR [rax+48]
	call	x64_outportd

; 197  : 	if (kern_acpi->fadt->pm1aCtrlBlock != NULL) {

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	cmp	DWORD PTR [rax+64], 0
	je	SHORT $LN4@acpi_shutd

; 198  : 		x64_outportw (kern_acpi->fadt->pm1aCtrlBlock, kern_acpi->slp_typa | SLP_EN);

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	movzx	eax, WORD PTR [rax+41]
	bts	eax, 13
	mov	rcx, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rcx, QWORD PTR [rcx+9]
	movzx	edx, ax
	movzx	ecx, WORD PTR [rcx+64]
	call	x64_outportw

; 199  : 		printf ("Shutdown step1 complete\n");

	lea	rcx, OFFSET FLAT:$SG3359
	call	?printf@@YAXPEBDZZ			; printf
$LN4@acpi_shutd:

; 200  : 	}
; 201  : 
; 202  : 	if (kern_acpi->fadt->pm1bCtrlBlock){

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	cmp	DWORD PTR [rax+68], 0
	je	SHORT $LN3@acpi_shutd

; 203  : 		printf ("[ACPI] pm1bCtrlBlock -> %x\n", kern_acpi->fadt->pm1bCtrlBlock);

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	mov	edx, DWORD PTR [rax+68]
	lea	rcx, OFFSET FLAT:$SG3361
	call	?printf@@YAXPEBDZZ			; printf

; 204  : 		x64_outportw (kern_acpi->fadt->pm1bCtrlBlock,  (kern_acpi->slp_typb << 0) | SLP_EN);

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	movzx	eax, WORD PTR [rax+43]
	bts	eax, 13
	mov	rcx, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rcx, QWORD PTR [rcx+9]
	movzx	edx, ax
	movzx	ecx, WORD PTR [rcx+68]
	call	x64_outportw
$LN3@acpi_shutd:

; 205  : 	} 
; 206  : 
; 207  : 	printf ("\nShutdown step2 complete\n");

	lea	rcx, OFFSET FLAT:$SG3362
	call	?printf@@YAXPEBDZZ			; printf

; 208  : 	printf ("[ACPI]: Shutdown failed\n");

	lea	rcx, OFFSET FLAT:$SG3363
	call	?printf@@YAXPEBDZZ			; printf
$LN2@acpi_shutd:

; 209  : 	for(;;);

	jmp	SHORT $LN2@acpi_shutd

; 210  : }

	add	rsp, 40					; 00000028H
	ret	0
?acpi_shutdown@@YAXXZ ENDP				; acpi_shutdown
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\acpi\acpi.cpp
_TEXT	SEGMENT
l$ = 0
tv72 = 4
S5$ = 8
header$ = 32
?search_s5@@YAPEAEPEAUacpiDsdt@@@Z PROC			; search_s5

; 213  : uint8_t* search_s5 (acpiDsdt* header) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 214  : 	uint32_t l;
; 215  : 	uint32_t* S5;
; 216  : 
; 217  : 	l = header->header.length - sizeof(acpiDsdt);

	mov	rax, QWORD PTR header$[rsp]
	mov	eax, DWORD PTR [rax+4]
	sub	rax, 36					; 00000024H
	mov	DWORD PTR l$[rsp], eax

; 218  : 	S5 = (uint32_t*)(header + sizeof(acpiDsdt));

	mov	rax, QWORD PTR header$[rsp]
	add	rax, 1296				; 00000510H
	mov	QWORD PTR S5$[rsp], rax
$LN3@search_s5:

; 219  : 	while(l--) {

	mov	eax, DWORD PTR l$[rsp]
	mov	DWORD PTR tv72[rsp], eax
	mov	eax, DWORD PTR l$[rsp]
	dec	eax
	mov	DWORD PTR l$[rsp], eax
	cmp	DWORD PTR tv72[rsp], 0
	je	SHORT $LN2@search_s5

; 220  : 		if (*S5 == (uint32_t)'_5S_') {

	mov	rax, QWORD PTR S5$[rsp]
	cmp	DWORD PTR [rax], 1597330271		; 5f35535fH
	jne	SHORT $LN1@search_s5

; 221  : 			return (uint8_t*)S5;

	mov	rax, QWORD PTR S5$[rsp]
	jmp	SHORT $LN4@search_s5
$LN1@search_s5:

; 222  : 		}
; 223  : 		S5 = (uint32_t*)((uint32_t)S5 + 1);

	mov	eax, DWORD PTR S5$[rsp]
	inc	eax
	mov	eax, eax
	mov	QWORD PTR S5$[rsp], rax

; 224  : 	}

	jmp	SHORT $LN3@search_s5
$LN2@search_s5:

; 225  : 
; 226  : 	return (uint8_t*)NULL;

	xor	eax, eax
$LN4@search_s5:

; 227  : }

	add	rsp, 24
	ret	0
?search_s5@@YAPEAEPEAUacpiDsdt@@@Z ENDP			; search_s5
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\acpi\acpi.cpp
_TEXT	SEGMENT
?acpi_system_reboot@@YAXXZ PROC				; acpi_system_reboot

; 189  : void acpi_system_reboot () {

$LN3:
	sub	rsp, 40					; 00000028H

; 190  : 	printf ("[ACPI]: Reset Address -> %x, Reset value -> %x\n", kern_acpi->fadt->resetReg.address, kern_acpi->fadt->resetValue);

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	movzx	eax, BYTE PTR [rax+127]
	mov	rcx, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rcx, QWORD PTR [rcx+9]
	mov	r8d, eax
	mov	rdx, QWORD PTR [rcx+119]
	lea	rcx, OFFSET FLAT:$SG3355
	call	?printf@@YAXPEBDZZ			; printf

; 191  : 	x64_outportw (kern_acpi->fadt->resetReg.address, kern_acpi->fadt->resetValue);

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	movzx	eax, BYTE PTR [rax+127]
	mov	rcx, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rcx, QWORD PTR [rcx+9]
	movzx	edx, ax
	movzx	ecx, WORD PTR [rcx+119]
	call	x64_outportw

; 192  : }

	add	rsp, 40					; 00000028H
	ret	0
?acpi_system_reboot@@YAXXZ ENDP				; acpi_system_reboot
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\acpi\acpi.cpp
_TEXT	SEGMENT
tv76 = 32
apic_header$ = 40
io_apic$1 = 48
over$2 = 56
lapic$3 = 64
?acpi_parse_madt@@YAXXZ PROC				; acpi_parse_madt

; 158  : void acpi_parse_madt () {

$LN11:
	sub	rsp, 88					; 00000058H

; 159  : 	acpiApicHeader *apic_header = (acpiApicHeader*)kern_acpi->madt->entry;

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+1]
	add	rax, 44					; 0000002cH
	mov	QWORD PTR apic_header$[rsp], rax
$LN8@acpi_parse:

; 160  : 
; 161  : 	while (raw_diff(apic_header, kern_acpi->madt) < kern_acpi->madt->header.length) {

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rdx, QWORD PTR [rax+1]
	mov	rcx, QWORD PTR apic_header$[rsp]
	call	??$raw_diff@U_acpi_apic_header_@@UacpiMadt@@@@YAHPEAU_acpi_apic_header_@@PEAUacpiMadt@@@Z ; raw_diff<_acpi_apic_header_,acpiMadt>
	mov	rcx, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rcx, QWORD PTR [rcx+1]
	cmp	eax, DWORD PTR [rcx+4]
	jae	$LN7@acpi_parse

; 162  : 		switch (apic_header->type) {

	mov	rax, QWORD PTR apic_header$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv76[rsp], al
	cmp	BYTE PTR tv76[rsp], 0
	je	SHORT $LN4@acpi_parse
	cmp	BYTE PTR tv76[rsp], 1
	je	SHORT $LN3@acpi_parse
	cmp	BYTE PTR tv76[rsp], 2
	je	SHORT $LN2@acpi_parse
	jmp	SHORT $LN1@acpi_parse
$LN4@acpi_parse:

; 163  : 		case ACPI_APICTYPE_LAPIC: {
; 164  : 			acpiLocalApic *lapic = (acpiLocalApic*)apic_header;

	mov	rax, QWORD PTR apic_header$[rsp]
	mov	QWORD PTR lapic$3[rsp], rax

; 165  : 			printf ("[ACPI]: Madt entry -> LAPIC id -> %d\n", lapic->lapicId);

	mov	rax, QWORD PTR lapic$3[rsp]
	movzx	eax, BYTE PTR [rax+3]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG3335
	call	?printf@@YAXPEBDZZ			; printf

; 166  : 			break;

	jmp	SHORT $LN5@acpi_parse
$LN3@acpi_parse:

; 167  : 		}							 
; 168  : 		case ACPI_APICTYPE_IOAPIC:{
; 169  : 			acpiIoApic *io_apic = (acpiIoApic*)apic_header;

	mov	rax, QWORD PTR apic_header$[rsp]
	mov	QWORD PTR io_apic$1[rsp], rax

; 170  : 			printf ("[ACPI]: Madt entry -> I/O APIC address -> %x, GSI -> %d\n",io_apic->ioApicAddr, io_apic->gsiBase );

	mov	rax, QWORD PTR io_apic$1[rsp]
	mov	r8d, DWORD PTR [rax+8]
	mov	rax, QWORD PTR io_apic$1[rsp]
	mov	edx, DWORD PTR [rax+4]
	lea	rcx, OFFSET FLAT:$SG3339
	call	?printf@@YAXPEBDZZ			; printf

; 171  : 			break;

	jmp	SHORT $LN5@acpi_parse
$LN2@acpi_parse:

; 172  : 		}
; 173  : 		case ACPI_APICTYPE_ISOVER:{
; 174  : 			apic_interrupt_override* over = (apic_interrupt_override*)apic_header;

	mov	rax, QWORD PTR apic_header$[rsp]
	mov	QWORD PTR over$2[rsp], rax

; 175  : 			printf ("[ACPI]: Interrupt Source Override, GSI -> %d, SRC -> %d\n", over->interrupt, over->source);

	mov	rax, QWORD PTR over$2[rsp]
	movzx	eax, BYTE PTR [rax+3]
	mov	r8d, eax
	mov	rax, QWORD PTR over$2[rsp]
	mov	edx, DWORD PTR [rax+4]
	lea	rcx, OFFSET FLAT:$SG3343
	call	?printf@@YAXPEBDZZ			; printf

; 176  : 			break;

	jmp	SHORT $LN5@acpi_parse
$LN1@acpi_parse:

; 177  : 		}
; 178  : 		default:{
; 179  : 			printf ("[ACPI]: Madt entry type = %d\n", apic_header->type);

	mov	rax, QWORD PTR apic_header$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG3345
	call	?printf@@YAXPEBDZZ			; printf
$LN5@acpi_parse:

; 180  : 			break;
; 181  : 		}
; 182  : 		}
; 183  : 
; 184  : 		apic_header = raw_offset <acpiApicHeader*>(apic_header, apic_header->length);

	mov	rax, QWORD PTR apic_header$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	mov	edx, eax
	mov	rcx, QWORD PTR apic_header$[rsp]
	call	??$raw_offset@PEAU_acpi_apic_header_@@PEAU1@@@YAPEAU_acpi_apic_header_@@PEAU0@H@Z ; raw_offset<_acpi_apic_header_ * __ptr64,_acpi_apic_header_ * __ptr64>
	mov	QWORD PTR apic_header$[rsp], rax

; 185  : 	}

	jmp	$LN8@acpi_parse
$LN7@acpi_parse:

; 186  : }

	add	rsp, 88					; 00000058H
	ret	0
?acpi_parse_madt@@YAXXZ ENDP				; acpi_parse_madt
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\acpi\acpi.cpp
_TEXT	SEGMENT
S5Block$1 = 32
sig$ = 40
count$2 = 48
allocs$3 = 56
header$ = 64
entries$ = 72
rsdp$ = 80
rsdt$ = 88
xsdt$ = 96
acpi_base$ = 128
?initialize_acpi@@YAXPEAX@Z PROC			; initialize_acpi

; 74   : void initialize_acpi (void* acpi_base) {

$LN25:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 75   : 	kern_acpi = (aurora_acpi*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA, rax ; kern_acpi

; 76   : 	memset (kern_acpi, 0, sizeof(aurora_acpi));

	mov	r8d, 45					; 0000002dH
	xor	edx, edx
	mov	rcx, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	call	?memset@@YAXPEAXEI@Z			; memset

; 77   : 	acpiRsdp *rsdp = (acpiRsdp*)acpi_base;

	mov	rax, QWORD PTR acpi_base$[rsp]
	mov	QWORD PTR rsdp$[rsp], rax

; 78   : 	acpiRsdt *rsdt = (acpiRsdt*)rsdp->rsdtAddr;

	mov	rax, QWORD PTR rsdp$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	QWORD PTR rsdt$[rsp], rax

; 79   : 	acpiXsdt *xsdt = (acpiXsdt*)rsdp->xsdtAddr;

	mov	rax, QWORD PTR rsdp$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR xsdt$[rsp], rax

; 80   : 	char sig[5];
; 81   : 	int entries = (rsdt->header.length - sizeof(rsdt->header))/4;

	mov	rax, QWORD PTR rsdt$[rsp]
	mov	eax, DWORD PTR [rax+4]
	sub	rax, 36					; 00000024H
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	mov	DWORD PTR entries$[rsp], eax

; 82   : 	acpiSysDescHeader* header = nullptr;

	mov	QWORD PTR header$[rsp], 0

; 83   : 
; 84   : 	for (int count = 0; count < entries; count++) {

	mov	DWORD PTR count$2[rsp], 0
	jmp	SHORT $LN22@initialize
$LN21@initialize:
	mov	eax, DWORD PTR count$2[rsp]
	inc	eax
	mov	DWORD PTR count$2[rsp], eax
$LN22@initialize:
	mov	eax, DWORD PTR entries$[rsp]
	cmp	DWORD PTR count$2[rsp], eax
	jge	$LN20@initialize

; 85   : 		header = (acpiSysDescHeader*)rsdt->entry[count];

	movsxd	rax, DWORD PTR count$2[rsp]
	mov	rcx, QWORD PTR rsdt$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+36]
	mov	QWORD PTR header$[rsp], rax

; 86   : 		strncpy (sig, header->signature, 4);

	mov	rax, QWORD PTR header$[rsp]
	mov	r8d, 4
	mov	rdx, rax
	lea	rcx, QWORD PTR sig$[rsp]
	call	?strncpy@@YAPEADPEADPEBD_K@Z		; strncpy

; 87   : 		sig[4] = '\0';

	mov	eax, 1
	imul	rax, 4
	mov	BYTE PTR sig$[rsp+rax], 0

; 88   : 
; 89   : 
; 90   : 		if (!strncmp(sig, ACPI_SIG_FADT, strlen(ACPI_SIG_FADT))) {

	lea	rcx, OFFSET FLAT:$SG3256
	call	?strlen@@YA_KPEBD@Z			; strlen
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG3257
	lea	rcx, QWORD PTR sig$[rsp]
	call	?strncmp@@YAHPEBD0_K@Z			; strncmp
	test	eax, eax
	jne	SHORT $LN19@initialize

; 91   : 			kern_acpi->fadt = (acpiFadt*) header;

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rcx, QWORD PTR header$[rsp]
	mov	QWORD PTR [rax+9], rcx

; 92   : 			printf ("[ACPI]: Fadt table found\n");

	lea	rcx, OFFSET FLAT:$SG3259
	call	?printf@@YAXPEBDZZ			; printf
	jmp	$LN18@initialize
$LN19@initialize:

; 93   : 		}
; 94   : 		 
; 95   : 		else if (!strncmp(sig, ACPI_SIG_APIC, strlen("CIPA"))) {

	lea	rcx, OFFSET FLAT:$SG3262
	call	?strlen@@YA_KPEBD@Z			; strlen
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG3263
	lea	rcx, QWORD PTR sig$[rsp]
	call	?strncmp@@YAHPEBD0_K@Z			; strncmp
	test	eax, eax
	jne	SHORT $LN17@initialize

; 96   : 			kern_acpi->madt = (acpiMadt*) header;

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rcx, QWORD PTR header$[rsp]
	mov	QWORD PTR [rax+1], rcx

; 97   : 			printf ("[ACPI]: Madt table found\n");

	lea	rcx, OFFSET FLAT:$SG3265
	call	?printf@@YAXPEBDZZ			; printf

; 98   : 			acpi_parse_madt ();

	call	?acpi_parse_madt@@YAXXZ			; acpi_parse_madt
	jmp	$LN16@initialize
$LN17@initialize:

; 99   : 		}
; 100  : 
; 101  : 		else if (!strncmp(sig, ACPI_SIG_SRAT, strlen(ACPI_SIG_SRAT))) {

	lea	rcx, OFFSET FLAT:$SG3268
	call	?strlen@@YA_KPEBD@Z			; strlen
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG3269
	lea	rcx, QWORD PTR sig$[rsp]
	call	?strncmp@@YAHPEBD0_K@Z			; strncmp
	test	eax, eax
	jne	SHORT $LN15@initialize

; 102  : 			printf ("[ACPI]: Srat table found\n");

	lea	rcx, OFFSET FLAT:$SG3270
	call	?printf@@YAXPEBDZZ			; printf
	jmp	$LN14@initialize
$LN15@initialize:

; 103  : 		}
; 104  : 
; 105  : 		else if (!strncmp(sig, ACPI_SIG_MCFG, strlen(ACPI_SIG_MCFG))) {

	lea	rcx, OFFSET FLAT:$SG3273
	call	?strlen@@YA_KPEBD@Z			; strlen
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG3274
	lea	rcx, QWORD PTR sig$[rsp]
	call	?strncmp@@YAHPEBD0_K@Z			; strncmp
	test	eax, eax
	jne	$LN13@initialize

; 106  : 			//printf ("[ACPI]: Mcfg table found\n");
; 107  : 			kern_acpi->mcfg = (acpiMcfg*) header;

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rcx, QWORD PTR header$[rsp]
	mov	QWORD PTR [rax+33], rcx

; 108  : 			acpiMcfgAlloc *allocs = mem_after<acpiMcfgAlloc*>(kern_acpi->mcfg);

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rcx, QWORD PTR [rax+33]
	call	??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; mem_after<acpiMcfgAlloc * __ptr64,acpiMcfg>
	mov	QWORD PTR allocs$3[rsp], rax

; 109  : 			for (; raw_diff(allocs, kern_acpi->mcfg) < kern_acpi->mcfg->header.length; ++allocs) {

	jmp	SHORT $LN12@initialize
$LN11@initialize:
	mov	rax, QWORD PTR allocs$3[rsp]
	add	rax, 16
	mov	QWORD PTR allocs$3[rsp], rax
$LN12@initialize:
	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rdx, QWORD PTR [rax+33]
	mov	rcx, QWORD PTR allocs$3[rsp]
	call	??$raw_diff@UacpiMcfgAlloc@@UacpiMcfg@@@@YAHPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; raw_diff<acpiMcfgAlloc,acpiMcfg>
	mov	rcx, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rcx, QWORD PTR [rcx+33]
	cmp	eax, DWORD PTR [rcx+4]
	jae	SHORT $LN10@initialize

; 110  : 				printf ("PCIe Start bus num -> %d, End bus num -> %d, base address-> %x\n", allocs->startBusNum, allocs->endBusNum,
; 111  : 					allocs->baseAddress);

	mov	rax, QWORD PTR allocs$3[rsp]
	movzx	eax, BYTE PTR [rax+11]
	mov	rcx, QWORD PTR allocs$3[rsp]
	movzx	ecx, BYTE PTR [rcx+10]
	mov	rdx, QWORD PTR allocs$3[rsp]
	mov	r9, QWORD PTR [rdx]
	mov	r8d, eax
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:$SG3292
	call	?printf@@YAXPEBDZZ			; printf

; 112  : 			}

	jmp	SHORT $LN11@initialize
$LN10@initialize:

; 113  : 		}
; 114  : 		else if (!strncmp(sig, ACPI_SIG_HPET, strlen(ACPI_SIG_HPET))) {

	jmp	SHORT $LN9@initialize
$LN13@initialize:
	lea	rcx, OFFSET FLAT:$SG3295
	call	?strlen@@YA_KPEBD@Z			; strlen
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG3296
	lea	rcx, QWORD PTR sig$[rsp]
	call	?strncmp@@YAHPEBD0_K@Z			; strncmp
	test	eax, eax
	jne	SHORT $LN8@initialize

; 115  : 			printf ("[ACPI]: HPET table found\n");

	lea	rcx, OFFSET FLAT:$SG3297
	call	?printf@@YAXPEBDZZ			; printf
	jmp	SHORT $LN7@initialize
$LN8@initialize:

; 116  : 		}
; 117  : 		else if (!strncmp(sig, ACPI_SIG_MCHI, strlen(ACPI_SIG_MCHI))) {

	lea	rcx, OFFSET FLAT:$SG3300
	call	?strlen@@YA_KPEBD@Z			; strlen
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG3301
	lea	rcx, QWORD PTR sig$[rsp]
	call	?strncmp@@YAHPEBD0_K@Z			; strncmp
	test	eax, eax
	jne	SHORT $LN6@initialize

; 118  : 			printf ("[ACPI]: Management Controller Host Interface Table\n");

	lea	rcx, OFFSET FLAT:$SG3302
	call	?printf@@YAXPEBDZZ			; printf
$LN6@initialize:
$LN7@initialize:
$LN9@initialize:
$LN14@initialize:
$LN16@initialize:
$LN18@initialize:

; 119  : 		}
; 120  : 
; 121  : 	}

	jmp	$LN21@initialize
$LN20@initialize:

; 122  : 
; 123  : 	if (kern_acpi->fadt && kern_acpi->fadt->facsAddr) {

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	cmp	QWORD PTR [rax+9], 0
	je	SHORT $LN5@initialize
	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	cmp	DWORD PTR [rax+36], 0
	je	SHORT $LN5@initialize

; 124  : 
; 125  : 		kern_acpi->facs = (acpiFacs*)kern_acpi->fadt->facsAddr;

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	mov	eax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	QWORD PTR [rcx+17], rax
$LN5@initialize:

; 126  : 
; 127  : 	}
; 128  : 
; 129  : 	if (kern_acpi->fadt && kern_acpi->fadt->dsdtAddr) {

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	cmp	QWORD PTR [rax+9], 0
	je	$LN4@initialize
	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	cmp	DWORD PTR [rax+40], 0
	je	$LN4@initialize

; 130  : 
; 131  : 		kern_acpi->dsdt = (acpiDsdt*)kern_acpi->fadt->dsdtAddr;

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	mov	eax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	QWORD PTR [rcx+25], rax

; 132  : 		printf ("[ACPI]: Dsdt found -> %x\n", kern_acpi->dsdt);

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rdx, QWORD PTR [rax+25]
	lea	rcx, OFFSET FLAT:$SG3307
	call	?printf@@YAXPEBDZZ			; printf

; 133  : 		printf ("[ACPI]: Sci Interrupt -> %d\n", kern_acpi->fadt->sciInt);

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	movzx	eax, WORD PTR [rax+46]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG3308
	call	?printf@@YAXPEBDZZ			; printf

; 134  : 		interrupt_set(kern_acpi->fadt->sciInt,fadt_handler, kern_acpi->fadt->sciInt);

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rax, QWORD PTR [rax+9]
	mov	rcx, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rcx, QWORD PTR [rcx+9]
	movzx	ecx, WORD PTR [rcx+46]
	movzx	r8d, BYTE PTR [rax+46]
	lea	rdx, OFFSET FLAT:?fadt_handler@@YAX_KPEAX@Z ; fadt_handler
	call	?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z	; interrupt_set

; 135  : 		uint8_t* S5Block = search_s5(kern_acpi->dsdt);

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	rcx, QWORD PTR [rax+25]
	call	?search_s5@@YAPEAEPEAUacpiDsdt@@@Z	; search_s5
	mov	QWORD PTR S5Block$1[rsp], rax

; 136  : 		if (S5Block != NULL) {

	cmp	QWORD PTR S5Block$1[rsp], 0
	je	$LN3@initialize

; 137  : 			printf ("S5Block found\n");

	lea	rcx, OFFSET FLAT:$SG3311
	call	?printf@@YAXPEBDZZ			; printf

; 138  : 			S5Block += 4;

	mov	rax, QWORD PTR S5Block$1[rsp]
	add	rax, 4
	mov	QWORD PTR S5Block$1[rsp], rax

; 139  : 			S5Block += ((*S5Block & 0xC0) >> 6) + 2;

	mov	rax, QWORD PTR S5Block$1[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 192				; 000000c0H
	sar	eax, 6
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR S5Block$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR S5Block$1[rsp], rax

; 140  : 			
; 141  : 			if (*S5Block == 0x0A)

	mov	rax, QWORD PTR S5Block$1[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 10
	jne	SHORT $LN2@initialize

; 142  : 				S5Block++;

	mov	rax, QWORD PTR S5Block$1[rsp]
	inc	rax
	mov	QWORD PTR S5Block$1[rsp], rax
$LN2@initialize:

; 143  : 			kern_acpi->slp_typa = *S5Block;

	mov	rax, QWORD PTR S5Block$1[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	WORD PTR [rcx+41], ax

; 144  : 			S5Block++;

	mov	rax, QWORD PTR S5Block$1[rsp]
	inc	rax
	mov	QWORD PTR S5Block$1[rsp], rax

; 145  : 
; 146  : 			if ( *S5Block == 0x0A)

	mov	rax, QWORD PTR S5Block$1[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 10
	jne	SHORT $LN1@initialize

; 147  : 				S5Block++;

	mov	rax, QWORD PTR S5Block$1[rsp]
	inc	rax
	mov	QWORD PTR S5Block$1[rsp], rax
$LN1@initialize:

; 148  : 
; 149  : 			kern_acpi->slp_typb = *S5Block;

	mov	rax, QWORD PTR S5Block$1[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	mov	WORD PTR [rcx+43], ax

; 150  : 			printf ("[ACPI]: SLP_typA -> %x, SLP_typB -> %x\n", kern_acpi->slp_typa, kern_acpi->slp_typb);

	mov	rax, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	movzx	eax, WORD PTR [rax+43]
	mov	rcx, QWORD PTR ?kern_acpi@@3PEAU_aurora_acpi_@@EA ; kern_acpi
	movzx	ecx, WORD PTR [rcx+41]
	mov	r8d, eax
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:$SG3314
	call	?printf@@YAXPEBDZZ			; printf
$LN3@initialize:
$LN4@initialize:

; 151  : 		}
; 152  : 	}
; 153  : 	acpi_enable ();

	call	?acpi_enable@@YAXXZ			; acpi_enable

; 154  : }

	add	rsp, 120				; 00000078H
	ret	0
?initialize_acpi@@YAXPEAX@Z ENDP			; initialize_acpi
_TEXT	ENDS
END
