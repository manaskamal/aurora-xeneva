; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?master_count@@3HA				; master_count
PUBLIC	?slave_count@@3HA				; slave_count
PUBLIC	?root@@3PEAU_tele_type_@@EA			; root
PUBLIC	?last@@3PEAU_tele_type_@@EA			; last
_BSS	SEGMENT
?root@@3PEAU_tele_type_@@EA DQ 01H DUP (?)		; root
?last@@3PEAU_tele_type_@@EA DQ 01H DUP (?)		; last
_BSS	ENDS
CONST	SEGMENT
$SG3282	DB	'Master Writing', 0aH, 00H
$SG3335	DB	'ttym', 00H
	ORG $+3
$SG3337	DB	'/dev/', 00H
	ORG $+2
$SG3342	DB	'ttys', 00H
	ORG $+3
$SG3344	DB	'/dev/', 00H
CONST	ENDS
_DATA	SEGMENT
?master_count@@3HA DD 01H				; master_count
?slave_count@@3HA DD 01H				; slave_count
_DATA	ENDS
PUBLIC	?ttype_create@@YAXPEAH0@Z			; ttype_create
PUBLIC	?get_ttype@@YAPEAU_tele_type_@@H@Z		; get_ttype
PUBLIC	?ttype_dup_master@@YAXHH@Z			; ttype_dup_master
PUBLIC	?ttype_insert@@YAXPEAU_tele_type_@@@Z		; ttype_insert
PUBLIC	?ttype_delete@@YAXPEAU_tele_type_@@@Z		; ttype_delete
PUBLIC	?ttype_master_read@@YAXPEAU_vfs_node_@@PEAEI@Z	; ttype_master_read
PUBLIC	?ttype_master_write@@YAXPEAU_vfs_node_@@PEAEI@Z	; ttype_master_write
PUBLIC	?ttype_slave_read@@YAXPEAU_vfs_node_@@PEAEI@Z	; ttype_slave_read
PUBLIC	?ttype_slave_write@@YAXPEAU_vfs_node_@@PEAEI@Z	; ttype_slave_write
EXTRN	?strcpy@@YAPEADPEADPEBD@Z:PROC			; strcpy
EXTRN	?strlen@@YA_KPEBD@Z:PROC			; strlen
EXTRN	?memset@@YAXPEAXEI@Z:PROC			; memset
EXTRN	?vfs_mount@@YAXPEADPEAU_vfs_node_@@@Z:PROC	; vfs_mount
EXTRN	?pmmngr_alloc@@YAPEAXXZ:PROC			; pmmngr_alloc
EXTRN	?pmmngr_free@@YAXPEAX@Z:PROC			; pmmngr_free
EXTRN	x64_cli:PROC
EXTRN	?malloc@@YAPEAXI@Z:PROC				; malloc
EXTRN	?sztoa@@YAPEAD_KPEADH@Z:PROC			; sztoa
EXTRN	?printf@@YAXPEBDZZ:PROC				; printf
EXTRN	?unblock_thread@@YAXPEAU_thread_@@@Z:PROC	; unblock_thread
EXTRN	?get_current_thread@@YAPEAU_thread_@@XZ:PROC	; get_current_thread
EXTRN	?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z:PROC ; thread_iterate_ready_list
EXTRN	?thread_iterate_block_list@@YAPEAU_thread_@@H@Z:PROC ; thread_iterate_block_list
pdata	SEGMENT
$pdata$?ttype_create@@YAXPEAH0@Z DD imagerel $LN6
	DD	imagerel $LN6+1128
	DD	imagerel $unwind$?ttype_create@@YAXPEAH0@Z
$pdata$?get_ttype@@YAPEAU_tele_type_@@H@Z DD imagerel $LN8
	DD	imagerel $LN8+81
	DD	imagerel $unwind$?get_ttype@@YAPEAU_tele_type_@@H@Z
$pdata$?ttype_dup_master@@YAXHH@Z DD imagerel $LN5
	DD	imagerel $LN5+156
	DD	imagerel $unwind$?ttype_dup_master@@YAXHH@Z
$pdata$?ttype_delete@@YAXPEAU_tele_type_@@@Z DD imagerel $LN8
	DD	imagerel $LN8+173
	DD	imagerel $unwind$?ttype_delete@@YAXPEAU_tele_type_@@@Z
$pdata$?ttype_master_read@@YAXPEAU_vfs_node_@@PEAEI@Z DD imagerel $LN6
	DD	imagerel $LN6+136
	DD	imagerel $unwind$?ttype_master_read@@YAXPEAU_vfs_node_@@PEAEI@Z
$pdata$?ttype_master_write@@YAXPEAU_vfs_node_@@PEAEI@Z DD imagerel $LN8
	DD	imagerel $LN8+237
	DD	imagerel $unwind$?ttype_master_write@@YAXPEAU_vfs_node_@@PEAEI@Z
$pdata$?ttype_slave_read@@YAXPEAU_vfs_node_@@PEAEI@Z DD imagerel $LN6
	DD	imagerel $LN6+161
	DD	imagerel $unwind$?ttype_slave_read@@YAXPEAU_vfs_node_@@PEAEI@Z
$pdata$?ttype_slave_write@@YAXPEAU_vfs_node_@@PEAEI@Z DD imagerel $LN6
	DD	imagerel $LN6+136
	DD	imagerel $unwind$?ttype_slave_write@@YAXPEAU_vfs_node_@@PEAEI@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ttype_create@@YAXPEAH0@Z DD 021101H
	DD	0150111H
$unwind$?get_ttype@@YAPEAU_tele_type_@@H@Z DD 010801H
	DD	02208H
$unwind$?ttype_dup_master@@YAXHH@Z DD 010c01H
	DD	0620cH
$unwind$?ttype_delete@@YAXPEAU_tele_type_@@@Z DD 010901H
	DD	04209H
$unwind$?ttype_master_read@@YAXPEAU_vfs_node_@@PEAEI@Z DD 011301H
	DD	08213H
$unwind$?ttype_master_write@@YAXPEAU_vfs_node_@@PEAEI@Z DD 011301H
	DD	0a213H
$unwind$?ttype_slave_read@@YAXPEAU_vfs_node_@@PEAEI@Z DD 011301H
	DD	08213H
$unwind$?ttype_slave_write@@YAXPEAU_vfs_node_@@PEAEI@Z DD 011301H
	DD	08213H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
i$1 = 32
tv64 = 40
node$ = 48
type$ = 56
file$ = 80
buffer$ = 88
length$ = 96
?ttype_slave_write@@YAXPEAU_vfs_node_@@PEAEI@Z PROC	; ttype_slave_write

; 116  : void ttype_slave_write (vfs_node_t *file, uint8_t* buffer, uint32_t length) {

$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 117  : 	vfs_node_t *node = get_current_thread()->fd[get_current_thread()->slave_fd];

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	QWORD PTR tv64[rsp], rax
	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	movzx	eax, BYTE PTR [rax+749]
	mov	rcx, QWORD PTR tv64[rsp]
	mov	rax, QWORD PTR [rcx+rax*8+264]
	mov	QWORD PTR node$[rsp], rax

; 118  : 	ttype_t *type = (ttype_t*)node->device;

	mov	rax, QWORD PTR node$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR type$[rsp], rax

; 119  : 	for (int i = 0; i < 32; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@ttype_slav
$LN2@ttype_slav:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@ttype_slav:
	cmp	DWORD PTR i$1[rsp], 32			; 00000020H
	jge	SHORT $LN1@ttype_slav

; 120  : 		type->out_buffer[i] = buffer[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR type$[rsp]
	mov	r8, QWORD PTR buffer$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx+97], al
	jmp	SHORT $LN2@ttype_slav
$LN1@ttype_slav:

; 121  : }

	add	rsp, 72					; 00000048H
	ret	0
?ttype_slave_write@@YAXPEAU_vfs_node_@@PEAEI@Z ENDP	; ttype_slave_write
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
i$1 = 32
type$ = 40
tv64 = 48
node$ = 56
file$ = 80
buffer$ = 88
length$ = 96
?ttype_slave_read@@YAXPEAU_vfs_node_@@PEAEI@Z PROC	; ttype_slave_read

; 105  : void ttype_slave_read (vfs_node_t *file, uint8_t* buffer,uint32_t length) {

$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 106  : 	vfs_node_t *node = get_current_thread()->fd[get_current_thread()->slave_fd];

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	QWORD PTR tv64[rsp], rax
	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	movzx	eax, BYTE PTR [rax+749]
	mov	rcx, QWORD PTR tv64[rsp]
	mov	rax, QWORD PTR [rcx+rax*8+264]
	mov	QWORD PTR node$[rsp], rax

; 107  : 	ttype_t *type = (ttype_t*)node->device;

	mov	rax, QWORD PTR node$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR type$[rsp], rax

; 108  : 	for (int i = 0; i < 32; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@ttype_slav
$LN2@ttype_slav:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@ttype_slav:
	cmp	DWORD PTR i$1[rsp], 32			; 00000020H
	jge	SHORT $LN1@ttype_slav

; 109  : 		buffer[i] = type->in_buffer[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	r8, QWORD PTR type$[rsp]
	movzx	eax, BYTE PTR [r8+rax+65]
	mov	BYTE PTR [rdx+rcx], al

; 110  : 		//type->in_buffer[i] = 0;
; 111  : 	}

	jmp	SHORT $LN2@ttype_slav
$LN1@ttype_slav:

; 112  : 	/*if (buffer[1] != 0)*/
; 113  : 	memset(type->in_buffer, 0, 32);

	mov	rax, QWORD PTR type$[rsp]
	add	rax, 65					; 00000041H
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	mov	rcx, rax
	call	?memset@@YAXPEAXEI@Z			; memset

; 114  : }

	add	rsp, 72					; 00000048H
	ret	0
?ttype_slave_read@@YAXPEAU_vfs_node_@@PEAEI@Z ENDP	; ttype_slave_read
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
i$1 = 32
dest$ = 40
type$ = 48
tv65 = 56
node$ = 64
file$ = 96
buffer$ = 104
length$ = 112
?ttype_master_write@@YAXPEAU_vfs_node_@@PEAEI@Z PROC	; ttype_master_write

; 90   : void ttype_master_write (vfs_node_t *file, uint8_t* buffer, uint32_t length) {

$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 91   : 	printf ("Master Writing\n");

	lea	rcx, OFFSET FLAT:$SG3282
	call	?printf@@YAXPEBDZZ			; printf

; 92   : 	vfs_node_t *node = get_current_thread()->fd[get_current_thread()->master_fd];

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	QWORD PTR tv65[rsp], rax
	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	movzx	eax, BYTE PTR [rax+748]
	mov	rcx, QWORD PTR tv65[rsp]
	mov	rax, QWORD PTR [rcx+rax*8+264]
	mov	QWORD PTR node$[rsp], rax

; 93   : 	ttype_t *type = (ttype_t*)node->device;

	mov	rax, QWORD PTR node$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR type$[rsp], rax

; 94   : 	for (int i = 0; i < 32; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN5@ttype_mast
$LN4@ttype_mast:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN5@ttype_mast:
	cmp	DWORD PTR i$1[rsp], 32			; 00000020H
	jge	SHORT $LN3@ttype_mast

; 95   : 		type->in_buffer[i] = buffer[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR type$[rsp]
	mov	r8, QWORD PTR buffer$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx+65], al
	jmp	SHORT $LN4@ttype_mast
$LN3@ttype_mast:

; 96   : 	
; 97   : 	thread_t *dest = thread_iterate_ready_list(type->pid);

	mov	rax, QWORD PTR type$[rsp]
	movzx	ecx, WORD PTR [rax+130]
	call	?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z ; thread_iterate_ready_list
	mov	QWORD PTR dest$[rsp], rax

; 98   : 	if (dest == NULL)

	cmp	QWORD PTR dest$[rsp], 0
	jne	SHORT $LN2@ttype_mast

; 99   : 		dest = thread_iterate_block_list(type->pid);

	mov	rax, QWORD PTR type$[rsp]
	movzx	eax, WORD PTR [rax+130]
	mov	ecx, eax
	call	?thread_iterate_block_list@@YAPEAU_thread_@@H@Z ; thread_iterate_block_list
	mov	QWORD PTR dest$[rsp], rax
$LN2@ttype_mast:

; 100  : 
; 101  : 	if (dest != NULL && dest->state == THREAD_STATE_BLOCKED)

	cmp	QWORD PTR dest$[rsp], 0
	je	SHORT $LN1@ttype_mast
	mov	rax, QWORD PTR dest$[rsp]
	movzx	eax, BYTE PTR [rax+224]
	cmp	eax, 3
	jne	SHORT $LN1@ttype_mast

; 102  : 		unblock_thread(dest);

	mov	rcx, QWORD PTR dest$[rsp]
	call	?unblock_thread@@YAXPEAU_thread_@@@Z	; unblock_thread
$LN1@ttype_mast:

; 103  : }

	add	rsp, 88					; 00000058H
	ret	0
?ttype_master_write@@YAXPEAU_vfs_node_@@PEAEI@Z ENDP	; ttype_master_write
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
i$1 = 32
tv64 = 40
node$ = 48
type$ = 56
file$ = 80
buffer$ = 88
length$ = 96
?ttype_master_read@@YAXPEAU_vfs_node_@@PEAEI@Z PROC	; ttype_master_read

; 81   : void ttype_master_read (vfs_node_t *file, uint8_t* buffer,uint32_t length) {

$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 82   : 	//!Read it from out buffer
; 83   : 	vfs_node_t *node = get_current_thread()->fd[get_current_thread()->master_fd];

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	QWORD PTR tv64[rsp], rax
	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	movzx	eax, BYTE PTR [rax+748]
	mov	rcx, QWORD PTR tv64[rsp]
	mov	rax, QWORD PTR [rcx+rax*8+264]
	mov	QWORD PTR node$[rsp], rax

; 84   : 	ttype_t *type = (ttype_t*)node->device;

	mov	rax, QWORD PTR node$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR type$[rsp], rax

; 85   : 	for (int i = 0; i < 32; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@ttype_mast
$LN2@ttype_mast:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@ttype_mast:
	cmp	DWORD PTR i$1[rsp], 32			; 00000020H
	jge	SHORT $LN1@ttype_mast

; 86   : 		buffer[i] = type->out_buffer[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	r8, QWORD PTR type$[rsp]
	movzx	eax, BYTE PTR [r8+rax+97]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN2@ttype_mast
$LN1@ttype_mast:

; 87   : 
; 88   : }

	add	rsp, 72					; 00000048H
	ret	0
?ttype_master_read@@YAXPEAU_vfs_node_@@PEAEI@Z ENDP	; ttype_master_read
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
tty$ = 48
?ttype_delete@@YAXPEAU_tele_type_@@@Z PROC		; ttype_delete

; 61   : void ttype_delete (ttype_t* tty) {

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 62   : 
; 63   : 	if (root == NULL)

	cmp	QWORD PTR ?root@@3PEAU_tele_type_@@EA, 0 ; root
	jne	SHORT $LN5@ttype_dele

; 64   : 		return;

	jmp	$LN6@ttype_dele
$LN5@ttype_dele:

; 65   : 
; 66   : 	if (tty == root) {

	mov	rax, QWORD PTR ?root@@3PEAU_tele_type_@@EA ; root
	cmp	QWORD PTR tty$[rsp], rax
	jne	SHORT $LN4@ttype_dele

; 67   : 		root = root->next;

	mov	rax, QWORD PTR ?root@@3PEAU_tele_type_@@EA ; root
	mov	rax, QWORD PTR [rax+136]
	mov	QWORD PTR ?root@@3PEAU_tele_type_@@EA, rax ; root

; 68   : 	} else {

	jmp	SHORT $LN3@ttype_dele
$LN4@ttype_dele:

; 69   : 		tty->prev->next = tty->next;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	rcx, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR [rcx+136]
	mov	QWORD PTR [rax+136], rcx
$LN3@ttype_dele:

; 70   : 	}
; 71   : 
; 72   : 	if (tty == last) {

	mov	rax, QWORD PTR ?last@@3PEAU_tele_type_@@EA ; last
	cmp	QWORD PTR tty$[rsp], rax
	jne	SHORT $LN2@ttype_dele

; 73   : 		last = tty->prev;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	QWORD PTR ?last@@3PEAU_tele_type_@@EA, rax ; last

; 74   : 	} else {

	jmp	SHORT $LN1@ttype_dele
$LN2@ttype_dele:

; 75   : 		tty->next->prev = tty->prev;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rax, QWORD PTR [rax+136]
	mov	rcx, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR [rcx+144]
	mov	QWORD PTR [rax+144], rcx
$LN1@ttype_dele:

; 76   : 	}
; 77   : 
; 78   : 	pmmngr_free (tty);

	mov	rcx, QWORD PTR tty$[rsp]
	call	?pmmngr_free@@YAXPEAX@Z			; pmmngr_free
$LN6@ttype_dele:

; 79   : }

	add	rsp, 40					; 00000028H
	ret	0
?ttype_delete@@YAXPEAU_tele_type_@@@Z ENDP		; ttype_delete
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
tty$ = 8
?ttype_insert@@YAXPEAU_tele_type_@@@Z PROC		; ttype_insert

; 46   : void ttype_insert (ttype_t* tty ) {

	mov	QWORD PTR [rsp+8], rcx

; 47   : 	tty->next = NULL;

	mov	rax, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rax+136], 0

; 48   : 	tty->prev = NULL;

	mov	rax, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rax+144], 0

; 49   : 
; 50   : 	if (root == NULL) {

	cmp	QWORD PTR ?root@@3PEAU_tele_type_@@EA, 0 ; root
	jne	SHORT $LN2@ttype_inse

; 51   : 		last = tty;

	mov	rax, QWORD PTR tty$[rsp]
	mov	QWORD PTR ?last@@3PEAU_tele_type_@@EA, rax ; last

; 52   : 		root = tty;

	mov	rax, QWORD PTR tty$[rsp]
	mov	QWORD PTR ?root@@3PEAU_tele_type_@@EA, rax ; root

; 53   : 	} else {

	jmp	SHORT $LN1@ttype_inse
$LN2@ttype_inse:

; 54   : 		last->next = tty;

	mov	rax, QWORD PTR ?last@@3PEAU_tele_type_@@EA ; last
	mov	rcx, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rax+136], rcx

; 55   : 		tty->prev = last;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR ?last@@3PEAU_tele_type_@@EA ; last
	mov	QWORD PTR [rax+144], rcx
$LN1@ttype_inse:

; 56   : 	}
; 57   : 	last = tty;

	mov	rax, QWORD PTR tty$[rsp]
	mov	QWORD PTR ?last@@3PEAU_tele_type_@@EA, rax ; last

; 58   : }

	ret	0
?ttype_insert@@YAXPEAU_tele_type_@@@Z ENDP		; ttype_insert
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
dest$ = 32
node$ = 40
task_id$ = 64
master_fd$ = 72
?ttype_dup_master@@YAXHH@Z PROC				; ttype_dup_master

; 223  : void ttype_dup_master (int task_id, int master_fd) {

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H

; 224  : 	x64_cli();

	call	x64_cli

; 225  : 	vfs_node_t *node = get_current_thread()->fd[master_fd];

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	movsxd	rcx, DWORD PTR master_fd$[rsp]
	mov	rax, QWORD PTR [rax+rcx*8+264]
	mov	QWORD PTR node$[rsp], rax

; 226  : 	thread_t *dest = thread_iterate_ready_list(task_id);

	movzx	ecx, WORD PTR task_id$[rsp]
	call	?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z ; thread_iterate_ready_list
	mov	QWORD PTR dest$[rsp], rax

; 227  : 	if (dest == NULL) {

	cmp	QWORD PTR dest$[rsp], 0
	jne	SHORT $LN2@ttype_dup_

; 228  : 		dest = thread_iterate_block_list(task_id);

	mov	ecx, DWORD PTR task_id$[rsp]
	call	?thread_iterate_block_list@@YAPEAU_thread_@@H@Z ; thread_iterate_block_list
	mov	QWORD PTR dest$[rsp], rax
$LN2@ttype_dup_:

; 229  : 	}
; 230  : 	if (dest != NULL) {

	cmp	QWORD PTR dest$[rsp], 0
	je	SHORT $LN1@ttype_dup_

; 231  : 		dest->fd[1] = node;

	mov	eax, 8
	imul	rax, 1
	mov	rcx, QWORD PTR dest$[rsp]
	mov	rdx, QWORD PTR node$[rsp]
	mov	QWORD PTR [rcx+rax+264], rdx

; 232  : 		dest->fd[2] = node;

	mov	eax, 8
	imul	rax, 2
	mov	rcx, QWORD PTR dest$[rsp]
	mov	rdx, QWORD PTR node$[rsp]
	mov	QWORD PTR [rcx+rax+264], rdx
$LN1@ttype_dup_:

; 233  : 	}
; 234  : 	dest->master_fd = 1;

	mov	rax, QWORD PTR dest$[rsp]
	mov	BYTE PTR [rax+748], 1

; 235  : }

	add	rsp, 56					; 00000038H
	ret	0
?ttype_dup_master@@YAXHH@Z ENDP				; ttype_dup_master
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
tty$1 = 0
id$ = 32
?get_ttype@@YAPEAU_tele_type_@@H@Z PROC			; get_ttype

; 123  : ttype_t * get_ttype (int id) {

$LN8:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 124  : 	if (root != NULL){

	cmp	QWORD PTR ?root@@3PEAU_tele_type_@@EA, 0 ; root
	je	SHORT $LN5@get_ttype

; 125  : 		for (ttype_t* tty = root; tty != NULL; tty = tty->next) {

	mov	rax, QWORD PTR ?root@@3PEAU_tele_type_@@EA ; root
	mov	QWORD PTR tty$1[rsp], rax
	jmp	SHORT $LN4@get_ttype
$LN3@get_ttype:
	mov	rax, QWORD PTR tty$1[rsp]
	mov	rax, QWORD PTR [rax+136]
	mov	QWORD PTR tty$1[rsp], rax
$LN4@get_ttype:
	cmp	QWORD PTR tty$1[rsp], 0
	je	SHORT $LN2@get_ttype

; 126  : 			if (tty->id == id) 

	mov	rax, QWORD PTR tty$1[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, DWORD PTR id$[rsp]
	jne	SHORT $LN1@get_ttype

; 127  : 				return tty;

	mov	rax, QWORD PTR tty$1[rsp]
	jmp	SHORT $LN6@get_ttype
$LN1@get_ttype:

; 128  : 		}

	jmp	SHORT $LN3@get_ttype
$LN2@get_ttype:
$LN5@get_ttype:

; 129  : 	}
; 130  : 	return NULL;

	xor	eax, eax
$LN6@get_ttype:

; 131  : }

	add	rsp, 24
	ret	0
?get_ttype@@YAPEAU_tele_type_@@H@Z ENDP			; get_ttype
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
sn$ = 32
mn$ = 40
i$1 = 48
tty$ = 56
s_value$ = 64
s_fd$ = 68
m_fd$ = 72
m_value$ = 76
master_name$ = 80
slave_name$ = 96
sname$ = 112
mname$ = 128
tv215 = 144
tv226 = 152
master_fd$ = 176
slave_fd$ = 184
?ttype_create@@YAXPEAH0@Z PROC				; ttype_create

; 133  : void ttype_create (int* master_fd, int* slave_fd) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 168				; 000000a8H

; 134  : 	ttype_t *tty= (ttype_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR tty$[rsp], rax

; 135  : 	memset (tty, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR tty$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 136  : 	memset (tty->in_buffer, 0, 32);

	mov	rax, QWORD PTR tty$[rsp]
	add	rax, 65					; 00000041H
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	mov	rcx, rax
	call	?memset@@YAXPEAXEI@Z			; memset

; 137  : 	memset (tty->out_buffer, 0, 32);

	mov	rax, QWORD PTR tty$[rsp]
	add	rax, 97					; 00000061H
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	mov	rcx, rax
	call	?memset@@YAXPEAXEI@Z			; memset

; 138  : 	tty->id = slave_count;

	mov	rax, QWORD PTR tty$[rsp]
	movzx	ecx, BYTE PTR ?slave_count@@3HA
	mov	BYTE PTR [rax], cl

; 139  : 	tty->pid = get_current_thread()->id;

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	rcx, QWORD PTR tty$[rsp]
	movzx	eax, WORD PTR [rax+226]
	mov	WORD PTR [rcx+130], ax

; 140  : 	///! Create the namings
; 141  : 	char m_value[2];
; 142  : 	char s_value[2];
; 143  : 
; 144  : 	sztoa(master_count, m_value,10);

	movsxd	rax, DWORD PTR ?master_count@@3HA	; master_count
	mov	r8d, 10
	lea	rdx, QWORD PTR m_value$[rsp]
	mov	rcx, rax
	call	?sztoa@@YAPEAD_KPEADH@Z			; sztoa

; 145  : 	sztoa(slave_count, s_value,10);

	movsxd	rax, DWORD PTR ?slave_count@@3HA	; slave_count
	mov	r8d, 10
	lea	rdx, QWORD PTR s_value$[rsp]
	mov	rcx, rax
	call	?sztoa@@YAPEAD_KPEADH@Z			; sztoa

; 146  : 
; 147  : 	char master_name[10];
; 148  : 	strcpy(master_name, "ttym");

	lea	rdx, OFFSET FLAT:$SG3335
	lea	rcx, QWORD PTR master_name$[rsp]
	call	?strcpy@@YAPEADPEADPEBD@Z		; strcpy

; 149  : 	strcpy (master_name + strlen(master_name)-1, m_value);

	lea	rcx, QWORD PTR master_name$[rsp]
	call	?strlen@@YA_KPEBD@Z			; strlen
	lea	rax, QWORD PTR master_name$[rsp+rax-1]
	lea	rdx, QWORD PTR m_value$[rsp]
	mov	rcx, rax
	call	?strcpy@@YAPEADPEADPEBD@Z		; strcpy

; 150  : 	
; 151  : 	char mname[10];
; 152  : 	strcpy (mname, "/dev/");

	lea	rdx, OFFSET FLAT:$SG3337
	lea	rcx, QWORD PTR mname$[rsp]
	call	?strcpy@@YAPEADPEADPEBD@Z		; strcpy

; 153  : 	strcpy (mname + strlen(mname)-1, master_name);

	lea	rcx, QWORD PTR mname$[rsp]
	call	?strlen@@YA_KPEBD@Z			; strlen
	lea	rax, QWORD PTR mname$[rsp+rax-1]
	lea	rdx, QWORD PTR master_name$[rsp]
	mov	rcx, rax
	call	?strcpy@@YAPEADPEADPEBD@Z		; strcpy

; 154  : 	
; 155  : 
; 156  : 	///! Master node
; 157  : 	vfs_node_t *mn = (vfs_node_t*)malloc(sizeof(vfs_node_t));

	mov	ecx, 104				; 00000068H
	call	?malloc@@YAPEAXI@Z			; malloc
	mov	QWORD PTR mn$[rsp], rax

; 158  : 	strcpy(mn->filename, master_name);

	mov	rax, QWORD PTR mn$[rsp]
	lea	rdx, QWORD PTR master_name$[rsp]
	mov	rcx, rax
	call	?strcpy@@YAPEADPEADPEBD@Z		; strcpy

; 159  : 	mn->size = 0;

	mov	rax, QWORD PTR mn$[rsp]
	mov	DWORD PTR [rax+32], 0

; 160  : 	mn->eof = 0;

	mov	rax, QWORD PTR mn$[rsp]
	mov	DWORD PTR [rax+36], 0

; 161  : 	mn->pos = 0;

	mov	rax, QWORD PTR mn$[rsp]
	mov	DWORD PTR [rax+40], 0

; 162  : 	mn->current = 0;

	mov	rax, QWORD PTR mn$[rsp]
	mov	DWORD PTR [rax+44], 0

; 163  : 	mn->flags = FS_FLAG_GENERAL;

	mov	rax, QWORD PTR mn$[rsp]
	mov	DWORD PTR [rax+48], 2

; 164  : 	mn->status = 0;

	mov	rax, QWORD PTR mn$[rsp]
	mov	DWORD PTR [rax+52], 0

; 165  : 	mn->open = 0;

	mov	rax, QWORD PTR mn$[rsp]
	mov	QWORD PTR [rax+64], 0

; 166  : 	mn->device = tty;

	mov	rax, QWORD PTR mn$[rsp]
	mov	rcx, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rax+56], rcx

; 167  : 	mn->read = ttype_master_read;

	mov	rax, QWORD PTR mn$[rsp]
	lea	rcx, OFFSET FLAT:?ttype_master_read@@YAXPEAU_vfs_node_@@PEAEI@Z ; ttype_master_read
	mov	QWORD PTR [rax+72], rcx

; 168  : 	mn->write = ttype_master_write;

	mov	rax, QWORD PTR mn$[rsp]
	lea	rcx, OFFSET FLAT:?ttype_master_write@@YAXPEAU_vfs_node_@@PEAEI@Z ; ttype_master_write
	mov	QWORD PTR [rax+80], rcx

; 169  : 	mn->read_blk = 0;

	mov	rax, QWORD PTR mn$[rsp]
	mov	QWORD PTR [rax+88], 0

; 170  : 	mn->ioquery = 0;

	mov	rax, QWORD PTR mn$[rsp]
	mov	QWORD PTR [rax+96], 0

; 171  : 	vfs_mount (mname, mn);

	mov	rdx, QWORD PTR mn$[rsp]
	lea	rcx, QWORD PTR mname$[rsp]
	call	?vfs_mount@@YAXPEADPEAU_vfs_node_@@@Z	; vfs_mount

; 172  : 
; 173  : 	char slave_name[10];
; 174  : 	strcpy(slave_name, "ttys");

	lea	rdx, OFFSET FLAT:$SG3342
	lea	rcx, QWORD PTR slave_name$[rsp]
	call	?strcpy@@YAPEADPEADPEBD@Z		; strcpy

; 175  : 	strcpy (slave_name + strlen(slave_name)-1,s_value);

	lea	rcx, QWORD PTR slave_name$[rsp]
	call	?strlen@@YA_KPEBD@Z			; strlen
	lea	rax, QWORD PTR slave_name$[rsp+rax-1]
	lea	rdx, QWORD PTR s_value$[rsp]
	mov	rcx, rax
	call	?strcpy@@YAPEADPEADPEBD@Z		; strcpy

; 176  : 
; 177  : 	char sname[10];
; 178  : 	strcpy(sname, "/dev/");

	lea	rdx, OFFSET FLAT:$SG3344
	lea	rcx, QWORD PTR sname$[rsp]
	call	?strcpy@@YAPEADPEADPEBD@Z		; strcpy

; 179  : 	strcpy (sname + strlen(sname)-1, slave_name);

	lea	rcx, QWORD PTR sname$[rsp]
	call	?strlen@@YA_KPEBD@Z			; strlen
	lea	rax, QWORD PTR sname$[rsp+rax-1]
	lea	rdx, QWORD PTR slave_name$[rsp]
	mov	rcx, rax
	call	?strcpy@@YAPEADPEADPEBD@Z		; strcpy

; 180  : 
; 181  : 	vfs_node_t *sn = (vfs_node_t*)malloc(sizeof(vfs_node_t));

	mov	ecx, 104				; 00000068H
	call	?malloc@@YAPEAXI@Z			; malloc
	mov	QWORD PTR sn$[rsp], rax

; 182  : 	strcpy(sn->filename, slave_name);

	mov	rax, QWORD PTR sn$[rsp]
	lea	rdx, QWORD PTR slave_name$[rsp]
	mov	rcx, rax
	call	?strcpy@@YAPEADPEADPEBD@Z		; strcpy

; 183  : 	sn->size = 0;

	mov	rax, QWORD PTR sn$[rsp]
	mov	DWORD PTR [rax+32], 0

; 184  : 	sn->eof = 0;

	mov	rax, QWORD PTR sn$[rsp]
	mov	DWORD PTR [rax+36], 0

; 185  : 	sn->pos = 0;

	mov	rax, QWORD PTR sn$[rsp]
	mov	DWORD PTR [rax+40], 0

; 186  : 	sn->current = 0;

	mov	rax, QWORD PTR sn$[rsp]
	mov	DWORD PTR [rax+44], 0

; 187  : 	sn->flags = FS_FLAG_GENERAL;

	mov	rax, QWORD PTR sn$[rsp]
	mov	DWORD PTR [rax+48], 2

; 188  : 	sn->status = 0;

	mov	rax, QWORD PTR sn$[rsp]
	mov	DWORD PTR [rax+52], 0

; 189  : 	sn->open = 0;

	mov	rax, QWORD PTR sn$[rsp]
	mov	QWORD PTR [rax+64], 0

; 190  : 	sn->device = tty;

	mov	rax, QWORD PTR sn$[rsp]
	mov	rcx, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rax+56], rcx

; 191  : 	sn->read = ttype_slave_read;

	mov	rax, QWORD PTR sn$[rsp]
	lea	rcx, OFFSET FLAT:?ttype_slave_read@@YAXPEAU_vfs_node_@@PEAEI@Z ; ttype_slave_read
	mov	QWORD PTR [rax+72], rcx

; 192  : 	sn->write = ttype_slave_write;

	mov	rax, QWORD PTR sn$[rsp]
	lea	rcx, OFFSET FLAT:?ttype_slave_write@@YAXPEAU_vfs_node_@@PEAEI@Z ; ttype_slave_write
	mov	QWORD PTR [rax+80], rcx

; 193  : 	sn->read_blk = 0;

	mov	rax, QWORD PTR sn$[rsp]
	mov	QWORD PTR [rax+88], 0

; 194  : 	sn->ioquery = 0;

	mov	rax, QWORD PTR sn$[rsp]
	mov	QWORD PTR [rax+96], 0

; 195  : 	vfs_mount (sname, sn);

	mov	rdx, QWORD PTR sn$[rsp]
	lea	rcx, QWORD PTR sname$[rsp]
	call	?vfs_mount@@YAXPEADPEAU_vfs_node_@@@Z	; vfs_mount

; 196  : 
; 197  : 	for (int i = 0; i < 32; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@ttype_crea
$LN2@ttype_crea:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@ttype_crea:
	cmp	DWORD PTR i$1[rsp], 32			; 00000020H
	jge	SHORT $LN1@ttype_crea

; 198  : 		tty->m_path[i] = mname[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR tty$[rsp]
	movzx	eax, BYTE PTR mname$[rsp+rax]
	mov	BYTE PTR [rdx+rcx+1], al

; 199  : 		tty->s_path[i] = sname[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR tty$[rsp]
	movzx	eax, BYTE PTR sname$[rsp+rax]
	mov	BYTE PTR [rdx+rcx+33], al

; 200  : 	}

	jmp	SHORT $LN2@ttype_crea
$LN1@ttype_crea:

; 201  : 		
; 202  : 
; 203  : 	//! Allocate fd for master
; 204  : 	int m_fd = get_current_thread()->fd_current;

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	eax, DWORD PTR [rax+744]
	mov	DWORD PTR m_fd$[rsp], eax

; 205  : 	get_current_thread()->fd[m_fd] = mn;

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	movsxd	rcx, DWORD PTR m_fd$[rsp]
	mov	rdx, QWORD PTR mn$[rsp]
	mov	QWORD PTR [rax+rcx*8+264], rdx

; 206  : 	get_current_thread()->fd_current++;

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	add	rax, 744				; 000002e8H
	mov	QWORD PTR tv215[rsp], rax
	mov	rax, QWORD PTR tv215[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR tv215[rsp]
	mov	DWORD PTR [rcx], eax

; 207  : 
; 208  : 	//! Allocate fd for slave
; 209  : 	int s_fd = get_current_thread()->fd_current;

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	eax, DWORD PTR [rax+744]
	mov	DWORD PTR s_fd$[rsp], eax

; 210  : 	get_current_thread()->fd[s_fd] = sn;

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	movsxd	rcx, DWORD PTR s_fd$[rsp]
	mov	rdx, QWORD PTR sn$[rsp]
	mov	QWORD PTR [rax+rcx*8+264], rdx

; 211  : 	get_current_thread()->fd_current++;

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	add	rax, 744				; 000002e8H
	mov	QWORD PTR tv226[rsp], rax
	mov	rax, QWORD PTR tv226[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR tv226[rsp]
	mov	DWORD PTR [rcx], eax

; 212  : 
; 213  : 	get_current_thread()->master_fd = m_fd;

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	movzx	ecx, BYTE PTR m_fd$[rsp]
	mov	BYTE PTR [rax+748], cl

; 214  : 	get_current_thread()->slave_fd = s_fd;

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	movzx	ecx, BYTE PTR s_fd$[rsp]
	mov	BYTE PTR [rax+749], cl

; 215  : 
; 216  : 	ttype_insert (tty);

	mov	rcx, QWORD PTR tty$[rsp]
	call	?ttype_insert@@YAXPEAU_tele_type_@@@Z	; ttype_insert

; 217  : 	master_count++;

	mov	eax, DWORD PTR ?master_count@@3HA	; master_count
	inc	eax
	mov	DWORD PTR ?master_count@@3HA, eax	; master_count

; 218  : 	slave_count++;

	mov	eax, DWORD PTR ?slave_count@@3HA	; slave_count
	inc	eax
	mov	DWORD PTR ?slave_count@@3HA, eax	; slave_count

; 219  : 	*master_fd = m_fd;

	mov	rax, QWORD PTR master_fd$[rsp]
	mov	ecx, DWORD PTR m_fd$[rsp]
	mov	DWORD PTR [rax], ecx

; 220  : 	*slave_fd = s_fd;

	mov	rax, QWORD PTR slave_fd$[rsp]
	mov	ecx, DWORD PTR s_fd$[rsp]
	mov	DWORD PTR [rax], ecx

; 221  : }

	add	rsp, 168				; 000000a8H
	ret	0
?ttype_create@@YAXPEAH0@Z ENDP				; ttype_create
_TEXT	ENDS
END
