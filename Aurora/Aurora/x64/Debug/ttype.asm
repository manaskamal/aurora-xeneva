; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?master_count@@3HA				; master_count
PUBLIC	?slave_count@@3HA				; slave_count
PUBLIC	?root@@3PEAU_tele_type_@@EA			; root
PUBLIC	?last@@3PEAU_tele_type_@@EA			; last
_BSS	SEGMENT
?master_count@@3HA DD 01H DUP (?)			; master_count
?slave_count@@3HA DD 01H DUP (?)			; slave_count
?root@@3PEAU_tele_type_@@EA DQ 01H DUP (?)		; root
?last@@3PEAU_tele_type_@@EA DQ 01H DUP (?)		; last
_BSS	ENDS
CONST	SEGMENT
$SG3716	DB	'/dev/', 00H
	ORG $+2
$SG3717	DB	'ttym', 00H
	ORG $+3
$SG3725	DB	'/dev/', 00H
	ORG $+2
$SG3726	DB	'ttys', 00H
CONST	ENDS
PUBLIC	?ttype_init@@YAXXZ				; ttype_init
PUBLIC	?ttype_create_master@@YAPEAU_vfs_node_@@PEAU_tele_type_@@@Z ; ttype_create_master
PUBLIC	?ttype_create_slave@@YAPEAU_vfs_node_@@PEAU_tele_type_@@@Z ; ttype_create_slave
PUBLIC	?ttype_create@@YAHPEAH0@Z			; ttype_create
PUBLIC	?get_ttype@@YAPEAU_tele_type_@@H@Z		; get_ttype
PUBLIC	?ttype_insert@@YAXPEAU_tele_type_@@@Z		; ttype_insert
PUBLIC	?ttype_delete@@YAXPEAU_tele_type_@@@Z		; ttype_delete
PUBLIC	?ttype_master_read@@YA_KPEAU_vfs_node_@@PEA_KI@Z ; ttype_master_read
PUBLIC	?ttype_master_write@@YAXPEAU_vfs_node_@@PEA_KI@Z ; ttype_master_write
PUBLIC	?ttype_slave_read@@YA_KPEAU_vfs_node_@@PEA_KI@Z	; ttype_slave_read
PUBLIC	?ttype_slave_write@@YAXPEAU_vfs_node_@@PEA_KI@Z	; ttype_slave_write
PUBLIC	?tty_ioquery@@YAHPEAU_vfs_node_@@HPEAX@Z	; tty_ioquery
EXTRN	strcpy:PROC
EXTRN	memset:PROC
EXTRN	vfs_mount:PROC
EXTRN	?circ_buf_init@@YAPEAU_circ_buf_@@PEAE_K@Z:PROC	; circ_buf_init
EXTRN	?circular_buf_put2@@YAHPEAU_circ_buf_@@E@Z:PROC	; circular_buf_put2
EXTRN	?circular_buf_get@@YAHPEAU_circ_buf_@@PEAE@Z:PROC ; circular_buf_get
EXTRN	?circular_buf_empty@@YA_NPEAU_circ_buf_@@@Z:PROC ; circular_buf_empty
EXTRN	?circular_buf_full@@YA_NPEAU_circ_buf_@@@Z:PROC	; circular_buf_full
EXTRN	x64_cli:PROC
EXTRN	malloc:PROC
EXTRN	free:PROC
EXTRN	?sztoa@@YAPEAD_KPEADH@Z:PROC			; sztoa
EXTRN	get_current_thread:PROC
pdata	SEGMENT
$pdata$?ttype_create_master@@YAPEAU_vfs_node_@@PEAU_tele_type_@@@Z DD imagerel $LN3
	DD	imagerel $LN3+298
	DD	imagerel $unwind$?ttype_create_master@@YAPEAU_vfs_node_@@PEAU_tele_type_@@@Z
$pdata$?ttype_create_slave@@YAPEAU_vfs_node_@@PEAU_tele_type_@@@Z DD imagerel $LN3
	DD	imagerel $LN3+298
	DD	imagerel $unwind$?ttype_create_slave@@YAPEAU_vfs_node_@@PEAU_tele_type_@@@Z
$pdata$?ttype_create@@YAHPEAH0@Z DD imagerel $LN3
	DD	imagerel $LN3+804
	DD	imagerel $unwind$?ttype_create@@YAHPEAH0@Z
$pdata$?get_ttype@@YAPEAU_tele_type_@@H@Z DD imagerel $LN8
	DD	imagerel $LN8+78
	DD	imagerel $unwind$?get_ttype@@YAPEAU_tele_type_@@H@Z
$pdata$?ttype_delete@@YAXPEAU_tele_type_@@@Z DD imagerel $LN8
	DD	imagerel $LN8+146
	DD	imagerel $unwind$?ttype_delete@@YAXPEAU_tele_type_@@@Z
$pdata$?ttype_master_read@@YA_KPEAU_vfs_node_@@PEA_KI@Z DD imagerel $LN7
	DD	imagerel $LN7+184
	DD	imagerel $unwind$?ttype_master_read@@YA_KPEAU_vfs_node_@@PEA_KI@Z
$pdata$?ttype_master_write@@YAXPEAU_vfs_node_@@PEA_KI@Z DD imagerel $LN6
	DD	imagerel $LN6+113
	DD	imagerel $unwind$?ttype_master_write@@YAXPEAU_vfs_node_@@PEA_KI@Z
$pdata$?ttype_slave_read@@YA_KPEAU_vfs_node_@@PEA_KI@Z DD imagerel $LN6
	DD	imagerel $LN6+123
	DD	imagerel $unwind$?ttype_slave_read@@YA_KPEAU_vfs_node_@@PEA_KI@Z
$pdata$?ttype_slave_write@@YAXPEAU_vfs_node_@@PEA_KI@Z DD imagerel $LN8
	DD	imagerel $LN8+172
	DD	imagerel $unwind$?ttype_slave_write@@YAXPEAU_vfs_node_@@PEA_KI@Z
$pdata$?tty_ioquery@@YAHPEAU_vfs_node_@@HPEAX@Z DD imagerel $LN8
	DD	imagerel $LN8+281
	DD	imagerel $unwind$?tty_ioquery@@YAHPEAU_vfs_node_@@HPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ttype_create_master@@YAPEAU_vfs_node_@@PEAU_tele_type_@@@Z DD 010901H
	DD	08209H
$unwind$?ttype_create_slave@@YAPEAU_vfs_node_@@PEAU_tele_type_@@@Z DD 010901H
	DD	08209H
$unwind$?ttype_create@@YAHPEAH0@Z DD 010e01H
	DD	0c20eH
$unwind$?get_ttype@@YAPEAU_tele_type_@@H@Z DD 010801H
	DD	02208H
$unwind$?ttype_delete@@YAXPEAU_tele_type_@@@Z DD 010901H
	DD	04209H
$unwind$?ttype_master_read@@YA_KPEAU_vfs_node_@@PEA_KI@Z DD 011301H
	DD	08213H
$unwind$?ttype_master_write@@YAXPEAU_vfs_node_@@PEA_KI@Z DD 011301H
	DD	08213H
$unwind$?ttype_slave_read@@YA_KPEAU_vfs_node_@@PEA_KI@Z DD 011301H
	DD	08213H
$unwind$?ttype_slave_write@@YAXPEAU_vfs_node_@@PEA_KI@Z DD 011301H
	DD	08213H
$unwind$?tty_ioquery@@YAHPEAU_vfs_node_@@HPEAX@Z DD 011201H
	DD	08212H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
tv65 = 32
tty$ = 40
sz$1 = 48
sz$2 = 56
file$ = 80
code$ = 88
arg$ = 96
?tty_ioquery@@YAHPEAU_vfs_node_@@HPEAX@Z PROC		; tty_ioquery

; 196  : int tty_ioquery (vfs_node_t *file, int code, void *arg){

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 197  : 	x64_cli();

	call	x64_cli

; 198  : 	ttype_t *tty = (ttype_t*)file->device;

	mov	rax, QWORD PTR file$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR tty$[rsp], rax

; 199  : 
; 200  : 	switch(code) {

	mov	eax, DWORD PTR code$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 21505		; 00005401H
	je	SHORT $LN2@tty_ioquer
	cmp	DWORD PTR tv65[rsp], 21506		; 00005402H
	je	SHORT $LN3@tty_ioquer
	cmp	DWORD PTR tv65[rsp], 21509		; 00005405H
	je	$LN1@tty_ioquer
	jmp	$LN4@tty_ioquer
$LN3@tty_ioquer:

; 201  : 	case TIOCSWINSZ: {
; 202  : 		winsize_t *sz = (winsize_t*)arg;

	mov	rax, QWORD PTR arg$[rsp]
	mov	QWORD PTR sz$1[rsp], rax

; 203  : 		tty->size.ws_col = sz->ws_col;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR sz$1[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax+4], cx

; 204  : 		tty->size.ws_row = sz->ws_row;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR sz$1[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax+2], cx

; 205  : 		tty->size.ws_xpixel = sz->ws_xpixel;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR sz$1[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+6], cx

; 206  : 		tty->size.ws_ypixel = sz->ws_ypixel;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR sz$1[rsp]
	movzx	ecx, WORD PTR [rcx+6]
	mov	WORD PTR [rax+8], cx

; 207  : 		break;

	jmp	SHORT $LN4@tty_ioquer
$LN2@tty_ioquer:

; 208  :     }
; 209  : 	case TIOCGWINSZ:{
; 210  : 		winsize_t *sz = (winsize_t*)arg;

	mov	rax, QWORD PTR arg$[rsp]
	mov	QWORD PTR sz$2[rsp], rax

; 211  : 		sz->ws_col = tty->size.ws_col;

	mov	rax, QWORD PTR sz$2[rsp]
	mov	rcx, QWORD PTR tty$[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+2], cx

; 212  : 		sz->ws_row = tty->size.ws_row;

	mov	rax, QWORD PTR sz$2[rsp]
	mov	rcx, QWORD PTR tty$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	mov	WORD PTR [rax], cx

; 213  : 		sz->ws_xpixel = tty->size.ws_xpixel;

	mov	rax, QWORD PTR sz$2[rsp]
	mov	rcx, QWORD PTR tty$[rsp]
	movzx	ecx, WORD PTR [rcx+6]
	mov	WORD PTR [rax+4], cx

; 214  : 		sz->ws_ypixel = tty->size.ws_ypixel;

	mov	rax, QWORD PTR sz$2[rsp]
	mov	rcx, QWORD PTR tty$[rsp]
	movzx	ecx, WORD PTR [rcx+8]
	mov	WORD PTR [rax+6], cx

; 215  : 		break;

	jmp	SHORT $LN4@tty_ioquer
$LN1@tty_ioquer:

; 216  : 	}
; 217  : 
; 218  : 	case TIOSPGRP: {
; 219  : 		tty->slave_pid = get_current_thread()->id;

	call	get_current_thread
	mov	rcx, QWORD PTR tty$[rsp]
	movzx	eax, WORD PTR [rax+242]
	mov	WORD PTR [rcx+98], ax
$LN4@tty_ioquer:

; 220  : 		break;
; 221  : 	}
; 222  : 	}
; 223  : 
; 224  : 	return AU_SUCCESS;

	mov	eax, 1

; 225  : }

	add	rsp, 72					; 00000048H
	ret	0
?tty_ioquery@@YAHPEAU_vfs_node_@@HPEAX@Z ENDP		; tty_ioquery
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
i$1 = 32
type$ = 40
aligned_buffer$ = 48
file$ = 80
buffer$ = 88
length$ = 96
?ttype_slave_write@@YAXPEAU_vfs_node_@@PEA_KI@Z PROC	; ttype_slave_write

; 163  : void ttype_slave_write (vfs_node_t *file, uint64_t* buffer, uint32_t length) {

$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 164  : 	x64_cli();

	call	x64_cli

; 165  : 	uint8_t* aligned_buffer = (uint8_t*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR aligned_buffer$[rsp], rax

; 166  : 	ttype_t *type = (ttype_t*)file->device;

	mov	rax, QWORD PTR file$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR type$[rsp], rax

; 167  : 	if (length > 512)

	cmp	DWORD PTR length$[rsp], 512		; 00000200H
	jbe	SHORT $LN5@ttype_slav

; 168  : 		length = 512;

	mov	DWORD PTR length$[rsp], 512		; 00000200H
$LN5@ttype_slav:

; 169  : 
; 170  : 	if (circular_buf_full(type->master_buffer)){

	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	?circular_buf_full@@YA_NPEAU_circ_buf_@@@Z ; circular_buf_full
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@ttype_slav

; 171  : 		return;

	jmp	SHORT $LN6@ttype_slav
$LN4@ttype_slav:

; 172  : 	}
; 173  : 	for (int i = 0; i < length; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@ttype_slav
$LN2@ttype_slav:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@ttype_slav:
	mov	eax, DWORD PTR length$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN1@ttype_slav

; 174  : 		circular_buf_put2(type->master_buffer,aligned_buffer[i]);

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR aligned_buffer$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	?circular_buf_put2@@YAHPEAU_circ_buf_@@E@Z ; circular_buf_put2

; 175  : 		type->master_written++;

	mov	rax, QWORD PTR type$[rsp]
	mov	eax, DWORD PTR [rax+88]
	inc	eax
	mov	rcx, QWORD PTR type$[rsp]
	mov	DWORD PTR [rcx+88], eax

; 176  : 	}

	jmp	SHORT $LN2@ttype_slav
$LN1@ttype_slav:
$LN6@ttype_slav:

; 177  : }

	add	rsp, 72					; 00000048H
	ret	0
?ttype_slave_write@@YAXPEAU_vfs_node_@@PEA_KI@Z ENDP	; ttype_slave_write
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
i$1 = 32
aligned_buffer$ = 40
type$ = 48
file$ = 80
buffer$ = 88
length$ = 96
?ttype_slave_read@@YA_KPEAU_vfs_node_@@PEA_KI@Z PROC	; ttype_slave_read

; 147  : size_t ttype_slave_read (vfs_node_t *file, uint64_t* buffer,uint32_t length) {

$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 148  : 	x64_cli();

	call	x64_cli

; 149  : 	uint8_t* aligned_buffer = (uint8_t*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR aligned_buffer$[rsp], rax

; 150  : 	/* get the ttype */
; 151  : 	ttype_t *type = (ttype_t*)file->device;

	mov	rax, QWORD PTR file$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR type$[rsp], rax

; 152  : 
; 153  : 	//! lets read everything that has been written 
; 154  : 	//! by child, be carefull we only read that much
; 155  : 	//! that have been written by child process
; 156  : 	for (int i = 0; i < length; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@ttype_slav
$LN2@ttype_slav:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@ttype_slav:
	mov	eax, DWORD PTR length$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN1@ttype_slav

; 157  : 		circular_buf_get(type->slave_buffer,&aligned_buffer[i]);

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR aligned_buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR [rax+80]
	call	?circular_buf_get@@YAHPEAU_circ_buf_@@PEAE@Z ; circular_buf_get

; 158  : 	}

	jmp	SHORT $LN2@ttype_slav
$LN1@ttype_slav:

; 159  : 
; 160  : 	return 1;

	mov	eax, 1

; 161  : }

	add	rsp, 72					; 00000048H
	ret	0
?ttype_slave_read@@YA_KPEAU_vfs_node_@@PEA_KI@Z ENDP	; ttype_slave_read
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
i$1 = 32
type$ = 40
aligned_buffer$ = 48
file$ = 80
buffer$ = 88
length$ = 96
?ttype_master_write@@YAXPEAU_vfs_node_@@PEA_KI@Z PROC	; ttype_master_write

; 127  : void ttype_master_write (vfs_node_t *file, uint64_t* buffer, uint32_t length) {

$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 128  : 	x64_cli();

	call	x64_cli

; 129  : 
; 130  : 	uint8_t* aligned_buffer = (uint8_t*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR aligned_buffer$[rsp], rax

; 131  : 	//! get the master node from the child process
; 132  : 	ttype_t *type = (ttype_t*)file->device;

	mov	rax, QWORD PTR file$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR type$[rsp], rax

; 133  : 
; 134  : 	//! so finally we now use the type buffer to store our text data
; 135  : 	for (int i = 0; i < length; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@ttype_mast
$LN2@ttype_mast:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@ttype_mast:
	mov	eax, DWORD PTR length$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN1@ttype_mast

; 136  : 		circular_buf_put2(type->slave_buffer,buffer[i]);

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	edx, BYTE PTR [rcx+rax*8]
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR [rax+80]
	call	?circular_buf_put2@@YAHPEAU_circ_buf_@@E@Z ; circular_buf_put2

; 137  : 	}

	jmp	SHORT $LN2@ttype_mast
$LN1@ttype_mast:

; 138  : }

	add	rsp, 72					; 00000048H
	ret	0
?ttype_master_write@@YAXPEAU_vfs_node_@@PEA_KI@Z ENDP	; ttype_master_write
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
i$1 = 32
type$ = 40
bytes_to_ret$ = 48
aligned_buffer$ = 56
file$ = 80
buffer$ = 88
length$ = 96
?ttype_master_read@@YA_KPEAU_vfs_node_@@PEA_KI@Z PROC	; ttype_master_read

; 102  : size_t ttype_master_read (vfs_node_t *file, uint64_t* buffer,uint32_t length) {

$LN7:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 103  : 	//!Read it from out buffer
; 104  : 	ttype_t *type = (ttype_t*)file->device;

	mov	rax, QWORD PTR file$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR type$[rsp], rax

; 105  : 
; 106  : 	size_t bytes_to_ret = 0;

	mov	QWORD PTR bytes_to_ret$[rsp], 0

; 107  : 	uint8_t* aligned_buffer = (uint8_t*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR aligned_buffer$[rsp], rax

; 108  : 
; 109  : 	if (circular_buf_empty(type->master_buffer))

	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	?circular_buf_empty@@YA_NPEAU_circ_buf_@@@Z ; circular_buf_empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@ttype_mast

; 110  : 		return bytes_to_ret;

	mov	rax, QWORD PTR bytes_to_ret$[rsp]
	jmp	SHORT $LN5@ttype_mast
$LN4@ttype_mast:

; 111  : 
; 112  : 	for (int i = 0; i < type->master_written; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@ttype_mast
$LN2@ttype_mast:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@ttype_mast:
	mov	rax, QWORD PTR type$[rsp]
	mov	eax, DWORD PTR [rax+88]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN1@ttype_mast

; 113  : 		circular_buf_get(type->master_buffer,&aligned_buffer[i]);

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR aligned_buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	?circular_buf_get@@YAHPEAU_circ_buf_@@PEAE@Z ; circular_buf_get

; 114  : 		bytes_to_ret++;

	mov	rax, QWORD PTR bytes_to_ret$[rsp]
	inc	rax
	mov	QWORD PTR bytes_to_ret$[rsp], rax

; 115  : 	}

	jmp	SHORT $LN2@ttype_mast
$LN1@ttype_mast:

; 116  : 	type->master_written = 0;

	mov	rax, QWORD PTR type$[rsp]
	mov	DWORD PTR [rax+88], 0

; 117  : 
; 118  : 	return bytes_to_ret;

	mov	rax, QWORD PTR bytes_to_ret$[rsp]
$LN5@ttype_mast:

; 119  : }

	add	rsp, 72					; 00000048H
	ret	0
?ttype_master_read@@YA_KPEAU_vfs_node_@@PEA_KI@Z ENDP	; ttype_master_read
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
tty$ = 48
?ttype_delete@@YAXPEAU_tele_type_@@@Z PROC		; ttype_delete

; 76   : void ttype_delete (ttype_t* tty) {

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 77   : 
; 78   : 	if (root == NULL)

	cmp	QWORD PTR ?root@@3PEAU_tele_type_@@EA, 0 ; root
	jne	SHORT $LN5@ttype_dele

; 79   : 		return;

	jmp	SHORT $LN6@ttype_dele
$LN5@ttype_dele:

; 80   : 
; 81   : 	if (tty == root) {

	mov	rax, QWORD PTR ?root@@3PEAU_tele_type_@@EA ; root
	cmp	QWORD PTR tty$[rsp], rax
	jne	SHORT $LN4@ttype_dele

; 82   : 		root = root->next;

	mov	rax, QWORD PTR ?root@@3PEAU_tele_type_@@EA ; root
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR ?root@@3PEAU_tele_type_@@EA, rax ; root

; 83   : 	} else {

	jmp	SHORT $LN3@ttype_dele
$LN4@ttype_dele:

; 84   : 		tty->prev->next = tty->next;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	rcx, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR [rcx+104]
	mov	QWORD PTR [rax+104], rcx
$LN3@ttype_dele:

; 85   : 	}
; 86   : 
; 87   : 	if (tty == last) {

	mov	rax, QWORD PTR ?last@@3PEAU_tele_type_@@EA ; last
	cmp	QWORD PTR tty$[rsp], rax
	jne	SHORT $LN2@ttype_dele

; 88   : 		last = tty->prev;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR ?last@@3PEAU_tele_type_@@EA, rax ; last

; 89   : 	} else {

	jmp	SHORT $LN1@ttype_dele
$LN2@ttype_dele:

; 90   : 		tty->next->prev = tty->prev;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	rcx, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR [rcx+112]
	mov	QWORD PTR [rax+112], rcx
$LN1@ttype_dele:

; 91   : 	}
; 92   : 
; 93   : 	free(tty);

	mov	rcx, QWORD PTR tty$[rsp]
	call	free
$LN6@ttype_dele:

; 94   : }

	add	rsp, 40					; 00000028H
	ret	0
?ttype_delete@@YAXPEAU_tele_type_@@@Z ENDP		; ttype_delete
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
tty$ = 8
?ttype_insert@@YAXPEAU_tele_type_@@@Z PROC		; ttype_insert

; 60   : void ttype_insert (ttype_t* tty ) {

	mov	QWORD PTR [rsp+8], rcx

; 61   : 	tty->next = NULL;

	mov	rax, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rax+104], 0

; 62   : 	tty->prev = NULL;

	mov	rax, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rax+112], 0

; 63   : 
; 64   : 	if (root == NULL) {

	cmp	QWORD PTR ?root@@3PEAU_tele_type_@@EA, 0 ; root
	jne	SHORT $LN2@ttype_inse

; 65   : 		last = tty;

	mov	rax, QWORD PTR tty$[rsp]
	mov	QWORD PTR ?last@@3PEAU_tele_type_@@EA, rax ; last

; 66   : 		root = tty;

	mov	rax, QWORD PTR tty$[rsp]
	mov	QWORD PTR ?root@@3PEAU_tele_type_@@EA, rax ; root

; 67   : 		//_debug_print_ ("**TTY ROOT WAS NULL \r\n");
; 68   : 	} else {

	jmp	SHORT $LN1@ttype_inse
$LN2@ttype_inse:

; 69   : 		last->next = tty;

	mov	rax, QWORD PTR ?last@@3PEAU_tele_type_@@EA ; last
	mov	rcx, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rax+104], rcx

; 70   : 		tty->prev = last;

	mov	rax, QWORD PTR tty$[rsp]
	mov	rcx, QWORD PTR ?last@@3PEAU_tele_type_@@EA ; last
	mov	QWORD PTR [rax+112], rcx
$LN1@ttype_inse:

; 71   : 	}
; 72   : 	last = tty;

	mov	rax, QWORD PTR tty$[rsp]
	mov	QWORD PTR ?last@@3PEAU_tele_type_@@EA, rax ; last

; 73   : }

	ret	0
?ttype_insert@@YAXPEAU_tele_type_@@@Z ENDP		; ttype_insert
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
tty$1 = 0
id$ = 32
?get_ttype@@YAPEAU_tele_type_@@H@Z PROC			; get_ttype

; 179  : ttype_t * get_ttype (int id) {

$LN8:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 180  : 	if (root != NULL){

	cmp	QWORD PTR ?root@@3PEAU_tele_type_@@EA, 0 ; root
	je	SHORT $LN5@get_ttype

; 181  : 		for (ttype_t* tty = root; tty != NULL; tty = tty->next) {

	mov	rax, QWORD PTR ?root@@3PEAU_tele_type_@@EA ; root
	mov	QWORD PTR tty$1[rsp], rax
	jmp	SHORT $LN4@get_ttype
$LN3@get_ttype:
	mov	rax, QWORD PTR tty$1[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR tty$1[rsp], rax
$LN4@get_ttype:
	cmp	QWORD PTR tty$1[rsp], 0
	je	SHORT $LN2@get_ttype

; 182  : 			if (tty->id == id) 

	mov	rax, QWORD PTR tty$1[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, DWORD PTR id$[rsp]
	jne	SHORT $LN1@get_ttype

; 183  : 				return tty;

	mov	rax, QWORD PTR tty$1[rsp]
	jmp	SHORT $LN6@get_ttype
$LN1@get_ttype:

; 184  : 		}

	jmp	SHORT $LN3@get_ttype
$LN2@get_ttype:
$LN5@get_ttype:

; 185  : 	}
; 186  : 	return NULL;

	xor	eax, eax
$LN6@get_ttype:

; 187  : }

	add	rsp, 24
	ret	0
?get_ttype@@YAPEAU_tele_type_@@H@Z ENDP			; get_ttype
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
tty$ = 32
s_fd$ = 40
m_fd$ = 44
master$ = 48
inbuffer$ = 56
tv200 = 64
tv211 = 72
outbuffer$ = 80
slave$ = 88
master_fd$ = 112
slave_fd$ = 120
?ttype_create@@YAHPEAH0@Z PROC				; ttype_create

; 298  : int ttype_create (int* master_fd, int* slave_fd) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H

; 299  : 	x64_cli();

	call	x64_cli

; 300  : 
; 301  : 	ttype_t *tty= (ttype_t*)malloc(sizeof(ttype_t)); 

	mov	ecx, 120				; 00000078H
	call	malloc
	mov	QWORD PTR tty$[rsp], rax

; 302  : 	void* inbuffer = malloc(512);

	mov	ecx, 512				; 00000200H
	call	malloc
	mov	QWORD PTR inbuffer$[rsp], rax

; 303  : 	memset(inbuffer, 0, 512);

	mov	r8d, 512				; 00000200H
	xor	edx, edx
	mov	rcx, QWORD PTR inbuffer$[rsp]
	call	memset

; 304  : 	void* outbuffer = malloc(512);

	mov	ecx, 512				; 00000200H
	call	malloc
	mov	QWORD PTR outbuffer$[rsp], rax

; 305  : 	memset(outbuffer, 0, 512);

	mov	r8d, 512				; 00000200H
	xor	edx, edx
	mov	rcx, QWORD PTR outbuffer$[rsp]
	call	memset

; 306  : 
; 307  : 	tty->master_buffer = circ_buf_init((uint8_t*)inbuffer,512);

	mov	edx, 512				; 00000200H
	mov	rcx, QWORD PTR inbuffer$[rsp]
	call	?circ_buf_init@@YAPEAU_circ_buf_@@PEAE_K@Z ; circ_buf_init
	mov	rcx, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rcx+72], rax

; 308  : 	tty->slave_buffer = circ_buf_init((uint8_t*)outbuffer,512);

	mov	edx, 512				; 00000200H
	mov	rcx, QWORD PTR outbuffer$[rsp]
	call	?circ_buf_init@@YAPEAU_circ_buf_@@PEAE_K@Z ; circ_buf_init
	mov	rcx, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rcx+80], rax

; 309  : 	tty->id = slave_count;

	mov	rax, QWORD PTR tty$[rsp]
	movzx	ecx, BYTE PTR ?slave_count@@3HA
	mov	BYTE PTR [rax], cl

; 310  : 	tty->master_written = 0;

	mov	rax, QWORD PTR tty$[rsp]
	mov	DWORD PTR [rax+88], 0

; 311  : 	tty->slave_written = 0;

	mov	rax, QWORD PTR tty$[rsp]
	mov	DWORD PTR [rax+92], 0

; 312  : 
; 313  : 	tty->term.c_iflag = ICRNL | BRKINT;

	mov	rax, QWORD PTR tty$[rsp]
	mov	DWORD PTR [rax+12], 258			; 00000102H

; 314  : 	tty->term.c_oflag = ONLCR | OPOST;

	mov	rax, QWORD PTR tty$[rsp]
	mov	DWORD PTR [rax+16], 5

; 315  : 	tty->term.c_lflag = ECHO | ECHOE | ECHOK | ICANON | ISIG | IEXTEN;

	mov	rax, QWORD PTR tty$[rsp]
	mov	DWORD PTR [rax+24], 32827		; 0000803bH

; 316  : 	tty->term.c_cflag = CREAD | CS8;

	mov	rax, QWORD PTR tty$[rsp]
	mov	DWORD PTR [rax+20], 176			; 000000b0H

; 317  : 	tty->term.c_cc[VEOF] = 4;

	mov	eax, 1
	imul	rax, 4
	mov	rcx, QWORD PTR tty$[rsp]
	mov	BYTE PTR [rcx+rax+29], 4

; 318  : 	tty->term.c_cc[VEOL] = 0;

	mov	eax, 1
	imul	rax, 11
	mov	rcx, QWORD PTR tty$[rsp]
	mov	BYTE PTR [rcx+rax+29], 0

; 319  : 	tty->term.c_cc[VERASE] = 0x7f;

	mov	eax, 1
	imul	rax, 2
	mov	rcx, QWORD PTR tty$[rsp]
	mov	BYTE PTR [rcx+rax+29], 127		; 0000007fH

; 320  : 	tty->term.c_cc[VINTR] = 3;

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR tty$[rsp]
	mov	BYTE PTR [rcx+rax+29], 3

; 321  : 	tty->term.c_cc[VKILL] = 21;

	mov	eax, 1
	imul	rax, 3
	mov	rcx, QWORD PTR tty$[rsp]
	mov	BYTE PTR [rcx+rax+29], 21

; 322  : 	tty->term.c_cc[VMIN] = 1;

	mov	eax, 1
	imul	rax, 6
	mov	rcx, QWORD PTR tty$[rsp]
	mov	BYTE PTR [rcx+rax+29], 1

; 323  : 	tty->term.c_cc[VQUIT] = 28;

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR tty$[rsp]
	mov	BYTE PTR [rcx+rax+29], 28

; 324  : 	tty->term.c_cc[VSTART] = 17;

	mov	eax, 1
	imul	rax, 8
	mov	rcx, QWORD PTR tty$[rsp]
	mov	BYTE PTR [rcx+rax+29], 17

; 325  : 	tty->term.c_cc[VSTOP] = 19;

	mov	eax, 1
	imul	rax, 9
	mov	rcx, QWORD PTR tty$[rsp]
	mov	BYTE PTR [rcx+rax+29], 19

; 326  : 	tty->term.c_cc[VSUSP] = 26;

	mov	eax, 1
	imul	rax, 10
	mov	rcx, QWORD PTR tty$[rsp]
	mov	BYTE PTR [rcx+rax+29], 26

; 327  : 	tty->term.c_cc[VTIME] = 0;

	mov	eax, 1
	imul	rax, 5
	mov	rcx, QWORD PTR tty$[rsp]
	mov	BYTE PTR [rcx+rax+29], 0

; 328  : 	tty->term.c_cc[VLNEXT] = 22;

	mov	eax, 1
	imul	rax, 15
	mov	rcx, QWORD PTR tty$[rsp]
	mov	BYTE PTR [rcx+rax+29], 22

; 329  : 	tty->term.c_cc[VWERASE] = 23;

	mov	eax, 1
	imul	rax, 14
	mov	rcx, QWORD PTR tty$[rsp]
	mov	BYTE PTR [rcx+rax+29], 23

; 330  : 
; 331  : 	tty->size.ws_col = 25;

	mov	eax, 25
	mov	rcx, QWORD PTR tty$[rsp]
	mov	WORD PTR [rcx+4], ax

; 332  : 	tty->size.ws_row = 80;

	mov	eax, 80					; 00000050H
	mov	rcx, QWORD PTR tty$[rsp]
	mov	WORD PTR [rcx+2], ax

; 333  : 
; 334  : 	tty->master_pid = get_current_thread()->id;

	call	get_current_thread
	mov	rcx, QWORD PTR tty$[rsp]
	movzx	eax, WORD PTR [rax+242]
	mov	WORD PTR [rcx+96], ax

; 335  : 	tty->slave_pid = 0;

	xor	eax, eax
	mov	rcx, QWORD PTR tty$[rsp]
	mov	WORD PTR [rcx+98], ax

; 336  : 
; 337  : 	vfs_node_t * master = ttype_create_master(tty);

	mov	rcx, QWORD PTR tty$[rsp]
	call	?ttype_create_master@@YAPEAU_vfs_node_@@PEAU_tele_type_@@@Z ; ttype_create_master
	mov	QWORD PTR master$[rsp], rax

; 338  : 	vfs_node_t * slave = ttype_create_slave(tty);

	mov	rcx, QWORD PTR tty$[rsp]
	call	?ttype_create_slave@@YAPEAU_vfs_node_@@PEAU_tele_type_@@@Z ; ttype_create_slave
	mov	QWORD PTR slave$[rsp], rax

; 339  : 
; 340  : 	//! Allocate fd for master
; 341  : 	int m_fd = get_current_thread()->fd_current;

	call	get_current_thread
	mov	eax, DWORD PTR [rax+744]
	mov	DWORD PTR m_fd$[rsp], eax

; 342  : 	get_current_thread()->fd[m_fd] = master;

	call	get_current_thread
	movsxd	rcx, DWORD PTR m_fd$[rsp]
	mov	rdx, QWORD PTR master$[rsp]
	mov	QWORD PTR [rax+rcx*8+264], rdx

; 343  : 	get_current_thread()->fd_current++;

	call	get_current_thread
	add	rax, 744				; 000002e8H
	mov	QWORD PTR tv200[rsp], rax
	mov	rax, QWORD PTR tv200[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR tv200[rsp]
	mov	DWORD PTR [rcx], eax

; 344  : 
; 345  : 	//! Allocate fd for slave
; 346  : 	int s_fd = get_current_thread()->fd_current;

	call	get_current_thread
	mov	eax, DWORD PTR [rax+744]
	mov	DWORD PTR s_fd$[rsp], eax

; 347  : 	get_current_thread()->fd[s_fd] = slave;

	call	get_current_thread
	movsxd	rcx, DWORD PTR s_fd$[rsp]
	mov	rdx, QWORD PTR slave$[rsp]
	mov	QWORD PTR [rax+rcx*8+264], rdx

; 348  : 	get_current_thread()->fd_current++;

	call	get_current_thread
	add	rax, 744				; 000002e8H
	mov	QWORD PTR tv211[rsp], rax
	mov	rax, QWORD PTR tv211[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR tv211[rsp]
	mov	DWORD PTR [rcx], eax

; 349  : 
; 350  : 
; 351  : 	get_current_thread()->fd[1] = master;

	call	get_current_thread
	mov	ecx, 8
	imul	rcx, 1
	mov	rdx, QWORD PTR master$[rsp]
	mov	QWORD PTR [rax+rcx+264], rdx

; 352  : 	get_current_thread()->fd[2] = master;

	call	get_current_thread
	mov	ecx, 8
	imul	rcx, 2
	mov	rdx, QWORD PTR master$[rsp]
	mov	QWORD PTR [rax+rcx+264], rdx

; 353  : 
; 354  : 	ttype_insert (tty);

	mov	rcx, QWORD PTR tty$[rsp]
	call	?ttype_insert@@YAXPEAU_tele_type_@@@Z	; ttype_insert

; 355  : 	*master_fd = m_fd;

	mov	rax, QWORD PTR master_fd$[rsp]
	mov	ecx, DWORD PTR m_fd$[rsp]
	mov	DWORD PTR [rax], ecx

; 356  : 	*slave_fd = s_fd;

	mov	rax, QWORD PTR slave_fd$[rsp]
	mov	ecx, DWORD PTR s_fd$[rsp]
	mov	DWORD PTR [rax], ecx

; 357  : 	return 0;

	xor	eax, eax

; 358  : }

	add	rsp, 104				; 00000068H
	ret	0
?ttype_create@@YAHPEAH0@Z ENDP				; ttype_create
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
node$ = 32
sname$ = 40
tty$ = 80
?ttype_create_slave@@YAPEAU_vfs_node_@@PEAU_tele_type_@@@Z PROC ; ttype_create_slave

; 264  : vfs_node_t* ttype_create_slave (ttype_t *tty) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 265  : 
; 266  : 	vfs_node_t *node = (vfs_node_t*)malloc(sizeof(vfs_node_t));

	mov	ecx, 112				; 00000070H
	call	malloc
	mov	QWORD PTR node$[rsp], rax

; 267  : 
; 268  : 	char sname[10];
; 269  : 	strcpy (sname, "/dev/");

	lea	rdx, OFFSET FLAT:$SG3725
	lea	rcx, QWORD PTR sname$[rsp]
	call	strcpy

; 270  : 	strcpy (sname+5, "ttys");

	lea	rax, QWORD PTR sname$[rsp+5]
	lea	rdx, OFFSET FLAT:$SG3726
	mov	rcx, rax
	call	strcpy

; 271  : 	sztoa (slave_count,sname+9,10);

	lea	rax, QWORD PTR sname$[rsp+9]
	movsxd	rcx, DWORD PTR ?slave_count@@3HA	; slave_count
	mov	r8d, 10
	mov	rdx, rax
	call	?sztoa@@YAPEAD_KPEADH@Z			; sztoa

; 272  : 	slave_count++;

	mov	eax, DWORD PTR ?slave_count@@3HA	; slave_count
	inc	eax
	mov	DWORD PTR ?slave_count@@3HA, eax	; slave_count

; 273  : 	strcpy(node->filename, sname+5);

	lea	rax, QWORD PTR sname$[rsp+5]
	mov	rcx, QWORD PTR node$[rsp]
	mov	rdx, rax
	call	strcpy

; 274  : 
; 275  : 	node->size = 512;

	mov	rax, QWORD PTR node$[rsp]
	mov	DWORD PTR [rax+32], 512			; 00000200H

; 276  : 	node->eof = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	BYTE PTR [rax+36], 0

; 277  : 	node->pos = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	DWORD PTR [rax+40], 0

; 278  : 	node->current = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	DWORD PTR [rax+44], 0

; 279  : 	node->flags = FS_FLAG_GENERAL | FS_FLAG_DEVICE;

	mov	rax, QWORD PTR node$[rsp]
	mov	BYTE PTR [rax+48], 12

; 280  : 	node->status = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	BYTE PTR [rax+49], 0

; 281  : 	node->open = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	QWORD PTR [rax+64], 0

; 282  : 	node->device = tty;

	mov	rax, QWORD PTR node$[rsp]
	mov	rcx, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rax+56], rcx

; 283  : 	node->read = ttype_slave_read;

	mov	rax, QWORD PTR node$[rsp]
	lea	rcx, OFFSET FLAT:?ttype_slave_read@@YA_KPEAU_vfs_node_@@PEA_KI@Z ; ttype_slave_read
	mov	QWORD PTR [rax+72], rcx

; 284  : 	node->write = ttype_slave_write;

	mov	rax, QWORD PTR node$[rsp]
	lea	rcx, OFFSET FLAT:?ttype_slave_write@@YAXPEAU_vfs_node_@@PEA_KI@Z ; ttype_slave_write
	mov	QWORD PTR [rax+80], rcx

; 285  : 	node->read_blk = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	QWORD PTR [rax+96], 0

; 286  : 	node->ioquery = tty_ioquery;

	mov	rax, QWORD PTR node$[rsp]
	lea	rcx, OFFSET FLAT:?tty_ioquery@@YAHPEAU_vfs_node_@@HPEAX@Z ; tty_ioquery
	mov	QWORD PTR [rax+104], rcx

; 287  : 
; 288  : 	vfs_mount(sname,node,0);

	xor	r8d, r8d
	mov	rdx, QWORD PTR node$[rsp]
	lea	rcx, QWORD PTR sname$[rsp]
	call	vfs_mount

; 289  : 	return node;

	mov	rax, QWORD PTR node$[rsp]

; 290  : }

	add	rsp, 72					; 00000048H
	ret	0
?ttype_create_slave@@YAPEAU_vfs_node_@@PEAU_tele_type_@@@Z ENDP ; ttype_create_slave
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
node$ = 32
mname$ = 40
tty$ = 80
?ttype_create_master@@YAPEAU_vfs_node_@@PEAU_tele_type_@@@Z PROC ; ttype_create_master

; 231  : vfs_node_t* ttype_create_master (ttype_t *tty) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 232  : 
; 233  : 	vfs_node_t *node = (vfs_node_t*)malloc(sizeof(vfs_node_t));

	mov	ecx, 112				; 00000070H
	call	malloc
	mov	QWORD PTR node$[rsp], rax

; 234  : 
; 235  : 	char mname[10];
; 236  : 	strcpy (mname, "/dev/");

	lea	rdx, OFFSET FLAT:$SG3716
	lea	rcx, QWORD PTR mname$[rsp]
	call	strcpy

; 237  : 	strcpy (mname+5, "ttym");

	lea	rax, QWORD PTR mname$[rsp+5]
	lea	rdx, OFFSET FLAT:$SG3717
	mov	rcx, rax
	call	strcpy

; 238  : 	sztoa (master_count,mname+9,10);

	lea	rax, QWORD PTR mname$[rsp+9]
	movsxd	rcx, DWORD PTR ?master_count@@3HA	; master_count
	mov	r8d, 10
	mov	rdx, rax
	call	?sztoa@@YAPEAD_KPEADH@Z			; sztoa

; 239  : 	master_count++;

	mov	eax, DWORD PTR ?master_count@@3HA	; master_count
	inc	eax
	mov	DWORD PTR ?master_count@@3HA, eax	; master_count

; 240  : 	strcpy(node->filename, mname+5);

	lea	rax, QWORD PTR mname$[rsp+5]
	mov	rcx, QWORD PTR node$[rsp]
	mov	rdx, rax
	call	strcpy

; 241  : 
; 242  : 	node->size = 512;

	mov	rax, QWORD PTR node$[rsp]
	mov	DWORD PTR [rax+32], 512			; 00000200H

; 243  : 	node->eof = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	BYTE PTR [rax+36], 0

; 244  : 	node->pos = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	DWORD PTR [rax+40], 0

; 245  : 	node->current = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	DWORD PTR [rax+44], 0

; 246  : 	node->flags = FS_FLAG_GENERAL | FS_FLAG_DEVICE;

	mov	rax, QWORD PTR node$[rsp]
	mov	BYTE PTR [rax+48], 12

; 247  : 	node->status = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	BYTE PTR [rax+49], 0

; 248  : 	node->open = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	QWORD PTR [rax+64], 0

; 249  : 	node->device = tty;

	mov	rax, QWORD PTR node$[rsp]
	mov	rcx, QWORD PTR tty$[rsp]
	mov	QWORD PTR [rax+56], rcx

; 250  : 	node->read = ttype_master_read;

	mov	rax, QWORD PTR node$[rsp]
	lea	rcx, OFFSET FLAT:?ttype_master_read@@YA_KPEAU_vfs_node_@@PEA_KI@Z ; ttype_master_read
	mov	QWORD PTR [rax+72], rcx

; 251  : 	node->write = ttype_master_write;

	mov	rax, QWORD PTR node$[rsp]
	lea	rcx, OFFSET FLAT:?ttype_master_write@@YAXPEAU_vfs_node_@@PEA_KI@Z ; ttype_master_write
	mov	QWORD PTR [rax+80], rcx

; 252  : 	node->read_blk = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	QWORD PTR [rax+96], 0

; 253  : 	node->ioquery = tty_ioquery;

	mov	rax, QWORD PTR node$[rsp]
	lea	rcx, OFFSET FLAT:?tty_ioquery@@YAHPEAU_vfs_node_@@HPEAX@Z ; tty_ioquery
	mov	QWORD PTR [rax+104], rcx

; 254  : 
; 255  : 	vfs_mount(mname,node,0);

	xor	r8d, r8d
	mov	rdx, QWORD PTR node$[rsp]
	lea	rcx, QWORD PTR mname$[rsp]
	call	vfs_mount

; 256  : 	return node;

	mov	rax, QWORD PTR node$[rsp]

; 257  : }

	add	rsp, 72					; 00000048H
	ret	0
?ttype_create_master@@YAPEAU_vfs_node_@@PEAU_tele_type_@@@Z ENDP ; ttype_create_master
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\ttype.cpp
_TEXT	SEGMENT
?ttype_init@@YAXXZ PROC					; ttype_init

; 362  : 	root = NULL;

	mov	QWORD PTR ?root@@3PEAU_tele_type_@@EA, 0 ; root

; 363  : 	last = NULL;

	mov	QWORD PTR ?last@@3PEAU_tele_type_@@EA, 0 ; last

; 364  : 	master_count = 1;

	mov	DWORD PTR ?master_count@@3HA, 1		; master_count

; 365  : 	slave_count = 1;

	mov	DWORD PTR ?slave_count@@3HA, 1		; slave_count

; 366  : }

	ret	0
?ttype_init@@YAXXZ ENDP					; ttype_init
_TEXT	ENDS
END
