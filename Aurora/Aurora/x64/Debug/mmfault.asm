; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG3838	DB	'Kernel Panic!! Page fault ', 0aH, 00H
	ORG $+4
$SG3839	DB	'Virtual address -> %x ', 0aH, 00H
$SG3840	DB	'RIP ->%x ', 0aH, 00H
	ORG $+5
$SG3841	DB	'Current thread -> %s ', 0aH, 00H
	ORG $+1
$SG3847	DB	'Page Fault -> %x ', 0aH, 00H
	ORG $+5
$SG3848	DB	'RIP -> %x ', 0aH, 00H
	ORG $+4
$SG3849	DB	'Current thread -> %s ', 0aH, 00H
CONST	ENDS
PUBLIC	?AuHandlePageNotPresent@@YAX_K_NPEAX@Z		; AuHandlePageNotPresent
EXTRN	printf:PROC
EXTRN	AuPmmngrAlloc:PROC
EXTRN	x64_cli:PROC
EXTRN	AuMapPage:PROC
EXTRN	get_current_thread:PROC
EXTRN	?AuFindVMA@@YAPEAU_vma_area_@@_K@Z:PROC		; AuFindVMA
EXTRN	?fat32_read@@YAXPEAU_vfs_node_@@PEA_K@Z:PROC	; fat32_read
pdata	SEGMENT
$pdata$?AuHandlePageNotPresent@@YAX_K_NPEAX@Z DD imagerel $LN13
	DD	imagerel $LN13+330
	DD	imagerel $unwind$?AuHandlePageNotPresent@@YAX_K_NPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?AuHandlePageNotPresent@@YAX_K_NPEAX@Z DD 011201H
	DD	08212H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\mmngr\mmfault.cpp
_TEXT	SEGMENT
i$1 = 32
vm$ = 40
frame$ = 48
phys_addr$2 = 56
vaddr$ = 80
user$ = 88
param$ = 96
?AuHandlePageNotPresent@@YAX_K_NPEAX@Z PROC		; AuHandlePageNotPresent

; 39   : void AuHandlePageNotPresent (uint64_t vaddr, bool user, void* param) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 40   : 	interrupt_stack_frame *frame = (interrupt_stack_frame*)param;

	mov	rax, QWORD PTR param$[rsp]
	mov	QWORD PTR frame$[rsp], rax

; 41   : 	if (!user) {

	movzx	eax, BYTE PTR user$[rsp]
	test	eax, eax
	jne	SHORT $LN10@AuHandlePa

; 42   : 		x64_cli();

	call	x64_cli

; 43   : 		printf ("Kernel Panic!! Page fault \n");

	lea	rcx, OFFSET FLAT:$SG3838
	call	printf

; 44   : 		printf ("Virtual address -> %x \n", vaddr);

	mov	rdx, QWORD PTR vaddr$[rsp]
	lea	rcx, OFFSET FLAT:$SG3839
	call	printf

; 45   : 		printf ("RIP ->%x \n", frame->rip);

	mov	rax, QWORD PTR frame$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	lea	rcx, OFFSET FLAT:$SG3840
	call	printf

; 46   : 		printf ("Current thread -> %s \n", get_current_thread()->name);

	call	get_current_thread
	mov	rdx, QWORD PTR [rax+224]
	lea	rcx, OFFSET FLAT:$SG3841
	call	printf
$LN9@AuHandlePa:

; 47   : 		for(;;);

	jmp	SHORT $LN9@AuHandlePa
$LN10@AuHandlePa:

; 48   : 	}
; 49   : 	au_vm_area_t *vm = AuFindVMA(vaddr);

	mov	rcx, QWORD PTR vaddr$[rsp]
	call	?AuFindVMA@@YAPEAU_vma_area_@@_K@Z	; AuFindVMA
	mov	QWORD PTR vm$[rsp], rax

; 50   : 	if (vm == NULL){

	cmp	QWORD PTR vm$[rsp], 0
	jne	SHORT $LN7@AuHandlePa

; 51   : 		x64_cli();

	call	x64_cli

; 52   : 		printf ("Page Fault -> %x \n", vaddr);

	mov	rdx, QWORD PTR vaddr$[rsp]
	lea	rcx, OFFSET FLAT:$SG3847
	call	printf

; 53   : 		printf ("RIP -> %x \n", frame->rip);

	mov	rax, QWORD PTR frame$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	lea	rcx, OFFSET FLAT:$SG3848
	call	printf

; 54   : 		printf ("Current thread -> %s \n", get_current_thread()->name);

	call	get_current_thread
	mov	rdx, QWORD PTR [rax+224]
	lea	rcx, OFFSET FLAT:$SG3849
	call	printf
$LN6@AuHandlePa:

; 55   : 		for(;;);

	jmp	SHORT $LN6@AuHandlePa
$LN7@AuHandlePa:

; 56   : 	}
; 57   : 
; 58   : 	for (int i = 0; i < vm->length; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@AuHandlePa
$LN3@AuHandlePa:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@AuHandlePa:
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR vm$[rsp]
	cmp	rax, QWORD PTR [rcx+40]
	jae	SHORT $LN2@AuHandlePa

; 59   : 		void* phys_addr = AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR phys_addr$2[rsp], rax

; 60   : 		if (vm->file && vm->file->eof != 1) {

	mov	rax, QWORD PTR vm$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN1@AuHandlePa
	mov	rax, QWORD PTR vm$[rsp]
	mov	rax, QWORD PTR [rax+24]
	movzx	eax, BYTE PTR [rax+36]
	cmp	eax, 1
	je	SHORT $LN1@AuHandlePa

; 61   : 			fat32_read(vm->file, (uint64_t*)phys_addr);

	mov	rdx, QWORD PTR phys_addr$2[rsp]
	mov	rax, QWORD PTR vm$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	?fat32_read@@YAXPEAU_vfs_node_@@PEA_K@Z	; fat32_read
$LN1@AuHandlePa:

; 62   : 		}
; 63   : 		AuMapPage((uint64_t)phys_addr, vaddr, PAGING_USER);

	mov	r8b, 4
	mov	rdx, QWORD PTR vaddr$[rsp]
	mov	rcx, QWORD PTR phys_addr$2[rsp]
	call	AuMapPage

; 64   : 	}

	jmp	SHORT $LN3@AuHandlePa
$LN2@AuHandlePa:

; 65   : }

	add	rsp, 72					; 00000048H
	ret	0
?AuHandlePageNotPresent@@YAX_K_NPEAX@Z ENDP		; AuHandlePageNotPresent
_TEXT	ENDS
END
