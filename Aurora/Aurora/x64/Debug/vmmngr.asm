; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?root_cr3@@3PEA_KEA				; root_cr3
_BSS	SEGMENT
?root_cr3@@3PEA_KEA DQ 01H DUP (?)			; root_cr3
_BSS	ENDS
PUBLIC	?pml4_index@@YA_K_K@Z				; pml4_index
PUBLIC	?pdp_index@@YA_K_K@Z				; pdp_index
PUBLIC	?pd_index@@YA_K_K@Z				; pd_index
PUBLIC	?pt_index@@YA_K_K@Z				; pt_index
PUBLIC	?p_index@@YA_K_K@Z				; p_index
PUBLIC	?vmmngr_x86_64_init@@YAXXZ			; vmmngr_x86_64_init
PUBLIC	?map_page@@YA_N_K0E@Z				; map_page
PUBLIC	?map_page_ex@@YA_NPEA_K_K1E@Z			; map_page_ex
PUBLIC	?unmap_page_ex@@YAXPEA_K_K_N@Z			; unmap_page_ex
PUBLIC	?create_user_address_space@@YAPEA_KXZ		; create_user_address_space
PUBLIC	?unmap_page@@YAX_K@Z				; unmap_page
PUBLIC	?get_physical_address@@YAPEA_K_K@Z		; get_physical_address
PUBLIC	?get_free_page@@YAPEA_K_K_N@Z			; get_free_page
PUBLIC	?vmmngr_get_kernel_pml4@@YAPEA_KXZ		; vmmngr_get_kernel_pml4
EXTRN	?pmmngr_alloc@@YAPEAXXZ:PROC			; pmmngr_alloc
EXTRN	?pmmngr_free@@YAXPEAX@Z:PROC			; pmmngr_free
EXTRN	x64_mfence:PROC
EXTRN	x64_read_cr3:PROC
EXTRN	x64_write_cr3:PROC
EXTRN	flush_tlb:PROC
EXTRN	?memset@@YAXPEAXEI@Z:PROC			; memset
EXTRN	?get_fb_size@@YAIXZ:PROC			; get_fb_size
pdata	SEGMENT
$pdata$?vmmngr_x86_64_init@@YAXXZ DD imagerel $LN22
	DD	imagerel $LN22+877
	DD	imagerel $unwind$?vmmngr_x86_64_init@@YAXXZ
$pdata$?map_page@@YA_N_K0E@Z DD imagerel $LN6
	DD	imagerel $LN6+538
	DD	imagerel $unwind$?map_page@@YA_N_K0E@Z
$pdata$?map_page_ex@@YA_NPEA_K_K1E@Z DD imagerel $LN9
	DD	imagerel $LN9+587
	DD	imagerel $unwind$?map_page_ex@@YA_NPEA_K_K1E@Z
$pdata$?unmap_page_ex@@YAXPEA_K_K_N@Z DD imagerel $LN5
	DD	imagerel $LN5+241
	DD	imagerel $unwind$?unmap_page_ex@@YAXPEA_K_K_N@Z
$pdata$?create_user_address_space@@YAPEA_KXZ DD imagerel $LN6
	DD	imagerel $LN6+552
	DD	imagerel $unwind$?create_user_address_space@@YAPEA_KXZ
$pdata$?unmap_page@@YAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+219
	DD	imagerel $unwind$?unmap_page@@YAX_K@Z
$pdata$?get_physical_address@@YAPEA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+171
	DD	imagerel $unwind$?get_physical_address@@YAPEA_K_K@Z
$pdata$?get_free_page@@YAPEA_K_K_N@Z DD imagerel $LN9
	DD	imagerel $LN9+316
	DD	imagerel $unwind$?get_free_page@@YAPEA_K_K_N@Z
$pdata$?clear@@YAXPEAX@Z DD imagerel ?clear@@YAXPEAX@Z
	DD	imagerel ?clear@@YAXPEAX@Z+74
	DD	imagerel $unwind$?clear@@YAXPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?vmmngr_x86_64_init@@YAXXZ DD 020701H
	DD	0130107H
$unwind$?map_page@@YA_N_K0E@Z DD 021601H
	DD	0110116H
$unwind$?map_page_ex@@YA_NPEA_K_K1E@Z DD 011801H
	DD	0e218H
$unwind$?unmap_page_ex@@YAXPEA_K_K_N@Z DD 011301H
	DD	0c213H
$unwind$?create_user_address_space@@YAPEA_KXZ DD 010401H
	DD	0e204H
$unwind$?unmap_page@@YAX_K@Z DD 010901H
	DD	0c209H
$unwind$?get_physical_address@@YAPEA_K_K@Z DD 010901H
	DD	0a209H
$unwind$?get_free_page@@YAPEA_K_K_N@Z DD 010d01H
	DD	0e20dH
$unwind$?clear@@YAXPEAX@Z DD 010901H
	DD	02209H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\vmmngr.cpp
_TEXT	SEGMENT
n$1 = 0
t$ = 8
addr$ = 32
?clear@@YAXPEAX@Z PROC					; clear

; 71   : static void clear(void* addr){

	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 72   : 	uint64_t* t = (uint64_t*)addr;

	mov	rax, QWORD PTR addr$[rsp]
	mov	QWORD PTR t$[rsp], rax

; 73   : 	for (size_t n = 0; n < 4096 / sizeof(uint64_t); ++n){

	mov	QWORD PTR n$1[rsp], 0
	jmp	SHORT $LN3@clear
$LN2@clear:
	mov	rax, QWORD PTR n$1[rsp]
	inc	rax
	mov	QWORD PTR n$1[rsp], rax
$LN3@clear:
	cmp	QWORD PTR n$1[rsp], 512			; 00000200H
	jae	SHORT $LN1@clear

; 74   : 		t[n] = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR n$1[rsp]
	mov	QWORD PTR [rax+rcx*8], 0

; 75   : 	}

	jmp	SHORT $LN2@clear
$LN1@clear:

; 76   : }

	add	rsp, 24
	ret	0
?clear@@YAXPEAX@Z ENDP					; clear
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\vmmngr.cpp
_TEXT	SEGMENT
?vmmngr_get_kernel_pml4@@YAPEA_KXZ PROC			; vmmngr_get_kernel_pml4

; 371  : 	return root_cr3;

	mov	rax, QWORD PTR ?root_cr3@@3PEA_KEA	; root_cr3

; 372  : }

	ret	0
?vmmngr_get_kernel_pml4@@YAPEA_KXZ ENDP			; vmmngr_get_kernel_pml4
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\vmmngr.cpp
_TEXT	SEGMENT
start$ = 32
i$1 = 40
pt$2 = 48
pdpt$3 = 56
pml4$ = 64
pd$4 = 72
page$ = 80
end$ = 88
page$5 = 96
s$ = 128
user$ = 136
?get_free_page@@YAPEA_K_K_N@Z PROC			; get_free_page

; 345  : uint64_t* get_free_page (size_t s, bool user) {

$LN9:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 346  : 	uint64_t* page = 0;

	mov	QWORD PTR page$[rsp], 0

; 347  : 	uint64_t start = 0;

	mov	QWORD PTR start$[rsp], 0

; 348  : 	if (user)

	movzx	eax, BYTE PTR user$[rsp]
	test	eax, eax
	je	SHORT $LN6@get_free_p

; 349  : 		start = USER_BASE_ADDRESS;

	mov	rax, 70368744177664			; 0000400000000000H
	mov	QWORD PTR start$[rsp], rax

; 350  : 	else

	jmp	SHORT $LN5@get_free_p
$LN6@get_free_p:

; 351  : 		start = KERNEL_BASE_ADDRESS;

	mov	rax, -35184372088832			; ffffe00000000000H
	mov	QWORD PTR start$[rsp], rax
$LN5@get_free_p:

; 352  : 
; 353  : 	uint64_t* end = 0;

	mov	QWORD PTR end$[rsp], 0

; 354  : 	uint64_t *pml4 = (uint64_t*)x64_read_cr3();

	call	x64_read_cr3
	mov	QWORD PTR pml4$[rsp], rax

; 355  : 	for (int i = 0; i < s; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@get_free_p
$LN3@get_free_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@get_free_p:
	movsxd	rax, DWORD PTR i$1[rsp]
	cmp	rax, QWORD PTR s$[rsp]
	jae	$LN2@get_free_p

; 356  : 		uint64_t *pdpt = (uint64_t*)(pml4[pml4_index(start)] & ~(4096 - 1));

	mov	rcx, QWORD PTR start$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR pml4$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pdpt$3[rsp], rax

; 357  : 	    uint64_t *pd = (uint64_t*)(pdpt[pdp_index(start)] & ~(4096 - 1));

	mov	rcx, QWORD PTR start$[rsp]
	call	?pdp_index@@YA_K_K@Z			; pdp_index
	mov	rcx, QWORD PTR pdpt$3[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pd$4[rsp], rax

; 358  : 		uint64_t *pt = (uint64_t*)(pd[pd_index(start)] & ~(4096 - 1));

	mov	rcx, QWORD PTR start$[rsp]
	call	?pd_index@@YA_K_K@Z			; pd_index
	mov	rcx, QWORD PTR pd$4[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pt$2[rsp], rax

; 359  : 		uint64_t *page = (uint64_t*)(pt[pt_index(start)] & ~(4096 - 1));

	mov	rcx, QWORD PTR start$[rsp]
	call	?pt_index@@YA_K_K@Z			; pt_index
	mov	rcx, QWORD PTR pt$2[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR page$5[rsp], rax

; 360  : 
; 361  : 		if ((pt[pt_index(start)] & PAGING_PRESENT) == 0){

	mov	rcx, QWORD PTR start$[rsp]
	call	?pt_index@@YA_K_K@Z			; pt_index
	mov	rcx, QWORD PTR pt$2[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN1@get_free_p

; 362  : 			return (uint64_t*)start;

	mov	rax, QWORD PTR start$[rsp]
	jmp	SHORT $LN7@get_free_p
$LN1@get_free_p:

; 363  : 		}
; 364  : 		start+= 4096;

	mov	rax, QWORD PTR start$[rsp]
	add	rax, 4096				; 00001000H
	mov	QWORD PTR start$[rsp], rax

; 365  : 	}

	jmp	$LN3@get_free_p
$LN2@get_free_p:

; 366  : 	return 0;

	xor	eax, eax
$LN7@get_free_p:

; 367  : }

	add	rsp, 120				; 00000078H
	ret	0
?get_free_page@@YAPEA_K_K_N@Z ENDP			; get_free_page
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\vmmngr.cpp
_TEXT	SEGMENT
i1$ = 32
page$ = 40
pml4$ = 48
pdpt$ = 56
pd$ = 64
pt$ = 72
virt_addr$ = 96
?get_physical_address@@YAPEA_K_K@Z PROC			; get_physical_address

; 245  : uint64_t* get_physical_address (uint64_t virt_addr) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 246  : 	const long i1 = pml4_index(virt_addr);

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	DWORD PTR i1$[rsp], eax

; 247  : 
; 248  : 	uint64_t *pml4 = (uint64_t*)x64_read_cr3();

	call	x64_read_cr3
	mov	QWORD PTR pml4$[rsp], rax

; 249  : 	uint64_t *pdpt = (uint64_t*)(pml4[pml4_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR pml4$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pdpt$[rsp], rax

; 250  : 	uint64_t *pd = (uint64_t*)(pdpt[pdp_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pdp_index@@YA_K_K@Z			; pdp_index
	mov	rcx, QWORD PTR pdpt$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pd$[rsp], rax

; 251  : 	uint64_t *pt = (uint64_t*)(pd[pd_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pd_index@@YA_K_K@Z			; pd_index
	mov	rcx, QWORD PTR pd$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pt$[rsp], rax

; 252  : 	uint64_t *page = (uint64_t*)(pt[pt_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pt_index@@YA_K_K@Z			; pt_index
	mov	rcx, QWORD PTR pt$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR page$[rsp], rax

; 253  : 
; 254  : 	if (page != NULL)

	cmp	QWORD PTR page$[rsp], 0
	je	SHORT $LN1@get_physic

; 255  : 		return page;

	mov	rax, QWORD PTR page$[rsp]
$LN1@get_physic:

; 256  : }

	add	rsp, 88					; 00000058H
	ret	0
?get_physical_address@@YAPEA_K_K@Z ENDP			; get_physical_address
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\vmmngr.cpp
_TEXT	SEGMENT
i1$ = 32
pml$ = 40
pml4$ = 48
pdpt$ = 56
pd$ = 64
pt$ = 72
page$ = 80
virt_addr$ = 112
?unmap_page@@YAX_K@Z PROC				; unmap_page

; 205  : void unmap_page(uint64_t virt_addr){

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H

; 206  : 	
; 207  : 	const long i1 = pml4_index(virt_addr);

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	DWORD PTR i1$[rsp], eax

; 208  : 
; 209  : 	uint64_t *pml4 = (uint64_t*)x64_read_cr3();

	call	x64_read_cr3
	mov	QWORD PTR pml4$[rsp], rax

; 210  : 	uint64_t *pdpt = (uint64_t*)(pml4[pml4_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR pml4$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pdpt$[rsp], rax

; 211  : 	uint64_t *pd = (uint64_t*)(pdpt[pdp_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pdp_index@@YA_K_K@Z			; pdp_index
	mov	rcx, QWORD PTR pdpt$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pd$[rsp], rax

; 212  : 	uint64_t *pt = (uint64_t*)(pd[pd_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pd_index@@YA_K_K@Z			; pd_index
	mov	rcx, QWORD PTR pd$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pt$[rsp], rax

; 213  : 	uint64_t *page = (uint64_t*)(pt[pt_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pt_index@@YA_K_K@Z			; pt_index
	mov	rcx, QWORD PTR pt$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR page$[rsp], rax

; 214  : 
; 215  : 	uint64_t *pml = (uint64_t*)x64_read_cr3();

	call	x64_read_cr3
	mov	QWORD PTR pml$[rsp], rax

; 216  : 	if (pml[i1] & PAGING_PRESENT){

	movsxd	rax, DWORD PTR i1$[rsp]
	mov	rcx, QWORD PTR pml$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN1@unmap_page

; 217  : 		pml[i1] = 0;

	movsxd	rax, DWORD PTR i1$[rsp]
	mov	rcx, QWORD PTR pml$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
$LN1@unmap_page:

; 218  : 	}
; 219  : 
; 220  : 	pmmngr_free(page);

	mov	rcx, QWORD PTR page$[rsp]
	call	?pmmngr_free@@YAXPEAX@Z			; pmmngr_free

; 221  : }

	add	rsp, 104				; 00000068H
	ret	0
?unmap_page@@YAX_K@Z ENDP				; unmap_page
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\vmmngr.cpp
_TEXT	SEGMENT
i$1 = 32
new_cr3$ = 40
cr3$ = 48
tv82 = 56
tv130 = 64
tv138 = 72
tv90 = 80
tv146 = 88
tv74 = 96
tv161 = 104
?create_user_address_space@@YAPEA_KXZ PROC		; create_user_address_space

; 319  : uint64_t *create_user_address_space (){

$LN6:
	sub	rsp, 120				; 00000078H

; 320  : 	
; 321  : 	uint64_t *cr3 = (uint64_t*)x64_read_cr3();

	call	x64_read_cr3
	mov	QWORD PTR cr3$[rsp], rax

; 322  : 	uint64_t *new_cr3 = (uint64_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR new_cr3$[rsp], rax

; 323  : 
; 324  : 
; 325  : 	//! For now, copy the 4 GiB identity mapping from old pml4
; 326  : 	//! but later, we should avoid this by mapping only those physical
; 327  : 	//! addresses that are needed, like physical addresses allocated for 
; 328  : 	//! paging tables creations and memory mapped I/O which are not
; 329  : 	//! virtually allocated in higher half sections
; 330  : 	new_cr3[0] = cr3[0];

	mov	eax, 8
	imul	rax, 0
	mov	ecx, 8
	imul	rcx, 0
	mov	rdx, QWORD PTR new_cr3$[rsp]
	mov	r8, QWORD PTR cr3$[rsp]
	mov	rax, QWORD PTR [r8+rax]
	mov	QWORD PTR [rdx+rcx], rax

; 331  : 	//! Copy Kernel's Higher Half section
; 332  : 	new_cr3[pml4_index(0xFFFFC00000000000)] = cr3[pml4_index(0xFFFFC00000000000)];

	mov	rcx, -70368744177664			; ffffc00000000000H
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	QWORD PTR tv74[rsp], rax
	mov	rcx, -70368744177664			; ffffc00000000000H
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR new_cr3$[rsp]
	mov	rdx, QWORD PTR cr3$[rsp]
	mov	r8, QWORD PTR tv74[rsp]
	mov	rdx, QWORD PTR [rdx+r8*8]
	mov	QWORD PTR [rcx+rax*8], rdx

; 333  : 	new_cr3[pml4_index(0xFFFFA00000000000)] = cr3[pml4_index(0xFFFFA00000000000)];

	mov	rcx, -105553116266496			; ffffa00000000000H
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	QWORD PTR tv82[rsp], rax
	mov	rcx, -105553116266496			; ffffa00000000000H
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR new_cr3$[rsp]
	mov	rdx, QWORD PTR cr3$[rsp]
	mov	r8, QWORD PTR tv82[rsp]
	mov	rdx, QWORD PTR [rdx+r8*8]
	mov	QWORD PTR [rcx+rax*8], rdx

; 334  : 	new_cr3[pml4_index(0xFFFF800000000000)] = cr3[pml4_index(0xFFFF800000000000)];

	mov	rcx, -140737488355328			; ffff800000000000H
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	QWORD PTR tv90[rsp], rax
	mov	rcx, -140737488355328			; ffff800000000000H
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR new_cr3$[rsp]
	mov	rdx, QWORD PTR cr3$[rsp]
	mov	r8, QWORD PTR tv90[rsp]
	mov	rdx, QWORD PTR [rdx+r8*8]
	mov	QWORD PTR [rcx+rax*8], rdx

; 335  : 	new_cr3[pml4_index(0xFFFFE00000000000)] = cr3[pml4_index(0xFFFFE00000000000)];

	mov	rcx, -35184372088832			; ffffe00000000000H
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	QWORD PTR tv130[rsp], rax
	mov	rcx, -35184372088832			; ffffe00000000000H
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR new_cr3$[rsp]
	mov	rdx, QWORD PTR cr3$[rsp]
	mov	r8, QWORD PTR tv130[rsp]
	mov	rdx, QWORD PTR [rdx+r8*8]
	mov	QWORD PTR [rcx+rax*8], rdx

; 336  : 	new_cr3[pml4_index(0xFFFFD00000000000)] = cr3[pml4_index(0xFFFFD00000000000)];

	mov	rcx, -52776558133248			; ffffd00000000000H
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	QWORD PTR tv138[rsp], rax
	mov	rcx, -52776558133248			; ffffd00000000000H
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR new_cr3$[rsp]
	mov	rdx, QWORD PTR cr3$[rsp]
	mov	r8, QWORD PTR tv138[rsp]
	mov	rdx, QWORD PTR [rdx+r8*8]
	mov	QWORD PTR [rcx+rax*8], rdx

; 337  : 	new_cr3[pml4_index(0xFFFFFD0000000000)] = cr3[pml4_index(0xFFFFFD0000000000)];

	mov	rcx, -3298534883328			; fffffd0000000000H
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	QWORD PTR tv146[rsp], rax
	mov	rcx, -3298534883328			; fffffd0000000000H
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR new_cr3$[rsp]
	mov	rdx, QWORD PTR cr3$[rsp]
	mov	r8, QWORD PTR tv146[rsp]
	mov	rdx, QWORD PTR [rdx+r8*8]
	mov	QWORD PTR [rcx+rax*8], rdx

; 338  : 	//! Mapped Framebuffer
; 339  : 	for (int i = 0; i < get_fb_size() / 4096; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@create_use
$LN2@create_use:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@create_use:
	call	?get_fb_size@@YAIXZ			; get_fb_size
	xor	edx, edx
	mov	ecx, 4096				; 00001000H
	div	ecx
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN1@create_use

; 340  : 		new_cr3[pml4_index(0xFFFFD00000200000 + i * 4096)] = cr3[pml4_index(0xFFFFD00000200000 + i * 4096)]; 

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, 52776556036096			; 00002fffffe00000H
	sub	rax, rcx
	mov	rcx, rax
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	QWORD PTR tv161[rsp], rax
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, 4096				; 00001000H
	movsxd	rcx, ecx
	mov	rdx, 52776556036096			; 00002fffffe00000H
	sub	rcx, rdx
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR new_cr3$[rsp]
	mov	rdx, QWORD PTR cr3$[rsp]
	mov	r8, QWORD PTR tv161[rsp]
	mov	rdx, QWORD PTR [rdx+r8*8]
	mov	QWORD PTR [rcx+rax*8], rdx
	jmp	SHORT $LN2@create_use
$LN1@create_use:

; 341  : 	return new_cr3;

	mov	rax, QWORD PTR new_cr3$[rsp]

; 342  : }

	add	rsp, 120				; 00000078H
	ret	0
?create_user_address_space@@YAPEA_KXZ ENDP		; create_user_address_space
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\vmmngr.cpp
_TEXT	SEGMENT
i1$ = 32
pml$ = 40
pml4$ = 48
pdpt$ = 56
pd$ = 64
pt$ = 72
page$ = 80
cr3$ = 112
virt_addr$ = 120
free_physical$ = 128
?unmap_page_ex@@YAXPEA_K_K_N@Z PROC			; unmap_page_ex

; 224  : void unmap_page_ex(uint64_t* cr3, uint64_t virt_addr, bool free_physical){

$LN5:
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H

; 225  : 	
; 226  : 	const long i1 = pml4_index(virt_addr);

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	DWORD PTR i1$[rsp], eax

; 227  : 
; 228  : 	uint64_t *pml4 = cr3;

	mov	rax, QWORD PTR cr3$[rsp]
	mov	QWORD PTR pml4$[rsp], rax

; 229  : 	uint64_t *pdpt = (uint64_t*)(pml4[pml4_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR pml4$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pdpt$[rsp], rax

; 230  : 	uint64_t *pd = (uint64_t*)(pdpt[pdp_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pdp_index@@YA_K_K@Z			; pdp_index
	mov	rcx, QWORD PTR pdpt$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pd$[rsp], rax

; 231  : 	uint64_t *pt = (uint64_t*)(pd[pd_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pd_index@@YA_K_K@Z			; pd_index
	mov	rcx, QWORD PTR pd$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pt$[rsp], rax

; 232  : 	uint64_t *page = (uint64_t*)(pt[pt_index(virt_addr)] & ~(4096 - 1));

	mov	rcx, QWORD PTR virt_addr$[rsp]
	call	?pt_index@@YA_K_K@Z			; pt_index
	mov	rcx, QWORD PTR pt$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR page$[rsp], rax

; 233  : 
; 234  : 	uint64_t *pml = cr3;

	mov	rax, QWORD PTR cr3$[rsp]
	mov	QWORD PTR pml$[rsp], rax

; 235  : 	if (pml[i1] & PAGING_PRESENT){

	movsxd	rax, DWORD PTR i1$[rsp]
	mov	rcx, QWORD PTR pml$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN2@unmap_page

; 236  : 		pml[i1] = 0;

	movsxd	rax, DWORD PTR i1$[rsp]
	mov	rcx, QWORD PTR pml$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
$LN2@unmap_page:

; 237  : 	}
; 238  : 
; 239  : 	if (free_physical)

	movzx	eax, BYTE PTR free_physical$[rsp]
	test	eax, eax
	je	SHORT $LN1@unmap_page

; 240  : 		pmmngr_free(page);

	mov	rcx, QWORD PTR page$[rsp]
	call	?pmmngr_free@@YAXPEAX@Z			; pmmngr_free
$LN1@unmap_page:

; 241  : }

	add	rsp, 104				; 00000068H
	ret	0
?unmap_page_ex@@YAXPEA_K_K_N@Z ENDP			; unmap_page_ex
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\vmmngr.cpp
_TEXT	SEGMENT
i2$ = 32
i4$ = 36
i3$ = 40
flags$ = 48
i1$ = 56
page$1 = 64
page$2 = 72
page$3 = 80
pml2$ = 88
pml3$ = 96
pml1$ = 104
pml4i$ = 128
physical_address$ = 136
virtual_address$ = 144
attrib$ = 152
?map_page_ex@@YA_NPEA_K_K1E@Z PROC			; map_page_ex

; 260  : bool map_page_ex (uint64_t *pml4i,uint64_t physical_address, uint64_t virtual_address, uint8_t attrib){

$LN9:
	mov	BYTE PTR [rsp+32], r9b
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 261  : 
; 262  : 
; 263  : 	size_t flags = 0;

	mov	QWORD PTR flags$[rsp], 0

; 264  : 	if (attrib == PAGING_USER)

	movzx	eax, BYTE PTR attrib$[rsp]
	cmp	eax, 4
	jne	SHORT $LN6@map_page_e

; 265  : 		flags  = PAGING_PRESENT | PAGING_WRITABLE | PAGING_USER;

	mov	QWORD PTR flags$[rsp], 7

; 266  : 	else

	jmp	SHORT $LN5@map_page_e
$LN6@map_page_e:

; 267  : 		flags = PAGING_PRESENT | PAGING_WRITABLE;

	mov	QWORD PTR flags$[rsp], 3
$LN5@map_page_e:

; 268  : 
; 269  : 	const long i4 = (virtual_address >> 39) & 0x1FF;

	mov	rax, QWORD PTR virtual_address$[rsp]
	shr	rax, 39					; 00000027H
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i4$[rsp], eax

; 270  : 	const long i3 = (virtual_address >> 30) & 0x1FF;

	mov	rax, QWORD PTR virtual_address$[rsp]
	shr	rax, 30
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i3$[rsp], eax

; 271  : 	const long i2 = (virtual_address >> 21) & 0x1FF;

	mov	rax, QWORD PTR virtual_address$[rsp]
	shr	rax, 21
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i2$[rsp], eax

; 272  : 	const long i1 = (virtual_address >> 12) & 0x1FF;

	mov	rax, QWORD PTR virtual_address$[rsp]
	shr	rax, 12
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i1$[rsp], eax

; 273  : 
; 274  : 	if (!(pml4i[i4] & PAGING_PRESENT)){

	movsxd	rax, DWORD PTR i4$[rsp]
	mov	rcx, QWORD PTR pml4i$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN4@map_page_e

; 275  : 		const uint64_t page = (uint64_t)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR page$1[rsp], rax

; 276  : 		pml4i[i4] = page | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR page$1[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i4$[rsp]
	mov	rdx, QWORD PTR pml4i$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 277  : 		clear((void*)page);

	mov	rcx, QWORD PTR page$1[rsp]
	call	?clear@@YAXPEAX@Z			; clear

; 278  : 		flush_tlb((void*)page);

	mov	rcx, QWORD PTR page$1[rsp]
	call	flush_tlb

; 279  : 		x64_mfence();

	call	x64_mfence
$LN4@map_page_e:

; 280  : 	}
; 281  : 	uint64_t* pml3 = (uint64_t*)(pml4i[i4] & ~(4096 - 1));

	movsxd	rax, DWORD PTR i4$[rsp]
	mov	rcx, QWORD PTR pml4i$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pml3$[rsp], rax

; 282  : 
; 283  : 	if (!(pml3[i3] & PAGING_PRESENT)){

	movsxd	rax, DWORD PTR i3$[rsp]
	mov	rcx, QWORD PTR pml3$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN3@map_page_e

; 284  : 		const uint64_t page = (uint64_t)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR page$3[rsp], rax

; 285  : 		pml3[i3] = page | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR page$3[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i3$[rsp]
	mov	rdx, QWORD PTR pml3$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 286  : 		clear((void*)page);

	mov	rcx, QWORD PTR page$3[rsp]
	call	?clear@@YAXPEAX@Z			; clear

; 287  : 		flush_tlb((void*)page);

	mov	rcx, QWORD PTR page$3[rsp]
	call	flush_tlb

; 288  : 		x64_mfence();

	call	x64_mfence
$LN3@map_page_e:

; 289  : 		
; 290  : 	}
; 291  : 
; 292  : 	uint64_t* pml2 = (uint64_t*)(pml3[i3] & ~(4096 - 1));

	movsxd	rax, DWORD PTR i3$[rsp]
	mov	rcx, QWORD PTR pml3$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pml2$[rsp], rax

; 293  : 	if (!(pml2[i2] & PAGING_PRESENT)){

	movsxd	rax, DWORD PTR i2$[rsp]
	mov	rcx, QWORD PTR pml2$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN2@map_page_e

; 294  : 
; 295  : 		const uint64_t page = (uint64_t)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR page$2[rsp], rax

; 296  : 		pml2[i2] = page | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR page$2[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i2$[rsp]
	mov	rdx, QWORD PTR pml2$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 297  : 		clear((void*)page);

	mov	rcx, QWORD PTR page$2[rsp]
	call	?clear@@YAXPEAX@Z			; clear

; 298  : 		flush_tlb((void*)page);

	mov	rcx, QWORD PTR page$2[rsp]
	call	flush_tlb

; 299  : 		x64_mfence();

	call	x64_mfence
$LN2@map_page_e:

; 300  : 		
; 301  : 	}
; 302  : 
; 303  : 	uint64_t* pml1 = (uint64_t*)(pml2[i2] & ~(4096 - 1));

	movsxd	rax, DWORD PTR i2$[rsp]
	mov	rcx, QWORD PTR pml2$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pml1$[rsp], rax

; 304  : 
; 305  : 	if (pml1[i1] & PAGING_PRESENT){

	movsxd	rax, DWORD PTR i1$[rsp]
	mov	rcx, QWORD PTR pml1$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN1@map_page_e

; 306  : 		return false;

	xor	al, al
	jmp	SHORT $LN7@map_page_e
$LN1@map_page_e:

; 307  : 	}
; 308  : 
; 309  : 	pml1[i1] = physical_address | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR physical_address$[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i1$[rsp]
	mov	rdx, QWORD PTR pml1$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 310  : 	flush_tlb ((void*)virtual_address);

	mov	rcx, QWORD PTR virtual_address$[rsp]
	call	flush_tlb

; 311  : 	x64_mfence ();

	call	x64_mfence

; 312  : 	return true;

	mov	al, 1
$LN7@map_page_e:

; 313  : }

	add	rsp, 120				; 00000078H
	ret	0
?map_page_ex@@YA_NPEA_K_K1E@Z ENDP			; map_page_ex
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\vmmngr.cpp
_TEXT	SEGMENT
i3$ = 32
i2$ = 36
i4$ = 40
flags$ = 48
page$1 = 56
pml3$ = 64
i1$ = 72
page$2 = 80
page$3 = 88
pml2$ = 96
pml4i$ = 104
pml1$ = 112
physical_address$ = 144
virtual_address$ = 152
attrib$ = 160
?map_page@@YA_N_K0E@Z PROC				; map_page

; 150  : {

$LN6:
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H

; 151  : 	size_t flags = PAGING_WRITABLE | PAGING_PRESENT | attrib;

	movzx	eax, BYTE PTR attrib$[rsp]
	or	eax, 3
	cdqe
	mov	QWORD PTR flags$[rsp], rax

; 152  : 
; 153  : 	const long i4 = (virtual_address >> 39) & 0x1FF;

	mov	rax, QWORD PTR virtual_address$[rsp]
	shr	rax, 39					; 00000027H
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i4$[rsp], eax

; 154  : 	const long i3 = (virtual_address >> 30) & 0x1FF;

	mov	rax, QWORD PTR virtual_address$[rsp]
	shr	rax, 30
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i3$[rsp], eax

; 155  : 	const long i2 = (virtual_address >> 21) & 0x1FF;

	mov	rax, QWORD PTR virtual_address$[rsp]
	shr	rax, 21
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i2$[rsp], eax

; 156  : 	const long i1 = (virtual_address >> 12) & 0x1FF;

	mov	rax, QWORD PTR virtual_address$[rsp]
	shr	rax, 12
	and	rax, 511				; 000001ffH
	mov	DWORD PTR i1$[rsp], eax

; 157  : 
; 158  : 	uint64_t *pml4i = (uint64_t*)x64_read_cr3();

	call	x64_read_cr3
	mov	QWORD PTR pml4i$[rsp], rax

; 159  : 	if (!(pml4i[i4] & PAGING_PRESENT))

	movsxd	rax, DWORD PTR i4$[rsp]
	mov	rcx, QWORD PTR pml4i$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN3@map_page

; 160  : 	{
; 161  : 		const uint64_t page = (uint64_t)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR page$1[rsp], rax

; 162  : 		pml4i[i4] = page | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR page$1[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i4$[rsp]
	mov	rdx, QWORD PTR pml4i$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 163  : 		clear((void*)page);

	mov	rcx, QWORD PTR page$1[rsp]
	call	?clear@@YAXPEAX@Z			; clear

; 164  : 		flush_tlb((void*)page);

	mov	rcx, QWORD PTR page$1[rsp]
	call	flush_tlb

; 165  : 		x64_mfence();

	call	x64_mfence
$LN3@map_page:

; 166  : 	}
; 167  : 	uint64_t* pml3 = (uint64_t*)(pml4i[i4] & ~(4096 - 1));

	movsxd	rax, DWORD PTR i4$[rsp]
	mov	rcx, QWORD PTR pml4i$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pml3$[rsp], rax

; 168  : 	
; 169  : 	if (!(pml3[i3] & PAGING_PRESENT))

	movsxd	rax, DWORD PTR i3$[rsp]
	mov	rcx, QWORD PTR pml3$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN2@map_page

; 170  : 	{
; 171  : 		
; 172  : 		const uint64_t page = (uint64_t)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR page$3[rsp], rax

; 173  : 		pml3[i3] = page | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR page$3[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i3$[rsp]
	mov	rdx, QWORD PTR pml3$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 174  : 		clear((void*)page);

	mov	rcx, QWORD PTR page$3[rsp]
	call	?clear@@YAXPEAX@Z			; clear

; 175  : 		flush_tlb((void*)page);

	mov	rcx, QWORD PTR page$3[rsp]
	call	flush_tlb

; 176  : 		x64_mfence();

	call	x64_mfence
$LN2@map_page:

; 177  : 		
; 178  : 	}
; 179  :     
; 180  : 	
; 181  : 	uint64_t* pml2 = (uint64_t*)(pml3[i3] & ~(4096 - 1));

	movsxd	rax, DWORD PTR i3$[rsp]
	mov	rcx, QWORD PTR pml3$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pml2$[rsp], rax

; 182  : 	
; 183  : 	if (!(pml2[i2] & PAGING_PRESENT))

	movsxd	rax, DWORD PTR i2$[rsp]
	mov	rcx, QWORD PTR pml2$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN1@map_page

; 184  : 	{
; 185  : 		const uint64_t page = (uint64_t)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR page$2[rsp], rax

; 186  : 		pml2[i2] = page | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR page$2[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i2$[rsp]
	mov	rdx, QWORD PTR pml2$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 187  : 		clear((void*)page);

	mov	rcx, QWORD PTR page$2[rsp]
	call	?clear@@YAXPEAX@Z			; clear

; 188  : 		flush_tlb((void*)page);

	mov	rcx, QWORD PTR page$2[rsp]
	call	flush_tlb

; 189  : 		x64_mfence();

	call	x64_mfence
$LN1@map_page:

; 190  : 		
; 191  : 	}
; 192  : 	
; 193  : 	uint64_t* pml1 = (uint64_t*)(pml2[i2] & ~(4096 - 1));

	movsxd	rax, DWORD PTR i2$[rsp]
	mov	rcx, QWORD PTR pml2$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, -4096				; fffffffffffff000H
	mov	QWORD PTR pml1$[rsp], rax

; 194  : 	/*if (pml1[i1] & PAGING_PRESENT)
; 195  : 	{
; 196  : 		return false;
; 197  : 	}*/
; 198  : 
; 199  : 	pml1[i1] = physical_address | flags;

	mov	rax, QWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR physical_address$[rsp]
	or	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i1$[rsp]
	mov	rdx, QWORD PTR pml1$[rsp]
	mov	QWORD PTR [rdx+rcx*8], rax

; 200  : 	flush_tlb ((void*)virtual_address);

	mov	rcx, QWORD PTR virtual_address$[rsp]
	call	flush_tlb

; 201  : 	x64_mfence ();

	call	x64_mfence

; 202  : 	return true;

	mov	al, 1

; 203  : }

	add	rsp, 136				; 00000088H
	ret	0
?map_page@@YA_N_K0E@Z ENDP				; map_page
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\vmmngr.cpp
_TEXT	SEGMENT
i$1 = 32
new_cr3$ = 40
i$2 = 48
i$3 = 56
i$4 = 64
i$5 = 72
pdpt$ = 80
pd$ = 88
pos$ = 96
pd2$ = 104
pd4$ = 112
pd3$ = 120
cr3$ = 128
?vmmngr_x86_64_init@@YAXXZ PROC				; vmmngr_x86_64_init

; 82   : void vmmngr_x86_64_init () {

$LN22:
	sub	rsp, 152				; 00000098H

; 83   : 
; 84   : 	uint64_t *cr3 = (uint64_t*)x64_read_cr3();

	call	x64_read_cr3
	mov	QWORD PTR cr3$[rsp], rax

; 85   : 	uint64_t *new_cr3 = (uint64_t*)pmmngr_alloc();    

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR new_cr3$[rsp], rax

; 86   : 	uint64_t *pdpt = (uint64_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR pdpt$[rsp], rax

; 87   : 	uint64_t *pd = (uint64_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR pd$[rsp], rax

; 88   : 	uint64_t *pd2 = (uint64_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR pd2$[rsp], rax

; 89   : 	uint64_t *pd3 = (uint64_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR pd3$[rsp], rax

; 90   : 	uint64_t *pd4 = (uint64_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR pd4$[rsp], rax

; 91   : 
; 92   : 
; 93   : 	memset (new_cr3, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR new_cr3$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 94   : 	memset (pd, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR pd$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 95   : 	memset (pd2, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR pd2$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 96   : 	memset (pd3, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR pd3$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 97   : 	memset (pd4, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR pd4$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 98   : 
; 99   : 	////! Identity Map : first 4 GiB of RAM
; 100  : 
; 101  :     new_cr3[0] = (uint64_t)pdpt | 0x3;

	mov	rax, QWORD PTR pdpt$[rsp]
	or	rax, 3
	mov	ecx, 8
	imul	rcx, 0
	mov	rdx, QWORD PTR new_cr3$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 102  : 	pdpt[0] =  (uintptr_t)&pd[0] | 0x3;

	mov	eax, 8
	imul	rax, 0
	mov	rcx, QWORD PTR pd$[rsp]
	add	rcx, rax
	mov	rax, rcx
	or	eax, 3
	mov	eax, eax
	mov	ecx, 8
	imul	rcx, 0
	mov	rdx, QWORD PTR pdpt$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 103  : 	pdpt[1] = (uintptr_t)&pd2[0] | 0x3;

	mov	eax, 8
	imul	rax, 0
	mov	rcx, QWORD PTR pd2$[rsp]
	add	rcx, rax
	mov	rax, rcx
	or	eax, 3
	mov	eax, eax
	mov	ecx, 8
	imul	rcx, 1
	mov	rdx, QWORD PTR pdpt$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 104  : 	pdpt[2] = (uintptr_t)&pd3[0] | 0x3;

	mov	eax, 8
	imul	rax, 0
	mov	rcx, QWORD PTR pd3$[rsp]
	add	rcx, rax
	mov	rax, rcx
	or	eax, 3
	mov	eax, eax
	mov	ecx, 8
	imul	rcx, 2
	mov	rdx, QWORD PTR pdpt$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 105  : 	pdpt[3] = (uintptr_t)&pd4[0] | 0x3;

	mov	eax, 8
	imul	rax, 0
	mov	rcx, QWORD PTR pd4$[rsp]
	add	rcx, rax
	mov	rax, rcx
	or	eax, 3
	mov	eax, eax
	mov	ecx, 8
	imul	rcx, 3
	mov	rdx, QWORD PTR pdpt$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 106  : 
; 107  : 	for (uint64_t i = 0; i != 2048; ++i)

	mov	QWORD PTR i$5[rsp], 0
	jmp	SHORT $LN19@vmmngr_x86
$LN18@vmmngr_x86:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN19@vmmngr_x86:
	cmp	QWORD PTR i$5[rsp], 2048		; 00000800H
	je	SHORT $LN17@vmmngr_x86

; 108  : 		pd[i] = i * 512 * 4096 | 0x83;

	mov	rax, QWORD PTR i$5[rsp]
	imul	rax, 512				; 00000200H
	imul	rax, 4096				; 00001000H
	or	rax, 131				; 00000083H
	mov	rcx, QWORD PTR pd$[rsp]
	mov	rdx, QWORD PTR i$5[rsp]
	mov	QWORD PTR [rcx+rdx*8], rax
	jmp	SHORT $LN18@vmmngr_x86
$LN17@vmmngr_x86:

; 109  : 
; 110  : 	uint64_t pos = 1024*1024*1024;

	mov	QWORD PTR pos$[rsp], 1073741824		; 40000000H

; 111  : 	for (uint64_t i = 0; i != 512; ++i)

	mov	QWORD PTR i$3[rsp], 0
	jmp	SHORT $LN16@vmmngr_x86
$LN15@vmmngr_x86:
	mov	rax, QWORD PTR i$3[rsp]
	inc	rax
	mov	QWORD PTR i$3[rsp], rax
$LN16@vmmngr_x86:
	cmp	QWORD PTR i$3[rsp], 512			; 00000200H
	je	SHORT $LN14@vmmngr_x86

; 112  : 		pd2[i] = pos + i * 512 * 4096 | 0x83;

	mov	rax, QWORD PTR i$3[rsp]
	imul	rax, 512				; 00000200H
	imul	rax, 4096				; 00001000H
	mov	rcx, QWORD PTR pos$[rsp]
	add	rcx, rax
	mov	rax, rcx
	or	rax, 131				; 00000083H
	mov	rcx, QWORD PTR pd2$[rsp]
	mov	rdx, QWORD PTR i$3[rsp]
	mov	QWORD PTR [rcx+rdx*8], rax
	jmp	SHORT $LN15@vmmngr_x86
$LN14@vmmngr_x86:

; 113  : 
; 114  : 	for (uint64_t i = 0; i != 512; ++i)

	mov	QWORD PTR i$4[rsp], 0
	jmp	SHORT $LN13@vmmngr_x86
$LN12@vmmngr_x86:
	mov	rax, QWORD PTR i$4[rsp]
	inc	rax
	mov	QWORD PTR i$4[rsp], rax
$LN13@vmmngr_x86:
	cmp	QWORD PTR i$4[rsp], 512			; 00000200H
	je	SHORT $LN11@vmmngr_x86

; 115  : 		pd3[i] = 2*pos + i * 512 * 4096 | 0x83;

	mov	rax, QWORD PTR i$4[rsp]
	imul	rax, 512				; 00000200H
	imul	rax, 4096				; 00001000H
	mov	rcx, QWORD PTR pos$[rsp]
	lea	rax, QWORD PTR [rax+rcx*2]
	or	rax, 131				; 00000083H
	mov	rcx, QWORD PTR pd3$[rsp]
	mov	rdx, QWORD PTR i$4[rsp]
	mov	QWORD PTR [rcx+rdx*8], rax
	jmp	SHORT $LN12@vmmngr_x86
$LN11@vmmngr_x86:

; 116  : 
; 117  : 	for (uint64_t i = 0; i != 512; ++i)

	mov	QWORD PTR i$2[rsp], 0
	jmp	SHORT $LN10@vmmngr_x86
$LN9@vmmngr_x86:
	mov	rax, QWORD PTR i$2[rsp]
	inc	rax
	mov	QWORD PTR i$2[rsp], rax
$LN10@vmmngr_x86:
	cmp	QWORD PTR i$2[rsp], 512			; 00000200H
	je	SHORT $LN8@vmmngr_x86

; 118  : 		pd4[i] = 3*pos + i * 512 * 4096 | 0x83;

	mov	rax, QWORD PTR pos$[rsp]
	imul	rax, 3
	mov	rcx, QWORD PTR i$2[rsp]
	imul	rcx, 512				; 00000200H
	imul	rcx, 4096				; 00001000H
	add	rax, rcx
	or	rax, 131				; 00000083H
	mov	rcx, QWORD PTR pd4$[rsp]
	mov	rdx, QWORD PTR i$2[rsp]
	mov	QWORD PTR [rcx+rdx*8], rax
	jmp	SHORT $LN9@vmmngr_x86
$LN8@vmmngr_x86:

; 119  : 
; 120  : 
; 121  : 	/*new_cr3[0] = cr3[0];
; 122  : 	new_cr3[1] = cr3[1];*/
; 123  : 	//! Copy all higher half mappings to new mapping
; 124  : 	for (int i = 0; i < 512; ++i) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN7@vmmngr_x86
$LN6@vmmngr_x86:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN7@vmmngr_x86:
	cmp	DWORD PTR i$1[rsp], 512			; 00000200H
	jge	SHORT $LN5@vmmngr_x86

; 125  : 		if (i < 256) {

	cmp	DWORD PTR i$1[rsp], 256			; 00000100H
	jge	SHORT $LN4@vmmngr_x86

; 126  : 			//new_cr3[i] = 0;
; 127  : 			continue;

	jmp	SHORT $LN6@vmmngr_x86
$LN4@vmmngr_x86:

; 128  : 		}
; 129  : 		if (i == 511)

	cmp	DWORD PTR i$1[rsp], 511			; 000001ffH
	jne	SHORT $LN3@vmmngr_x86

; 130  : 			continue;

	jmp	SHORT $LN6@vmmngr_x86
$LN3@vmmngr_x86:

; 131  : 
; 132  : 		if (cr3[i] & PAGING_PRESENT) {

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN2@vmmngr_x86

; 133  : 			new_cr3[i] = cr3[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR new_cr3$[rsp]
	mov	r8, QWORD PTR cr3$[rsp]
	mov	rax, QWORD PTR [r8+rax*8]
	mov	QWORD PTR [rdx+rcx*8], rax

; 134  : 		}else {

	jmp	SHORT $LN1@vmmngr_x86
$LN2@vmmngr_x86:

; 135  : 			new_cr3[i] = 0;

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR new_cr3$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
$LN1@vmmngr_x86:

; 136  : 		}
; 137  : 		
; 138  : 	}

	jmp	SHORT $LN6@vmmngr_x86
$LN5@vmmngr_x86:

; 139  : 
; 140  : 	//! Store the kernel's address space
; 141  : 	root_cr3 = new_cr3;

	mov	rax, QWORD PTR new_cr3$[rsp]
	mov	QWORD PTR ?root_cr3@@3PEA_KEA, rax	; root_cr3

; 142  : 
; 143  : 	//! Switch to new mapping!!!
; 144  : 	x64_write_cr3 ((size_t)new_cr3);

	mov	rcx, QWORD PTR new_cr3$[rsp]
	call	x64_write_cr3

; 145  : }

	add	rsp, 152				; 00000098H
	ret	0
?vmmngr_x86_64_init@@YAXXZ ENDP				; vmmngr_x86_64_init
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\vmmngr.cpp
_TEXT	SEGMENT
addr$ = 8
?p_index@@YA_K_K@Z PROC					; p_index

; 65   : size_t p_index (uint64_t addr){

	mov	QWORD PTR [rsp+8], rcx

; 66   : 	return (addr & 0x7ff);

	mov	rax, QWORD PTR addr$[rsp]
	and	rax, 2047				; 000007ffH

; 67   : }

	ret	0
?p_index@@YA_K_K@Z ENDP					; p_index
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\vmmngr.cpp
_TEXT	SEGMENT
addr$ = 8
?pt_index@@YA_K_K@Z PROC				; pt_index

; 61   : size_t pt_index (uint64_t addr){

	mov	QWORD PTR [rsp+8], rcx

; 62   : 	return (addr >> 12) & 0x1ff;

	mov	rax, QWORD PTR addr$[rsp]
	shr	rax, 12
	and	rax, 511				; 000001ffH

; 63   : }

	ret	0
?pt_index@@YA_K_K@Z ENDP				; pt_index
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\vmmngr.cpp
_TEXT	SEGMENT
addr$ = 8
?pd_index@@YA_K_K@Z PROC				; pd_index

; 57   : size_t pd_index (uint64_t addr){

	mov	QWORD PTR [rsp+8], rcx

; 58   : 	return (addr >> 21) & 0x1ff;

	mov	rax, QWORD PTR addr$[rsp]
	shr	rax, 21
	and	rax, 511				; 000001ffH

; 59   : }

	ret	0
?pd_index@@YA_K_K@Z ENDP				; pd_index
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\vmmngr.cpp
_TEXT	SEGMENT
addr$ = 8
?pdp_index@@YA_K_K@Z PROC				; pdp_index

; 53   : size_t pdp_index (uint64_t addr){

	mov	QWORD PTR [rsp+8], rcx

; 54   : 	return (addr >> 30) & 0x1ff;

	mov	rax, QWORD PTR addr$[rsp]
	shr	rax, 30
	and	rax, 511				; 000001ffH

; 55   : }

	ret	0
?pdp_index@@YA_K_K@Z ENDP				; pdp_index
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\vmmngr.cpp
_TEXT	SEGMENT
addr$ = 8
?pml4_index@@YA_K_K@Z PROC				; pml4_index

; 49   : size_t  pml4_index (uint64_t addr){

	mov	QWORD PTR [rsp+8], rcx

; 50   : 	return (addr >> 39) & 0x1ff;

	mov	rax, QWORD PTR addr$[rsp]
	shr	rax, 39					; 00000027H
	and	rax, 511				; 000001ffH

; 51   : }

	ret	0
?pml4_index@@YA_K_K@Z ENDP				; pml4_index
_TEXT	ENDS
END
