; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ent@@3P6AXPEAX@ZEA				; ent
PUBLIC	?image_base@@3_KA				; image_base
_BSS	SEGMENT
?ent@@3P6AXPEAX@ZEA DQ 01H DUP (?)			; ent
?image_base@@3_KA DQ 01H DUP (?)			; image_base
_BSS	ENDS
CONST	SEGMENT
$SG3578	DB	'xnclib.dll', 00H
	ORG $+5
$SG3582	DB	'xnacrl.dll', 00H
	ORG $+5
$SG3586	DB	'xewid.dll', 00H
CONST	ENDS
PUBLIC	?load_pe_file@@YAXPEA_KH@Z			; load_pe_file
PUBLIC	?get_entry_point@@YAP6AXPEAX@ZXZ		; get_entry_point
PUBLIC	?get_image_base@@YA_KXZ				; get_image_base
PUBLIC	?AuGetProcAddress@@YAPEAXPEAXPEBD@Z		; AuGetProcAddress
PUBLIC	?AuPeLinkLibrary@@YAXPEAX@Z			; AuPeLinkLibrary
PUBLIC	?AuPeLinkLibraryEx@@YAXPEAX0@Z			; AuPeLinkLibraryEx
PUBLIC	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
PUBLIC	??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z ; raw_offset<_IMAGE_EXPORT_DIRECTORY * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z		; raw_offset<unsigned int * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z		; raw_offset<unsigned short * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z		; raw_offset<char * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z		; raw_offset<void * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAXH@Z ; raw_offset<_IMAGE_IMPORT_DIRECTORY * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z		; raw_offset<char const * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEA_KPEAX@@YAPEA_KPEAXH@Z		; raw_offset<unsigned __int64 * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z ; raw_offset<_IMAGE_IMPORT_HINT_TABLE * __ptr64,void * __ptr64>
EXTRN	strcmp:PROC
pdata	SEGMENT
$pdata$?load_pe_file@@YAXPEA_KH@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$?load_pe_file@@YAXPEA_KH@Z
$pdata$?AuGetProcAddress@@YAPEAXPEAXPEBD@Z DD imagerel $LN10
	DD	imagerel $LN10+386
	DD	imagerel $unwind$?AuGetProcAddress@@YAPEAXPEAXPEBD@Z
$pdata$?AuPeLinkLibrary@@YAXPEAX@Z DD imagerel $LN11
	DD	imagerel $LN11+380
	DD	imagerel $unwind$?AuPeLinkLibrary@@YAXPEAX@Z
$pdata$?AuPeLinkLibraryEx@@YAXPEAX0@Z DD imagerel $LN19
	DD	imagerel $LN19+575
	DD	imagerel $unwind$?AuPeLinkLibraryEx@@YAXPEAX0@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?load_pe_file@@YAXPEA_KH@Z DD 010d01H
	DD	0620dH
$unwind$?AuGetProcAddress@@YAPEAXPEAXPEBD@Z DD 010e01H
	DD	0e20eH
$unwind$?AuPeLinkLibrary@@YAXPEAX@Z DD 010901H
	DD	0e209H
$unwind$?AuPeLinkLibraryEx@@YAXPEAX0@Z DD 021101H
	DD	0110111H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z PROC ; raw_offset<_IMAGE_IMPORT_HINT_TABLE * __ptr64,void * __ptr64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z ENDP ; raw_offset<_IMAGE_IMPORT_HINT_TABLE * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEA_KPEAX@@YAPEA_KPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEA_KPEAX@@YAPEA_KPEAXH@Z PROC		; raw_offset<unsigned __int64 * __ptr64,void * __ptr64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PEA_KPEAX@@YAPEA_KPEAXH@Z ENDP		; raw_offset<unsigned __int64 * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z PROC		; raw_offset<char const * __ptr64,void * __ptr64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z ENDP		; raw_offset<char const * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAXH@Z PROC ; raw_offset<_IMAGE_IMPORT_DIRECTORY * __ptr64,void * __ptr64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAXH@Z ENDP ; raw_offset<_IMAGE_IMPORT_DIRECTORY * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z PROC		; raw_offset<void * __ptr64,void * __ptr64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z ENDP		; raw_offset<void * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z PROC		; raw_offset<char * __ptr64,void * __ptr64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z ENDP		; raw_offset<char * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z PROC		; raw_offset<unsigned short * __ptr64,void * __ptr64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z ENDP		; raw_offset<unsigned short * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z PROC		; raw_offset<unsigned int * __ptr64,void * __ptr64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z ENDP		; raw_offset<unsigned int * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z PROC ; raw_offset<_IMAGE_EXPORT_DIRECTORY * __ptr64,void * __ptr64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z ENDP ; raw_offset<_IMAGE_EXPORT_DIRECTORY * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z PROC ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ENDP ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\pe.cpp
_TEXT	SEGMENT
iat$1 = 32
n$2 = 40
func$3 = 48
procaddr$4 = 56
importdir$ = 64
datadir$ = 72
nt_headers$ = 80
dos_header$ = 88
fname$5 = 96
paddr$6 = 104
hint$7 = 112
addr$8 = 120
image$ = 144
exporter$ = 152
?AuPeLinkLibraryEx@@YAXPEAX0@Z PROC			; AuPeLinkLibraryEx

; 115  : void AuPeLinkLibraryEx (void* image, void* exporter) {

$LN19:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H

; 116  : 	PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)image;

	mov	rax, QWORD PTR image$[rsp]
	mov	QWORD PTR dos_header$[rsp], rax

; 117  : 	PIMAGE_NT_HEADERS nt_headers = raw_offset<PIMAGE_NT_HEADERS>(dos_header, dos_header->e_lfanew);

	mov	rax, QWORD PTR dos_header$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos_header$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR nt_headers$[rsp], rax

; 118  : 	if (IMAGE_DATA_DIRECTORY_IMPORT + 1 > nt_headers->OptionalHeader.NumberOfRvaAndSizes)

	mov	rax, QWORD PTR nt_headers$[rsp]
	cmp	DWORD PTR [rax+132], 2
	jae	SHORT $LN16@AuPeLinkLi

; 119  : 		return;

	jmp	$LN17@AuPeLinkLi
$LN16@AuPeLinkLi:

; 120  : 	IMAGE_DATA_DIRECTORY& datadir = nt_headers->OptionalHeader.DataDirectory[IMAGE_DATA_DIRECTORY_IMPORT];

	mov	eax, 8
	imul	rax, 1
	mov	rcx, QWORD PTR nt_headers$[rsp]
	lea	rax, QWORD PTR [rcx+rax+136]
	mov	QWORD PTR datadir$[rsp], rax

; 121  : 	if (datadir.VirtualAddress == 0 || datadir.Size == 0) {

	mov	rax, QWORD PTR datadir$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN14@AuPeLinkLi
	mov	rax, QWORD PTR datadir$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN15@AuPeLinkLi
$LN14@AuPeLinkLi:

; 122  : 		return;

	jmp	$LN17@AuPeLinkLi
$LN15@AuPeLinkLi:

; 123  : 	}
; 124  : 	PIMAGE_IMPORT_DIRECTORY importdir = raw_offset<PIMAGE_IMPORT_DIRECTORY>(image, datadir.VirtualAddress);

	mov	rax, QWORD PTR datadir$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAXH@Z ; raw_offset<_IMAGE_IMPORT_DIRECTORY * __ptr64,void * __ptr64>
	mov	QWORD PTR importdir$[rsp], rax

; 125  : 	for (size_t n = 0; importdir[n].ThunkTableRva; ++n) {

	mov	QWORD PTR n$2[rsp], 0
	jmp	SHORT $LN13@AuPeLinkLi
$LN12@AuPeLinkLi:
	mov	rax, QWORD PTR n$2[rsp]
	inc	rax
	mov	QWORD PTR n$2[rsp], rax
$LN13@AuPeLinkLi:
	mov	rax, QWORD PTR n$2[rsp]
	imul	rax, 20
	mov	rcx, QWORD PTR importdir$[rsp]
	cmp	DWORD PTR [rcx+rax+16], 0
	je	$LN11@AuPeLinkLi

; 126  : 		const char* func = raw_offset<const char*>(image, importdir[n].NameRva);

	mov	rax, QWORD PTR n$2[rsp]
	imul	rax, 20
	mov	rcx, QWORD PTR importdir$[rsp]
	mov	edx, DWORD PTR [rcx+rax+12]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z	; raw_offset<char const * __ptr64,void * __ptr64>
	mov	QWORD PTR func$3[rsp], rax

; 127  : 		
; 128  : 		if(func == 0)

	cmp	QWORD PTR func$3[rsp], 0
	jne	SHORT $LN10@AuPeLinkLi

; 129  : 			return;

	jmp	$LN17@AuPeLinkLi
$LN10@AuPeLinkLi:

; 130  : 		
; 131  : 		/* Here Check the required dll name, for the base address */
; 132  : 		if (strcmp(func,"xnclib.dll") == 0){

	lea	rdx, OFFSET FLAT:$SG3578
	mov	rcx, QWORD PTR func$3[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN9@AuPeLinkLi

; 133  : 			exporter = (void*)XNCLIB_BASE;

	mov	rax, 4294967296				; 0000000100000000H
	mov	QWORD PTR exporter$[rsp], rax
	jmp	SHORT $LN8@AuPeLinkLi
$LN9@AuPeLinkLi:

; 134  : 		}else if (strcmp(func,"xnacrl.dll") == 0){

	lea	rdx, OFFSET FLAT:$SG3582
	mov	rcx, QWORD PTR func$3[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN7@AuPeLinkLi

; 135  : 			exporter = (void*)XNACRL_BASE;

	mov	rax, 4299161600				; 0000000100400000H
	mov	QWORD PTR exporter$[rsp], rax
	jmp	SHORT $LN6@AuPeLinkLi
$LN7@AuPeLinkLi:

; 136  : 		}else if (strcmp(func,"xewid.dll") == 0){

	lea	rdx, OFFSET FLAT:$SG3586
	mov	rcx, QWORD PTR func$3[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN5@AuPeLinkLi

; 137  : 			exporter = (void*)XNWID_BASE;

	mov	rax, 4297064448				; 0000000100200000H
	mov	QWORD PTR exporter$[rsp], rax
$LN5@AuPeLinkLi:
$LN6@AuPeLinkLi:
$LN8@AuPeLinkLi:

; 138  : 		}
; 139  : 
; 140  : 		
; 141  : 		PIMAGE_IMPORT_LOOKUP_TABLE_PE32P iat = raw_offset<PIMAGE_IMPORT_LOOKUP_TABLE_PE32P>(image, importdir[n].ThunkTableRva);

	mov	rax, QWORD PTR n$2[rsp]
	imul	rax, 20
	mov	rcx, QWORD PTR importdir$[rsp]
	mov	edx, DWORD PTR [rcx+rax+16]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEA_KPEAX@@YAPEA_KPEAXH@Z	; raw_offset<unsigned __int64 * __ptr64,void * __ptr64>
	mov	QWORD PTR iat$1[rsp], rax
$LN4@AuPeLinkLi:

; 142  : 	
; 143  : 		while (*iat) {

	mov	rax, QWORD PTR iat$1[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN3@AuPeLinkLi

; 144  : 			PIMAGE_IMPORT_HINT_TABLE hint = raw_offset<PIMAGE_IMPORT_HINT_TABLE>(image, *iat);

	mov	rax, QWORD PTR iat$1[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z ; raw_offset<_IMAGE_IMPORT_HINT_TABLE * __ptr64,void * __ptr64>
	mov	QWORD PTR hint$7[rsp], rax

; 145  : 			const char* fname = hint->name;

	mov	rax, QWORD PTR hint$7[rsp]
	add	rax, 2
	mov	QWORD PTR fname$5[rsp], rax

; 146  : 			
; 147  : 			void* procaddr = AuGetProcAddress(exporter, fname);

	mov	rdx, QWORD PTR fname$5[rsp]
	mov	rcx, QWORD PTR exporter$[rsp]
	call	?AuGetProcAddress@@YAPEAXPEAXPEBD@Z	; AuGetProcAddress
	mov	QWORD PTR procaddr$4[rsp], rax

; 148  : 			
; 149  : 			if (procaddr != 0) {

	cmp	QWORD PTR procaddr$4[rsp], 0
	je	SHORT $LN2@AuPeLinkLi

; 150  : 				uint64_t addr = *iat;

	mov	rax, QWORD PTR iat$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR addr$8[rsp], rax

; 151  : 				uint64_t paddr = (uint64_t)procaddr;

	mov	rax, QWORD PTR procaddr$4[rsp]
	mov	QWORD PTR paddr$6[rsp], rax

; 152  : 				if (addr == paddr) {

	mov	rax, QWORD PTR paddr$6[rsp]
	cmp	QWORD PTR addr$8[rsp], rax
	jne	SHORT $LN1@AuPeLinkLi

; 153  : 					return;

	jmp	SHORT $LN17@AuPeLinkLi
$LN1@AuPeLinkLi:

; 154  : 				}
; 155  : 
; 156  : 				*iat = (uint64_t)procaddr;

	mov	rax, QWORD PTR iat$1[rsp]
	mov	rcx, QWORD PTR procaddr$4[rsp]
	mov	QWORD PTR [rax], rcx
$LN2@AuPeLinkLi:

; 157  : 			}
; 158  : 			++iat;

	mov	rax, QWORD PTR iat$1[rsp]
	add	rax, 8
	mov	QWORD PTR iat$1[rsp], rax

; 159  : 		}

	jmp	$LN4@AuPeLinkLi
$LN3@AuPeLinkLi:

; 160  : 	}

	jmp	$LN12@AuPeLinkLi
$LN11@AuPeLinkLi:
$LN17@AuPeLinkLi:

; 161  : }

	add	rsp, 136				; 00000088H
	ret	0
?AuPeLinkLibraryEx@@YAXPEAX0@Z ENDP			; AuPeLinkLibraryEx
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\pe.cpp
_TEXT	SEGMENT
iat$1 = 32
n$2 = 40
datadir$ = 48
importdir$ = 56
dos_header$ = 64
nt_headers$ = 72
fname$3 = 80
procaddr$4 = 88
hint$5 = 96
func$6 = 104
image$ = 128
?AuPeLinkLibrary@@YAXPEAX@Z PROC			; AuPeLinkLibrary

; 83   : void AuPeLinkLibrary (void* image) {

$LN11:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 84   : 	PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)image;

	mov	rax, QWORD PTR image$[rsp]
	mov	QWORD PTR dos_header$[rsp], rax

; 85   : 	PIMAGE_NT_HEADERS nt_headers = raw_offset<PIMAGE_NT_HEADERS>(dos_header, dos_header->e_lfanew);

	mov	rax, QWORD PTR dos_header$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos_header$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR nt_headers$[rsp], rax

; 86   : 	if (IMAGE_DATA_DIRECTORY_IMPORT + 1 > nt_headers->OptionalHeader.NumberOfRvaAndSizes)

	mov	rax, QWORD PTR nt_headers$[rsp]
	cmp	DWORD PTR [rax+132], 2
	jae	SHORT $LN8@AuPeLinkLi

; 87   : 		return;

	jmp	$LN9@AuPeLinkLi
$LN8@AuPeLinkLi:

; 88   : 	IMAGE_DATA_DIRECTORY& datadir = nt_headers->OptionalHeader.DataDirectory[IMAGE_DATA_DIRECTORY_IMPORT];

	mov	eax, 8
	imul	rax, 1
	mov	rcx, QWORD PTR nt_headers$[rsp]
	lea	rax, QWORD PTR [rcx+rax+136]
	mov	QWORD PTR datadir$[rsp], rax

; 89   : 	if (datadir.VirtualAddress == 0 || datadir.Size == 0) {

	mov	rax, QWORD PTR datadir$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN6@AuPeLinkLi
	mov	rax, QWORD PTR datadir$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN7@AuPeLinkLi
$LN6@AuPeLinkLi:

; 90   : 		return;

	jmp	$LN9@AuPeLinkLi
$LN7@AuPeLinkLi:

; 91   : 	}
; 92   : 	PIMAGE_IMPORT_DIRECTORY importdir = raw_offset<PIMAGE_IMPORT_DIRECTORY>(image, datadir.VirtualAddress);

	mov	rax, QWORD PTR datadir$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAU_IMAGE_IMPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_IMPORT_DIRECTORY@@PEAXH@Z ; raw_offset<_IMAGE_IMPORT_DIRECTORY * __ptr64,void * __ptr64>
	mov	QWORD PTR importdir$[rsp], rax

; 93   : 	for (size_t n = 0; importdir[n].ThunkTableRva; ++n) {

	mov	QWORD PTR n$2[rsp], 0
	jmp	SHORT $LN5@AuPeLinkLi
$LN4@AuPeLinkLi:
	mov	rax, QWORD PTR n$2[rsp]
	inc	rax
	mov	QWORD PTR n$2[rsp], rax
$LN5@AuPeLinkLi:
	mov	rax, QWORD PTR n$2[rsp]
	imul	rax, 20
	mov	rcx, QWORD PTR importdir$[rsp]
	cmp	DWORD PTR [rcx+rax+16], 0
	je	$LN3@AuPeLinkLi

; 94   : 		const char* func = raw_offset<const char*>(image, importdir[n].NameRva);

	mov	rax, QWORD PTR n$2[rsp]
	imul	rax, 20
	mov	rcx, QWORD PTR importdir$[rsp]
	mov	edx, DWORD PTR [rcx+rax+12]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEBDPEAX@@YAPEBDPEAXH@Z	; raw_offset<char const * __ptr64,void * __ptr64>
	mov	QWORD PTR func$6[rsp], rax

; 95   : 		PIMAGE_IMPORT_LOOKUP_TABLE_PE32P iat = raw_offset<PIMAGE_IMPORT_LOOKUP_TABLE_PE32P>(image, importdir[n].ThunkTableRva);

	mov	rax, QWORD PTR n$2[rsp]
	imul	rax, 20
	mov	rcx, QWORD PTR importdir$[rsp]
	mov	edx, DWORD PTR [rcx+rax+16]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEA_KPEAX@@YAPEA_KPEAXH@Z	; raw_offset<unsigned __int64 * __ptr64,void * __ptr64>
	mov	QWORD PTR iat$1[rsp], rax
$LN2@AuPeLinkLi:

; 96   : 		while (*iat) {

	mov	rax, QWORD PTR iat$1[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN1@AuPeLinkLi

; 97   : 			PIMAGE_IMPORT_HINT_TABLE hint = raw_offset<PIMAGE_IMPORT_HINT_TABLE>(image, *iat);

	mov	rax, QWORD PTR iat$1[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAU_IMAGE_IMPORT_HINT_TABLE@@PEAX@@YAPEAU_IMAGE_IMPORT_HINT_TABLE@@PEAXH@Z ; raw_offset<_IMAGE_IMPORT_HINT_TABLE * __ptr64,void * __ptr64>
	mov	QWORD PTR hint$5[rsp], rax

; 98   : 			const char* fname = hint->name;

	mov	rax, QWORD PTR hint$5[rsp]
	add	rax, 2
	mov	QWORD PTR fname$3[rsp], rax

; 99   : 			void* procaddr = AuGetProcAddress((void*)0xFFFFC00000000000, fname);

	mov	rdx, QWORD PTR fname$3[rsp]
	mov	rcx, -70368744177664			; ffffc00000000000H
	call	?AuGetProcAddress@@YAPEAXPEAXPEBD@Z	; AuGetProcAddress
	mov	QWORD PTR procaddr$4[rsp], rax

; 100  : 			*iat = (uint64_t)procaddr;

	mov	rax, QWORD PTR iat$1[rsp]
	mov	rcx, QWORD PTR procaddr$4[rsp]
	mov	QWORD PTR [rax], rcx

; 101  : 			++iat;

	mov	rax, QWORD PTR iat$1[rsp]
	add	rax, 8
	mov	QWORD PTR iat$1[rsp], rax

; 102  : 		}

	jmp	SHORT $LN2@AuPeLinkLi
$LN1@AuPeLinkLi:

; 103  : 	}

	jmp	$LN4@AuPeLinkLi
$LN3@AuPeLinkLi:
$LN9@AuPeLinkLi:

; 104  : }

	add	rsp, 120				; 00000078H
	ret	0
?AuPeLinkLibrary@@YAXPEAX@Z ENDP			; AuPeLinkLibrary
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\pe.cpp
_TEXT	SEGMENT
i$1 = 32
ordinal$2 = 36
exportdir$ = 40
FunctionAddress$3 = 48
datadir$ = 56
dos_header$ = 64
ntHeaders$ = 72
function_name$4 = 80
FunctionOrdinalAddressArray$ = 88
FuntionNameAddressArray$ = 96
FunctionAddressArray$ = 104
image$ = 128
procname$ = 136
?AuGetProcAddress@@YAPEAXPEAXPEBD@Z PROC		; AuGetProcAddress

; 51   : void* AuGetProcAddress(void *image, const char* procname){

$LN10:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 52   : 	
; 53   : 	PIMAGE_DOS_HEADER dos_header  = (PIMAGE_DOS_HEADER)image;

	mov	rax, QWORD PTR image$[rsp]
	mov	QWORD PTR dos_header$[rsp], rax

; 54   : 	PIMAGE_NT_HEADERS ntHeaders = raw_offset<PIMAGE_NT_HEADERS>(dos_header, dos_header->e_lfanew); 

	mov	rax, QWORD PTR dos_header$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos_header$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR ntHeaders$[rsp], rax

; 55   : 	if (IMAGE_DATA_DIRECTORY_EXPORT + 1 > ntHeaders->OptionalHeader.NumberOfRvaAndSizes)

	mov	rax, QWORD PTR ntHeaders$[rsp]
	cmp	DWORD PTR [rax+132], 1
	jae	SHORT $LN7@AuGetProcA

; 56   : 		return NULL;

	xor	eax, eax
	jmp	$LN8@AuGetProcA
$LN7@AuGetProcA:

; 57   : 	IMAGE_DATA_DIRECTORY& datadir = ntHeaders->OptionalHeader.DataDirectory[IMAGE_DATA_DIRECTORY_EXPORT];

	mov	eax, 8
	imul	rax, 0
	mov	rcx, QWORD PTR ntHeaders$[rsp]
	lea	rax, QWORD PTR [rcx+rax+136]
	mov	QWORD PTR datadir$[rsp], rax

; 58   : 	if (datadir.VirtualAddress == 0 || datadir.Size == 0)

	mov	rax, QWORD PTR datadir$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN5@AuGetProcA
	mov	rax, QWORD PTR datadir$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN6@AuGetProcA
$LN5@AuGetProcA:

; 59   : 		return NULL;

	xor	eax, eax
	jmp	$LN8@AuGetProcA
$LN6@AuGetProcA:

; 60   : 	PIMAGE_EXPORT_DIRECTORY exportdir = raw_offset<PIMAGE_EXPORT_DIRECTORY>(image, datadir.VirtualAddress);

	mov	rax, QWORD PTR datadir$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z ; raw_offset<_IMAGE_EXPORT_DIRECTORY * __ptr64,void * __ptr64>
	mov	QWORD PTR exportdir$[rsp], rax

; 61   : 	uint32_t* FuntionNameAddressArray = raw_offset<uint32_t*>(image,exportdir->AddressOfNames);

	mov	rax, QWORD PTR exportdir$[rsp]
	mov	edx, DWORD PTR [rax+32]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z	; raw_offset<unsigned int * __ptr64,void * __ptr64>
	mov	QWORD PTR FuntionNameAddressArray$[rsp], rax

; 62   : 	uint16_t* FunctionOrdinalAddressArray = raw_offset<uint16_t*>(image,exportdir->AddressOfNameOrdinal);

	mov	rax, QWORD PTR exportdir$[rsp]
	mov	edx, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z	; raw_offset<unsigned short * __ptr64,void * __ptr64>
	mov	QWORD PTR FunctionOrdinalAddressArray$[rsp], rax

; 63   : 	uint32_t* FunctionAddressArray = raw_offset<uint32_t*>(image,exportdir->AddressOfFunctions);

	mov	rax, QWORD PTR exportdir$[rsp]
	mov	edx, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z	; raw_offset<unsigned int * __ptr64,void * __ptr64>
	mov	QWORD PTR FunctionAddressArray$[rsp], rax

; 64   : 
; 65   : 	for (int i = 0; i < exportdir->NumberOfNames; i++ ) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@AuGetProcA
$LN3@AuGetProcA:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@AuGetProcA:
	mov	rax, QWORD PTR exportdir$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN2@AuGetProcA

; 66   : 
; 67   : 	    char* function_name = raw_offset<char*>(image,FuntionNameAddressArray [i]);

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR FuntionNameAddressArray$[rsp]
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z	; raw_offset<char * __ptr64,void * __ptr64>
	mov	QWORD PTR function_name$4[rsp], rax

; 68   : 		if (strcmp (function_name, procname) == 0) {

	mov	rdx, QWORD PTR procname$[rsp]
	mov	rcx, QWORD PTR function_name$4[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN1@AuGetProcA

; 69   : 			uint16_t ordinal = FunctionOrdinalAddressArray[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR FunctionOrdinalAddressArray$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	WORD PTR ordinal$2[rsp], ax

; 70   : 			uint32_t FunctionAddress = FunctionAddressArray [ordinal];

	movzx	eax, WORD PTR ordinal$2[rsp]
	mov	rcx, QWORD PTR FunctionAddressArray$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR FunctionAddress$3[rsp], eax

; 71   : 			return raw_offset<void*>(image,FunctionAddress);

	mov	edx, DWORD PTR FunctionAddress$3[rsp]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z	; raw_offset<void * __ptr64,void * __ptr64>
	jmp	SHORT $LN8@AuGetProcA
$LN1@AuGetProcA:

; 72   : 		}
; 73   : 	}

	jmp	$LN3@AuGetProcA
$LN2@AuGetProcA:

; 74   : 
; 75   : 	return nullptr;

	xor	eax, eax
$LN8@AuGetProcA:

; 76   : }

	add	rsp, 120				; 00000078H
	ret	0
?AuGetProcAddress@@YAPEAXPEAXPEBD@Z ENDP		; AuGetProcAddress
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\pe.cpp
_TEXT	SEGMENT
?get_image_base@@YA_KXZ PROC				; get_image_base

; 47   : 	return image_base;

	mov	rax, QWORD PTR ?image_base@@3_KA	; image_base

; 48   : }

	ret	0
?get_image_base@@YA_KXZ ENDP				; get_image_base
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\pe.cpp
_TEXT	SEGMENT
?get_entry_point@@YAP6AXPEAX@ZXZ PROC			; get_entry_point

; 42   : 	return ent;

	mov	rax, QWORD PTR ?ent@@3P6AXPEAX@ZEA	; ent

; 43   : }

	ret	0
?get_entry_point@@YAP6AXPEAX@ZXZ ENDP			; get_entry_point
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\pe.cpp
_TEXT	SEGMENT
nt$ = 32
dos$ = 40
buffer$ = 64
size$ = 72
?load_pe_file@@YAXPEA_KH@Z PROC				; load_pe_file

; 23   : void load_pe_file (uint64_t* buffer, int size) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 24   : 
; 25   : 	IMAGE_DOS_HEADER* dos = (IMAGE_DOS_HEADER*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR dos$[rsp], rax

; 26   : 	PIMAGE_NT_HEADERS nt = raw_offset<PIMAGE_NT_HEADERS>(dos, dos->e_lfanew);

	mov	rax, QWORD PTR dos$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR nt$[rsp], rax

; 27   : 
; 28   :     image_base = nt->OptionalHeader.ImageBase;

	mov	rax, QWORD PTR nt$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR ?image_base@@3_KA, rax	; image_base

; 29   : 	ent = (ientry)(nt->OptionalHeader.AddressOfEntryPoint + nt->OptionalHeader.ImageBase); //buffer

	mov	rax, QWORD PTR nt$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR nt$[rsp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR ?ent@@3P6AXPEAX@ZEA, rax	; ent

; 30   : 	//! For now Xeneva only loads binary that are aligned in 512, 1024 & 4096 byte
; 31   : 	//! aligned. Simply we call its entry address that are expected to be aligned in
; 32   : 	//! 512, 1024 and 4096 bytes
; 33   : 
; 34   : 	//! copy the image to its desired virtual address
; 35   : 	//memcpy ((void*)nt->OptionalHeader.ImageBase,buffer, size);
; 36   : 
; 37   : 	//! set the entry point
; 38   : 	//set_entry_point (nt);
; 39   : }

	add	rsp, 56					; 00000038H
	ret	0
?load_pe_file@@YAXPEA_KH@Z ENDP				; load_pe_file
_TEXT	ENDS
END
