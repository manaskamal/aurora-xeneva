; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ent@@3P6AXPEAX@ZEA				; ent
PUBLIC	?image_base@@3_KA				; image_base
_BSS	SEGMENT
?ent@@3P6AXPEAX@ZEA DQ 01H DUP (?)			; ent
?image_base@@3_KA DQ 01H DUP (?)			; image_base
_BSS	ENDS
PUBLIC	?load_pe_file@@YAXPEAEH@Z			; load_pe_file
PUBLIC	?get_entry_point@@YAP6AXPEAX@ZXZ		; get_entry_point
PUBLIC	?get_image_base@@YA_KXZ				; get_image_base
PUBLIC	?GetProcAddress@@YAPEAXPEAXPEBD@Z		; GetProcAddress
PUBLIC	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
PUBLIC	??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z ; raw_offset<_IMAGE_EXPORT_DIRECTORY * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z		; raw_offset<unsigned int * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z		; raw_offset<unsigned short * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z		; raw_offset<char * __ptr64,void * __ptr64>
PUBLIC	??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z		; raw_offset<void * __ptr64,void * __ptr64>
EXTRN	?strcmp@@YAHPEBD0@Z:PROC			; strcmp
pdata	SEGMENT
$pdata$?load_pe_file@@YAXPEAEH@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$?load_pe_file@@YAXPEAEH@Z
$pdata$?GetProcAddress@@YAPEAXPEAXPEBD@Z DD imagerel $LN10
	DD	imagerel $LN10+386
	DD	imagerel $unwind$?GetProcAddress@@YAPEAXPEAXPEBD@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?load_pe_file@@YAXPEAEH@Z DD 010d01H
	DD	0620dH
$unwind$?GetProcAddress@@YAPEAXPEAXPEBD@Z DD 010e01H
	DD	0e20eH
xdata	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z PROC		; raw_offset<void * __ptr64,void * __ptr64>, COMDAT

; 182  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 183  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 184  : 	}

	ret	0
??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z ENDP		; raw_offset<void * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z PROC		; raw_offset<char * __ptr64,void * __ptr64>, COMDAT

; 182  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 183  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 184  : 	}

	ret	0
??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z ENDP		; raw_offset<char * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z PROC		; raw_offset<unsigned short * __ptr64,void * __ptr64>, COMDAT

; 182  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 183  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 184  : 	}

	ret	0
??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z ENDP		; raw_offset<unsigned short * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z PROC		; raw_offset<unsigned int * __ptr64,void * __ptr64>, COMDAT

; 182  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 183  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 184  : 	}

	ret	0
??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z ENDP		; raw_offset<unsigned int * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z PROC ; raw_offset<_IMAGE_EXPORT_DIRECTORY * __ptr64,void * __ptr64>, COMDAT

; 182  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 183  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 184  : 	}

	ret	0
??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z ENDP ; raw_offset<_IMAGE_EXPORT_DIRECTORY * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z PROC ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>, COMDAT

; 182  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 183  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 184  : 	}

	ret	0
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ENDP ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\pe.cpp
_TEXT	SEGMENT
i$1 = 32
ordinal$2 = 36
exportdir$ = 40
FunctionAddress$3 = 48
datadir$ = 56
dos_header$ = 64
ntHeaders$ = 72
function_name$4 = 80
FunctionOrdinalAddressArray$ = 88
FuntionNameAddressArray$ = 96
FunctionAddressArray$ = 104
image$ = 128
procname$ = 136
?GetProcAddress@@YAPEAXPEAXPEBD@Z PROC			; GetProcAddress

; 49   : void* GetProcAddress(void *image, const char* procname){

$LN10:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H

; 50   : 	
; 51   : 	PIMAGE_DOS_HEADER dos_header  = (PIMAGE_DOS_HEADER)image;

	mov	rax, QWORD PTR image$[rsp]
	mov	QWORD PTR dos_header$[rsp], rax

; 52   : 	PIMAGE_NT_HEADERS ntHeaders = raw_offset<PIMAGE_NT_HEADERS>(dos_header, dos_header->e_lfanew); 

	mov	rax, QWORD PTR dos_header$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos_header$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR ntHeaders$[rsp], rax

; 53   : 	if (IMAGE_DATA_DIRECTORY_EXPORT + 1 > ntHeaders->OptionalHeader.NumberOfRvaAndSizes)

	mov	rax, QWORD PTR ntHeaders$[rsp]
	cmp	DWORD PTR [rax+132], 1
	jae	SHORT $LN7@GetProcAdd

; 54   : 		return NULL;

	xor	eax, eax
	jmp	$LN8@GetProcAdd
$LN7@GetProcAdd:

; 55   : 	IMAGE_DATA_DIRECTORY& datadir = ntHeaders->OptionalHeader.DataDirectory[IMAGE_DATA_DIRECTORY_EXPORT];

	mov	eax, 8
	imul	rax, 0
	mov	rcx, QWORD PTR ntHeaders$[rsp]
	lea	rax, QWORD PTR [rcx+rax+136]
	mov	QWORD PTR datadir$[rsp], rax

; 56   : 	if (datadir.VirtualAddress == 0 || datadir.Size == 0)

	mov	rax, QWORD PTR datadir$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN5@GetProcAdd
	mov	rax, QWORD PTR datadir$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN6@GetProcAdd
$LN5@GetProcAdd:

; 57   : 		return NULL;

	xor	eax, eax
	jmp	$LN8@GetProcAdd
$LN6@GetProcAdd:

; 58   : 	PIMAGE_EXPORT_DIRECTORY exportdir = raw_offset<PIMAGE_EXPORT_DIRECTORY>(image, datadir.VirtualAddress);

	mov	rax, QWORD PTR datadir$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAU_IMAGE_EXPORT_DIRECTORY@@PEAX@@YAPEAU_IMAGE_EXPORT_DIRECTORY@@PEAXH@Z ; raw_offset<_IMAGE_EXPORT_DIRECTORY * __ptr64,void * __ptr64>
	mov	QWORD PTR exportdir$[rsp], rax

; 59   : 	uint32_t* FuntionNameAddressArray = raw_offset<uint32_t*>(image,exportdir->AddressOfNames);

	mov	rax, QWORD PTR exportdir$[rsp]
	mov	edx, DWORD PTR [rax+32]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z	; raw_offset<unsigned int * __ptr64,void * __ptr64>
	mov	QWORD PTR FuntionNameAddressArray$[rsp], rax

; 60   : 	uint16_t* FunctionOrdinalAddressArray = raw_offset<uint16_t*>(image,exportdir->AddressOfNameOrdinal);

	mov	rax, QWORD PTR exportdir$[rsp]
	mov	edx, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAGPEAX@@YAPEAGPEAXH@Z	; raw_offset<unsigned short * __ptr64,void * __ptr64>
	mov	QWORD PTR FunctionOrdinalAddressArray$[rsp], rax

; 61   : 	uint32_t* FunctionAddressArray = raw_offset<uint32_t*>(image,exportdir->AddressOfFunctions);

	mov	rax, QWORD PTR exportdir$[rsp]
	mov	edx, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAIPEAX@@YAPEAIPEAXH@Z	; raw_offset<unsigned int * __ptr64,void * __ptr64>
	mov	QWORD PTR FunctionAddressArray$[rsp], rax

; 62   : 
; 63   : 	for (int i = 0; i < exportdir->NumberOfNames; i++ ) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@GetProcAdd
$LN3@GetProcAdd:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@GetProcAdd:
	mov	rax, QWORD PTR exportdir$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN2@GetProcAdd

; 64   : 
; 65   : 	    char* function_name = raw_offset<char*>(image,FuntionNameAddressArray [i]);

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR FuntionNameAddressArray$[rsp]
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEADPEAX@@YAPEADPEAXH@Z	; raw_offset<char * __ptr64,void * __ptr64>
	mov	QWORD PTR function_name$4[rsp], rax

; 66   : 		if (strcmp (function_name, procname) == 0) {

	mov	rdx, QWORD PTR procname$[rsp]
	mov	rcx, QWORD PTR function_name$4[rsp]
	call	?strcmp@@YAHPEBD0@Z			; strcmp
	test	eax, eax
	jne	SHORT $LN1@GetProcAdd

; 67   : 			uint16_t ordinal = FunctionOrdinalAddressArray[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR FunctionOrdinalAddressArray$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	WORD PTR ordinal$2[rsp], ax

; 68   : 			uint32_t FunctionAddress = FunctionAddressArray [ordinal];

	movzx	eax, WORD PTR ordinal$2[rsp]
	mov	rcx, QWORD PTR FunctionAddressArray$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR FunctionAddress$3[rsp], eax

; 69   : 			return raw_offset<void*>(image,FunctionAddress);

	mov	edx, DWORD PTR FunctionAddress$3[rsp]
	mov	rcx, QWORD PTR image$[rsp]
	call	??$raw_offset@PEAXPEAX@@YAPEAXPEAXH@Z	; raw_offset<void * __ptr64,void * __ptr64>
	jmp	SHORT $LN8@GetProcAdd
$LN1@GetProcAdd:

; 70   : 		}
; 71   : 	}

	jmp	$LN3@GetProcAdd
$LN2@GetProcAdd:

; 72   : 
; 73   : 	return nullptr;

	xor	eax, eax
$LN8@GetProcAdd:

; 74   : }

	add	rsp, 120				; 00000078H
	ret	0
?GetProcAddress@@YAPEAXPEAXPEBD@Z ENDP			; GetProcAddress
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\pe.cpp
_TEXT	SEGMENT
?get_image_base@@YA_KXZ PROC				; get_image_base

; 45   : 	return image_base;

	mov	rax, QWORD PTR ?image_base@@3_KA	; image_base

; 46   : }

	ret	0
?get_image_base@@YA_KXZ ENDP				; get_image_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\pe.cpp
_TEXT	SEGMENT
?get_entry_point@@YAP6AXPEAX@ZXZ PROC			; get_entry_point

; 40   : 	return ent;

	mov	rax, QWORD PTR ?ent@@3P6AXPEAX@ZEA	; ent

; 41   : }

	ret	0
?get_entry_point@@YAP6AXPEAX@ZXZ ENDP			; get_entry_point
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\pe.cpp
_TEXT	SEGMENT
nt$ = 32
dos$ = 40
buffer$ = 64
size$ = 72
?load_pe_file@@YAXPEAEH@Z PROC				; load_pe_file

; 21   : void load_pe_file (unsigned char* buffer, int size) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 22   : 
; 23   : 	IMAGE_DOS_HEADER* dos = (IMAGE_DOS_HEADER*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR dos$[rsp], rax

; 24   : 	PIMAGE_NT_HEADERS nt = raw_offset<PIMAGE_NT_HEADERS>(dos, dos->e_lfanew);

	mov	rax, QWORD PTR dos$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR nt$[rsp], rax

; 25   : 
; 26   :     image_base = nt->OptionalHeader.ImageBase;

	mov	rax, QWORD PTR nt$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR ?image_base@@3_KA, rax	; image_base

; 27   : 	ent = (ientry)(nt->OptionalHeader.AddressOfEntryPoint + nt->OptionalHeader.ImageBase); //buffer

	mov	rax, QWORD PTR nt$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR nt$[rsp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR ?ent@@3P6AXPEAX@ZEA, rax	; ent

; 28   : 	//! For now Xeneva only loads binary that are aligned in 512, 1024 & 4096 byte
; 29   : 	//! aligned. Simply we call its entry address that are expected to be aligned in
; 30   : 	//! 512, 1024 and 4096 bytes
; 31   : 
; 32   : 	//! copy the image to its desired virtual address
; 33   : 	//memcpy ((void*)nt->OptionalHeader.ImageBase,buffer, size);
; 34   : 
; 35   : 	//! set the entry point
; 36   : 	//set_entry_point (nt);
; 37   : }

	add	rsp, 56					; 00000038H
	ret	0
?load_pe_file@@YAXPEAEH@Z ENDP				; load_pe_file
_TEXT	ENDS
END
