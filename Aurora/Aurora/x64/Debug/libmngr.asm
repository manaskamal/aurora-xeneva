; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?libentry_first@@3PEAU_libentry_@@EA		; libentry_first
PUBLIC	?libentry_last@@3PEAU_libentry_@@EA		; libentry_last
_BSS	SEGMENT
?libentry_first@@3PEAU_libentry_@@EA DQ 01H DUP (?)	; libentry_first
?libentry_last@@3PEAU_libentry_@@EA DQ 01H DUP (?)	; libentry_last
_BSS	ENDS
CONST	SEGMENT
$SG3680	DB	'Failed to load -> %s ', 0aH, 00H
	ORG $+1
$SG3694	DB	'xnacrl.dll', 00H
	ORG $+5
$SG3695	DB	'xewid.dll', 00H
	ORG $+6
$SG3696	DB	'xnclib.dll', 00H
CONST	ENDS
PUBLIC	?AuSysLibInitialize@@YAXXZ			; AuSysLibInitialize
PUBLIC	?AuGetSysLib@@YAPEAU_libentry_@@PEAD@Z		; AuGetSysLib
PUBLIC	?AuLibInsert@@YAXPEAU_libentry_@@@Z		; AuLibInsert
PUBLIC	?AuLibRemove@@YAXPEAU_libentry_@@@Z		; AuLibRemove
PUBLIC	?AuSysLoadLib@@YAXPEAD@Z			; AuSysLoadLib
EXTRN	strcmp:PROC
EXTRN	strcpy:PROC
EXTRN	AuPmmngrAlloc:PROC
EXTRN	malloc:PROC
EXTRN	free:PROC
EXTRN	?fat32_open@@YAPEAU_vfs_node_@@PEAU1@PEAD@Z:PROC ; fat32_open
EXTRN	?fat32_read@@YA_KPEAU_vfs_node_@@PEA_K@Z:PROC	; fat32_read
EXTRN	printf:PROC
pdata	SEGMENT
$pdata$?AuSysLibInitialize@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?AuSysLibInitialize@@YAXXZ
$pdata$?AuGetSysLib@@YAPEAU_libentry_@@PEAD@Z DD imagerel $LN7
	DD	imagerel $LN7+83
	DD	imagerel $unwind$?AuGetSysLib@@YAPEAU_libentry_@@PEAD@Z
$pdata$?AuLibRemove@@YAXPEAU_libentry_@@@Z DD imagerel $LN8
	DD	imagerel $LN8+146
	DD	imagerel $unwind$?AuLibRemove@@YAXPEAU_libentry_@@@Z
$pdata$?AuSysLoadLib@@YAXPEAD@Z DD imagerel $LN6
	DD	imagerel $LN6+270
	DD	imagerel $unwind$?AuSysLoadLib@@YAXPEAD@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?AuSysLibInitialize@@YAXXZ DD 010401H
	DD	04204H
$unwind$?AuGetSysLib@@YAPEAU_libentry_@@PEAD@Z DD 010901H
	DD	06209H
$unwind$?AuLibRemove@@YAXPEAU_libentry_@@@Z DD 010901H
	DD	04209H
$unwind$?AuSysLoadLib@@YAXPEAD@Z DD 010901H
	DD	0a209H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\libmngr.cpp
_TEXT	SEGMENT
blocks_read$ = 32
entry$ = 40
file$ = 48
phys_start$ = 56
phys$1 = 64
fname$ = 96
?AuSysLoadLib@@YAXPEAD@Z PROC				; AuSysLoadLib

; 85   : void AuSysLoadLib(char* fname) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 86   : 	int blocks_read = 0;

	mov	DWORD PTR blocks_read$[rsp], 0

; 87   : 	vfs_node_t *file = fat32_open(NULL, fname);

	mov	rdx, QWORD PTR fname$[rsp]
	xor	ecx, ecx
	call	?fat32_open@@YAPEAU_vfs_node_@@PEAU1@PEAD@Z ; fat32_open
	mov	QWORD PTR file$[rsp], rax

; 88   : 	if (file == NULL){

	cmp	QWORD PTR file$[rsp], 0
	jne	SHORT $LN3@AuSysLoadL

; 89   : 		printf ("Failed to load -> %s \n", fname);

	mov	rdx, QWORD PTR fname$[rsp]
	lea	rcx, OFFSET FLAT:$SG3680
	call	printf

; 90   : 		return;

	jmp	$LN4@AuSysLoadL
$LN3@AuSysLoadL:

; 91   : 	}
; 92   : 
; 93   : 	uint64_t* phys_start = (uint64_t*)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR phys_start$[rsp], rax

; 94   : 	fat32_read(file, phys_start);

	mov	rdx, QWORD PTR phys_start$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	call	?fat32_read@@YA_KPEAU_vfs_node_@@PEA_K@Z ; fat32_read

; 95   : 	blocks_read = 1;

	mov	DWORD PTR blocks_read$[rsp], 1
$LN2@AuSysLoadL:

; 96   : 
; 97   : 	while(file->eof != 1){

	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, BYTE PTR [rax+36]
	cmp	eax, 1
	je	SHORT $LN1@AuSysLoadL

; 98   : 		uint64_t *phys = (uint64_t*)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR phys$1[rsp], rax

; 99   : 		fat32_read(file, phys);

	mov	rdx, QWORD PTR phys$1[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	call	?fat32_read@@YA_KPEAU_vfs_node_@@PEA_K@Z ; fat32_read

; 100  : 		blocks_read++;

	mov	eax, DWORD PTR blocks_read$[rsp]
	inc	eax
	mov	DWORD PTR blocks_read$[rsp], eax

; 101  : 	}

	jmp	SHORT $LN2@AuSysLoadL
$LN1@AuSysLoadL:

; 102  : 
; 103  : 	AuLibEntry_t *entry = (AuLibEntry_t*)malloc(sizeof(AuLibEntry_t));

	mov	ecx, 112				; 00000070H
	call	malloc
	mov	QWORD PTR entry$[rsp], rax

; 104  : 	strcpy(entry->path, fname);

	mov	rax, QWORD PTR entry$[rsp]
	mov	rdx, QWORD PTR fname$[rsp]
	mov	rcx, rax
	call	strcpy

; 105  : 	entry->loaded = true;

	mov	rax, QWORD PTR entry$[rsp]
	mov	BYTE PTR [rax+64], 1

; 106  : 	entry->phys_start = (uint64_t)phys_start;

	mov	rax, QWORD PTR entry$[rsp]
	mov	rcx, QWORD PTR phys_start$[rsp]
	mov	QWORD PTR [rax+72], rcx

; 107  : 	entry->phys_end = (entry->phys_start + blocks_read * 4096);

	mov	eax, DWORD PTR blocks_read$[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR entry$[rsp]
	add	rax, QWORD PTR [rcx+72]
	mov	rcx, QWORD PTR entry$[rsp]
	mov	QWORD PTR [rcx+80], rax

; 108  : 	entry->phys_blocks_count = blocks_read;

	mov	rax, QWORD PTR entry$[rsp]
	mov	ecx, DWORD PTR blocks_read$[rsp]
	mov	DWORD PTR [rax+88], ecx

; 109  : 	entry->linked = false;

	mov	rax, QWORD PTR entry$[rsp]
	mov	BYTE PTR [rax+92], 0

; 110  : 	AuLibInsert(entry);

	mov	rcx, QWORD PTR entry$[rsp]
	call	?AuLibInsert@@YAXPEAU_libentry_@@@Z	; AuLibInsert
$LN4@AuSysLoadL:

; 111  : }

	add	rsp, 88					; 00000058H
	ret	0
?AuSysLoadLib@@YAXPEAD@Z ENDP				; AuSysLoadLib
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\libmngr.cpp
_TEXT	SEGMENT
libentry$ = 48
?AuLibRemove@@YAXPEAU_libentry_@@@Z PROC		; AuLibRemove

; 55   : void AuLibRemove(AuLibEntry_t* libentry) {

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 56   : 
; 57   : 	if (libentry_first == NULL)

	cmp	QWORD PTR ?libentry_first@@3PEAU_libentry_@@EA, 0 ; libentry_first
	jne	SHORT $LN5@AuLibRemov

; 58   : 		return;

	jmp	SHORT $LN6@AuLibRemov
$LN5@AuLibRemov:

; 59   : 
; 60   : 	if (libentry == libentry_first) {

	mov	rax, QWORD PTR ?libentry_first@@3PEAU_libentry_@@EA ; libentry_first
	cmp	QWORD PTR libentry$[rsp], rax
	jne	SHORT $LN4@AuLibRemov

; 61   : 		libentry_first = libentry_first->next;

	mov	rax, QWORD PTR ?libentry_first@@3PEAU_libentry_@@EA ; libentry_first
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR ?libentry_first@@3PEAU_libentry_@@EA, rax ; libentry_first

; 62   : 	} else {

	jmp	SHORT $LN3@AuLibRemov
$LN4@AuLibRemov:

; 63   : 		libentry->prev->next = libentry->next;

	mov	rax, QWORD PTR libentry$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	rcx, QWORD PTR libentry$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	QWORD PTR [rax+96], rcx
$LN3@AuLibRemov:

; 64   : 	}
; 65   : 
; 66   : 	if (libentry == libentry_last) {

	mov	rax, QWORD PTR ?libentry_last@@3PEAU_libentry_@@EA ; libentry_last
	cmp	QWORD PTR libentry$[rsp], rax
	jne	SHORT $LN2@AuLibRemov

; 67   : 		libentry_last = libentry->prev;

	mov	rax, QWORD PTR libentry$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR ?libentry_last@@3PEAU_libentry_@@EA, rax ; libentry_last

; 68   : 	} else {

	jmp	SHORT $LN1@AuLibRemov
$LN2@AuLibRemov:

; 69   : 		libentry->next->prev = libentry->prev;

	mov	rax, QWORD PTR libentry$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR libentry$[rsp]
	mov	rcx, QWORD PTR [rcx+104]
	mov	QWORD PTR [rax+104], rcx
$LN1@AuLibRemov:

; 70   : 	}
; 71   : 
; 72   : 	free(libentry);

	mov	rcx, QWORD PTR libentry$[rsp]
	call	free
$LN6@AuLibRemov:

; 73   : }

	add	rsp, 40					; 00000028H
	ret	0
?AuLibRemove@@YAXPEAU_libentry_@@@Z ENDP		; AuLibRemove
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\libmngr.cpp
_TEXT	SEGMENT
new_entry$ = 8
?AuLibInsert@@YAXPEAU_libentry_@@@Z PROC		; AuLibInsert

; 40   : void AuLibInsert (AuLibEntry_t* new_entry) {

	mov	QWORD PTR [rsp+8], rcx

; 41   : 	new_entry->next = NULL;

	mov	rax, QWORD PTR new_entry$[rsp]
	mov	QWORD PTR [rax+96], 0

; 42   : 	new_entry->prev = NULL;

	mov	rax, QWORD PTR new_entry$[rsp]
	mov	QWORD PTR [rax+104], 0

; 43   : 
; 44   : 	if (libentry_first == NULL) {

	cmp	QWORD PTR ?libentry_first@@3PEAU_libentry_@@EA, 0 ; libentry_first
	jne	SHORT $LN2@AuLibInser

; 45   : 		libentry_last = new_entry;

	mov	rax, QWORD PTR new_entry$[rsp]
	mov	QWORD PTR ?libentry_last@@3PEAU_libentry_@@EA, rax ; libentry_last

; 46   : 		libentry_first = new_entry;

	mov	rax, QWORD PTR new_entry$[rsp]
	mov	QWORD PTR ?libentry_first@@3PEAU_libentry_@@EA, rax ; libentry_first

; 47   : 	} else {

	jmp	SHORT $LN1@AuLibInser
$LN2@AuLibInser:

; 48   : 		libentry_last->next = new_entry;

	mov	rax, QWORD PTR ?libentry_last@@3PEAU_libentry_@@EA ; libentry_last
	mov	rcx, QWORD PTR new_entry$[rsp]
	mov	QWORD PTR [rax+96], rcx

; 49   : 		new_entry->prev = libentry_last;

	mov	rax, QWORD PTR new_entry$[rsp]
	mov	rcx, QWORD PTR ?libentry_last@@3PEAU_libentry_@@EA ; libentry_last
	mov	QWORD PTR [rax+104], rcx
$LN1@AuLibInser:

; 50   : 	}
; 51   : 	libentry_last = new_entry;

	mov	rax, QWORD PTR new_entry$[rsp]
	mov	QWORD PTR ?libentry_last@@3PEAU_libentry_@@EA, rax ; libentry_last

; 52   : }

	ret	0
?AuLibInsert@@YAXPEAU_libentry_@@@Z ENDP		; AuLibInsert
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\libmngr.cpp
_TEXT	SEGMENT
first$1 = 32
path$ = 64
?AuGetSysLib@@YAPEAU_libentry_@@PEAD@Z PROC		; AuGetSysLib

; 75   : AuLibEntry_t *AuGetSysLib (char* path) {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 76   : 	for (AuLibEntry_t *first = libentry_first; first != NULL; first = first->next) {

	mov	rax, QWORD PTR ?libentry_first@@3PEAU_libentry_@@EA ; libentry_first
	mov	QWORD PTR first$1[rsp], rax
	jmp	SHORT $LN4@AuGetSysLi
$LN3@AuGetSysLi:
	mov	rax, QWORD PTR first$1[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR first$1[rsp], rax
$LN4@AuGetSysLi:
	cmp	QWORD PTR first$1[rsp], 0
	je	SHORT $LN2@AuGetSysLi

; 77   : 		if (strcmp(first->path, path) == 0) 

	mov	rax, QWORD PTR first$1[rsp]
	mov	rdx, QWORD PTR path$[rsp]
	mov	rcx, rax
	call	strcmp
	test	eax, eax
	jne	SHORT $LN1@AuGetSysLi

; 78   : 			return first;

	mov	rax, QWORD PTR first$1[rsp]
	jmp	SHORT $LN5@AuGetSysLi
$LN1@AuGetSysLi:

; 79   : 	}

	jmp	SHORT $LN3@AuGetSysLi
$LN2@AuGetSysLi:

; 80   : 
; 81   : 	return NULL;

	xor	eax, eax
$LN5@AuGetSysLi:

; 82   : }

	add	rsp, 56					; 00000038H
	ret	0
?AuGetSysLib@@YAPEAU_libentry_@@PEAD@Z ENDP		; AuGetSysLib
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\libmngr.cpp
_TEXT	SEGMENT
?AuSysLibInitialize@@YAXXZ PROC				; AuSysLibInitialize

; 118  : void AuSysLibInitialize () {

$LN3:
	sub	rsp, 40					; 00000028H

; 119  : 	libentry_first = NULL;

	mov	QWORD PTR ?libentry_first@@3PEAU_libentry_@@EA, 0 ; libentry_first

; 120  : 	libentry_last = NULL;

	mov	QWORD PTR ?libentry_last@@3PEAU_libentry_@@EA, 0 ; libentry_last

; 121  : 
; 122  : 	AuSysLoadLib("xnacrl.dll");

	lea	rcx, OFFSET FLAT:$SG3694
	call	?AuSysLoadLib@@YAXPEAD@Z		; AuSysLoadLib

; 123  : 	AuSysLoadLib("xewid.dll");

	lea	rcx, OFFSET FLAT:$SG3695
	call	?AuSysLoadLib@@YAXPEAD@Z		; AuSysLoadLib

; 124  : 	AuSysLoadLib("xnclib.dll");

	lea	rcx, OFFSET FLAT:$SG3696
	call	?AuSysLoadLib@@YAXPEAD@Z		; AuSysLoadLib

; 125  : }

	add	rsp, 40					; 00000028H
	ret	0
?AuSysLibInitialize@@YAXXZ ENDP				; AuSysLibInitialize
_TEXT	ENDS
END
