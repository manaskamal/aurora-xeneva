; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gConsoleVGA@@3PAUConsoleVGAObject@@A		; gConsoleVGA
_BSS	SEGMENT
?gConsoleVGA@@3PAUConsoleVGAObject@@A DB 06H DUP (?)	; gConsoleVGA
_BSS	ENDS
PUBLIC	?ConsoleVGA_Init@@YAXXZ				; ConsoleVGA_Init
PUBLIC	?ConsoleVGA_SetColor@@YAXC@Z			; ConsoleVGA_SetColor
PUBLIC	?ConsoleVGA_SetBgColor@@YAXC@Z			; ConsoleVGA_SetBgColor
PUBLIC	?ConsoleVGA_WriteString@@YAXPEBD@Z		; ConsoleVGA_WriteString
EXTRN	?inportb@@YAEG@Z:PROC				; inportb
EXTRN	?outportb@@YAXGE@Z:PROC				; outportb
EXTRN	memcpy:PROC
pdata	SEGMENT
$pdata$?ConsoleVGA_Init@@YAXXZ DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$?ConsoleVGA_Init@@YAXXZ
$pdata$?ConsoleVGA_SetColor@@YAXC@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?ConsoleVGA_SetColor@@YAXC@Z
$pdata$?ConsoleVGA_SetBgColor@@YAXC@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$?ConsoleVGA_SetBgColor@@YAXC@Z
$pdata$?ConsoleVGA_WriteString@@YAXPEBD@Z DD imagerel $LN5
	DD	imagerel $LN5+67
	DD	imagerel $unwind$?ConsoleVGA_WriteString@@YAXPEBD@Z
$pdata$?ConsoleVGAWriteCRTC@@YAXEE@Z DD imagerel ?ConsoleVGAWriteCRTC@@YAXEE@Z
	DD	imagerel ?ConsoleVGAWriteCRTC@@YAXEE@Z+70
	DD	imagerel $unwind$?ConsoleVGAWriteCRTC@@YAXEE@Z
$pdata$?ConsoleVGAMoveHardwareCursor@@YAXXZ DD imagerel ?ConsoleVGAMoveHardwareCursor@@YAXXZ
	DD	imagerel ?ConsoleVGAMoveHardwareCursor@@YAXXZ+87
	DD	imagerel $unwind$?ConsoleVGAMoveHardwareCursor@@YAXXZ
$pdata$?ConsoleVGAMoveTo@@YAXHH@Z DD imagerel ?ConsoleVGAMoveTo@@YAXHH@Z
	DD	imagerel ?ConsoleVGAMoveTo@@YAXHH@Z+52
	DD	imagerel $unwind$?ConsoleVGAMoveTo@@YAXHH@Z
$pdata$?ConsoleVGAClear@@YAXXZ DD imagerel ?ConsoleVGAClear@@YAXXZ
	DD	imagerel ?ConsoleVGAClear@@YAXXZ+155
	DD	imagerel $unwind$?ConsoleVGAClear@@YAXXZ
$pdata$?ConsoleVGAWriteChar@@YAXD@Z DD imagerel ?ConsoleVGAWriteChar@@YAXD@Z
	DD	imagerel ?ConsoleVGAWriteChar@@YAXD@Z+517
	DD	imagerel $unwind$?ConsoleVGAWriteChar@@YAXD@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ConsoleVGA_Init@@YAXXZ DD 010401H
	DD	06204H
$unwind$?ConsoleVGA_SetColor@@YAXC@Z DD 010801H
	DD	02208H
$unwind$?ConsoleVGA_SetBgColor@@YAXC@Z DD 010801H
	DD	02208H
$unwind$?ConsoleVGA_WriteString@@YAXPEBD@Z DD 010901H
	DD	06209H
$unwind$?ConsoleVGAWriteCRTC@@YAXEE@Z DD 010c01H
	DD	0620cH
$unwind$?ConsoleVGAMoveHardwareCursor@@YAXXZ DD 010401H
	DD	06204H
$unwind$?ConsoleVGAMoveTo@@YAXHH@Z DD 010c01H
	DD	0220cH
$unwind$?ConsoleVGAClear@@YAXXZ DD 010401H
	DD	08204H
$unwind$?ConsoleVGAWriteChar@@YAXD@Z DD 010801H
	DD	08208H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\vga.cpp
_TEXT	SEGMENT
i$1 = 32
scrollSize$2 = 36
self$ = 40
fb$3 = 48
fb$ = 56
c$ = 80
?ConsoleVGAWriteChar@@YAXD@Z PROC			; ConsoleVGAWriteChar

; 168  : {

	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 72					; 00000048H

; 169  :    ConsoleVGAObject *self = gConsoleVGA;

	lea	rax, OFFSET FLAT:?gConsoleVGA@@3PAUConsoleVGAObject@@A ; gConsoleVGA
	mov	QWORD PTR self$[rsp], rax

; 170  :    uint8 *fb = VGA_TEXT_FRAMEBUFFER;

	mov	QWORD PTR fb$[rsp], 753664		; 000b8000H

; 171  : 
; 172  :    if (c == '\n') {

	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 10
	jne	SHORT $LN14@ConsoleVGA

; 173  :       self->cursor.y++;

	mov	rax, QWORD PTR self$[rsp]
	movzx	eax, BYTE PTR [rax+3]
	inc	al
	mov	rcx, QWORD PTR self$[rsp]
	mov	BYTE PTR [rcx+3], al

; 174  :       self->cursor.x = 0;

	mov	rax, QWORD PTR self$[rsp]
	mov	BYTE PTR [rax+2], 0
	jmp	$LN13@ConsoleVGA
$LN14@ConsoleVGA:

; 175  : 
; 176  :    } else if (c == '\t') {

	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 9
	jne	SHORT $LN12@ConsoleVGA
$LN11@ConsoleVGA:

; 177  :       while (self->cursor.x & 7) {

	mov	rax, QWORD PTR self$[rsp]
	movsx	eax, BYTE PTR [rax+2]
	and	eax, 7
	test	eax, eax
	je	SHORT $LN10@ConsoleVGA

; 178  :          ConsoleVGAWriteChar(' ');

	mov	cl, 32					; 00000020H
	call	?ConsoleVGAWriteChar@@YAXD@Z		; ConsoleVGAWriteChar

; 179  :       }

	jmp	SHORT $LN11@ConsoleVGA
$LN10@ConsoleVGA:

; 180  : 
; 181  :    } else if (c == '\b') {

	jmp	$LN9@ConsoleVGA
$LN12@ConsoleVGA:
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 8
	jne	SHORT $LN8@ConsoleVGA

; 182  :       if (self->cursor.x > 0) {

	mov	rax, QWORD PTR self$[rsp]
	movsx	eax, BYTE PTR [rax+2]
	test	eax, eax
	jle	SHORT $LN7@ConsoleVGA

; 183  :          self->cursor.x--;

	mov	rax, QWORD PTR self$[rsp]
	movzx	eax, BYTE PTR [rax+2]
	dec	al
	mov	rcx, QWORD PTR self$[rsp]
	mov	BYTE PTR [rcx+2], al

; 184  :          ConsoleVGAWriteChar(' ');

	mov	cl, 32					; 00000020H
	call	?ConsoleVGAWriteChar@@YAXD@Z		; ConsoleVGAWriteChar

; 185  :          self->cursor.x--;

	mov	rax, QWORD PTR self$[rsp]
	movzx	eax, BYTE PTR [rax+2]
	dec	al
	mov	rcx, QWORD PTR self$[rsp]
	mov	BYTE PTR [rcx+2], al
$LN7@ConsoleVGA:

; 186  :       }
; 187  : 
; 188  :    } else {

	jmp	SHORT $LN6@ConsoleVGA
$LN8@ConsoleVGA:

; 189  :       fb += self->cursor.x * 2 + self->cursor.y * VGA_TEXT_WIDTH * 2;

	mov	rax, QWORD PTR self$[rsp]
	movsx	eax, BYTE PTR [rax+2]
	mov	rcx, QWORD PTR self$[rsp]
	movsx	ecx, BYTE PTR [rcx+3]
	imul	ecx, 80					; 00000050H
	shl	ecx, 1
	lea	eax, DWORD PTR [rcx+rax*2]
	cdqe
	mov	rcx, QWORD PTR fb$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR fb$[rsp], rax

; 190  :       fb[0] = c;

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR fb$[rsp]
	movzx	edx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rcx+rax], dl

; 191  :       fb[1] = self->attr;

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR fb$[rsp]
	mov	rdx, QWORD PTR self$[rsp]
	movzx	edx, BYTE PTR [rdx+4]
	mov	BYTE PTR [rcx+rax], dl

; 192  :       self->cursor.x++;

	mov	rax, QWORD PTR self$[rsp]
	movzx	eax, BYTE PTR [rax+2]
	inc	al
	mov	rcx, QWORD PTR self$[rsp]
	mov	BYTE PTR [rcx+2], al
$LN6@ConsoleVGA:
$LN9@ConsoleVGA:
$LN13@ConsoleVGA:

; 193  :    }
; 194  : 
; 195  :    if (self->cursor.x >= VGA_TEXT_WIDTH) {

	mov	rax, QWORD PTR self$[rsp]
	movsx	eax, BYTE PTR [rax+2]
	cmp	eax, 80					; 00000050H
	jl	SHORT $LN5@ConsoleVGA

; 196  :       self->cursor.x = 0;

	mov	rax, QWORD PTR self$[rsp]
	mov	BYTE PTR [rax+2], 0

; 197  :       self->cursor.y++;

	mov	rax, QWORD PTR self$[rsp]
	movzx	eax, BYTE PTR [rax+3]
	inc	al
	mov	rcx, QWORD PTR self$[rsp]
	mov	BYTE PTR [rcx+3], al
$LN5@ConsoleVGA:

; 198  :    }
; 199  : 
; 200  :    if (self->cursor.y >= VGA_TEXT_HEIGHT) {

	mov	rax, QWORD PTR self$[rsp]
	movsx	eax, BYTE PTR [rax+3]
	cmp	eax, 25
	jl	$LN4@ConsoleVGA

; 201  :       int i;
; 202  :       uint8 *fb = VGA_TEXT_FRAMEBUFFER;

	mov	QWORD PTR fb$3[rsp], 753664		; 000b8000H

; 203  :       const uint32 scrollSize = VGA_TEXT_WIDTH * 2 * (VGA_TEXT_HEIGHT - 1);

	mov	DWORD PTR scrollSize$2[rsp], 3840	; 00000f00H

; 204  : 
; 205  :       self->cursor.y = VGA_TEXT_HEIGHT - 1;

	mov	rax, QWORD PTR self$[rsp]
	mov	BYTE PTR [rax+3], 24

; 206  : 
; 207  :       memcpy(fb, fb + VGA_TEXT_WIDTH * 2, scrollSize);

	mov	rax, QWORD PTR fb$3[rsp]
	add	rax, 160				; 000000a0H
	mov	r8d, 3840				; 00000f00H
	mov	rdx, rax
	mov	rcx, QWORD PTR fb$3[rsp]
	call	memcpy

; 208  :       fb += scrollSize;

	mov	rax, QWORD PTR fb$3[rsp]
	add	rax, 3840				; 00000f00H
	mov	QWORD PTR fb$3[rsp], rax

; 209  :       for (i = 0; i < VGA_TEXT_WIDTH; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@ConsoleVGA
$LN2@ConsoleVGA:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@ConsoleVGA:
	cmp	DWORD PTR i$1[rsp], 80			; 00000050H
	jge	SHORT $LN1@ConsoleVGA

; 210  :          fb[0] = ' ';

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR fb$3[rsp]
	mov	BYTE PTR [rcx+rax], 32			; 00000020H

; 211  :          fb[1] = self->attr;

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR fb$3[rsp]
	mov	rdx, QWORD PTR self$[rsp]
	movzx	edx, BYTE PTR [rdx+4]
	mov	BYTE PTR [rcx+rax], dl

; 212  :          fb += 2;

	mov	rax, QWORD PTR fb$3[rsp]
	add	rax, 2
	mov	QWORD PTR fb$3[rsp], rax

; 213  :       }

	jmp	SHORT $LN2@ConsoleVGA
$LN1@ConsoleVGA:
$LN4@ConsoleVGA:

; 214  :    }
; 215  : }

	add	rsp, 72					; 00000048H
	ret	0
?ConsoleVGAWriteChar@@YAXD@Z ENDP			; ConsoleVGAWriteChar
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\vga.cpp
_TEXT	SEGMENT
j$ = 32
i$ = 36
fb$ = 40
self$ = 48
?ConsoleVGAClear@@YAXXZ PROC				; ConsoleVGAClear

; 111  : {

	sub	rsp, 72					; 00000048H

; 112  :    ConsoleVGAObject *self = gConsoleVGA;

	lea	rax, OFFSET FLAT:?gConsoleVGA@@3PAUConsoleVGAObject@@A ; gConsoleVGA
	mov	QWORD PTR self$[rsp], rax

; 113  :    uint8 *fb = VGA_TEXT_FRAMEBUFFER;

	mov	QWORD PTR fb$[rsp], 753664		; 000b8000H

; 114  :    int i, j;
; 115  : 
; 116  :    ConsoleVGAMoveTo(0, 0);

	xor	edx, edx
	xor	ecx, ecx
	call	?ConsoleVGAMoveTo@@YAXHH@Z		; ConsoleVGAMoveTo

; 117  : 
; 118  :    for (j = 0; j < VGA_TEXT_HEIGHT; j++) {

	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN6@ConsoleVGA
$LN5@ConsoleVGA:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN6@ConsoleVGA:
	cmp	DWORD PTR j$[rsp], 25
	jge	SHORT $LN4@ConsoleVGA

; 119  :       for (i = 0; i < VGA_TEXT_WIDTH; i++) {

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN3@ConsoleVGA
$LN2@ConsoleVGA:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN3@ConsoleVGA:
	cmp	DWORD PTR i$[rsp], 80			; 00000050H
	jge	SHORT $LN1@ConsoleVGA

; 120  :          fb[0] = ' ';

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR fb$[rsp]
	mov	BYTE PTR [rcx+rax], 32			; 00000020H

; 121  :          fb[1] = self->attr;

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR fb$[rsp]
	mov	rdx, QWORD PTR self$[rsp]
	movzx	edx, BYTE PTR [rdx+4]
	mov	BYTE PTR [rcx+rax], dl

; 122  :          fb += 2;

	mov	rax, QWORD PTR fb$[rsp]
	add	rax, 2
	mov	QWORD PTR fb$[rsp], rax

; 123  :       }

	jmp	SHORT $LN2@ConsoleVGA
$LN1@ConsoleVGA:

; 124  :    }

	jmp	SHORT $LN5@ConsoleVGA
$LN4@ConsoleVGA:

; 125  : }

	add	rsp, 72					; 00000048H
	ret	0
?ConsoleVGAClear@@YAXXZ ENDP				; ConsoleVGAClear
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\vga.cpp
_TEXT	SEGMENT
self$ = 0
x$ = 32
y$ = 40
?ConsoleVGAMoveTo@@YAXHH@Z PROC				; ConsoleVGAMoveTo

; 95   : {

	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 96   :    ConsoleVGAObject *self = gConsoleVGA;

	lea	rax, OFFSET FLAT:?gConsoleVGA@@3PAUConsoleVGAObject@@A ; gConsoleVGA
	mov	QWORD PTR self$[rsp], rax

; 97   : 
; 98   :    self->cursor.x = x;

	mov	rax, QWORD PTR self$[rsp]
	movzx	ecx, BYTE PTR x$[rsp]
	mov	BYTE PTR [rax+2], cl

; 99   :    self->cursor.y = y;

	mov	rax, QWORD PTR self$[rsp]
	movzx	ecx, BYTE PTR y$[rsp]
	mov	BYTE PTR [rax+3], cl

; 100  : }

	add	rsp, 24
	ret	0
?ConsoleVGAMoveTo@@YAXHH@Z ENDP				; ConsoleVGAMoveTo
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\vga.cpp
_TEXT	SEGMENT
loc$ = 32
self$ = 40
?ConsoleVGAMoveHardwareCursor@@YAXXZ PROC		; ConsoleVGAMoveHardwareCursor

; 77   : {

	sub	rsp, 56					; 00000038H

; 78   :    ConsoleVGAObject *self = gConsoleVGA;

	lea	rax, OFFSET FLAT:?gConsoleVGA@@3PAUConsoleVGAObject@@A ; gConsoleVGA
	mov	QWORD PTR self$[rsp], rax

; 79   :    uint16 loc = self->cursor.x + self->cursor.y * VGA_TEXT_WIDTH;

	mov	rax, QWORD PTR self$[rsp]
	movsx	eax, BYTE PTR [rax+2]
	mov	rcx, QWORD PTR self$[rsp]
	movsx	ecx, BYTE PTR [rcx+3]
	imul	ecx, 80					; 00000050H
	add	eax, ecx
	mov	WORD PTR loc$[rsp], ax

; 80   : 
; 81   :    ConsoleVGAWriteCRTC(VGA_CRTCREG_CURSOR_LOC_LOW, loc & 0xFF);

	movzx	eax, WORD PTR loc$[rsp]
	and	eax, 255				; 000000ffH
	movzx	edx, al
	mov	cl, 15
	call	?ConsoleVGAWriteCRTC@@YAXEE@Z		; ConsoleVGAWriteCRTC

; 82   :    ConsoleVGAWriteCRTC(VGA_CRTCREG_CURSOR_LOC_HIGH, loc >> 8);

	movzx	eax, WORD PTR loc$[rsp]
	sar	eax, 8
	movzx	edx, al
	mov	cl, 14
	call	?ConsoleVGAWriteCRTC@@YAXEE@Z		; ConsoleVGAWriteCRTC

; 83   : }

	add	rsp, 56					; 00000038H
	ret	0
?ConsoleVGAMoveHardwareCursor@@YAXXZ ENDP		; ConsoleVGAMoveHardwareCursor
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\vga.cpp
_TEXT	SEGMENT
self$ = 32
addr$ = 64
value$ = 72
?ConsoleVGAWriteCRTC@@YAXEE@Z PROC			; ConsoleVGAWriteCRTC

; 62   : {

	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 56					; 00000038H

; 63   :    ConsoleVGAObject *self = gConsoleVGA;

	lea	rax, OFFSET FLAT:?gConsoleVGA@@3PAUConsoleVGAObject@@A ; gConsoleVGA
	mov	QWORD PTR self$[rsp], rax

; 64   :    outportb(self->crtc_iobase, addr);

	movzx	edx, BYTE PTR addr$[rsp]
	mov	rax, QWORD PTR self$[rsp]
	movzx	ecx, WORD PTR [rax]
	call	?outportb@@YAXGE@Z			; outportb

; 65   :    outportb(self->crtc_iobase + 1, value);

	mov	rax, QWORD PTR self$[rsp]
	movzx	eax, WORD PTR [rax]
	inc	eax
	movzx	edx, BYTE PTR value$[rsp]
	movzx	ecx, ax
	call	?outportb@@YAXGE@Z			; outportb

; 66   : }

	add	rsp, 56					; 00000038H
	ret	0
?ConsoleVGAWriteCRTC@@YAXEE@Z ENDP			; ConsoleVGAWriteCRTC
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\vga.cpp
_TEXT	SEGMENT
c$ = 32
tv67 = 36
str$ = 64
?ConsoleVGA_WriteString@@YAXPEBD@Z PROC			; ConsoleVGA_WriteString

; 218  : void ConsoleVGA_WriteString (const char* str) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN2@ConsoleVGA:

; 219  : 	char c;
; 220  : 	while ((c = *(str++))) {

	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	movsx	eax, BYTE PTR c$[rsp]
	mov	DWORD PTR tv67[rsp], eax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
	cmp	DWORD PTR tv67[rsp], 0
	je	SHORT $LN1@ConsoleVGA

; 221  : 		ConsoleVGAWriteChar(c);

	movzx	ecx, BYTE PTR c$[rsp]
	call	?ConsoleVGAWriteChar@@YAXD@Z		; ConsoleVGAWriteChar

; 222  : 	}

	jmp	SHORT $LN2@ConsoleVGA
$LN1@ConsoleVGA:

; 223  : }

	add	rsp, 56					; 00000038H
	ret	0
?ConsoleVGA_WriteString@@YAXPEBD@Z ENDP			; ConsoleVGA_WriteString
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\vga.cpp
_TEXT	SEGMENT
self$ = 0
bgColor$ = 32
?ConsoleVGA_SetBgColor@@YAXC@Z PROC			; ConsoleVGA_SetBgColor

; 152  : {

$LN3:
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 24

; 153  :    ConsoleVGAObject *self = gConsoleVGA;

	lea	rax, OFFSET FLAT:?gConsoleVGA@@3PAUConsoleVGAObject@@A ; gConsoleVGA
	mov	QWORD PTR self$[rsp], rax

; 154  : 
; 155  :    self->attr &= 0x0F;

	mov	rax, QWORD PTR self$[rsp]
	movsx	eax, BYTE PTR [rax+4]
	and	eax, 15
	mov	rcx, QWORD PTR self$[rsp]
	mov	BYTE PTR [rcx+4], al

; 156  :    self->attr |= bgColor << 4;

	movsx	eax, BYTE PTR bgColor$[rsp]
	shl	eax, 4
	mov	rcx, QWORD PTR self$[rsp]
	movsx	ecx, BYTE PTR [rcx+4]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR self$[rsp]
	mov	BYTE PTR [rcx+4], al

; 157  : }

	add	rsp, 24
	ret	0
?ConsoleVGA_SetBgColor@@YAXC@Z ENDP			; ConsoleVGA_SetBgColor
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\vga.cpp
_TEXT	SEGMENT
self$ = 0
fgColor$ = 32
?ConsoleVGA_SetColor@@YAXC@Z PROC			; ConsoleVGA_SetColor

; 136  : {

$LN3:
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 24

; 137  :    ConsoleVGAObject *self = gConsoleVGA;

	lea	rax, OFFSET FLAT:?gConsoleVGA@@3PAUConsoleVGAObject@@A ; gConsoleVGA
	mov	QWORD PTR self$[rsp], rax

; 138  : 
; 139  :    self->attr &= 0xF0;

	mov	rax, QWORD PTR self$[rsp]
	movsx	eax, BYTE PTR [rax+4]
	and	eax, 240				; 000000f0H
	mov	rcx, QWORD PTR self$[rsp]
	mov	BYTE PTR [rcx+4], al

; 140  :    self->attr |= fgColor;

	movsx	eax, BYTE PTR fgColor$[rsp]
	mov	rcx, QWORD PTR self$[rsp]
	movsx	ecx, BYTE PTR [rcx+4]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR self$[rsp]
	mov	BYTE PTR [rcx+4], al

; 141  : }

	add	rsp, 24
	ret	0
?ConsoleVGA_SetColor@@YAXC@Z ENDP			; ConsoleVGA_SetColor
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\vga.cpp
_TEXT	SEGMENT
self$ = 32
?ConsoleVGA_Init@@YAXXZ PROC				; ConsoleVGA_Init

; 252  : {

$LN5:
	sub	rsp, 56					; 00000038H

; 253  : 	ConsoleVGAObject *self = gConsoleVGA;

	lea	rax, OFFSET FLAT:?gConsoleVGA@@3PAUConsoleVGAObject@@A ; gConsoleVGA
	mov	QWORD PTR self$[rsp], rax

; 254  :    
; 255  :     /* Read the I/O address select bit, to determine where the CRTC
; 256  :     * registers are.
; 257  :     */
; 258  :    if (inportb(0x3CC) & 1) {

	mov	cx, 972					; 000003ccH
	call	?inportb@@YAEG@Z			; inportb
	movzx	eax, al
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@ConsoleVGA

; 259  :       self->crtc_iobase = 0x3D4;

	mov	eax, 980				; 000003d4H
	mov	rcx, QWORD PTR self$[rsp]
	mov	WORD PTR [rcx], ax

; 260  :    } else {

	jmp	SHORT $LN1@ConsoleVGA
$LN2@ConsoleVGA:

; 261  :       self->crtc_iobase = 0x3B4;

	mov	eax, 948				; 000003b4H
	mov	rcx, QWORD PTR self$[rsp]
	mov	WORD PTR [rcx], ax
$LN1@ConsoleVGA:

; 262  :    }
; 263  : 
; 264  : 
; 265  :    ConsoleVGA_SetColor(VGA_COLOR_WHITE);

	mov	cl, 15
	call	?ConsoleVGA_SetColor@@YAXC@Z		; ConsoleVGA_SetColor

; 266  :    ConsoleVGA_SetBgColor(VGA_COLOR_BLUE);

	mov	cl, 1
	call	?ConsoleVGA_SetBgColor@@YAXC@Z		; ConsoleVGA_SetBgColor

; 267  : 
; 268  :    ConsoleVGAClear();

	call	?ConsoleVGAClear@@YAXXZ			; ConsoleVGAClear

; 269  :    ConsoleVGAMoveHardwareCursor();

	call	?ConsoleVGAMoveHardwareCursor@@YAXXZ	; ConsoleVGAMoveHardwareCursor

; 270  : }

	add	rsp, 56					; 00000038H
	ret	0
?ConsoleVGA_Init@@YAXXZ ENDP				; ConsoleVGA_Init
_TEXT	ENDS
END
