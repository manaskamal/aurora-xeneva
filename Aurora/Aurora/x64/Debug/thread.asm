; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?scheduler_enable@@3_NA				; scheduler_enable
PUBLIC	?block_mutex@@3PEAUmutex_t@@EA			; block_mutex
PUBLIC	?scheduler_mutex@@3PEAUmutex_t@@EA		; scheduler_mutex
PUBLIC	?task_id@@3GA					; task_id
PUBLIC	?blocked_list@@3PEAU_list_@@EA			; blocked_list
PUBLIC	?task_list_head@@3PEAU_thread_@@EA		; task_list_head
PUBLIC	?task_list_last@@3PEAU_thread_@@EA		; task_list_last
PUBLIC	current_thread
_BSS	SEGMENT
?scheduler_enable@@3_NA DB 01H DUP (?)			; scheduler_enable
	ALIGN	8

?block_mutex@@3PEAUmutex_t@@EA DQ 01H DUP (?)		; block_mutex
?scheduler_mutex@@3PEAUmutex_t@@EA DQ 01H DUP (?)	; scheduler_mutex
?task_id@@3GA DW 01H DUP (?)				; task_id
	ALIGN	8

?blocked_list@@3PEAU_list_@@EA DQ 01H DUP (?)		; blocked_list
?task_list_head@@3PEAU_thread_@@EA DQ 01H DUP (?)	; task_list_head
?task_list_last@@3PEAU_thread_@@EA DQ 01H DUP (?)	; task_list_last
current_thread DQ 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
$SG3249	DB	'Idle', 00H
CONST	ENDS
PUBLIC	?initialize_scheduler@@YAXXZ			; initialize_scheduler
PUBLIC	?scheduler_start@@YAXXZ				; scheduler_start
PUBLIC	?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z ; create_user_thread
PUBLIC	?create_kthread@@YAPEAU_thread_@@P6AXXZ_K1QEADE@Z ; create_kthread
PUBLIC	?block_thread@@YAXPEAU_thread_@@@Z		; block_thread
PUBLIC	?unblock_thread@@YAXPEAU_thread_@@@Z		; unblock_thread
PUBLIC	?get_current_thread@@YAPEAU_thread_@@XZ		; get_current_thread
PUBLIC	?set_multi_task_enable@@YAX_N@Z			; set_multi_task_enable
PUBLIC	?is_multi_task_enable@@YA_NXZ			; is_multi_task_enable
PUBLIC	?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z	; thread_iterate_ready_list
PUBLIC	?thread_iterate_block_list@@YAPEAU_thread_@@H@Z	; thread_iterate_block_list
PUBLIC	?set_sched_debug@@YAX_N@Z			; set_sched_debug
PUBLIC	?set_current_thread@@YAXPEAU_thread_@@@Z	; set_current_thread
PUBLIC	?sleep_thread@@YAXPEAU_thread_@@_K@Z		; sleep_thread
PUBLIC	?thread_insert@@YAXPEAU_thread_@@@Z		; thread_insert
PUBLIC	?task_delete@@YAXPEAU_thread_@@@Z		; task_delete
PUBLIC	?idle_thread@@YAXXZ				; idle_thread
PUBLIC	?next_task@@YAXXZ				; next_task
PUBLIC	?scheduler_isr@@YAX_KPEAX@Z			; scheduler_isr
EXTRN	?pmmngr_alloc@@YAPEAXXZ:PROC			; pmmngr_alloc
EXTRN	?apic_local_eoi@@YAXXZ:PROC			; apic_local_eoi
EXTRN	x64_cli:PROC
EXTRN	x64_sti:PROC
EXTRN	x64_read_cr3:PROC
EXTRN	x64_write_cr3:PROC
EXTRN	?setvect@@YAX_KP6AX0PEAX@Z@Z:PROC		; setvect
EXTRN	save_context:PROC
EXTRN	execute_idle:PROC
EXTRN	get_kernel_tss:PROC
EXTRN	?create_mutex@@YAPEAUmutex_t@@XZ:PROC		; create_mutex
EXTRN	?mutex_lock@@YAXPEAUmutex_t@@@Z:PROC		; mutex_lock
EXTRN	?mutex_unlock@@YAXPEAUmutex_t@@@Z:PROC		; mutex_unlock
EXTRN	?initialize_list@@YAPEAU_list_@@XZ:PROC		; initialize_list
EXTRN	?list_add@@YAXPEAU_list_@@PEAX@Z:PROC		; list_add
EXTRN	?list_remove@@YAPEAXPEAU_list_@@I@Z:PROC	; list_remove
EXTRN	?list_get_at@@YAPEAXPEAU_list_@@I@Z:PROC	; list_get_at
EXTRN	x64_hlt:PROC
pdata	SEGMENT
$pdata$?initialize_scheduler@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+119
	DD	imagerel $unwind$?initialize_scheduler@@YAXXZ
$pdata$?scheduler_start@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?scheduler_start@@YAXXZ
$pdata$?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z DD imagerel $LN3
	DD	imagerel $LN3+582
	DD	imagerel $unwind$?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z
$pdata$?create_kthread@@YAPEAU_thread_@@P6AXXZ_K1QEADE@Z DD imagerel $LN3
	DD	imagerel $LN3+549
	DD	imagerel $unwind$?create_kthread@@YAPEAU_thread_@@P6AXXZ_K1QEADE@Z
$pdata$?block_thread@@YAXPEAU_thread_@@@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?block_thread@@YAXPEAU_thread_@@@Z
$pdata$?unblock_thread@@YAXPEAU_thread_@@@Z DD imagerel $LN7
	DD	imagerel $LN7+127
	DD	imagerel $unwind$?unblock_thread@@YAXPEAU_thread_@@@Z
$pdata$?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z DD imagerel $LN7
	DD	imagerel $LN7+79
	DD	imagerel $unwind$?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z
$pdata$?thread_iterate_block_list@@YAPEAU_thread_@@H@Z DD imagerel $LN7
	DD	imagerel $LN7+98
	DD	imagerel $unwind$?thread_iterate_block_list@@YAPEAU_thread_@@H@Z
$pdata$?idle_thread@@YAXXZ DD imagerel $LN5
	DD	imagerel $LN5+23
	DD	imagerel $unwind$?idle_thread@@YAXXZ
$pdata$?next_task@@YAXXZ DD imagerel $LN13
	DD	imagerel $LN13+229
	DD	imagerel $unwind$?next_task@@YAXXZ
$pdata$?scheduler_isr@@YAX_KPEAX@Z DD imagerel $LN8
	DD	imagerel $LN8+279
	DD	imagerel $unwind$?scheduler_isr@@YAX_KPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?initialize_scheduler@@YAXXZ DD 010401H
	DD	08204H
$unwind$?scheduler_start@@YAXXZ DD 010401H
	DD	04204H
$unwind$?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z DD 011801H
	DD	06218H
$unwind$?create_kthread@@YAPEAU_thread_@@P6AXXZ_K1QEADE@Z DD 011801H
	DD	06218H
$unwind$?block_thread@@YAXPEAU_thread_@@@Z DD 010901H
	DD	04209H
$unwind$?unblock_thread@@YAXPEAU_thread_@@@Z DD 010901H
	DD	06209H
$unwind$?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z DD 010901H
	DD	02209H
$unwind$?thread_iterate_block_list@@YAPEAU_thread_@@H@Z DD 010801H
	DD	06208H
$unwind$?idle_thread@@YAXXZ DD 010401H
	DD	04204H
$unwind$?next_task@@YAXXZ DD 010401H
	DD	02204H
$unwind$?scheduler_isr@@YAX_KPEAX@Z DD 010e01H
	DD	0420eH
xdata	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
v$ = 48
param$ = 56
?scheduler_isr@@YAX_KPEAX@Z PROC			; scheduler_isr

; 230  : void scheduler_isr (size_t v, void* param) {

$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 231  : 	x64_cli();

	call	x64_cli

; 232  : 	//interrupt_stack_frame *frame = (interrupt_stack_frame*)param;
; 233  : 	if (scheduler_enable == false)

	movzx	eax, BYTE PTR ?scheduler_enable@@3_NA	; scheduler_enable
	test	eax, eax
	jne	SHORT $LN5@scheduler_

; 234  : 		goto sched_end;

	jmp	$LN4@scheduler_
	jmp	$sched_end$9
$LN5@scheduler_:

; 235  : 	mutex_lock (scheduler_mutex);

	mov	rcx, QWORD PTR ?scheduler_mutex@@3PEAUmutex_t@@EA ; scheduler_mutex
	call	?mutex_lock@@YAXPEAUmutex_t@@@Z		; mutex_lock

; 236  :    
; 237  : 	if (save_context(current_thread,get_kernel_tss()) == 0) {

	call	get_kernel_tss
	mov	rdx, rax
	mov	rcx, QWORD PTR current_thread
	call	save_context
	test	eax, eax
	jne	$LN3@scheduler_

; 238  : 		current_thread->cr3 = x64_read_cr3();

	call	x64_read_cr3
	mov	rcx, QWORD PTR current_thread
	mov	QWORD PTR [rcx+192], rax

; 239  : 		if (current_thread->priviledge == THREAD_LEVEL_USER)

	mov	rax, QWORD PTR current_thread
	movzx	eax, BYTE PTR [rax+228]
	cmp	eax, 2
	jne	SHORT $LN2@scheduler_

; 240  : 			current_thread->kern_esp = get_kernel_tss()->rsp[0];

	call	get_kernel_tss
	mov	ecx, 8
	imul	rcx, 0
	mov	rdx, QWORD PTR current_thread
	mov	rax, QWORD PTR [rax+rcx+4]
	mov	QWORD PTR [rdx+200], rax
$LN2@scheduler_:

; 241  : 		apic_local_eoi();

	call	?apic_local_eoi@@YAXXZ			; apic_local_eoi

; 242  : 		next_task();

	call	?next_task@@YAXXZ			; next_task

; 243  : 		if (current_thread->priviledge == THREAD_LEVEL_USER){

	mov	rax, QWORD PTR current_thread
	movzx	eax, BYTE PTR [rax+228]
	cmp	eax, 2
	jne	SHORT $LN1@scheduler_

; 244  : 			get_kernel_tss()->rsp[0] = current_thread->kern_esp;

	call	get_kernel_tss
	mov	ecx, 8
	imul	rcx, 0
	mov	rdx, QWORD PTR current_thread
	mov	rdx, QWORD PTR [rdx+200]
	mov	QWORD PTR [rax+rcx+4], rdx
$LN1@scheduler_:

; 245  : 		}
; 246  : 		
; 247  : 		x64_write_cr3 (current_thread->cr3);

	mov	rax, QWORD PTR current_thread
	mov	rcx, QWORD PTR [rax+192]
	call	x64_write_cr3

; 248  : 		mutex_unlock (scheduler_mutex);

	mov	rcx, QWORD PTR ?scheduler_mutex@@3PEAUmutex_t@@EA ; scheduler_mutex
	call	?mutex_unlock@@YAXPEAUmutex_t@@@Z	; mutex_unlock

; 249  : 		execute_idle (current_thread,get_kernel_tss());

	call	get_kernel_tss
	mov	rdx, rax
	mov	rcx, QWORD PTR current_thread
	call	execute_idle
$LN3@scheduler_:
$LN4@scheduler_:
$sched_end$9:

; 250  : 	}
; 251  : 
; 252  : sched_end:
; 253  : 	apic_local_eoi();

	call	?apic_local_eoi@@YAXXZ			; apic_local_eoi

; 254  : 	x64_sti();

	call	x64_sti

; 255  : 	
; 256  : }

	add	rsp, 40					; 00000028H
	ret	0
?scheduler_isr@@YAX_KPEAX@Z ENDP			; scheduler_isr
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
task$ = 0
?next_task@@YAXXZ PROC					; next_task

; 186  : void next_task () {

$LN13:
	sub	rsp, 24

; 187  : 	thread_t* task = current_thread;

	mov	rax, QWORD PTR current_thread
	mov	QWORD PTR task$[rsp], rax

; 188  : 	/*do {
; 189  : 		task = task->next;
; 190  : 		if (task == NULL) {
; 191  : 			task = task_list_head;
; 192  : 		}
; 193  : 	}while (task->state == THREAD_STATE_BLOCKED);*/
; 194  : 	if (task->state == THREAD_STATE_BLOCKED) {

	mov	rax, QWORD PTR task$[rsp]
	movzx	eax, BYTE PTR [rax+224]
	cmp	eax, 3
	jne	SHORT $LN10@next_task

; 195  : 		task = task->next;

	mov	rax, QWORD PTR task$[rsp]
	mov	rax, QWORD PTR [rax+256]
	mov	QWORD PTR task$[rsp], rax

; 196  : 
; 197  : 		if (task == NULL) {

	cmp	QWORD PTR task$[rsp], 0
	jne	SHORT $LN9@next_task

; 198  : 			task = task_list_head;

	mov	rax, QWORD PTR ?task_list_head@@3PEAU_thread_@@EA ; task_list_head
	mov	QWORD PTR task$[rsp], rax
$LN9@next_task:

; 199  : 		}
; 200  : 		goto end;

	jmp	$LN8@next_task
	jmp	$end$14
$LN10@next_task:

; 201  : 	}
; 202  : 
; 203  : 	if (task->state == THREAD_STATE_SLEEP) {

	mov	rax, QWORD PTR task$[rsp]
	movzx	eax, BYTE PTR [rax+224]
	cmp	eax, 4
	jne	SHORT $LN7@next_task

; 204  : 		task->quanta--;

	mov	rax, QWORD PTR task$[rsp]
	movzx	eax, WORD PTR [rax+230]
	dec	ax
	mov	rcx, QWORD PTR task$[rsp]
	mov	WORD PTR [rcx+230], ax

; 205  : 		if (task->quanta == 0)

	mov	rax, QWORD PTR task$[rsp]
	movzx	eax, WORD PTR [rax+230]
	test	eax, eax
	jne	SHORT $LN6@next_task

; 206  : 			goto end;

	jmp	SHORT $LN5@next_task
	jmp	SHORT $end$14
$LN6@next_task:

; 207  : 
; 208  : 		task = task->next;	

	mov	rax, QWORD PTR task$[rsp]
	mov	rax, QWORD PTR [rax+256]
	mov	QWORD PTR task$[rsp], rax

; 209  : 
; 210  : 		if (task == NULL) {

	cmp	QWORD PTR task$[rsp], 0
	jne	SHORT $LN4@next_task

; 211  : 			task = task_list_head;

	mov	rax, QWORD PTR ?task_list_head@@3PEAU_thread_@@EA ; task_list_head
	mov	QWORD PTR task$[rsp], rax
$LN4@next_task:

; 212  : 		}
; 213  : 		goto end;

	jmp	SHORT $LN3@next_task
	jmp	SHORT $end$14
$LN7@next_task:

; 214  : 	}
; 215  : 
; 216  : 
; 217  : 	if (task->next != NULL) {

	mov	rax, QWORD PTR task$[rsp]
	cmp	QWORD PTR [rax+256], 0
	je	SHORT $LN2@next_task

; 218  : 		task = task->next;

	mov	rax, QWORD PTR task$[rsp]
	mov	rax, QWORD PTR [rax+256]
	mov	QWORD PTR task$[rsp], rax

; 219  : 	} else {

	jmp	SHORT $LN1@next_task
$LN2@next_task:

; 220  : 		task = task_list_head;

	mov	rax, QWORD PTR ?task_list_head@@3PEAU_thread_@@EA ; task_list_head
	mov	QWORD PTR task$[rsp], rax
$LN1@next_task:
$LN3@next_task:
$LN5@next_task:
$LN8@next_task:
$end$14:

; 221  : 	}
; 222  : 
; 223  : end:
; 224  : 	current_thread = task;

	mov	rax, QWORD PTR task$[rsp]
	mov	QWORD PTR current_thread, rax

; 225  : }

	add	rsp, 24
	ret	0
?next_task@@YAXXZ ENDP					; next_task
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
?idle_thread@@YAXXZ PROC				; idle_thread

; 167  : void idle_thread () {

$LN5:
	sub	rsp, 40					; 00000028H
$LN2@idle_threa:

; 168  : 	while(1) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN1@idle_threa

; 169  : 		x64_hlt();

	call	x64_hlt

; 170  : 	}

	jmp	SHORT $LN2@idle_threa
$LN1@idle_threa:

; 171  : }

	add	rsp, 40					; 00000028H
	ret	0
?idle_thread@@YAXXZ ENDP				; idle_thread
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
thread$ = 8
?task_delete@@YAXPEAU_thread_@@@Z PROC			; task_delete

; 56   : void task_delete (thread_t* thread) {

	mov	QWORD PTR [rsp+8], rcx

; 57   : 
; 58   : 	if (task_list_head == NULL)

	cmp	QWORD PTR ?task_list_head@@3PEAU_thread_@@EA, 0 ; task_list_head
	jne	SHORT $LN5@task_delet

; 59   : 		return;

	jmp	$LN6@task_delet
$LN5@task_delet:

; 60   : 
; 61   : 	if (thread == task_list_head) {

	mov	rax, QWORD PTR ?task_list_head@@3PEAU_thread_@@EA ; task_list_head
	cmp	QWORD PTR thread$[rsp], rax
	jne	SHORT $LN4@task_delet

; 62   : 		task_list_head = task_list_head->next;

	mov	rax, QWORD PTR ?task_list_head@@3PEAU_thread_@@EA ; task_list_head
	mov	rax, QWORD PTR [rax+256]
	mov	QWORD PTR ?task_list_head@@3PEAU_thread_@@EA, rax ; task_list_head

; 63   : 	} else {

	jmp	SHORT $LN3@task_delet
$LN4@task_delet:

; 64   : 		thread->prev->next = thread->next;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rcx, QWORD PTR thread$[rsp]
	mov	rcx, QWORD PTR [rcx+256]
	mov	QWORD PTR [rax+256], rcx
$LN3@task_delet:

; 65   : 	}
; 66   : 
; 67   : 	if (thread == task_list_last) {

	mov	rax, QWORD PTR ?task_list_last@@3PEAU_thread_@@EA ; task_list_last
	cmp	QWORD PTR thread$[rsp], rax
	jne	SHORT $LN2@task_delet

; 68   : 		task_list_last = thread->prev;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	QWORD PTR ?task_list_last@@3PEAU_thread_@@EA, rax ; task_list_last

; 69   : 	} else {

	jmp	SHORT $LN1@task_delet
$LN2@task_delet:

; 70   : 		thread->next->prev = thread->prev;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rax, QWORD PTR [rax+256]
	mov	rcx, QWORD PTR thread$[rsp]
	mov	rcx, QWORD PTR [rcx+264]
	mov	QWORD PTR [rax+264], rcx
$LN1@task_delet:
$LN6@task_delet:

; 71   : 	}
; 72   : }

	fatret	0
?task_delete@@YAXPEAU_thread_@@@Z ENDP			; task_delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
new_task$ = 8
?thread_insert@@YAXPEAU_thread_@@@Z PROC		; thread_insert

; 40   : void thread_insert (thread_t* new_task ) {

	mov	QWORD PTR [rsp+8], rcx

; 41   : 	new_task->next = NULL;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	QWORD PTR [rax+256], 0

; 42   : 	new_task->prev = NULL;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	QWORD PTR [rax+264], 0

; 43   : 
; 44   : 	if (task_list_head == NULL) {

	cmp	QWORD PTR ?task_list_head@@3PEAU_thread_@@EA, 0 ; task_list_head
	jne	SHORT $LN2@thread_ins

; 45   : 		task_list_last = new_task;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	QWORD PTR ?task_list_last@@3PEAU_thread_@@EA, rax ; task_list_last

; 46   : 		task_list_head = new_task;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	QWORD PTR ?task_list_head@@3PEAU_thread_@@EA, rax ; task_list_head

; 47   : 		current_thread = task_list_last;

	mov	rax, QWORD PTR ?task_list_last@@3PEAU_thread_@@EA ; task_list_last
	mov	QWORD PTR current_thread, rax

; 48   : 	} else {

	jmp	SHORT $LN1@thread_ins
$LN2@thread_ins:

; 49   : 		task_list_last->next = new_task;

	mov	rax, QWORD PTR ?task_list_last@@3PEAU_thread_@@EA ; task_list_last
	mov	rcx, QWORD PTR new_task$[rsp]
	mov	QWORD PTR [rax+256], rcx

; 50   : 		new_task->prev = task_list_last;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	rcx, QWORD PTR ?task_list_last@@3PEAU_thread_@@EA ; task_list_last
	mov	QWORD PTR [rax+264], rcx
$LN1@thread_ins:

; 51   : 	}
; 52   : 	task_list_last = new_task;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	QWORD PTR ?task_list_last@@3PEAU_thread_@@EA, rax ; task_list_last

; 53   : }

	ret	0
?thread_insert@@YAXPEAU_thread_@@@Z ENDP		; thread_insert
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
t$ = 8
ms$ = 16
?sleep_thread@@YAXPEAU_thread_@@_K@Z PROC		; sleep_thread

; 331  : void sleep_thread (thread_t *t, uint64_t ms) {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 332  : 	t->quanta = ms;

	mov	rax, QWORD PTR t$[rsp]
	movzx	ecx, WORD PTR ms$[rsp]
	mov	WORD PTR [rax+230], cx

; 333  : 	t->state = THREAD_STATE_SLEEP;

	mov	rax, QWORD PTR t$[rsp]
	mov	BYTE PTR [rax+224], 4

; 334  : }

	ret	0
?sleep_thread@@YAXPEAU_thread_@@_K@Z ENDP		; sleep_thread
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
thread$ = 8
?set_current_thread@@YAXPEAU_thread_@@@Z PROC		; set_current_thread

; 275  : void set_current_thread (thread_t *thread) {

	mov	QWORD PTR [rsp+8], rcx

; 276  : 	current_thread = thread;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR current_thread, rax

; 277  : }

	ret	0
?set_current_thread@@YAXPEAU_thread_@@@Z ENDP		; set_current_thread
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
value$ = 8
?set_sched_debug@@YAX_N@Z PROC				; set_sched_debug

; 279  : void set_sched_debug (bool value) {

	mov	BYTE PTR [rsp+8], cl

; 280  : 	//debug = value;
; 281  : }

	ret	0
?set_sched_debug@@YAX_N@Z ENDP				; set_sched_debug
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
i$1 = 32
t$2 = 40
id$ = 64
?thread_iterate_block_list@@YAPEAU_thread_@@H@Z PROC	; thread_iterate_block_list

; 298  : thread_t* thread_iterate_block_list (int id) {

$LN7:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H

; 299  : 	for (int i = 0; i < blocked_list->pointer; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@thread_ite
$LN3@thread_ite:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@thread_ite:
	mov	rax, QWORD PTR ?blocked_list@@3PEAU_list_@@EA ; blocked_list
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN2@thread_ite

; 300  : 		thread_t*  t = (thread_t*)list_get_at (blocked_list,i);

	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR ?blocked_list@@3PEAU_list_@@EA ; blocked_list
	call	?list_get_at@@YAPEAXPEAU_list_@@I@Z	; list_get_at
	mov	QWORD PTR t$2[rsp], rax

; 301  : 		if (t->id == id) {

	mov	rax, QWORD PTR t$2[rsp]
	movzx	eax, WORD PTR [rax+226]
	cmp	eax, DWORD PTR id$[rsp]
	jne	SHORT $LN1@thread_ite

; 302  : 			return t;

	mov	rax, QWORD PTR t$2[rsp]
	jmp	SHORT $LN5@thread_ite
$LN1@thread_ite:

; 303  : 		}
; 304  : 	}

	jmp	SHORT $LN3@thread_ite
$LN2@thread_ite:

; 305  : 	return NULL;

	xor	eax, eax
$LN5@thread_ite:

; 306  : }

	add	rsp, 56					; 00000038H
	ret	0
?thread_iterate_block_list@@YAPEAU_thread_@@H@Z ENDP	; thread_iterate_block_list
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
it$1 = 0
id$ = 32
?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z PROC	; thread_iterate_ready_list

; 309  : thread_t * thread_iterate_ready_list (uint16_t id) {

$LN7:
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 24

; 310  : 	for (thread_t *it = task_list_head; it != NULL; it = it->next) {

	mov	rax, QWORD PTR ?task_list_head@@3PEAU_thread_@@EA ; task_list_head
	mov	QWORD PTR it$1[rsp], rax
	jmp	SHORT $LN4@thread_ite
$LN3@thread_ite:
	mov	rax, QWORD PTR it$1[rsp]
	mov	rax, QWORD PTR [rax+256]
	mov	QWORD PTR it$1[rsp], rax
$LN4@thread_ite:
	cmp	QWORD PTR it$1[rsp], 0
	je	SHORT $LN2@thread_ite

; 311  : 		if (it->id == id) {

	mov	rax, QWORD PTR it$1[rsp]
	movzx	eax, WORD PTR [rax+226]
	movzx	ecx, WORD PTR id$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN1@thread_ite

; 312  : 			return it;

	mov	rax, QWORD PTR it$1[rsp]
	jmp	SHORT $LN5@thread_ite
$LN1@thread_ite:

; 313  : 		}
; 314  : 	}

	jmp	SHORT $LN3@thread_ite
$LN2@thread_ite:

; 315  : 	return NULL;

	xor	eax, eax
$LN5@thread_ite:

; 316  : }

	add	rsp, 24
	ret	0
?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z ENDP	; thread_iterate_ready_list
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
?is_multi_task_enable@@YA_NXZ PROC			; is_multi_task_enable

; 284  : 	return scheduler_enable;

	movzx	eax, BYTE PTR ?scheduler_enable@@3_NA	; scheduler_enable

; 285  : }

	ret	0
?is_multi_task_enable@@YA_NXZ ENDP			; is_multi_task_enable
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
value$ = 8
?set_multi_task_enable@@YAX_N@Z PROC			; set_multi_task_enable

; 268  : void set_multi_task_enable (bool value) {

	mov	BYTE PTR [rsp+8], cl

; 269  : 	if (scheduler_enable == value)

	movzx	eax, BYTE PTR ?scheduler_enable@@3_NA	; scheduler_enable
	movzx	ecx, BYTE PTR value$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN1@set_multi_

; 270  : 		return;

	jmp	SHORT $LN2@set_multi_
$LN1@set_multi_:

; 271  : 
; 272  : 	scheduler_enable = value;

	movzx	eax, BYTE PTR value$[rsp]
	mov	BYTE PTR ?scheduler_enable@@3_NA, al	; scheduler_enable
$LN2@set_multi_:

; 273  : }

	fatret	0
?set_multi_task_enable@@YAX_N@Z ENDP			; set_multi_task_enable
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
?get_current_thread@@YAPEAU_thread_@@XZ PROC		; get_current_thread

; 338  : 	return current_thread;

	mov	rax, QWORD PTR current_thread

; 339  : }

	ret	0
?get_current_thread@@YAPEAU_thread_@@XZ ENDP		; get_current_thread
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
i$1 = 32
thr$2 = 40
t$ = 64
?unblock_thread@@YAXPEAU_thread_@@@Z PROC		; unblock_thread

; 319  : void unblock_thread (thread_t *t) {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 320  : 	x64_cli();

	call	x64_cli

; 321  : 	t->state = THREAD_STATE_READY;

	mov	rax, QWORD PTR t$[rsp]
	mov	BYTE PTR [rax+224], 1

; 322  : 	thread_insert (t);

	mov	rcx, QWORD PTR t$[rsp]
	call	?thread_insert@@YAXPEAU_thread_@@@Z	; thread_insert

; 323  : 	for (int i = 0; i < blocked_list->pointer; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@unblock_th
$LN3@unblock_th:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@unblock_th:
	mov	rax, QWORD PTR ?blocked_list@@3PEAU_list_@@EA ; blocked_list
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN2@unblock_th

; 324  : 		thread_t *thr = (thread_t*)list_get_at(blocked_list,i);

	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR ?blocked_list@@3PEAU_list_@@EA ; blocked_list
	call	?list_get_at@@YAPEAXPEAU_list_@@I@Z	; list_get_at
	mov	QWORD PTR thr$2[rsp], rax

; 325  : 		if (thr == t) 

	mov	rax, QWORD PTR t$[rsp]
	cmp	QWORD PTR thr$2[rsp], rax
	jne	SHORT $LN1@unblock_th

; 326  : 			list_remove (blocked_list,i);

	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR ?blocked_list@@3PEAU_list_@@EA ; blocked_list
	call	?list_remove@@YAPEAXPEAU_list_@@I@Z	; list_remove
$LN1@unblock_th:

; 327  : 	}

	jmp	SHORT $LN3@unblock_th
$LN2@unblock_th:

; 328  : }

	add	rsp, 56					; 00000038H
	ret	0
?unblock_thread@@YAXPEAU_thread_@@@Z ENDP		; unblock_thread
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
thread$ = 48
?block_thread@@YAXPEAU_thread_@@@Z PROC			; block_thread

; 289  : void block_thread (thread_t *thread) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 290  : 	thread->state = THREAD_STATE_BLOCKED;

	mov	rax, QWORD PTR thread$[rsp]
	mov	BYTE PTR [rax+224], 3

; 291  : 	task_delete (thread);

	mov	rcx, QWORD PTR thread$[rsp]
	call	?task_delete@@YAXPEAU_thread_@@@Z	; task_delete

; 292  : 	list_add (blocked_list,thread);

	mov	rdx, QWORD PTR thread$[rsp]
	mov	rcx, QWORD PTR ?blocked_list@@3PEAU_list_@@EA ; blocked_list
	call	?list_add@@YAXPEAU_list_@@PEAX@Z	; list_add

; 293  : }

	add	rsp, 40					; 00000028H
	ret	0
?block_thread@@YAXPEAU_thread_@@@Z ENDP			; block_thread
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
t$ = 32
entry$ = 64
stack$ = 72
cr3$ = 80
name$ = 88
priority$ = 96
?create_kthread@@YAPEAU_thread_@@P6AXXZ_K1QEADE@Z PROC	; create_kthread

; 81   : {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 82   : 	thread_t *t = (thread_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR t$[rsp], rax

; 83   : 	t->ss = 0x10;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax], 16

; 84   : 	t->rsp = stack;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 85   : 	t->rflags = 0x202;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+16], 514			; 00000202H

; 86   : 	t->cs = 0x08;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+24], 8

; 87   : 	t->rip = (uint64_t)entry;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR entry$[rsp]
	mov	QWORD PTR [rax+32], rcx

; 88   : 	t->rax = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+40], 0

; 89   : 	t->rbx = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+48], 0

; 90   : 	t->rcx = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+56], 0

; 91   : 	t->rdx = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+64], 0

; 92   : 	t->rsi = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+72], 0

; 93   : 	t->rdi = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+80], 0

; 94   : 	t->rbp = t->rsp;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+88], rcx

; 95   : 	t->r8 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+96], 0

; 96   : 	t->r9 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+104], 0

; 97   : 	t->r10 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+112], 0

; 98   : 	t->r11 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+120], 0

; 99   : 	t->r12 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+128], 0

; 100  : 	t->r13 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+136], 0

; 101  : 	t->r14 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+144], 0

; 102  : 	t->r15 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+152], 0

; 103  : 	t->ds = 0x10;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+160], 16

; 104  : 	t->es = 0x10;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+168], 16

; 105  : 	t->fs = 0x10;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+176], 16

; 106  : 	t->gs = 0x10;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+184], 16

; 107  : 	t->kern_esp = stack;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	QWORD PTR [rax+200], rcx

; 108  : 	t->_is_user = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	BYTE PTR [rax+208], 0

; 109  : 	t->cr3 = cr3;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	mov	QWORD PTR [rax+192], rcx

; 110  : 	t->name = name;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	mov	QWORD PTR [rax+216], rcx

; 111  : 	t->id = task_id++;

	mov	rax, QWORD PTR t$[rsp]
	movzx	ecx, WORD PTR ?task_id@@3GA		; task_id
	mov	WORD PTR [rax+226], cx
	movzx	eax, WORD PTR ?task_id@@3GA		; task_id
	inc	ax
	mov	WORD PTR ?task_id@@3GA, ax		; task_id

; 112  : 	t->quanta = 0;

	xor	eax, eax
	mov	rcx, QWORD PTR t$[rsp]
	mov	WORD PTR [rcx+230], ax

; 113  : 	t->priviledge = THREAD_LEVEL_KERNEL;

	mov	rax, QWORD PTR t$[rsp]
	mov	BYTE PTR [rax+228], 1

; 114  : 	t->state = THREAD_STATE_READY;

	mov	rax, QWORD PTR t$[rsp]
	mov	BYTE PTR [rax+224], 1

; 115  : 	t->priority = priority;

	mov	rax, QWORD PTR t$[rsp]
	movzx	ecx, BYTE PTR priority$[rsp]
	mov	BYTE PTR [rax+248], cl

; 116  : 	thread_insert(t);

	mov	rcx, QWORD PTR t$[rsp]
	call	?thread_insert@@YAXPEAU_thread_@@@Z	; thread_insert

; 117  : 	return t;

	mov	rax, QWORD PTR t$[rsp]

; 118  : }

	add	rsp, 56					; 00000038H
	ret	0
?create_kthread@@YAPEAU_thread_@@P6AXXZ_K1QEADE@Z ENDP	; create_kthread
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
t$ = 32
entry$ = 64
stack$ = 72
cr3$ = 80
name$ = 88
priority$ = 96
?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z PROC ; create_user_thread

; 124  : {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 125  : 	thread_t *t = (thread_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR t$[rsp], rax

; 126  : 	t->ss = SEGVAL(GDT_ENTRY_USER_DATA,3);//0x23;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax], 35			; 00000023H

; 127  : 	t->rsp = stack;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 128  : 	t->rflags = 0x286;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+16], 646			; 00000286H

; 129  : 	t->cs = SEGVAL (GDT_ENTRY_USER_CODE,3);// 0x2b;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+24], 43			; 0000002bH

; 130  : 	t->rip = (uint64_t)entry;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR entry$[rsp]
	mov	QWORD PTR [rax+32], rcx

; 131  : 	t->rax = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+40], 0

; 132  : 	t->rbx = 10;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+48], 10

; 133  : 	t->rcx = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+56], 0

; 134  : 	t->rdx = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+64], 0

; 135  : 	t->rsi = 10;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+72], 10

; 136  : 	t->rdi = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+80], 0

; 137  : 	t->rbp = t->rsp;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+88], rcx

; 138  : 	t->r8 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+96], 0

; 139  : 	t->r9 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+104], 0

; 140  : 	t->r10 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+112], 0

; 141  : 	t->r11 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+120], 0

; 142  : 	t->r12 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+128], 0

; 143  : 	t->r13 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+136], 0

; 144  : 	t->r14 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+144], 0

; 145  : 	t->r15 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+152], 0

; 146  : 	t->kern_esp = (uint64_t)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	rcx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rcx+200], rax

; 147  : 	t->ds = 0x23;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+160], 35			; 00000023H

; 148  : 	t->es = 0x23;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+168], 35			; 00000023H

; 149  : 	t->fs = 0x23;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+176], 35			; 00000023H

; 150  : 	t->gs = 0x23;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+184], 35			; 00000023H

; 151  : 	t->cr3 = cr3;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	mov	QWORD PTR [rax+192], rcx

; 152  : 	t->name = name;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	mov	QWORD PTR [rax+216], rcx

; 153  : 	t->id = task_id++;

	mov	rax, QWORD PTR t$[rsp]
	movzx	ecx, WORD PTR ?task_id@@3GA		; task_id
	mov	WORD PTR [rax+226], cx
	movzx	eax, WORD PTR ?task_id@@3GA		; task_id
	inc	ax
	mov	WORD PTR ?task_id@@3GA, ax		; task_id

; 154  : 	t->quanta = 0;

	xor	eax, eax
	mov	rcx, QWORD PTR t$[rsp]
	mov	WORD PTR [rcx+230], ax

; 155  : 	t->blocked_stack_resv = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+232], 0

; 156  : 	t->mouse_box = (uint64_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	rcx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rcx+240], rax

; 157  : 	t->_is_user = 1;

	mov	rax, QWORD PTR t$[rsp]
	mov	BYTE PTR [rax+208], 1

; 158  : 	t->priviledge = THREAD_LEVEL_USER;

	mov	rax, QWORD PTR t$[rsp]
	mov	BYTE PTR [rax+228], 2

; 159  : 	t->state = THREAD_STATE_READY;

	mov	rax, QWORD PTR t$[rsp]
	mov	BYTE PTR [rax+224], 1

; 160  : 	t->priority = priority;

	mov	rax, QWORD PTR t$[rsp]
	movzx	ecx, BYTE PTR priority$[rsp]
	mov	BYTE PTR [rax+248], cl

; 161  : 	thread_insert (t);

	mov	rcx, QWORD PTR t$[rsp]
	call	?thread_insert@@YAXPEAU_thread_@@@Z	; thread_insert

; 162  : 	return t;

	mov	rax, QWORD PTR t$[rsp]

; 163  : }

	add	rsp, 56					; 00000038H
	ret	0
?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z ENDP ; create_user_thread
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
?scheduler_start@@YAXXZ PROC				; scheduler_start

; 260  : void scheduler_start () {

$LN3:
	sub	rsp, 40					; 00000028H

; 261  : 	x64_cli();

	call	x64_cli

; 262  : 	setvect(0x40, scheduler_isr);

	lea	rdx, OFFSET FLAT:?scheduler_isr@@YAX_KPEAX@Z ; scheduler_isr
	mov	ecx, 64					; 00000040H
	call	?setvect@@YAX_KP6AX0PEAX@Z@Z		; setvect

; 263  : 	execute_idle(current_thread,get_kernel_tss());

	call	get_kernel_tss
	mov	rdx, rax
	mov	rcx, QWORD PTR current_thread
	call	execute_idle

; 264  : }

	add	rsp, 40					; 00000028H
	ret	0
?scheduler_start@@YAXXZ ENDP				; scheduler_start
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
tv70 = 48
idle_$ = 56
?initialize_scheduler@@YAXXZ PROC			; initialize_scheduler

; 176  : void initialize_scheduler () {

$LN3:
	sub	rsp, 72					; 00000048H

; 177  : 	blocked_list = initialize_list();

	call	?initialize_list@@YAPEAU_list_@@XZ	; initialize_list
	mov	QWORD PTR ?blocked_list@@3PEAU_list_@@EA, rax ; blocked_list

; 178  : 	block_mutex = create_mutex();

	call	?create_mutex@@YAPEAUmutex_t@@XZ	; create_mutex
	mov	QWORD PTR ?block_mutex@@3PEAUmutex_t@@EA, rax ; block_mutex

; 179  : 	scheduler_mutex = create_mutex ();

	call	?create_mutex@@YAPEAUmutex_t@@XZ	; create_mutex
	mov	QWORD PTR ?scheduler_mutex@@3PEAUmutex_t@@EA, rax ; scheduler_mutex

; 180  : 	scheduler_enable = true;

	mov	BYTE PTR ?scheduler_enable@@3_NA, 1	; scheduler_enable

; 181  : 	thread_t *idle_ = create_kthread (idle_thread,(uint64_t)pmmngr_alloc(),x64_read_cr3(),"Idle",1);

	call	x64_read_cr3
	mov	QWORD PTR tv70[rsp], rax
	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	BYTE PTR [rsp+32], 1
	lea	r9, OFFSET FLAT:$SG3249
	mov	rcx, QWORD PTR tv70[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:?idle_thread@@YAXXZ	; idle_thread
	call	?create_kthread@@YAPEAU_thread_@@P6AXXZ_K1QEADE@Z ; create_kthread
	mov	QWORD PTR idle_$[rsp], rax

; 182  : 	current_thread = idle_;

	mov	rax, QWORD PTR idle_$[rsp]
	mov	QWORD PTR current_thread, rax

; 183  : 
; 184  : }

	add	rsp, 72					; 00000048H
	ret	0
?initialize_scheduler@@YAXXZ ENDP			; initialize_scheduler
_TEXT	ENDS
END
