; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?scheduler_enable@@3_NA				; scheduler_enable
PUBLIC	?scheduler_initialized@@3_NA			; scheduler_initialized
PUBLIC	?task_id@@3GA					; task_id
PUBLIC	?task_list_head@@3PEAU_thread_@@EA		; task_list_head
PUBLIC	?task_list_last@@3PEAU_thread_@@EA		; task_list_last
PUBLIC	?blocked_thr_head@@3PEAU_thread_@@EA		; blocked_thr_head
PUBLIC	?blocked_thr_last@@3PEAU_thread_@@EA		; blocked_thr_last
PUBLIC	?system_tick@@3IA				; system_tick
PUBLIC	current_thread
_BSS	SEGMENT
?scheduler_enable@@3_NA DB 01H DUP (?)			; scheduler_enable
	ALIGN	4

?scheduler_initialized@@3_NA DB 01H DUP (?)		; scheduler_initialized
	ALIGN	4

?task_id@@3GA DW 01H DUP (?)				; task_id
	ALIGN	8

?task_list_head@@3PEAU_thread_@@EA DQ 01H DUP (?)	; task_list_head
?task_list_last@@3PEAU_thread_@@EA DQ 01H DUP (?)	; task_list_last
?blocked_thr_head@@3PEAU_thread_@@EA DQ 01H DUP (?)	; blocked_thr_head
?blocked_thr_last@@3PEAU_thread_@@EA DQ 01H DUP (?)	; blocked_thr_last
?system_tick@@3IA DD 01H DUP (?)			; system_tick
	ALIGN	8

current_thread DQ 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
$SG3480	DB	'Idle', 00H
CONST	ENDS
PUBLIC	?initialize_scheduler@@YAXXZ			; initialize_scheduler
PUBLIC	?scheduler_start@@YAXXZ				; scheduler_start
PUBLIC	?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z ; create_user_thread
PUBLIC	?create_kthread@@YAPEAU_thread_@@P6AXXZ_K1QEADE@Z ; create_kthread
PUBLIC	?block_thread@@YAXPEAU_thread_@@@Z		; block_thread
PUBLIC	?unblock_thread@@YAXPEAU_thread_@@@Z		; unblock_thread
PUBLIC	?get_current_thread@@YAPEAU_thread_@@XZ		; get_current_thread
PUBLIC	?set_multi_task_enable@@YAX_N@Z			; set_multi_task_enable
PUBLIC	?is_multi_task_enable@@YA_NXZ			; is_multi_task_enable
PUBLIC	?force_sched@@YAXXZ				; force_sched
PUBLIC	?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z	; thread_iterate_ready_list
PUBLIC	?thread_iterate_block_list@@YAPEAU_thread_@@H@Z	; thread_iterate_block_list
PUBLIC	?thread_get_id_by_name@@YAGPEAD@Z		; thread_get_id_by_name
PUBLIC	?set_current_thread@@YAXPEAU_thread_@@@Z	; set_current_thread
PUBLIC	?sleep_thread@@YAXPEAU_thread_@@_K@Z		; sleep_thread
PUBLIC	?task_delete@@YAXPEAU_thread_@@@Z		; task_delete
PUBLIC	?is_scheduler_initialized@@YA_NXZ		; is_scheduler_initialized
PUBLIC	?sched_get_tick@@YAIXZ				; sched_get_tick
PUBLIC	?thread_insert@@YAXPEAU_thread_@@@Z		; thread_insert
PUBLIC	?thread_insert_block@@YAXPEAU_thread_@@@Z	; thread_insert_block
PUBLIC	?thread_delete_block@@YAXPEAU_thread_@@@Z	; thread_delete_block
PUBLIC	?idle_thread@@YAXXZ				; idle_thread
PUBLIC	?next_task@@YAXXZ				; next_task
PUBLIC	?scheduler_isr@@YAX_KPEAX@Z			; scheduler_isr
EXTRN	?memset@@YAXPEAXEI@Z:PROC			; memset
EXTRN	?pmmngr_alloc@@YAPEAXXZ:PROC			; pmmngr_alloc
EXTRN	?p2v@@YA_K_K@Z:PROC				; p2v
EXTRN	?v2p@@YA_K_K@Z:PROC				; v2p
EXTRN	x64_cli:PROC
EXTRN	x64_sti:PROC
EXTRN	x64_read_cr3:PROC
EXTRN	?setvect@@YAX_KP6AX0PEAX@Z@Z:PROC		; setvect
EXTRN	?map_page_ex@@YA_NPEA_K_K1E@Z:PROC		; map_page_ex
EXTRN	?malloc@@YAPEAX_K@Z:PROC			; malloc
EXTRN	save_context:PROC
EXTRN	execute_idle:PROC
EXTRN	get_kernel_tss:PROC
EXTRN	?allocate_kstack@@YA_KPEA_K@Z:PROC		; allocate_kstack
EXTRN	?timer_fire@@YAXXZ:PROC				; timer_fire
EXTRN	?apic_local_eoi@@YAXXZ:PROC			; apic_local_eoi
EXTRN	force_sched_apic:PROC
pdata	SEGMENT
$pdata$?initialize_scheduler@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+107
	DD	imagerel $unwind$?initialize_scheduler@@YAXXZ
$pdata$?scheduler_start@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?scheduler_start@@YAXXZ
$pdata$?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z DD imagerel $LN3
	DD	imagerel $LN3+669
	DD	imagerel $unwind$?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z
$pdata$?create_kthread@@YAPEAU_thread_@@P6AXXZ_K1QEADE@Z DD imagerel $LN3
	DD	imagerel $LN3+604
	DD	imagerel $unwind$?create_kthread@@YAPEAU_thread_@@P6AXXZ_K1QEADE@Z
$pdata$?block_thread@@YAXPEAU_thread_@@@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?block_thread@@YAXPEAU_thread_@@@Z
$pdata$?unblock_thread@@YAXPEAU_thread_@@@Z DD imagerel $LN7
	DD	imagerel $LN7+104
	DD	imagerel $unwind$?unblock_thread@@YAXPEAU_thread_@@@Z
$pdata$?force_sched@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?force_sched@@YAXXZ
$pdata$?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z DD imagerel $LN7
	DD	imagerel $LN7+79
	DD	imagerel $unwind$?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z
$pdata$?thread_iterate_block_list@@YAPEAU_thread_@@H@Z DD imagerel $LN8
	DD	imagerel $LN8+85
	DD	imagerel $unwind$?thread_iterate_block_list@@YAPEAU_thread_@@H@Z
$pdata$?thread_get_id_by_name@@YAGPEAD@Z DD imagerel $LN14
	DD	imagerel $LN14+200
	DD	imagerel $unwind$?thread_get_id_by_name@@YAGPEAD@Z
$pdata$?next_task@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+147
	DD	imagerel $unwind$?next_task@@YAXXZ
$pdata$?scheduler_isr@@YAX_KPEAX@Z DD imagerel $LN8
	DD	imagerel $LN8+260
	DD	imagerel $unwind$?scheduler_isr@@YAX_KPEAX@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?initialize_scheduler@@YAXXZ DD 010401H
	DD	08204H
$unwind$?scheduler_start@@YAXXZ DD 010401H
	DD	04204H
$unwind$?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z DD 011801H
	DD	06218H
$unwind$?create_kthread@@YAPEAU_thread_@@P6AXXZ_K1QEADE@Z DD 011801H
	DD	06218H
$unwind$?block_thread@@YAXPEAU_thread_@@@Z DD 010901H
	DD	04209H
$unwind$?unblock_thread@@YAXPEAU_thread_@@@Z DD 010901H
	DD	06209H
$unwind$?force_sched@@YAXXZ DD 010401H
	DD	04204H
$unwind$?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z DD 010901H
	DD	02209H
$unwind$?thread_iterate_block_list@@YAPEAU_thread_@@H@Z DD 010801H
	DD	02208H
$unwind$?thread_get_id_by_name@@YAGPEAD@Z DD 010901H
	DD	04209H
$unwind$?next_task@@YAXXZ DD 010401H
	DD	02204H
$unwind$?scheduler_isr@@YAX_KPEAX@Z DD 010e01H
	DD	0620eH
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
frame$ = 32
v$ = 64
param$ = 72
?scheduler_isr@@YAX_KPEAX@Z PROC			; scheduler_isr

; 302  : void scheduler_isr (size_t v, void* param) {

$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 303  : 	x64_cli();

	call	x64_cli

; 304  : 	interrupt_stack_frame *frame = (interrupt_stack_frame*)param;

	mov	rax, QWORD PTR param$[rsp]
	mov	QWORD PTR frame$[rsp], rax

; 305  : 	/* check for enable bit, if yes than proceed for 
; 306  : 	   multitasking */
; 307  : 	if (scheduler_enable == false)

	movzx	eax, BYTE PTR ?scheduler_enable@@3_NA	; scheduler_enable
	test	eax, eax
	jne	SHORT $LN5@scheduler_

; 308  : 		goto sched_end;

	jmp	$LN4@scheduler_
	jmp	$sched_end$9
$LN5@scheduler_:

; 309  : 
; 310  : 	//mutex_lock (scheduler_mutex);
; 311  : 	/** save currently running thread contexts */
; 312  : 	if (save_context(current_thread,get_kernel_tss()) == 0) {

	call	get_kernel_tss
	mov	rdx, rax
	mov	rcx, QWORD PTR current_thread
	call	save_context
	test	eax, eax
	jne	$LN3@scheduler_

; 313  : 		current_thread->cr3 = x64_read_cr3();

	call	x64_read_cr3
	mov	rcx, QWORD PTR current_thread
	mov	QWORD PTR [rcx+192], rax

; 314  : 
; 315  : 		/* check if the thread is user mode thread, if yes
; 316  : 		   than store the kernel esp */
; 317  : 		if (current_thread->priviledge == THREAD_LEVEL_USER)

	mov	rax, QWORD PTR current_thread
	movzx	eax, BYTE PTR [rax+236]
	cmp	eax, 2
	jne	SHORT $LN2@scheduler_

; 318  : 			current_thread->kern_esp = get_kernel_tss()->rsp[0];

	call	get_kernel_tss
	mov	ecx, 8
	imul	rcx, 0
	mov	rdx, QWORD PTR current_thread
	mov	rax, QWORD PTR [rax+rcx+4]
	mov	QWORD PTR [rdx+200], rax
$LN2@scheduler_:

; 319  : 
; 320  : 		/* now get the next runnable task from the thread list */
; 321  : 		next_task();

	call	?next_task@@YAXXZ			; next_task

; 322  : 
; 323  : 		/*
; 324  : 		  Here increase the system tick and
; 325  : 		  fire the timer
; 326  : 		  */
; 327  : 		system_tick++;

	mov	eax, DWORD PTR ?system_tick@@3IA	; system_tick
	inc	eax
	mov	DWORD PTR ?system_tick@@3IA, eax	; system_tick

; 328  : 		timer_fire();

	call	?timer_fire@@YAXXZ			; timer_fire

; 329  : #ifdef USE_APIC
; 330  : 	    apic_local_eoi();

	call	?apic_local_eoi@@YAXXZ			; apic_local_eoi

; 331  : #endif
; 332  : #ifdef USE_PIC
; 333  : 		interrupt_end (0);
; 334  : #endif
; 335  : 		
; 336  : 		/** now return to the new task last stored instruction */
; 337  : 
; 338  : 
; 339  : 		if (current_thread->priviledge == THREAD_LEVEL_USER){

	mov	rax, QWORD PTR current_thread
	movzx	eax, BYTE PTR [rax+236]
	cmp	eax, 2
	jne	SHORT $LN1@scheduler_

; 340  : 			get_kernel_tss()->rsp[0] = current_thread->kern_esp;

	call	get_kernel_tss
	mov	ecx, 8
	imul	rcx, 0
	mov	rdx, QWORD PTR current_thread
	mov	rdx, QWORD PTR [rdx+200]
	mov	QWORD PTR [rax+rcx+4], rdx
$LN1@scheduler_:

; 341  : 		}
; 342  : 
; 343  : 		//x64_write_cr3 (current_thread->cr3);
; 344  : 		//mutex_unlock (scheduler_mutex);
; 345  : 		execute_idle (current_thread,get_kernel_tss());

	call	get_kernel_tss
	mov	rdx, rax
	mov	rcx, QWORD PTR current_thread
	call	execute_idle
$LN3@scheduler_:
$LN4@scheduler_:
$sched_end$9:

; 346  : 	}
; 347  : 
; 348  : sched_end:
; 349  : #ifdef USE_APIC
; 350  : 	apic_local_eoi();

	call	?apic_local_eoi@@YAXXZ			; apic_local_eoi

; 351  : #endif
; 352  : #ifdef USE_PIC
; 353  : 	interrupt_end(0);
; 354  : #endif
; 355  : 	//x64_sti();
; 356  : 	
; 357  : }

	add	rsp, 56					; 00000038H
	ret	0
?scheduler_isr@@YAX_KPEAX@Z ENDP			; scheduler_isr
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
task$ = 0
?next_task@@YAXXZ PROC					; next_task

; 278  : void next_task () {

$LN9:
	sub	rsp, 24

; 279  : 	thread_t* task = current_thread;

	mov	rax, QWORD PTR current_thread
	mov	QWORD PTR task$[rsp], rax
$LN6@next_task:

; 280  : 	do {
; 281  : 		if (task->state == THREAD_STATE_SLEEP) {

	mov	rax, QWORD PTR task$[rsp]
	movzx	eax, BYTE PTR [rax+232]
	cmp	eax, 4
	jne	SHORT $LN3@next_task

; 282  : 			if (task->quanta == 0) {

	mov	rax, QWORD PTR task$[rsp]
	movzx	eax, WORD PTR [rax+238]
	test	eax, eax
	jne	SHORT $LN2@next_task

; 283  : 				task->state = THREAD_STATE_READY;

	mov	rax, QWORD PTR task$[rsp]
	mov	BYTE PTR [rax+232], 1
$LN2@next_task:

; 284  : 			}
; 285  : 			task->quanta--;

	mov	rax, QWORD PTR task$[rsp]
	movzx	eax, WORD PTR [rax+238]
	dec	ax
	mov	rcx, QWORD PTR task$[rsp]
	mov	WORD PTR [rcx+238], ax
$LN3@next_task:

; 286  : 		}
; 287  : 		task = task->next;

	mov	rax, QWORD PTR task$[rsp]
	mov	rax, QWORD PTR [rax+760]
	mov	QWORD PTR task$[rsp], rax

; 288  : 		if (task == NULL) {

	cmp	QWORD PTR task$[rsp], 0
	jne	SHORT $LN1@next_task

; 289  : 			task = task_list_head;

	mov	rax, QWORD PTR ?task_list_head@@3PEAU_thread_@@EA ; task_list_head
	mov	QWORD PTR task$[rsp], rax
$LN1@next_task:

; 290  : 		}
; 291  : 	}while (task->state != THREAD_STATE_READY);

	mov	rax, QWORD PTR task$[rsp]
	movzx	eax, BYTE PTR [rax+232]
	cmp	eax, 1
	jne	SHORT $LN6@next_task
$end$10:

; 292  : 
; 293  : end:
; 294  : 	current_thread = task;

	mov	rax, QWORD PTR task$[rsp]
	mov	QWORD PTR current_thread, rax

; 295  : }

	add	rsp, 24
	ret	0
?next_task@@YAXXZ ENDP					; next_task
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
?idle_thread@@YAXXZ PROC				; idle_thread

; 248  : void idle_thread () {

	npad	2
$LN2@idle_threa:

; 249  : 	while(1) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN1@idle_threa

; 250  : 		//x64_hlt();
; 251  : 	}

	jmp	SHORT $LN2@idle_threa
$LN1@idle_threa:

; 252  : }

	fatret	0
?idle_thread@@YAXXZ ENDP				; idle_thread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
thread$ = 8
?thread_delete_block@@YAXPEAU_thread_@@@Z PROC		; thread_delete_block

; 115  : void thread_delete_block (thread_t* thread) {

	mov	QWORD PTR [rsp+8], rcx

; 116  : 
; 117  : 	if (blocked_thr_head == NULL)

	cmp	QWORD PTR ?blocked_thr_head@@3PEAU_thread_@@EA, 0 ; blocked_thr_head
	jne	SHORT $LN5@thread_del

; 118  : 		return;

	jmp	$LN6@thread_del
$LN5@thread_del:

; 119  : 
; 120  : 	if (thread == blocked_thr_head) {

	mov	rax, QWORD PTR ?blocked_thr_head@@3PEAU_thread_@@EA ; blocked_thr_head
	cmp	QWORD PTR thread$[rsp], rax
	jne	SHORT $LN4@thread_del

; 121  : 		blocked_thr_head = blocked_thr_head->next;

	mov	rax, QWORD PTR ?blocked_thr_head@@3PEAU_thread_@@EA ; blocked_thr_head
	mov	rax, QWORD PTR [rax+760]
	mov	QWORD PTR ?blocked_thr_head@@3PEAU_thread_@@EA, rax ; blocked_thr_head

; 122  : 	} else {

	jmp	SHORT $LN3@thread_del
$LN4@thread_del:

; 123  : 		thread->prev->next = thread->next;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rax, QWORD PTR [rax+768]
	mov	rcx, QWORD PTR thread$[rsp]
	mov	rcx, QWORD PTR [rcx+760]
	mov	QWORD PTR [rax+760], rcx
$LN3@thread_del:

; 124  : 	}
; 125  : 
; 126  : 	if (thread == blocked_thr_last) {

	mov	rax, QWORD PTR ?blocked_thr_last@@3PEAU_thread_@@EA ; blocked_thr_last
	cmp	QWORD PTR thread$[rsp], rax
	jne	SHORT $LN2@thread_del

; 127  : 		blocked_thr_last = thread->prev;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rax, QWORD PTR [rax+768]
	mov	QWORD PTR ?blocked_thr_last@@3PEAU_thread_@@EA, rax ; blocked_thr_last

; 128  : 	} else {

	jmp	SHORT $LN1@thread_del
$LN2@thread_del:

; 129  : 		thread->next->prev = thread->prev;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rax, QWORD PTR [rax+760]
	mov	rcx, QWORD PTR thread$[rsp]
	mov	rcx, QWORD PTR [rcx+768]
	mov	QWORD PTR [rax+768], rcx
$LN1@thread_del:
$LN6@thread_del:

; 130  : 	}
; 131  : }

	fatret	0
?thread_delete_block@@YAXPEAU_thread_@@@Z ENDP		; thread_delete_block
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
new_task$ = 8
?thread_insert_block@@YAXPEAU_thread_@@@Z PROC		; thread_insert_block

; 97   : void thread_insert_block (thread_t* new_task ) {

	mov	QWORD PTR [rsp+8], rcx

; 98   : 	new_task->next = NULL;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	QWORD PTR [rax+760], 0

; 99   : 	new_task->prev = NULL;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	QWORD PTR [rax+768], 0

; 100  : 
; 101  : 	if (blocked_thr_head == NULL) {

	cmp	QWORD PTR ?blocked_thr_head@@3PEAU_thread_@@EA, 0 ; blocked_thr_head
	jne	SHORT $LN2@thread_ins

; 102  : 		blocked_thr_last = new_task;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	QWORD PTR ?blocked_thr_last@@3PEAU_thread_@@EA, rax ; blocked_thr_last

; 103  : 		blocked_thr_head = new_task;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	QWORD PTR ?blocked_thr_head@@3PEAU_thread_@@EA, rax ; blocked_thr_head

; 104  : 	} else {

	jmp	SHORT $LN1@thread_ins
$LN2@thread_ins:

; 105  : 		blocked_thr_last->next = new_task;

	mov	rax, QWORD PTR ?blocked_thr_last@@3PEAU_thread_@@EA ; blocked_thr_last
	mov	rcx, QWORD PTR new_task$[rsp]
	mov	QWORD PTR [rax+760], rcx

; 106  : 		new_task->prev = blocked_thr_last;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	rcx, QWORD PTR ?blocked_thr_last@@3PEAU_thread_@@EA ; blocked_thr_last
	mov	QWORD PTR [rax+768], rcx
$LN1@thread_ins:

; 107  : 	}
; 108  : 	blocked_thr_last = new_task;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	QWORD PTR ?blocked_thr_last@@3PEAU_thread_@@EA, rax ; blocked_thr_last

; 109  : }

	ret	0
?thread_insert_block@@YAXPEAU_thread_@@@Z ENDP		; thread_insert_block
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
new_task$ = 8
?thread_insert@@YAXPEAU_thread_@@@Z PROC		; thread_insert

; 53   : void thread_insert (thread_t* new_task ) {

	mov	QWORD PTR [rsp+8], rcx

; 54   : 	new_task->next = NULL;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	QWORD PTR [rax+760], 0

; 55   : 	new_task->prev = NULL;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	QWORD PTR [rax+768], 0

; 56   : 
; 57   : 	if (task_list_head == NULL) {

	cmp	QWORD PTR ?task_list_head@@3PEAU_thread_@@EA, 0 ; task_list_head
	jne	SHORT $LN2@thread_ins

; 58   : 		task_list_last = new_task;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	QWORD PTR ?task_list_last@@3PEAU_thread_@@EA, rax ; task_list_last

; 59   : 		task_list_head = new_task;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	QWORD PTR ?task_list_head@@3PEAU_thread_@@EA, rax ; task_list_head

; 60   : 		current_thread = task_list_last;

	mov	rax, QWORD PTR ?task_list_last@@3PEAU_thread_@@EA ; task_list_last
	mov	QWORD PTR current_thread, rax

; 61   : 	} else {

	jmp	SHORT $LN1@thread_ins
$LN2@thread_ins:

; 62   : 		task_list_last->next = new_task;

	mov	rax, QWORD PTR ?task_list_last@@3PEAU_thread_@@EA ; task_list_last
	mov	rcx, QWORD PTR new_task$[rsp]
	mov	QWORD PTR [rax+760], rcx

; 63   : 		new_task->prev = task_list_last;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	rcx, QWORD PTR ?task_list_last@@3PEAU_thread_@@EA ; task_list_last
	mov	QWORD PTR [rax+768], rcx
$LN1@thread_ins:

; 64   : 	}
; 65   : 	task_list_last = new_task;

	mov	rax, QWORD PTR new_task$[rsp]
	mov	QWORD PTR ?task_list_last@@3PEAU_thread_@@EA, rax ; task_list_last

; 66   : }

	ret	0
?thread_insert@@YAXPEAU_thread_@@@Z ENDP		; thread_insert
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
?sched_get_tick@@YAIXZ PROC				; sched_get_tick

; 496  : 	return system_tick;

	mov	eax, DWORD PTR ?system_tick@@3IA	; system_tick

; 497  : }

	ret	0
?sched_get_tick@@YAIXZ ENDP				; sched_get_tick
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
?is_scheduler_initialized@@YA_NXZ PROC			; is_scheduler_initialized

; 489  : 	return scheduler_initialized;

	movzx	eax, BYTE PTR ?scheduler_initialized@@3_NA ; scheduler_initialized

; 490  : }

	ret	0
?is_scheduler_initialized@@YA_NXZ ENDP			; is_scheduler_initialized
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
thread$ = 8
?task_delete@@YAXPEAU_thread_@@@Z PROC			; task_delete

; 72   : void task_delete (thread_t* thread) {

	mov	QWORD PTR [rsp+8], rcx

; 73   : 
; 74   : 	if (task_list_head == NULL)

	cmp	QWORD PTR ?task_list_head@@3PEAU_thread_@@EA, 0 ; task_list_head
	jne	SHORT $LN5@task_delet

; 75   : 		return;

	jmp	$LN6@task_delet
$LN5@task_delet:

; 76   : 
; 77   : 	if (thread == task_list_head) {

	mov	rax, QWORD PTR ?task_list_head@@3PEAU_thread_@@EA ; task_list_head
	cmp	QWORD PTR thread$[rsp], rax
	jne	SHORT $LN4@task_delet

; 78   : 		task_list_head = task_list_head->next;

	mov	rax, QWORD PTR ?task_list_head@@3PEAU_thread_@@EA ; task_list_head
	mov	rax, QWORD PTR [rax+760]
	mov	QWORD PTR ?task_list_head@@3PEAU_thread_@@EA, rax ; task_list_head

; 79   : 	} else {

	jmp	SHORT $LN3@task_delet
$LN4@task_delet:

; 80   : 		thread->prev->next = thread->next;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rax, QWORD PTR [rax+768]
	mov	rcx, QWORD PTR thread$[rsp]
	mov	rcx, QWORD PTR [rcx+760]
	mov	QWORD PTR [rax+760], rcx
$LN3@task_delet:

; 81   : 	}
; 82   : 
; 83   : 	if (thread == task_list_last) {

	mov	rax, QWORD PTR ?task_list_last@@3PEAU_thread_@@EA ; task_list_last
	cmp	QWORD PTR thread$[rsp], rax
	jne	SHORT $LN2@task_delet

; 84   : 		task_list_last = thread->prev;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rax, QWORD PTR [rax+768]
	mov	QWORD PTR ?task_list_last@@3PEAU_thread_@@EA, rax ; task_list_last

; 85   : 	} else {

	jmp	SHORT $LN1@task_delet
$LN2@task_delet:

; 86   : 		thread->next->prev = thread->prev;

	mov	rax, QWORD PTR thread$[rsp]
	mov	rax, QWORD PTR [rax+760]
	mov	rcx, QWORD PTR thread$[rsp]
	mov	rcx, QWORD PTR [rcx+768]
	mov	QWORD PTR [rax+768], rcx
$LN1@task_delet:
$LN6@task_delet:

; 87   : 	}
; 88   : 
; 89   : 	//pmmngr_free (thread);
; 90   : }

	fatret	0
?task_delete@@YAXPEAU_thread_@@@Z ENDP			; task_delete
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
t$ = 8
ms$ = 16
?sleep_thread@@YAXPEAU_thread_@@_K@Z PROC		; sleep_thread

; 465  : void sleep_thread (thread_t *t, uint64_t ms) {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 466  : 	t->quanta = ms;

	mov	rax, QWORD PTR t$[rsp]
	movzx	ecx, WORD PTR ms$[rsp]
	mov	WORD PTR [rax+238], cx

; 467  : 	t->state = THREAD_STATE_SLEEP;

	mov	rax, QWORD PTR t$[rsp]
	mov	BYTE PTR [rax+232], 4

; 468  : }

	ret	0
?sleep_thread@@YAXPEAU_thread_@@_K@Z ENDP		; sleep_thread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
thread$ = 8
?set_current_thread@@YAXPEAU_thread_@@@Z PROC		; set_current_thread

; 382  : void set_current_thread (thread_t *thread) {

	mov	QWORD PTR [rsp+8], rcx

; 383  : 	current_thread = thread;

	mov	rax, QWORD PTR thread$[rsp]
	mov	QWORD PTR current_thread, rax

; 384  : }

	ret	0
?set_current_thread@@YAXPEAU_thread_@@@Z ENDP		; set_current_thread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
id$ = 0
it$1 = 8
thr$2 = 16
name$ = 48
?thread_get_id_by_name@@YAGPEAD@Z PROC			; thread_get_id_by_name

; 426  : uint16_t thread_get_id_by_name (char* name) {

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 427  : 	uint16_t id = 0;

	xor	eax, eax
	mov	WORD PTR id$[rsp], ax

; 428  : 	for (thread_t *it = task_list_head; it != NULL; it = it->next) {

	mov	rax, QWORD PTR ?task_list_head@@3PEAU_thread_@@EA ; task_list_head
	mov	QWORD PTR it$1[rsp], rax
	jmp	SHORT $LN11@thread_get
$LN10@thread_get:
	mov	rax, QWORD PTR it$1[rsp]
	mov	rax, QWORD PTR [rax+760]
	mov	QWORD PTR it$1[rsp], rax
$LN11@thread_get:
	cmp	QWORD PTR it$1[rsp], 0
	je	SHORT $LN9@thread_get

; 429  : 		if (it->name == name) {

	mov	rax, QWORD PTR it$1[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	cmp	QWORD PTR [rax+224], rcx
	jne	SHORT $LN8@thread_get

; 430  : 			id = it->id;

	mov	rax, QWORD PTR it$1[rsp]
	movzx	eax, WORD PTR [rax+234]
	mov	WORD PTR id$[rsp], ax

; 431  : 			break;

	jmp	SHORT $LN9@thread_get
$LN8@thread_get:

; 432  : 		}
; 433  : 	}

	jmp	SHORT $LN10@thread_get
$LN9@thread_get:

; 434  : 
; 435  : 	if (id > 0)

	movzx	eax, WORD PTR id$[rsp]
	test	eax, eax
	jle	SHORT $LN7@thread_get

; 436  : 		return id;

	movzx	eax, WORD PTR id$[rsp]
	jmp	SHORT $LN12@thread_get

; 437  : 	else{

	jmp	SHORT $LN6@thread_get
$LN7@thread_get:

; 438  : 		if (blocked_thr_head != NULL)

	cmp	QWORD PTR ?blocked_thr_head@@3PEAU_thread_@@EA, 0 ; blocked_thr_head
	je	SHORT $LN5@thread_get

; 439  : 			for (thread_t *thr = blocked_thr_head; thr != NULL; thr = thr->next) {

	mov	rax, QWORD PTR ?blocked_thr_head@@3PEAU_thread_@@EA ; blocked_thr_head
	mov	QWORD PTR thr$2[rsp], rax
	jmp	SHORT $LN4@thread_get
$LN3@thread_get:
	mov	rax, QWORD PTR thr$2[rsp]
	mov	rax, QWORD PTR [rax+760]
	mov	QWORD PTR thr$2[rsp], rax
$LN4@thread_get:
	cmp	QWORD PTR thr$2[rsp], 0
	je	SHORT $LN2@thread_get

; 440  : 				if (thr->name == name) 

	mov	rax, QWORD PTR thr$2[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	cmp	QWORD PTR [rax+224], rcx
	jne	SHORT $LN1@thread_get

; 441  : 					return thr->id;

	mov	rax, QWORD PTR thr$2[rsp]
	movzx	eax, WORD PTR [rax+234]
	jmp	SHORT $LN12@thread_get
$LN1@thread_get:

; 442  : 			}

	jmp	SHORT $LN3@thread_get
$LN2@thread_get:
$LN5@thread_get:
$LN6@thread_get:

; 443  : 	}
; 444  : 
; 445  : 	return NULL;

	xor	eax, eax
$LN12@thread_get:

; 446  : }

	add	rsp, 40					; 00000028H
	ret	0
?thread_get_id_by_name@@YAGPEAD@Z ENDP			; thread_get_id_by_name
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
thr$1 = 0
id$ = 32
?thread_iterate_block_list@@YAPEAU_thread_@@H@Z PROC	; thread_iterate_block_list

; 405  : thread_t* thread_iterate_block_list (int id) {

$LN8:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 406  : 	if (blocked_thr_head != NULL)

	cmp	QWORD PTR ?blocked_thr_head@@3PEAU_thread_@@EA, 0 ; blocked_thr_head
	je	SHORT $LN5@thread_ite

; 407  : 		for (thread_t *thr = blocked_thr_head; thr != NULL; thr = thr->next) {

	mov	rax, QWORD PTR ?blocked_thr_head@@3PEAU_thread_@@EA ; blocked_thr_head
	mov	QWORD PTR thr$1[rsp], rax
	jmp	SHORT $LN4@thread_ite
$LN3@thread_ite:
	mov	rax, QWORD PTR thr$1[rsp]
	mov	rax, QWORD PTR [rax+760]
	mov	QWORD PTR thr$1[rsp], rax
$LN4@thread_ite:
	cmp	QWORD PTR thr$1[rsp], 0
	je	SHORT $LN2@thread_ite

; 408  : 			if (thr->id == id) {

	mov	rax, QWORD PTR thr$1[rsp]
	movzx	eax, WORD PTR [rax+234]
	cmp	eax, DWORD PTR id$[rsp]
	jne	SHORT $LN1@thread_ite

; 409  : 				return thr;

	mov	rax, QWORD PTR thr$1[rsp]
	jmp	SHORT $LN6@thread_ite
$LN1@thread_ite:

; 410  : 		}
; 411  : 	}

	jmp	SHORT $LN3@thread_ite
$LN2@thread_ite:
$LN5@thread_ite:

; 412  : 	return NULL;

	xor	eax, eax
$LN6@thread_ite:

; 413  : }

	add	rsp, 24
	ret	0
?thread_iterate_block_list@@YAPEAU_thread_@@H@Z ENDP	; thread_iterate_block_list
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
it$1 = 0
id$ = 32
?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z PROC	; thread_iterate_ready_list

; 416  : thread_t * thread_iterate_ready_list (uint16_t id) {

$LN7:
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 24

; 417  : 	for (thread_t *it = task_list_head; it != NULL; it = it->next) {

	mov	rax, QWORD PTR ?task_list_head@@3PEAU_thread_@@EA ; task_list_head
	mov	QWORD PTR it$1[rsp], rax
	jmp	SHORT $LN4@thread_ite
$LN3@thread_ite:
	mov	rax, QWORD PTR it$1[rsp]
	mov	rax, QWORD PTR [rax+760]
	mov	QWORD PTR it$1[rsp], rax
$LN4@thread_ite:
	cmp	QWORD PTR it$1[rsp], 0
	je	SHORT $LN2@thread_ite

; 418  : 		if (it->id == id) {

	mov	rax, QWORD PTR it$1[rsp]
	movzx	eax, WORD PTR [rax+234]
	movzx	ecx, WORD PTR id$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN1@thread_ite

; 419  : 			return it;

	mov	rax, QWORD PTR it$1[rsp]
	jmp	SHORT $LN5@thread_ite
$LN1@thread_ite:

; 420  : 		}
; 421  : 	}

	jmp	SHORT $LN3@thread_ite
$LN2@thread_ite:

; 422  : 	return NULL;

	xor	eax, eax
$LN5@thread_ite:

; 423  : }

	add	rsp, 24
	ret	0
?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z ENDP	; thread_iterate_ready_list
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
?force_sched@@YAXXZ PROC				; force_sched

; 476  : void force_sched () {

$LN3:
	sub	rsp, 40					; 00000028H

; 477  : #ifdef USE_APIC
; 478  : 	force_sched_apic();

	call	force_sched_apic

; 479  : #elif USE_PIC
; 480  : 	force_sched_pic();
; 481  : #endif
; 482  : }

	add	rsp, 40					; 00000028H
	ret	0
?force_sched@@YAXXZ ENDP				; force_sched
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
?is_multi_task_enable@@YA_NXZ PROC			; is_multi_task_enable

; 390  : 	return scheduler_enable;

	movzx	eax, BYTE PTR ?scheduler_enable@@3_NA	; scheduler_enable

; 391  : }

	ret	0
?is_multi_task_enable@@YA_NXZ ENDP			; is_multi_task_enable
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
value$ = 8
?set_multi_task_enable@@YAX_N@Z PROC			; set_multi_task_enable

; 375  : void set_multi_task_enable (bool value) {

	mov	BYTE PTR [rsp+8], cl

; 376  : 	if (scheduler_enable == value)

	movzx	eax, BYTE PTR ?scheduler_enable@@3_NA	; scheduler_enable
	movzx	ecx, BYTE PTR value$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN1@set_multi_

; 377  : 		return;

	jmp	SHORT $LN2@set_multi_
$LN1@set_multi_:

; 378  : 
; 379  : 	scheduler_enable = value;

	movzx	eax, BYTE PTR value$[rsp]
	mov	BYTE PTR ?scheduler_enable@@3_NA, al	; scheduler_enable
$LN2@set_multi_:

; 380  : }

	fatret	0
?set_multi_task_enable@@YAX_N@Z ENDP			; set_multi_task_enable
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
?get_current_thread@@YAPEAU_thread_@@XZ PROC		; get_current_thread

; 472  : 	return current_thread;

	mov	rax, QWORD PTR current_thread

; 473  : }

	ret	0
?get_current_thread@@YAPEAU_thread_@@XZ ENDP		; get_current_thread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
thr$1 = 32
t$ = 64
?unblock_thread@@YAXPEAU_thread_@@@Z PROC		; unblock_thread

; 449  : void unblock_thread (thread_t *t) {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 450  : 	x64_cli();

	call	x64_cli

; 451  : 	t->state = THREAD_STATE_READY;

	mov	rax, QWORD PTR t$[rsp]
	mov	BYTE PTR [rax+232], 1

; 452  : 	for (thread_t *thr = blocked_thr_head; thr != NULL; thr = thr->next) {

	mov	rax, QWORD PTR ?blocked_thr_head@@3PEAU_thread_@@EA ; blocked_thr_head
	mov	QWORD PTR thr$1[rsp], rax
	jmp	SHORT $LN4@unblock_th
$LN3@unblock_th:
	mov	rax, QWORD PTR thr$1[rsp]
	mov	rax, QWORD PTR [rax+760]
	mov	QWORD PTR thr$1[rsp], rax
$LN4@unblock_th:
	cmp	QWORD PTR thr$1[rsp], 0
	je	SHORT $LN2@unblock_th

; 453  : 		if (thr == t) 

	mov	rax, QWORD PTR t$[rsp]
	cmp	QWORD PTR thr$1[rsp], rax
	jne	SHORT $LN1@unblock_th

; 454  : 			thread_delete_block(thr);

	mov	rcx, QWORD PTR thr$1[rsp]
	call	?thread_delete_block@@YAXPEAU_thread_@@@Z ; thread_delete_block
$LN1@unblock_th:

; 455  : 	}

	jmp	SHORT $LN3@unblock_th
$LN2@unblock_th:

; 456  : 	thread_insert (t);

	mov	rcx, QWORD PTR t$[rsp]
	call	?thread_insert@@YAXPEAU_thread_@@@Z	; thread_insert

; 457  : }

	add	rsp, 56					; 00000038H
	ret	0
?unblock_thread@@YAXPEAU_thread_@@@Z ENDP		; unblock_thread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
thread$ = 48
?block_thread@@YAXPEAU_thread_@@@Z PROC			; block_thread

; 395  : void block_thread (thread_t *thread) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 396  : 	thread->state = THREAD_STATE_BLOCKED;

	mov	rax, QWORD PTR thread$[rsp]
	mov	BYTE PTR [rax+232], 3

; 397  : 	task_delete (thread);

	mov	rcx, QWORD PTR thread$[rsp]
	call	?task_delete@@YAXPEAU_thread_@@@Z	; task_delete

; 398  : 	//list_add (blocked_list,thread);
; 399  : 	thread_insert_block(thread);

	mov	rcx, QWORD PTR thread$[rsp]
	call	?thread_insert_block@@YAXPEAU_thread_@@@Z ; thread_insert_block

; 400  : }

	add	rsp, 40					; 00000028H
	ret	0
?block_thread@@YAXPEAU_thread_@@@Z ENDP			; block_thread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
t$ = 32
entry$ = 64
stack$ = 72
cr3$ = 80
name$ = 88
priority$ = 96
?create_kthread@@YAPEAU_thread_@@P6AXXZ_K1QEADE@Z PROC	; create_kthread

; 145  : {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 146  : 	thread_t *t = (thread_t*)malloc(sizeof(thread_t));//pmmngr_alloc();

	mov	ecx, 776				; 00000308H
	call	?malloc@@YAPEAX_K@Z			; malloc
	mov	QWORD PTR t$[rsp], rax

; 147  : 	memset(t, 0, sizeof(thread_t));

	mov	r8d, 776				; 00000308H
	xor	edx, edx
	mov	rcx, QWORD PTR t$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 148  : 	t->ss = 0x10;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax], 16

; 149  : 	t->rsp = (uint64_t*)stack;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 150  : 	t->rflags = 0x202;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+16], 514			; 00000202H

; 151  : 	t->cs = 0x08;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+24], 8

; 152  : 	t->rip = (uint64_t)entry;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR entry$[rsp]
	mov	QWORD PTR [rax+32], rcx

; 153  : 	t->rax = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+40], 0

; 154  : 	t->rbx = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+48], 0

; 155  : 	t->rcx = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+56], 0

; 156  : 	t->rdx = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+64], 0

; 157  : 	t->rsi = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+72], 0

; 158  : 	t->rdi = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+80], 0

; 159  : 	t->rbp = (uint64_t)t->rsp;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+88], rcx

; 160  : 	t->r8 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+96], 0

; 161  : 	t->r9 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+104], 0

; 162  : 	t->r10 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+112], 0

; 163  : 	t->r11 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+120], 0

; 164  : 	t->r12 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+128], 0

; 165  : 	t->r13 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+136], 0

; 166  : 	t->r14 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+144], 0

; 167  : 	t->r15 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+152], 0

; 168  : 	t->ds = 0x10;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+160], 16

; 169  : 	t->es = 0x10;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+168], 16

; 170  : 	t->fs = 0x10;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+176], 16

; 171  : 	t->gs = 0x10;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+184], 16

; 172  : 	t->kern_esp = stack;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	QWORD PTR [rax+200], rcx

; 173  : 	t->ttype = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+240], 0

; 174  : 	t->_is_user = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	BYTE PTR [rax+216], 0

; 175  : 	t->cr3 = cr3;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	mov	QWORD PTR [rax+192], rcx

; 176  : 	t->name = name;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	mov	QWORD PTR [rax+224], rcx

; 177  : 	t->id = task_id++;

	mov	rax, QWORD PTR t$[rsp]
	movzx	ecx, WORD PTR ?task_id@@3GA		; task_id
	mov	WORD PTR [rax+234], cx
	movzx	eax, WORD PTR ?task_id@@3GA		; task_id
	inc	ax
	mov	WORD PTR ?task_id@@3GA, ax		; task_id

; 178  : 	t->quanta = 0;

	xor	eax, eax
	mov	rcx, QWORD PTR t$[rsp]
	mov	WORD PTR [rcx+238], ax

; 179  : 	t->priviledge = THREAD_LEVEL_KERNEL;

	mov	rax, QWORD PTR t$[rsp]
	mov	BYTE PTR [rax+236], 1

; 180  : 	t->state = THREAD_STATE_READY;

	mov	rax, QWORD PTR t$[rsp]
	mov	BYTE PTR [rax+232], 1

; 181  : 	//t->priority = priority;
; 182  : 	t->fd_current = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	DWORD PTR [rax+752], 0

; 183  : 	t->fx_state = (uint32_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	rcx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rcx+208], rax

; 184  : 	//printf ("FX State addr-> %x\n", t->fx_state);
; 185  : 	thread_insert(t);

	mov	rcx, QWORD PTR t$[rsp]
	call	?thread_insert@@YAXPEAU_thread_@@@Z	; thread_insert

; 186  : 	return t;

	mov	rax, QWORD PTR t$[rsp]

; 187  : }

	add	rsp, 56					; 00000038H
	ret	0
?create_kthread@@YAPEAU_thread_@@P6AXXZ_K1QEADE@Z ENDP	; create_kthread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
t$ = 32
entry$ = 64
stack$ = 72
cr3$ = 80
name$ = 88
priority$ = 96
?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z PROC ; create_user_thread

; 198  : {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 199  : 	thread_t *t = (thread_t*)malloc(sizeof(thread_t));//pmmngr_alloc();

	mov	ecx, 776				; 00000308H
	call	?malloc@@YAPEAX_K@Z			; malloc
	mov	QWORD PTR t$[rsp], rax

; 200  : 	memset (t, 0, sizeof(thread_t));

	mov	r8d, 776				; 00000308H
	xor	edx, edx
	mov	rcx, QWORD PTR t$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 201  : 	t->ss = SEGVAL(GDT_ENTRY_USER_DATA,3); 

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax], 35			; 00000023H

; 202  : 	t->rsp = (uint64_t*)stack;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 203  : 	t->rflags = 0x286;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+16], 646			; 00000286H

; 204  : 	t->cs = SEGVAL (GDT_ENTRY_USER_CODE,3);

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+24], 43			; 0000002bH

; 205  : 	t->rip = (uint64_t)entry;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR entry$[rsp]
	mov	QWORD PTR [rax+32], rcx

; 206  : 	t->rax = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+40], 0

; 207  : 	t->rbx = 10;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+48], 10

; 208  : 	t->rcx = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+56], 0

; 209  : 	t->rdx = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+64], 0

; 210  : 	t->rsi = 10;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+72], 10

; 211  : 	t->rdi = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+80], 0

; 212  : 	t->rbp = (uint64_t)t->rsp;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+88], rcx

; 213  : 	t->r8 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+96], 0

; 214  : 	t->r9 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+104], 0

; 215  : 	t->r10 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+112], 0

; 216  : 	t->r11 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+120], 0

; 217  : 	t->r12 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+128], 0

; 218  : 	t->r13 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+136], 0

; 219  : 	t->r14 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+144], 0

; 220  : 	t->r15 = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+152], 0

; 221  : 
; 222  : 	/** Kernel stack is important for syscall or interruption in the system **/
; 223  : 	t->kern_esp = (uint64_t)allocate_kstack((uint64_t*)cr3);

	mov	rcx, QWORD PTR cr3$[rsp]
	call	?allocate_kstack@@YA_KPEA_K@Z		; allocate_kstack
	mov	rcx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rcx+200], rax

; 224  : 
; 225  : 	t->ds = 0x23;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+160], 35			; 00000023H

; 226  : 	t->es = 0x23;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+168], 35			; 00000023H

; 227  : 	t->fs = 0x23;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+176], 35			; 00000023H

; 228  : 	t->gs = 0x23;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+184], 35			; 00000023H

; 229  : 	t->cr3 = v2p(cr3);

	mov	rcx, QWORD PTR cr3$[rsp]
	call	?v2p@@YA_K_K@Z				; v2p
	mov	rcx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rcx+192], rax

; 230  : 	t->name = name;

	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	mov	QWORD PTR [rax+224], rcx

; 231  : 	t->id = task_id++;

	mov	rax, QWORD PTR t$[rsp]
	movzx	ecx, WORD PTR ?task_id@@3GA		; task_id
	mov	WORD PTR [rax+234], cx
	movzx	eax, WORD PTR ?task_id@@3GA		; task_id
	inc	ax
	mov	WORD PTR ?task_id@@3GA, ax		; task_id

; 232  : 	t->quanta = 0;

	xor	eax, eax
	mov	rcx, QWORD PTR t$[rsp]
	mov	WORD PTR [rcx+238], ax

; 233  : 	t->ttype = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+240], 0

; 234  : 	t->msg_box = (uint64_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	rcx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rcx+248], rax

; 235  : 	/** Map the thread's msg box to a virtual address, from where the process will receive system messages **/
; 236  : 	map_page_ex((uint64_t*)t->cr3,(uint64_t)t->msg_box,(uint64_t)0xFFFFFFFFB0000000, PAGING_USER);

	mov	r9b, 4
	mov	r8, -1342177280				; ffffffffb0000000H
	mov	rax, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR [rax+248]
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR [rax+192]
	call	?map_page_ex@@YA_NPEA_K_K1E@Z		; map_page_ex

; 237  : 
; 238  : 	t->_is_user = 1;

	mov	rax, QWORD PTR t$[rsp]
	mov	BYTE PTR [rax+216], 1

; 239  : 	t->priviledge = THREAD_LEVEL_USER;

	mov	rax, QWORD PTR t$[rsp]
	mov	BYTE PTR [rax+236], 2

; 240  : 	t->state = THREAD_STATE_READY;

	mov	rax, QWORD PTR t$[rsp]
	mov	BYTE PTR [rax+232], 1

; 241  : 	t->priority = priority;

	mov	rax, QWORD PTR t$[rsp]
	movzx	ecx, BYTE PTR priority$[rsp]
	mov	BYTE PTR [rax+264], cl

; 242  : 	t->fd_current = 0;

	mov	rax, QWORD PTR t$[rsp]
	mov	DWORD PTR [rax+752], 0

; 243  : 	thread_insert (t);

	mov	rcx, QWORD PTR t$[rsp]
	call	?thread_insert@@YAXPEAU_thread_@@@Z	; thread_insert

; 244  : 	return t;

	mov	rax, QWORD PTR t$[rsp]

; 245  : }

	add	rsp, 56					; 00000038H
	ret	0
?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z ENDP ; create_user_thread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
?scheduler_start@@YAXXZ PROC				; scheduler_start

; 361  : void scheduler_start () {

$LN3:
	sub	rsp, 40					; 00000028H

; 362  : 	x64_cli();

	call	x64_cli

; 363  : #ifdef USE_APIC
; 364  : 	setvect(0x40, scheduler_isr);

	lea	rdx, OFFSET FLAT:?scheduler_isr@@YAX_KPEAX@Z ; scheduler_isr
	mov	ecx, 64					; 00000040H
	call	?setvect@@YAX_KP6AX0PEAX@Z@Z		; setvect

; 365  : #endif
; 366  : #ifdef USE_PIC
; 367  : 	interrupt_set(0,scheduler_isr,0);
; 368  : #endif
; 369  : 	x64_sti();

	call	x64_sti

; 370  : 	execute_idle(current_thread,get_kernel_tss());

	call	get_kernel_tss
	mov	rdx, rax
	mov	rcx, QWORD PTR current_thread
	call	execute_idle

; 371  : }

	add	rsp, 40					; 00000028H
	ret	0
?scheduler_start@@YAXXZ ENDP				; scheduler_start
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\thread.cpp
_TEXT	SEGMENT
tv67 = 48
idle_$ = 56
?initialize_scheduler@@YAXXZ PROC			; initialize_scheduler

; 257  : void initialize_scheduler () {

$LN3:
	sub	rsp, 72					; 00000048H

; 258  : 	//blocked_list = initialize_list();
; 259  : 	scheduler_enable = true;

	mov	BYTE PTR ?scheduler_enable@@3_NA, 1	; scheduler_enable

; 260  : 	scheduler_initialized = true;

	mov	BYTE PTR ?scheduler_initialized@@3_NA, 1 ; scheduler_initialized

; 261  : 	task_id = 0;

	xor	eax, eax
	mov	WORD PTR ?task_id@@3GA, ax		; task_id

; 262  : 	/** Here create the first thread, the idle thread which never gets
; 263  : 	    blocked nor get destroyed untill the system turns off **/
; 264  : 	thread_t *idle_ = create_kthread (idle_thread,(uint64_t)p2v((uint64_t)pmmngr_alloc()),x64_read_cr3(),"Idle",1);

	call	x64_read_cr3
	mov	QWORD PTR tv67[rsp], rax
	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	rcx, rax
	call	?p2v@@YA_K_K@Z				; p2v
	mov	BYTE PTR [rsp+32], 1
	lea	r9, OFFSET FLAT:$SG3480
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:?idle_thread@@YAXXZ	; idle_thread
	call	?create_kthread@@YAPEAU_thread_@@P6AXXZ_K1QEADE@Z ; create_kthread
	mov	QWORD PTR idle_$[rsp], rax

; 265  : 	current_thread = idle_;

	mov	rax, QWORD PTR idle_$[rsp]
	mov	QWORD PTR current_thread, rax

; 266  : }

	add	rsp, 72					; 00000048H
	ret	0
?initialize_scheduler@@YAXXZ ENDP			; initialize_scheduler
_TEXT	ENDS
END
