; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG3624	DB	'stdin', 00H
	ORG $+2
$SG3625	DB	'/dev/stdin', 00H
	ORG $+1
$SG3628	DB	'stdout', 00H
	ORG $+5
$SG3629	DB	'/dev/stdout', 00H
$SG3632	DB	'stderr', 00H
	ORG $+5
$SG3633	DB	'/dev/stderr', 00H
CONST	ENDS
PUBLIC	?allocate_stream@@YAPEAU_stream_@@XZ		; allocate_stream
PUBLIC	?stream_init@@YAXXZ				; stream_init
PUBLIC	?deallocate_stream@@YAXPEAU_stream_@@@Z		; deallocate_stream
PUBLIC	?stdout@@YAXPEAU_stream_@@PEAD@Z		; stdout
PUBLIC	?stdin@@YAXPEAU_stream_@@PEAD@Z			; stdin
PUBLIC	?stderr@@YAXPEAU_stream_@@PEAD@Z		; stderr
PUBLIC	?stdout_read@@YAXPEAU_vfs_node_@@PEAEI@Z	; stdout_read
PUBLIC	?stdout_write@@YAXPEAU_vfs_node_@@PEAEI@Z	; stdout_write
PUBLIC	?stderr_read@@YAXPEAU_vfs_node_@@PEAEI@Z	; stderr_read
PUBLIC	?stderr_write@@YAXPEAU_vfs_node_@@PEAEI@Z	; stderr_write
EXTRN	?strcpy@@YAPEADPEADPEBD@Z:PROC			; strcpy
EXTRN	?strlen@@YA_KPEBD@Z:PROC			; strlen
EXTRN	?memset@@YAXPEAXEI@Z:PROC			; memset
EXTRN	memcpy:PROC
EXTRN	?vfs_mount@@YAXPEADPEAU_vfs_node_@@@Z:PROC	; vfs_mount
EXTRN	?pmmngr_alloc@@YAPEAXXZ:PROC			; pmmngr_alloc
EXTRN	?malloc@@YAPEAX_K@Z:PROC			; malloc
EXTRN	?free@@YAXPEAX@Z:PROC				; free
EXTRN	?get_current_thread@@YAPEAU_thread_@@XZ:PROC	; get_current_thread
EXTRN	?get_ttype@@YAPEAU_tele_type_@@H@Z:PROC		; get_ttype
pdata	SEGMENT
$pdata$?allocate_stream@@YAPEAU_stream_@@XZ DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?allocate_stream@@YAPEAU_stream_@@XZ
$pdata$?stream_init@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+578
	DD	imagerel $unwind$?stream_init@@YAXXZ
$pdata$?deallocate_stream@@YAXPEAU_stream_@@@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?deallocate_stream@@YAXPEAU_stream_@@@Z
$pdata$?stdout@@YAXPEAU_stream_@@PEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?stdout@@YAXPEAU_stream_@@PEAD@Z
$pdata$?stdin@@YAXPEAU_stream_@@PEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$?stdin@@YAXPEAU_stream_@@PEAD@Z
$pdata$?stderr@@YAXPEAU_stream_@@PEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$?stderr@@YAXPEAU_stream_@@PEAD@Z
$pdata$?stdout_read@@YAXPEAU_vfs_node_@@PEAEI@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$?stdout_read@@YAXPEAU_vfs_node_@@PEAEI@Z
$pdata$?stdout_write@@YAXPEAU_vfs_node_@@PEAEI@Z DD imagerel $LN5
	DD	imagerel $LN5+138
	DD	imagerel $unwind$?stdout_write@@YAXPEAU_vfs_node_@@PEAEI@Z
$pdata$?stderr_read@@YAXPEAU_vfs_node_@@PEAEI@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$?stderr_read@@YAXPEAU_vfs_node_@@PEAEI@Z
$pdata$?stderr_write@@YAXPEAU_vfs_node_@@PEAEI@Z DD imagerel $LN5
	DD	imagerel $LN5+138
	DD	imagerel $unwind$?stderr_write@@YAXPEAU_vfs_node_@@PEAEI@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?allocate_stream@@YAPEAU_stream_@@XZ DD 010401H
	DD	06204H
$unwind$?stream_init@@YAXXZ DD 010401H
	DD	08204H
$unwind$?deallocate_stream@@YAXPEAU_stream_@@@Z DD 010901H
	DD	04209H
$unwind$?stdout@@YAXPEAU_stream_@@PEAD@Z DD 010e01H
	DD	0420eH
$unwind$?stdin@@YAXPEAU_stream_@@PEAD@Z DD 010e01H
	DD	0420eH
$unwind$?stderr@@YAXPEAU_stream_@@PEAD@Z DD 010e01H
	DD	0420eH
$unwind$?stdout_read@@YAXPEAU_vfs_node_@@PEAEI@Z DD 011301H
	DD	06213H
$unwind$?stdout_write@@YAXPEAU_vfs_node_@@PEAEI@Z DD 011301H
	DD	06213H
$unwind$?stderr_read@@YAXPEAU_vfs_node_@@PEAEI@Z DD 011301H
	DD	06213H
$unwind$?stderr_write@@YAXPEAU_vfs_node_@@PEAEI@Z DD 011301H
	DD	06213H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\stream.cpp
_TEXT	SEGMENT
p$ = 32
t$1 = 40
file$ = 64
buffer$ = 72
length$ = 80
?stderr_write@@YAXPEAU_vfs_node_@@PEAEI@Z PROC		; stderr_write

; 68   : void stderr_write (vfs_node_t *file, uint8_t* buffer, uint32_t length) {

$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 69   : 	thread_t *p = get_current_thread();

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	QWORD PTR p$[rsp], rax

; 70   : 	memcpy (p->stream->err, buffer, 32);

	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax+760]
	add	rax, 64					; 00000040H
	mov	r8d, 32					; 00000020H
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, rax
	call	memcpy

; 71   : 	if (p->ttype) {

	mov	rax, QWORD PTR p$[rsp]
	cmp	QWORD PTR [rax+240], 0
	je	SHORT $LN2@stderr_wri

; 72   : 		ttype_t *t = get_ttype(p->ttype);

	mov	rax, QWORD PTR p$[rsp]
	mov	ecx, DWORD PTR [rax+240]
	call	?get_ttype@@YAPEAU_tele_type_@@H@Z	; get_ttype
	mov	QWORD PTR t$1[rsp], rax

; 73   : 		if (t) {

	cmp	QWORD PTR t$1[rsp], 0
	je	SHORT $LN1@stderr_wri

; 74   : 			memcpy (t->in_buffer,buffer, 32);

	mov	r8d, 32					; 00000020H
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	rax, QWORD PTR t$1[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	memcpy
$LN1@stderr_wri:
$LN2@stderr_wri:

; 75   : 		}
; 76   : 	}
; 77   : }

	add	rsp, 56					; 00000038H
	ret	0
?stderr_write@@YAXPEAU_vfs_node_@@PEAEI@Z ENDP		; stderr_write
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\stream.cpp
_TEXT	SEGMENT
p$ = 32
file$ = 64
buffer$ = 72
length$ = 80
?stderr_read@@YAXPEAU_vfs_node_@@PEAEI@Z PROC		; stderr_read

; 63   : void stderr_read (vfs_node_t *file, uint8_t* buffer,uint32_t length) {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 64   : 	thread_t *p = get_current_thread();

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	QWORD PTR p$[rsp], rax

; 65   : 	memcpy (buffer, p->stream->err, 32);

	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax+760]
	add	rax, 64					; 00000040H
	mov	r8d, 32					; 00000020H
	mov	rdx, rax
	mov	rcx, QWORD PTR buffer$[rsp]
	call	memcpy

; 66   : }

	add	rsp, 56					; 00000038H
	ret	0
?stderr_read@@YAXPEAU_vfs_node_@@PEAEI@Z ENDP		; stderr_read
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\stream.cpp
_TEXT	SEGMENT
p$ = 32
t$1 = 40
file$ = 64
buffer$ = 72
length$ = 80
?stdout_write@@YAXPEAU_vfs_node_@@PEAEI@Z PROC		; stdout_write

; 53   : void stdout_write (vfs_node_t *file, uint8_t* buffer, uint32_t length) {

$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 54   : 	thread_t *p = get_current_thread();

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	QWORD PTR p$[rsp], rax

; 55   : 	memcpy(p->stream->out,buffer, 32);

	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax+760]
	add	rax, 32					; 00000020H
	mov	r8d, 32					; 00000020H
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, rax
	call	memcpy

; 56   : 	if (p->ttype) {

	mov	rax, QWORD PTR p$[rsp]
	cmp	QWORD PTR [rax+240], 0
	je	SHORT $LN2@stdout_wri

; 57   : 		ttype_t *t = get_ttype(p->ttype);

	mov	rax, QWORD PTR p$[rsp]
	mov	ecx, DWORD PTR [rax+240]
	call	?get_ttype@@YAPEAU_tele_type_@@H@Z	; get_ttype
	mov	QWORD PTR t$1[rsp], rax

; 58   : 		if (t)

	cmp	QWORD PTR t$1[rsp], 0
	je	SHORT $LN1@stdout_wri

; 59   : 			memcpy (t->in_buffer,buffer, 32);

	mov	r8d, 32					; 00000020H
	mov	rdx, QWORD PTR buffer$[rsp]
	mov	rax, QWORD PTR t$1[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	memcpy
$LN1@stdout_wri:
$LN2@stdout_wri:

; 60   : 	}
; 61   : }

	add	rsp, 56					; 00000038H
	ret	0
?stdout_write@@YAXPEAU_vfs_node_@@PEAEI@Z ENDP		; stdout_write
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\stream.cpp
_TEXT	SEGMENT
p$ = 32
file$ = 64
buffer$ = 72
length$ = 80
?stdout_read@@YAXPEAU_vfs_node_@@PEAEI@Z PROC		; stdout_read

; 48   : void stdout_read (vfs_node_t *file, uint8_t* buffer,uint32_t length) {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 49   : 	thread_t *p = get_current_thread();

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	QWORD PTR p$[rsp], rax

; 50   : 	memcpy (buffer, p->stream->out,32);

	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax+760]
	add	rax, 32					; 00000020H
	mov	r8d, 32					; 00000020H
	mov	rdx, rax
	mov	rcx, QWORD PTR buffer$[rsp]
	call	memcpy

; 51   : }

	add	rsp, 56					; 00000038H
	ret	0
?stdout_read@@YAXPEAU_vfs_node_@@PEAEI@Z ENDP		; stdout_read
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\stream.cpp
_TEXT	SEGMENT
st$ = 48
err$ = 56
?stderr@@YAXPEAU_stream_@@PEAD@Z PROC			; stderr

; 43   : void stderr (stream_t* st, char* err) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 44   : 	memcpy (st->err, err,sizeof(err));

	mov	rax, QWORD PTR st$[rsp]
	add	rax, 64					; 00000040H
	mov	r8d, 8
	mov	rdx, QWORD PTR err$[rsp]
	mov	rcx, rax
	call	memcpy

; 45   : }

	add	rsp, 40					; 00000028H
	ret	0
?stderr@@YAXPEAU_stream_@@PEAD@Z ENDP			; stderr
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\stream.cpp
_TEXT	SEGMENT
st$ = 48
key$ = 56
?stdin@@YAXPEAU_stream_@@PEAD@Z PROC			; stdin

; 38   : void stdin (stream_t* st, char* key) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 39   : 	memcpy (st->in, key, strlen(key));

	mov	rcx, QWORD PTR key$[rsp]
	call	?strlen@@YA_KPEBD@Z			; strlen
	mov	rcx, QWORD PTR st$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR key$[rsp]
	call	memcpy

; 40   : }

	add	rsp, 40					; 00000028H
	ret	0
?stdin@@YAXPEAU_stream_@@PEAD@Z ENDP			; stdin
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\stream.cpp
_TEXT	SEGMENT
st$ = 48
buff$ = 56
?stdout@@YAXPEAU_stream_@@PEAD@Z PROC			; stdout

; 33   : void stdout (stream_t *st, char* buff) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 34   : 	memcpy (st->out, buff, strlen(buff));

	mov	rcx, QWORD PTR buff$[rsp]
	call	?strlen@@YA_KPEBD@Z			; strlen
	mov	rcx, QWORD PTR st$[rsp]
	add	rcx, 32					; 00000020H
	mov	r8d, eax
	mov	rdx, QWORD PTR buff$[rsp]
	call	memcpy

; 35   : }

	add	rsp, 40					; 00000028H
	ret	0
?stdout@@YAXPEAU_stream_@@PEAD@Z ENDP			; stdout
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\stream.cpp
_TEXT	SEGMENT
st$ = 48
?deallocate_stream@@YAXPEAU_stream_@@@Z PROC		; deallocate_stream

; 27   : void deallocate_stream (stream_t *st) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 28   : 	free(st);

	mov	rcx, QWORD PTR st$[rsp]
	call	?free@@YAXPEAX@Z			; free

; 29   : }

	add	rsp, 40					; 00000028H
	ret	0
?deallocate_stream@@YAXPEAU_stream_@@@Z ENDP		; deallocate_stream
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\stream.cpp
_TEXT	SEGMENT
stdin$ = 32
node$ = 40
stderr$ = 48
?stream_init@@YAXXZ PROC				; stream_init

; 80   : void stream_init () {

$LN3:
	sub	rsp, 72					; 00000048H

; 81   : 
; 82   : 	///! Standard Input 
; 83   : 	///! node
; 84   : 	vfs_node_t *stdin = (vfs_node_t*)malloc(sizeof(vfs_node_t));

	mov	ecx, 104				; 00000068H
	call	?malloc@@YAPEAX_K@Z			; malloc
	mov	QWORD PTR stdin$[rsp], rax

; 85   : 	strcpy(stdin->filename, "stdin");

	mov	rax, QWORD PTR stdin$[rsp]
	lea	rdx, OFFSET FLAT:$SG3624
	mov	rcx, rax
	call	?strcpy@@YAPEADPEADPEBD@Z		; strcpy

; 86   : 	stdin->size = 0;

	mov	rax, QWORD PTR stdin$[rsp]
	mov	DWORD PTR [rax+32], 0

; 87   : 	stdin->eof = 0;

	mov	rax, QWORD PTR stdin$[rsp]
	mov	DWORD PTR [rax+36], 0

; 88   : 	stdin->pos = 0;

	mov	rax, QWORD PTR stdin$[rsp]
	mov	DWORD PTR [rax+40], 0

; 89   : 	stdin->current = 0;

	mov	rax, QWORD PTR stdin$[rsp]
	mov	DWORD PTR [rax+44], 0

; 90   : 	stdin->flags = FS_FLAG_GENERAL;

	mov	rax, QWORD PTR stdin$[rsp]
	mov	DWORD PTR [rax+48], 2

; 91   : 	stdin->status = 0;

	mov	rax, QWORD PTR stdin$[rsp]
	mov	DWORD PTR [rax+52], 0

; 92   : 	stdin->open = 0;

	mov	rax, QWORD PTR stdin$[rsp]
	mov	QWORD PTR [rax+64], 0

; 93   : 	stdin->read = 0;

	mov	rax, QWORD PTR stdin$[rsp]
	mov	QWORD PTR [rax+72], 0

; 94   : 	stdin->write = 0;

	mov	rax, QWORD PTR stdin$[rsp]
	mov	QWORD PTR [rax+80], 0

; 95   : 	stdin->read_blk = 0;

	mov	rax, QWORD PTR stdin$[rsp]
	mov	QWORD PTR [rax+88], 0

; 96   : 	stdin->ioquery = 0;

	mov	rax, QWORD PTR stdin$[rsp]
	mov	QWORD PTR [rax+96], 0

; 97   : 	vfs_mount ("/dev/stdin", stdin);

	mov	rdx, QWORD PTR stdin$[rsp]
	lea	rcx, OFFSET FLAT:$SG3625
	call	?vfs_mount@@YAXPEADPEAU_vfs_node_@@@Z	; vfs_mount

; 98   : 
; 99   : 	///! Standard output 
; 100  : 	///! node
; 101  : 	vfs_node_t *node = (vfs_node_t*)pmmngr_alloc();//malloc(sizeof(vfs_node_t));

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR node$[rsp], rax

; 102  : 	strcpy(node->filename, "stdout");

	mov	rax, QWORD PTR node$[rsp]
	lea	rdx, OFFSET FLAT:$SG3628
	mov	rcx, rax
	call	?strcpy@@YAPEADPEADPEBD@Z		; strcpy

; 103  : 	node->size = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	DWORD PTR [rax+32], 0

; 104  : 	node->eof = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	DWORD PTR [rax+36], 0

; 105  : 	node->pos = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	DWORD PTR [rax+40], 0

; 106  : 	node->current = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	DWORD PTR [rax+44], 0

; 107  : 	node->flags = FS_FLAG_GENERAL;

	mov	rax, QWORD PTR node$[rsp]
	mov	DWORD PTR [rax+48], 2

; 108  : 	node->status = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	DWORD PTR [rax+52], 0

; 109  : 	node->open = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	QWORD PTR [rax+64], 0

; 110  : 	node->read = stdout_read;

	mov	rax, QWORD PTR node$[rsp]
	lea	rcx, OFFSET FLAT:?stdout_read@@YAXPEAU_vfs_node_@@PEAEI@Z ; stdout_read
	mov	QWORD PTR [rax+72], rcx

; 111  : 	node->write = stdout_write;

	mov	rax, QWORD PTR node$[rsp]
	lea	rcx, OFFSET FLAT:?stdout_write@@YAXPEAU_vfs_node_@@PEAEI@Z ; stdout_write
	mov	QWORD PTR [rax+80], rcx

; 112  : 	node->read_blk = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	QWORD PTR [rax+88], 0

; 113  : 	node->ioquery = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	QWORD PTR [rax+96], 0

; 114  : 	vfs_mount ("/dev/stdout", node);

	mov	rdx, QWORD PTR node$[rsp]
	lea	rcx, OFFSET FLAT:$SG3629
	call	?vfs_mount@@YAXPEADPEAU_vfs_node_@@@Z	; vfs_mount

; 115  : 
; 116  : 	///! Standard Error 
; 117  : 	///! node
; 118  : 	vfs_node_t *stderr = (vfs_node_t*)pmmngr_alloc(); //malloc(sizeof(vfs_node_t));

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR stderr$[rsp], rax

; 119  : 	strcpy(stderr->filename, "stderr");

	mov	rax, QWORD PTR stderr$[rsp]
	lea	rdx, OFFSET FLAT:$SG3632
	mov	rcx, rax
	call	?strcpy@@YAPEADPEADPEBD@Z		; strcpy

; 120  : 	stderr->size = 0;

	mov	rax, QWORD PTR stderr$[rsp]
	mov	DWORD PTR [rax+32], 0

; 121  : 	stderr->eof = 0;

	mov	rax, QWORD PTR stderr$[rsp]
	mov	DWORD PTR [rax+36], 0

; 122  : 	stderr->pos = 0;

	mov	rax, QWORD PTR stderr$[rsp]
	mov	DWORD PTR [rax+40], 0

; 123  : 	stderr->current = 0;

	mov	rax, QWORD PTR stderr$[rsp]
	mov	DWORD PTR [rax+44], 0

; 124  : 	stderr->flags = FS_FLAG_GENERAL;

	mov	rax, QWORD PTR stderr$[rsp]
	mov	DWORD PTR [rax+48], 2

; 125  : 	stderr->status = 0;

	mov	rax, QWORD PTR stderr$[rsp]
	mov	DWORD PTR [rax+52], 0

; 126  : 	stderr->open = 0;

	mov	rax, QWORD PTR stderr$[rsp]
	mov	QWORD PTR [rax+64], 0

; 127  : 	stderr->read = stderr_read;

	mov	rax, QWORD PTR stderr$[rsp]
	lea	rcx, OFFSET FLAT:?stderr_read@@YAXPEAU_vfs_node_@@PEAEI@Z ; stderr_read
	mov	QWORD PTR [rax+72], rcx

; 128  : 	stderr->write = stderr_write;

	mov	rax, QWORD PTR stderr$[rsp]
	lea	rcx, OFFSET FLAT:?stderr_write@@YAXPEAU_vfs_node_@@PEAEI@Z ; stderr_write
	mov	QWORD PTR [rax+80], rcx

; 129  : 	stderr->read_blk = 0;

	mov	rax, QWORD PTR stderr$[rsp]
	mov	QWORD PTR [rax+88], 0

; 130  : 	stderr->ioquery = 0;

	mov	rax, QWORD PTR stderr$[rsp]
	mov	QWORD PTR [rax+96], 0

; 131  : 	vfs_mount ("/dev/stderr", stderr);

	mov	rdx, QWORD PTR stderr$[rsp]
	lea	rcx, OFFSET FLAT:$SG3633
	call	?vfs_mount@@YAXPEADPEAU_vfs_node_@@@Z	; vfs_mount

; 132  : }

	add	rsp, 72					; 00000048H
	ret	0
?stream_init@@YAXXZ ENDP				; stream_init
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\stream.cpp
_TEXT	SEGMENT
st$ = 32
?allocate_stream@@YAPEAU_stream_@@XZ PROC		; allocate_stream

; 20   : stream_t *allocate_stream () {

$LN3:
	sub	rsp, 56					; 00000038H

; 21   : 	stream_t *st = (stream_t*)pmmngr_alloc();   //malloc (sizeof(stream_t));

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR st$[rsp], rax

; 22   : 	memset (st, 0, sizeof(stream_t));

	mov	r8d, 96					; 00000060H
	xor	edx, edx
	mov	rcx, QWORD PTR st$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 23   : 	return st;

	mov	rax, QWORD PTR st$[rsp]

; 24   : }

	add	rsp, 56					; 00000038H
	ret	0
?allocate_stream@@YAPEAU_stream_@@XZ ENDP		; allocate_stream
_TEXT	ENDS
END
