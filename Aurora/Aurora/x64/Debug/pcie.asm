; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG4055	DB	'MSI found for this device, -> %x', 0aH, 00H
	ORG $+6
$SG4066	DB	'MSI-X found for this device', 0aH, 00H
CONST	ENDS
PUBLIC	?pci_express_get_device@@YA_KGHHH@Z		; pci_express_get_device
PUBLIC	pci_express_scan_class
PUBLIC	pci_express_read
PUBLIC	pci_express_read2
PUBLIC	pci_express_write
PUBLIC	pci_express_write2
PUBLIC	pcie_alloc_msi
PUBLIC	??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; mem_after<acpiMcfgAlloc * __ptr64,acpiMcfg>
PUBLIC	??$raw_offset@PECE_K@@YAPECE_KH@Z		; raw_offset<unsigned char volatile * __ptr64,unsigned __int64>
PUBLIC	??$raw_offset@PECG_K@@YAPECG_KH@Z		; raw_offset<unsigned short volatile * __ptr64,unsigned __int64>
PUBLIC	??$raw_offset@PECI_K@@YAPECI_KH@Z		; raw_offset<unsigned int volatile * __ptr64,unsigned __int64>
EXTRN	?cpu_msi_address@@YA_KPEA_K_KIEE@Z:PROC		; cpu_msi_address
EXTRN	?acpi_pcie_supported@@YA_NXZ:PROC		; acpi_pcie_supported
EXTRN	?acpi_get_mcfg@@YAPEAUacpiMcfg@@XZ:PROC		; acpi_get_mcfg
EXTRN	printf:PROC
EXTRN	__ImageBase:BYTE
pdata	SEGMENT
$pdata$?pci_express_get_device@@YA_KGHHH@Z DD imagerel $LN7
	DD	imagerel $LN7+216
	DD	imagerel $unwind$?pci_express_get_device@@YA_KGHHH@Z
$pdata$pci_express_scan_class DD imagerel $LN19
	DD	imagerel $LN19+461
	DD	imagerel $unwind$pci_express_scan_class
$pdata$pci_express_read DD imagerel $LN36
	DD	imagerel $LN36+758
	DD	imagerel $unwind$pci_express_read
$pdata$pci_express_read2 DD imagerel $LN11
	DD	imagerel $LN11+327
	DD	imagerel $unwind$pci_express_read2
$pdata$pci_express_write DD imagerel $LN37
	DD	imagerel $LN37+738
	DD	imagerel $unwind$pci_express_write
$pdata$pci_express_write2 DD imagerel $LN10
	DD	imagerel $LN10+274
	DD	imagerel $unwind$pci_express_write2
$pdata$pcie_alloc_msi DD imagerel $LN16
	DD	imagerel $LN16+1050
	DD	imagerel $unwind$pcie_alloc_msi
pdata	ENDS
xdata	SEGMENT
$unwind$?pci_express_get_device@@YA_KGHHH@Z DD 011701H
	DD	08217H
$unwind$pci_express_scan_class DD 011601H
	DD	0c216H
$unwind$pci_express_read DD 011701H
	DD	0a217H
$unwind$pci_express_read2 DD 011701H
	DD	08217H
$unwind$pci_express_write DD 011701H
	DD	08217H
$unwind$pci_express_write2 DD 011701H
	DD	08217H
$unwind$pcie_alloc_msi DD 021b01H
	DD	011011bH
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PECI_K@@YAPECI_KH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PECI_K@@YAPECI_KH@Z PROC			; raw_offset<unsigned int volatile * __ptr64,unsigned __int64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PECI_K@@YAPECI_KH@Z ENDP			; raw_offset<unsigned int volatile * __ptr64,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PECG_K@@YAPECG_KH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PECG_K@@YAPECG_KH@Z PROC			; raw_offset<unsigned short volatile * __ptr64,unsigned __int64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PECG_K@@YAPECG_KH@Z ENDP			; raw_offset<unsigned short volatile * __ptr64,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PECE_K@@YAPECE_KH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PECE_K@@YAPECE_KH@Z PROC			; raw_offset<unsigned char volatile * __ptr64,unsigned __int64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PECE_K@@YAPECE_KH@Z ENDP			; raw_offset<unsigned char volatile * __ptr64,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z
_TEXT	SEGMENT
p1$ = 8
??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z PROC ; mem_after<acpiMcfgAlloc * __ptr64,acpiMcfg>, COMDAT

; 187  : 	{

	mov	QWORD PTR [rsp+8], rcx

; 188  : 		return (T) (&p1[1]);

	mov	eax, 44					; 0000002cH
	imul	rax, 1
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 189  : 	};

	ret	0
??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ENDP ; mem_after<acpiMcfgAlloc * __ptr64,acpiMcfg>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\pcie.cpp
_TEXT	SEGMENT
capptr$1 = 64
msctl$2 = 68
tv140 = 72
tv136 = 73
cap_reg$3 = 76
bit64_cap$4 = 80
maskcap$5 = 81
msi_reg$6 = 84
msi_addr$7 = 88
status$ = 96
msi_data$8 = 104
cap_reg2$9 = 112
device$ = 144
vector$ = 152
bus$ = 160
dev$ = 168
func$ = 176
pcie_alloc_msi PROC

; 347  : void pcie_alloc_msi (uint64_t device, size_t vector,  int bus, int dev, int func) {

$LN16:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H

; 348  : 	if (acpi_pcie_supported() == false)

	call	?acpi_pcie_supported@@YA_NXZ		; acpi_pcie_supported
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN9@pcie_alloc

; 349  : 		return;

	jmp	$LN10@pcie_alloc
$LN9@pcie_alloc:

; 350  : 
; 351  : 	uint64_t status = pci_express_read2 (device,PCI_COMMAND, 4, bus, dev, func);

	mov	eax, DWORD PTR func$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR dev$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR bus$[rsp]
	mov	r8d, 4
	mov	edx, 4
	mov	rcx, QWORD PTR device$[rsp]
	call	pci_express_read2
	mov	QWORD PTR status$[rsp], rax

; 352  : 	status >>= 16;

	mov	rax, QWORD PTR status$[rsp]
	shr	rax, 16
	mov	QWORD PTR status$[rsp], rax

; 353  : 	if ((status & (1<<4)) != 0) {

	mov	rax, QWORD PTR status$[rsp]
	and	rax, 16
	test	rax, rax
	je	$LN8@pcie_alloc

; 354  : 		uint32_t capptr = pci_express_read2(device,PCI_CAPABILITIES_PTR, 4, bus, dev, func);

	mov	eax, DWORD PTR func$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR dev$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR bus$[rsp]
	mov	r8d, 4
	mov	edx, 52					; 00000034H
	mov	rcx, QWORD PTR device$[rsp]
	call	pci_express_read2
	mov	DWORD PTR capptr$1[rsp], eax

; 355  : 		capptr &= 0xFF; 

	mov	eax, DWORD PTR capptr$1[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR capptr$1[rsp], eax

; 356  : 		uint32_t cap_reg = 0;

	mov	DWORD PTR cap_reg$3[rsp], 0

; 357  : 		uint32_t msi_reg = 0;

	mov	DWORD PTR msi_reg$6[rsp], 0
$LN7@pcie_alloc:

; 358  : 		while (capptr != 0) {

	cmp	DWORD PTR capptr$1[rsp], 0
	je	$LN6@pcie_alloc

; 359  : 			cap_reg = pci_express_read2(device,capptr, 4, bus, dev, func);

	mov	eax, DWORD PTR func$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR dev$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR bus$[rsp]
	mov	r8d, 4
	mov	edx, DWORD PTR capptr$1[rsp]
	mov	rcx, QWORD PTR device$[rsp]
	call	pci_express_read2
	mov	DWORD PTR cap_reg$3[rsp], eax

; 360  : 			if ((cap_reg & 0xff) == 0x5) {

	mov	eax, DWORD PTR cap_reg$3[rsp]
	and	eax, 255				; 000000ffH
	cmp	eax, 5
	jne	$LN5@pcie_alloc

; 361  : 				printf ("MSI found for this device, -> %x\n", cap_reg);

	mov	edx, DWORD PTR cap_reg$3[rsp]
	lea	rcx, OFFSET FLAT:$SG4055
	call	printf

; 362  : 				msi_reg = cap_reg;

	mov	eax, DWORD PTR cap_reg$3[rsp]
	mov	DWORD PTR msi_reg$6[rsp], eax

; 363  : 				uint16_t msctl = msi_reg >> 16;

	mov	eax, DWORD PTR msi_reg$6[rsp]
	shr	eax, 16
	mov	WORD PTR msctl$2[rsp], ax

; 364  : 				bool bit64_cap = (msctl & (1<<7));

	movzx	eax, WORD PTR msctl$2[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN12@pcie_alloc
	mov	BYTE PTR tv136[rsp], 1
	jmp	SHORT $LN13@pcie_alloc
$LN12@pcie_alloc:
	mov	BYTE PTR tv136[rsp], 0
$LN13@pcie_alloc:
	movzx	eax, BYTE PTR tv136[rsp]
	mov	BYTE PTR bit64_cap$4[rsp], al

; 365  : 				bool maskcap = (msctl & (1<<8));

	movzx	eax, WORD PTR msctl$2[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN14@pcie_alloc
	mov	BYTE PTR tv140[rsp], 1
	jmp	SHORT $LN15@pcie_alloc
$LN14@pcie_alloc:
	mov	BYTE PTR tv140[rsp], 0
$LN15@pcie_alloc:
	movzx	eax, BYTE PTR tv140[rsp]
	mov	BYTE PTR maskcap$5[rsp], al

; 366  : 
; 367  : 				uint64_t msi_data = 0;

	mov	QWORD PTR msi_data$8[rsp], 0

; 368  : 	
; 369  : 				uint32_t msi_addr = cpu_msi_address(&msi_data,vector,0,1,0);

	mov	BYTE PTR [rsp+32], 0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR vector$[rsp]
	lea	rcx, QWORD PTR msi_data$8[rsp]
	call	?cpu_msi_address@@YA_KPEA_K_KIEE@Z	; cpu_msi_address
	mov	DWORD PTR msi_addr$7[rsp], eax

; 370  : 
; 371  : 				//*(uint32_t*)(cap_reg + 0x4) = msi_addr & UINT32_MAX;
; 372  : 				pci_express_write2(device, capptr + 0x4, 4, msi_addr & UINT32_MAX, bus, dev, func);

	mov	eax, DWORD PTR msi_addr$7[rsp]
	mov	ecx, DWORD PTR capptr$1[rsp]
	add	ecx, 4
	mov	edx, DWORD PTR func$[rsp]
	mov	DWORD PTR [rsp+48], edx
	mov	edx, DWORD PTR dev$[rsp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR bus$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, eax
	mov	r8d, 4
	mov	edx, ecx
	mov	rcx, QWORD PTR device$[rsp]
	call	pci_express_write2

; 373  : 
; 374  : 				if (bit64_cap) {

	movzx	eax, BYTE PTR bit64_cap$4[rsp]
	test	eax, eax
	je	$LN4@pcie_alloc

; 375  : 					pci_express_write2(device, capptr + 0x8, 4, msi_addr >> 32, bus, dev ,func);

	mov	eax, DWORD PTR msi_addr$7[rsp]
	shr	eax, 32					; 00000020H
	mov	eax, eax
	mov	ecx, DWORD PTR capptr$1[rsp]
	add	ecx, 8
	mov	edx, DWORD PTR func$[rsp]
	mov	DWORD PTR [rsp+48], edx
	mov	edx, DWORD PTR dev$[rsp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR bus$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, eax
	mov	r8d, 4
	mov	edx, ecx
	mov	rcx, QWORD PTR device$[rsp]
	call	pci_express_write2

; 376  : 					pci_express_write2(device, capptr + 0xC, 2, msi_data & UINT16_MAX, bus, dev, func);

	mov	rax, QWORD PTR msi_data$8[rsp]
	and	rax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR capptr$1[rsp]
	add	ecx, 12
	mov	edx, DWORD PTR func$[rsp]
	mov	DWORD PTR [rsp+48], edx
	mov	edx, DWORD PTR dev$[rsp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR bus$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9, rax
	mov	r8d, 2
	mov	edx, ecx
	mov	rcx, QWORD PTR device$[rsp]
	call	pci_express_write2

; 377  : 				}else 

	jmp	SHORT $LN3@pcie_alloc
$LN4@pcie_alloc:

; 378  : 					pci_express_write2(device, capptr + 0x8, 2, msi_data & UINT16_MAX, bus, dev, func);

	mov	rax, QWORD PTR msi_data$8[rsp]
	and	rax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR capptr$1[rsp]
	add	ecx, 8
	mov	edx, DWORD PTR func$[rsp]
	mov	DWORD PTR [rsp+48], edx
	mov	edx, DWORD PTR dev$[rsp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR bus$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9, rax
	mov	r8d, 2
	mov	edx, ecx
	mov	rcx, QWORD PTR device$[rsp]
	call	pci_express_write2
$LN3@pcie_alloc:

; 379  : 				
; 380  : 				
; 381  : 				if (maskcap) 

	movzx	eax, BYTE PTR maskcap$5[rsp]
	test	eax, eax
	je	SHORT $LN2@pcie_alloc

; 382  : 					pci_express_write2(device, capptr + 0x10, 4, 0, bus, dev, func);

	mov	eax, DWORD PTR capptr$1[rsp]
	add	eax, 16
	mov	ecx, DWORD PTR func$[rsp]
	mov	DWORD PTR [rsp+48], ecx
	mov	ecx, DWORD PTR dev$[rsp]
	mov	DWORD PTR [rsp+40], ecx
	mov	ecx, DWORD PTR bus$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	xor	r9d, r9d
	mov	r8d, 4
	mov	edx, eax
	mov	rcx, QWORD PTR device$[rsp]
	call	pci_express_write2
$LN2@pcie_alloc:

; 383  : 				
; 384  : 
; 385  : 
; 386  : 				msctl |= 1;

	movzx	eax, WORD PTR msctl$2[rsp]
	or	eax, 1
	mov	WORD PTR msctl$2[rsp], ax

; 387  : 				//pci_express_write2(device, capptr, 4,cap_reg, bus, dev, func);
; 388  : 				cap_reg = msi_reg & UINT16_MAX | msctl << 16;

	mov	eax, DWORD PTR msi_reg$6[rsp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, WORD PTR msctl$2[rsp]
	shl	ecx, 16
	or	eax, ecx
	mov	DWORD PTR cap_reg$3[rsp], eax

; 389  : 				pci_express_write2(device, capptr, 4,  cap_reg & UINT32_MAX, bus, dev, func);

	mov	eax, DWORD PTR cap_reg$3[rsp]
	mov	ecx, DWORD PTR func$[rsp]
	mov	DWORD PTR [rsp+48], ecx
	mov	ecx, DWORD PTR dev$[rsp]
	mov	DWORD PTR [rsp+40], ecx
	mov	ecx, DWORD PTR bus$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	mov	r8d, 4
	mov	edx, DWORD PTR capptr$1[rsp]
	mov	rcx, QWORD PTR device$[rsp]
	call	pci_express_write2

; 390  : 				uint32_t cap_reg2 = pci_express_read2(device, capptr, 4, bus, dev, func);

	mov	eax, DWORD PTR func$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR dev$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR bus$[rsp]
	mov	r8d, 4
	mov	edx, DWORD PTR capptr$1[rsp]
	mov	rcx, QWORD PTR device$[rsp]
	call	pci_express_read2
	mov	DWORD PTR cap_reg2$9[rsp], eax

; 391  : 				break;

	jmp	SHORT $LN6@pcie_alloc
$LN5@pcie_alloc:

; 392  : 			}
; 393  : 
; 394  : 			if ((cap_reg & 0xff)  == 0x11) {

	mov	eax, DWORD PTR cap_reg$3[rsp]
	and	eax, 255				; 000000ffH
	cmp	eax, 17
	jne	SHORT $LN1@pcie_alloc

; 395  : 				printf ("MSI-X found for this device\n");

	lea	rcx, OFFSET FLAT:$SG4066
	call	printf

; 396  : 				break;

	jmp	SHORT $LN6@pcie_alloc
$LN1@pcie_alloc:

; 397  : 			}
; 398  : 			capptr = ((cap_reg >> 8) & 0xff);   //((cap_reg >> 8) & 0xFF) / 4;

	mov	eax, DWORD PTR cap_reg$3[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	DWORD PTR capptr$1[rsp], eax

; 399  : 		}

	jmp	$LN7@pcie_alloc
$LN6@pcie_alloc:
$LN8@pcie_alloc:
$LN10@pcie_alloc:

; 400  : 	}
; 401  : }

	add	rsp, 136				; 00000088H
	ret	0
pcie_alloc_msi ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\pcie.cpp
_TEXT	SEGMENT
allocs$ = 32
mcfg$ = 40
address$ = 48
device$ = 80
reg$ = 88
size$ = 96
val$ = 104
bus$ = 112
dev$ = 120
func$ = 128
pci_express_write2 PROC

; 287  : void pci_express_write2 (uint64_t device, int reg, int size,uint64_t val, int bus, int dev, int func) {

$LN10:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 288  : 	if(acpi_pcie_supported() == false) {

	call	?acpi_pcie_supported@@YA_NXZ		; acpi_pcie_supported
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@pci_expres

; 289  : 		return; //pci_write(device,reg, val);

	jmp	$LN8@pci_expres
$LN7@pci_expres:

; 290  : 	}
; 291  : 
; 292  : 	size_t address = 0;

	mov	QWORD PTR address$[rsp], 0

; 293  : 	acpiMcfg *mcfg = acpi_get_mcfg();

	call	?acpi_get_mcfg@@YAPEAUacpiMcfg@@XZ	; acpi_get_mcfg
	mov	QWORD PTR mcfg$[rsp], rax

; 294  : 	acpiMcfgAlloc *allocs = mem_after<acpiMcfgAlloc*>(mcfg);

	mov	rcx, QWORD PTR mcfg$[rsp]
	call	??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; mem_after<acpiMcfgAlloc * __ptr64,acpiMcfg>
	mov	QWORD PTR allocs$[rsp], rax

; 295  : 	if (allocs->startBusNum <= bus && bus <= allocs->endBusNum) 

	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, BYTE PTR [rax+10]
	cmp	eax, DWORD PTR bus$[rsp]
	jg	SHORT $LN6@pci_expres
	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, BYTE PTR [rax+11]
	cmp	DWORD PTR bus$[rsp], eax
	jg	SHORT $LN6@pci_expres

; 296  : 		address = allocs->baseAddress + ((bus - allocs->startBusNum) << 20) | (device << 15) | (func << 12) | (reg);

	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, BYTE PTR [rax+10]
	mov	ecx, DWORD PTR bus$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	shl	eax, 20
	cdqe
	mov	rcx, QWORD PTR allocs$[rsp]
	mov	rcx, QWORD PTR [rcx]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR device$[rsp]
	shl	rcx, 15
	or	rax, rcx
	mov	ecx, DWORD PTR func$[rsp]
	shl	ecx, 12
	movsxd	rcx, ecx
	or	rax, rcx
	movsxd	rcx, DWORD PTR reg$[rsp]
	or	rax, rcx
	mov	QWORD PTR address$[rsp], rax
$LN6@pci_expres:

; 297  : 
; 298  : 
; 299  : 	if (size == 1){

	cmp	DWORD PTR size$[rsp], 1
	jne	SHORT $LN5@pci_expres

; 300  : 		*raw_offset<volatile uint8_t*>(device, reg) = (uint8_t)val;

	mov	edx, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR device$[rsp]
	call	??$raw_offset@PECE_K@@YAPECE_KH@Z	; raw_offset<unsigned char volatile * __ptr64,unsigned __int64>
	movzx	ecx, BYTE PTR val$[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN4@pci_expres
$LN5@pci_expres:

; 301  : 	}else if (size == 2) {

	cmp	DWORD PTR size$[rsp], 2
	jne	SHORT $LN3@pci_expres

; 302  : 		*raw_offset<volatile uint16_t*>(device, reg) = (uint16_t)val;

	mov	edx, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR device$[rsp]
	call	??$raw_offset@PECG_K@@YAPECG_KH@Z	; raw_offset<unsigned short volatile * __ptr64,unsigned __int64>
	movzx	ecx, WORD PTR val$[rsp]
	mov	WORD PTR [rax], cx
	jmp	SHORT $LN2@pci_expres
$LN3@pci_expres:

; 303  : 	}else if (size == 4) {

	cmp	DWORD PTR size$[rsp], 4
	jne	SHORT $LN1@pci_expres

; 304  : 		*raw_offset<volatile uint32_t*>(device, reg) = val;

	mov	edx, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR device$[rsp]
	call	??$raw_offset@PECI_K@@YAPECI_KH@Z	; raw_offset<unsigned int volatile * __ptr64,unsigned __int64>
	mov	ecx, DWORD PTR val$[rsp]
	mov	DWORD PTR [rax], ecx
$LN1@pci_expres:
$LN2@pci_expres:
$LN4@pci_expres:
$LN8@pci_expres:

; 305  : 	}
; 306  : }

	add	rsp, 72					; 00000048H
	ret	0
pci_express_write2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\pcie.cpp
_TEXT	SEGMENT
size$ = 32
tv89 = 36
allocs$ = 40
address$ = 48
mcfg$ = 56
device$ = 80
reg$ = 88
val$ = 96
bus$ = 104
dev$ = 112
func$ = 120
pci_express_write PROC

; 191  : void pci_express_write (uint64_t device, int reg, uint32_t val, int bus,int dev, int func) {

$LN37:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 192  : 	if(acpi_pcie_supported() == false) {

	call	?acpi_pcie_supported@@YA_NXZ		; acpi_pcie_supported
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN32@pci_expres

; 193  : 		return; //pci_write(device,reg, val);

	jmp	$LN33@pci_expres
$LN32@pci_expres:

; 194  : 	}
; 195  : 	
; 196  : 	size_t address = 0;

	mov	QWORD PTR address$[rsp], 0

; 197  : 
; 198  : 	acpiMcfg *mcfg = acpi_get_mcfg();

	call	?acpi_get_mcfg@@YAPEAUacpiMcfg@@XZ	; acpi_get_mcfg
	mov	QWORD PTR mcfg$[rsp], rax

; 199  : 	acpiMcfgAlloc *allocs = mem_after<acpiMcfgAlloc*>(mcfg);

	mov	rcx, QWORD PTR mcfg$[rsp]
	call	??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; mem_after<acpiMcfgAlloc * __ptr64,acpiMcfg>
	mov	QWORD PTR allocs$[rsp], rax

; 200  : 	if (allocs->startBusNum <= bus && bus <= allocs->endBusNum) 

	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, BYTE PTR [rax+10]
	cmp	eax, DWORD PTR bus$[rsp]
	jg	SHORT $LN31@pci_expres
	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, BYTE PTR [rax+11]
	cmp	DWORD PTR bus$[rsp], eax
	jg	SHORT $LN31@pci_expres

; 201  : 		address = allocs->baseAddress + ((bus - allocs->startBusNum) << 20) | (device << 15) | (func << 12);

	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, BYTE PTR [rax+10]
	mov	ecx, DWORD PTR bus$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	shl	eax, 20
	cdqe
	mov	rcx, QWORD PTR allocs$[rsp]
	mov	rcx, QWORD PTR [rcx]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR device$[rsp]
	shl	rcx, 15
	or	rax, rcx
	mov	ecx, DWORD PTR func$[rsp]
	shl	ecx, 12
	movsxd	rcx, ecx
	or	rax, rcx
	mov	QWORD PTR address$[rsp], rax
$LN31@pci_expres:

; 202  : 	
; 203  : 
; 204  : 	if (address == 0)

	cmp	QWORD PTR address$[rsp], 0
	jne	SHORT $LN30@pci_expres

; 205  : 		return;

	jmp	$LN33@pci_expres
$LN30@pci_expres:

; 206  : 	
; 207  : 	reg = reg;

	mov	eax, DWORD PTR reg$[rsp]
	mov	DWORD PTR reg$[rsp], eax

; 208  : 	int size = 0;

	mov	DWORD PTR size$[rsp], 0

; 209  : 	switch(reg) {

	mov	eax, DWORD PTR reg$[rsp]
	mov	DWORD PTR tv89[rsp], eax
	cmp	DWORD PTR tv89[rsp], 61			; 0000003dH
	ja	$LN6@pci_expres
	movsxd	rax, DWORD PTR tv89[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN35@pci_expres[rcx+rax]
	mov	eax, DWORD PTR $LN36@pci_expres[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN27@pci_expres:

; 210  : 	case PCI_VENDOR_ID:
; 211  : 		size = 2;

	mov	DWORD PTR size$[rsp], 2

; 212  : 		break;

	jmp	$LN28@pci_expres
$LN26@pci_expres:

; 213  : 	case PCI_DEVICE_ID:
; 214  : 		size = 2;

	mov	DWORD PTR size$[rsp], 2

; 215  : 		break;

	jmp	$LN28@pci_expres
$LN25@pci_expres:

; 216  : 	case PCI_COMMAND:
; 217  : 		size = 2;

	mov	DWORD PTR size$[rsp], 2

; 218  : 		break;

	jmp	$LN28@pci_expres
$LN24@pci_expres:

; 219  : 	case PCI_STATUS:
; 220  : 		size = 2;

	mov	DWORD PTR size$[rsp], 2

; 221  : 		break;

	jmp	$LN28@pci_expres
$LN23@pci_expres:

; 222  : 	case PCI_REVISION_ID:
; 223  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 224  : 		break;

	jmp	$LN28@pci_expres
$LN22@pci_expres:

; 225  : 	case PCI_PROG_IF:
; 226  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 227  : 		break;

	jmp	$LN28@pci_expres
$LN21@pci_expres:

; 228  : 	case PCI_SUBCLASS:
; 229  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 230  : 		break;

	jmp	$LN28@pci_expres
$LN20@pci_expres:

; 231  : 	case PCI_CLASS:
; 232  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 233  : 		break;

	jmp	$LN28@pci_expres
$LN19@pci_expres:

; 234  : 	case PCI_CACHE_LINE_SIZE:
; 235  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 236  : 		break;

	jmp	$LN28@pci_expres
$LN18@pci_expres:

; 237  : 	case PCI_LATENCY_TIMER:
; 238  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 239  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN17@pci_expres:

; 240  : 	case PCI_HEADER_TYPE:
; 241  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 242  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN16@pci_expres:

; 243  : 	case PCI_BIST:
; 244  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 245  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN15@pci_expres:

; 246  : 	case PCI_BAR0:
; 247  : 		size = 4;

	mov	DWORD PTR size$[rsp], 4

; 248  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN14@pci_expres:

; 249  : 	case PCI_BAR1:
; 250  : 		size = 4;

	mov	DWORD PTR size$[rsp], 4

; 251  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN13@pci_expres:

; 252  : 	case PCI_BAR2:
; 253  : 		size = 4;

	mov	DWORD PTR size$[rsp], 4

; 254  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN12@pci_expres:

; 255  : 	case PCI_BAR3:
; 256  : 		size = 4;

	mov	DWORD PTR size$[rsp], 4

; 257  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN11@pci_expres:

; 258  : 	case PCI_BAR4:
; 259  : 		size = 4;

	mov	DWORD PTR size$[rsp], 4

; 260  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN10@pci_expres:

; 261  : 	case PCI_BAR5:
; 262  : 		size = 4;

	mov	DWORD PTR size$[rsp], 4

; 263  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN9@pci_expres:

; 264  : 	case PCI_CAPABILITIES_PTR:
; 265  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 266  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN8@pci_expres:

; 267  : 	case PCI_INTERRUPT_LINE:
; 268  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 269  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN7@pci_expres:

; 270  : 	case PCI_INTERRUPT_PIN:
; 271  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 272  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN6@pci_expres:

; 273  : 	default:
; 274  : 		size = 4;

	mov	DWORD PTR size$[rsp], 4
$LN28@pci_expres:

; 275  : 		break;
; 276  : 	}
; 277  : 
; 278  : 	if (size == 1){

	cmp	DWORD PTR size$[rsp], 1
	jne	SHORT $LN5@pci_expres

; 279  : 		*raw_offset<volatile uint8_t*>(device, reg) = (uint8_t)val;

	mov	edx, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR device$[rsp]
	call	??$raw_offset@PECE_K@@YAPECE_KH@Z	; raw_offset<unsigned char volatile * __ptr64,unsigned __int64>
	movzx	ecx, BYTE PTR val$[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN4@pci_expres
$LN5@pci_expres:

; 280  : 	}else if (size == 2) {

	cmp	DWORD PTR size$[rsp], 2
	jne	SHORT $LN3@pci_expres

; 281  : 		*raw_offset<volatile uint16_t*>(device, reg) = (uint16_t)val;

	mov	edx, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR device$[rsp]
	call	??$raw_offset@PECG_K@@YAPECG_KH@Z	; raw_offset<unsigned short volatile * __ptr64,unsigned __int64>
	movzx	ecx, WORD PTR val$[rsp]
	mov	WORD PTR [rax], cx
	jmp	SHORT $LN2@pci_expres
$LN3@pci_expres:

; 282  : 	}else if (size == 4) {

	cmp	DWORD PTR size$[rsp], 4
	jne	SHORT $LN1@pci_expres

; 283  : 		*raw_offset<volatile uint32_t*>(device, reg) = (uint32_t)val;

	mov	edx, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR device$[rsp]
	call	??$raw_offset@PECI_K@@YAPECI_KH@Z	; raw_offset<unsigned int volatile * __ptr64,unsigned __int64>
	mov	ecx, DWORD PTR val$[rsp]
	mov	DWORD PTR [rax], ecx
$LN1@pci_expres:
$LN2@pci_expres:
$LN4@pci_expres:
$LN33@pci_expres:

; 284  : 	}
; 285  : }

	add	rsp, 72					; 00000048H
	ret	0
$LN36@pci_expres:
	DD	$LN27@pci_expres
	DD	$LN26@pci_expres
	DD	$LN25@pci_expres
	DD	$LN24@pci_expres
	DD	$LN23@pci_expres
	DD	$LN22@pci_expres
	DD	$LN21@pci_expres
	DD	$LN20@pci_expres
	DD	$LN19@pci_expres
	DD	$LN18@pci_expres
	DD	$LN17@pci_expres
	DD	$LN16@pci_expres
	DD	$LN15@pci_expres
	DD	$LN14@pci_expres
	DD	$LN13@pci_expres
	DD	$LN12@pci_expres
	DD	$LN11@pci_expres
	DD	$LN10@pci_expres
	DD	$LN9@pci_expres
	DD	$LN8@pci_expres
	DD	$LN7@pci_expres
	DD	$LN6@pci_expres
$LN35@pci_expres:
	DB	0
	DB	21
	DB	1
	DB	21
	DB	2
	DB	21
	DB	3
	DB	21
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10
	DB	11
	DB	12
	DB	21
	DB	21
	DB	21
	DB	13
	DB	21
	DB	21
	DB	21
	DB	14
	DB	21
	DB	21
	DB	21
	DB	15
	DB	21
	DB	21
	DB	21
	DB	16
	DB	21
	DB	21
	DB	21
	DB	17
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	18
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	19
	DB	20
pci_express_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\pcie.cpp
_TEXT	SEGMENT
result$ = 32
allocs$ = 40
address$ = 48
mcfg$ = 56
device$ = 80
reg$ = 88
size$ = 96
bus$ = 104
dev$ = 112
func$ = 120
pci_express_read2 PROC

; 159  : uint64_t pci_express_read2 (uint64_t device, int reg, int size, int bus, int dev, int func) {

$LN11:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 160  : 	if(acpi_pcie_supported() == false) {

	call	?acpi_pcie_supported@@YA_NXZ		; acpi_pcie_supported
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@pci_expres

; 161  : 		return 0;

	xor	eax, eax
	jmp	$LN9@pci_expres
$LN8@pci_expres:

; 162  : 	}
; 163  : 
; 164  : 	size_t address = 0;

	mov	QWORD PTR address$[rsp], 0

; 165  : 	acpiMcfg *mcfg = acpi_get_mcfg();

	call	?acpi_get_mcfg@@YAPEAUacpiMcfg@@XZ	; acpi_get_mcfg
	mov	QWORD PTR mcfg$[rsp], rax

; 166  : 	acpiMcfgAlloc *allocs = mem_after<acpiMcfgAlloc*>(mcfg);

	mov	rcx, QWORD PTR mcfg$[rsp]
	call	??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; mem_after<acpiMcfgAlloc * __ptr64,acpiMcfg>
	mov	QWORD PTR allocs$[rsp], rax

; 167  : 	if (allocs->startBusNum <= bus && bus <= allocs->endBusNum) 

	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, BYTE PTR [rax+10]
	cmp	eax, DWORD PTR bus$[rsp]
	jg	SHORT $LN7@pci_expres
	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, BYTE PTR [rax+11]
	cmp	DWORD PTR bus$[rsp], eax
	jg	SHORT $LN7@pci_expres

; 168  : 		address = allocs->baseAddress + ((bus - allocs->startBusNum) << 20) | (device << 15) | (func << 12);

	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, BYTE PTR [rax+10]
	mov	ecx, DWORD PTR bus$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	shl	eax, 20
	cdqe
	mov	rcx, QWORD PTR allocs$[rsp]
	mov	rcx, QWORD PTR [rcx]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR device$[rsp]
	shl	rcx, 15
	or	rax, rcx
	mov	ecx, DWORD PTR func$[rsp]
	shl	ecx, 12
	movsxd	rcx, ecx
	or	rax, rcx
	mov	QWORD PTR address$[rsp], rax
$LN7@pci_expres:

; 169  : 
; 170  : 	if (address == 0)

	cmp	QWORD PTR address$[rsp], 0
	jne	SHORT $LN6@pci_expres

; 171  : 		return 0;

	xor	eax, eax
	jmp	$LN9@pci_expres
$LN6@pci_expres:

; 172  : 
; 173  : 	uint64_t result = 0;

	mov	QWORD PTR result$[rsp], 0

; 174  : 
; 175  : 	if (size == 1){

	cmp	DWORD PTR size$[rsp], 1
	jne	SHORT $LN5@pci_expres

; 176  : 		result = *raw_offset<volatile uint8_t*>(device,reg);

	mov	edx, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR device$[rsp]
	call	??$raw_offset@PECE_K@@YAPECE_KH@Z	; raw_offset<unsigned char volatile * __ptr64,unsigned __int64>
	movzx	eax, BYTE PTR [rax]
	movzx	eax, al
	mov	QWORD PTR result$[rsp], rax

; 177  : 		return result;

	mov	rax, QWORD PTR result$[rsp]
	jmp	SHORT $LN9@pci_expres
	jmp	SHORT $LN4@pci_expres
$LN5@pci_expres:

; 178  : 	}else if (size == 2) {

	cmp	DWORD PTR size$[rsp], 2
	jne	SHORT $LN3@pci_expres

; 179  : 		result = *raw_offset<volatile uint16_t*>(device, reg);

	mov	edx, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR device$[rsp]
	call	??$raw_offset@PECG_K@@YAPECG_KH@Z	; raw_offset<unsigned short volatile * __ptr64,unsigned __int64>
	movzx	eax, WORD PTR [rax]
	movzx	eax, ax
	mov	QWORD PTR result$[rsp], rax

; 180  : 		return result;

	mov	rax, QWORD PTR result$[rsp]
	jmp	SHORT $LN9@pci_expres
	jmp	SHORT $LN2@pci_expres
$LN3@pci_expres:

; 181  : 	}else if (size == 4) {

	cmp	DWORD PTR size$[rsp], 4
	jne	SHORT $LN1@pci_expres

; 182  : 		result = *raw_offset<volatile uint32_t*>(device,reg);

	mov	edx, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR device$[rsp]
	call	??$raw_offset@PECI_K@@YAPECI_KH@Z	; raw_offset<unsigned int volatile * __ptr64,unsigned __int64>
	mov	eax, DWORD PTR [rax]
	mov	eax, eax
	mov	QWORD PTR result$[rsp], rax

; 183  : 		return result;

	mov	rax, QWORD PTR result$[rsp]
	jmp	SHORT $LN9@pci_expres
$LN1@pci_expres:
$LN2@pci_expres:
$LN4@pci_expres:

; 184  : 	}
; 185  : 	
; 186  : 
; 187  : 	return UINT64_MAX;

	mov	rax, -1
$LN9@pci_expres:

; 188  : }

	add	rsp, 72					; 00000048H
	ret	0
pci_express_read2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\pcie.cpp
_TEXT	SEGMENT
size$ = 32
address$ = 36
tv87 = 40
result$ = 48
allocs$ = 56
mcfg$ = 64
device$ = 96
reg$ = 104
bus$ = 112
dev$ = 120
func$ = 128
pci_express_read PROC

; 59   : uint32_t pci_express_read (uint64_t device, int reg, int bus,int dev,int func) {

$LN36:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 60   : 	/*if(acpi_pcie_supported() == false) {
; 61   : 		return pci_read(device,reg);
; 62   : 	}*/
; 63   : 	uint32_t address = 0;

	mov	DWORD PTR address$[rsp], 0

; 64   : 	acpiMcfg *mcfg = acpi_get_mcfg();

	call	?acpi_get_mcfg@@YAPEAUacpiMcfg@@XZ	; acpi_get_mcfg
	mov	QWORD PTR mcfg$[rsp], rax

; 65   : 	acpiMcfgAlloc *allocs = mem_after<acpiMcfgAlloc*>(mcfg);

	mov	rcx, QWORD PTR mcfg$[rsp]
	call	??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; mem_after<acpiMcfgAlloc * __ptr64,acpiMcfg>
	mov	QWORD PTR allocs$[rsp], rax

; 66   : 	if (allocs->startBusNum <= bus && bus <= allocs->endBusNum) {

	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, BYTE PTR [rax+10]
	cmp	eax, DWORD PTR bus$[rsp]
	jg	SHORT $LN31@pci_expres
	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, BYTE PTR [rax+11]
	cmp	DWORD PTR bus$[rsp], eax
	jg	SHORT $LN31@pci_expres

; 67   : 		address = allocs->baseAddress + ((bus - allocs->startBusNum) << 20) | (device << 15) | (func << 12);

	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, BYTE PTR [rax+10]
	mov	ecx, DWORD PTR bus$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	shl	eax, 20
	cdqe
	mov	rcx, QWORD PTR allocs$[rsp]
	mov	rcx, QWORD PTR [rcx]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR device$[rsp]
	shl	rcx, 15
	or	rax, rcx
	mov	ecx, DWORD PTR func$[rsp]
	shl	ecx, 12
	movsxd	rcx, ecx
	or	rax, rcx
	mov	DWORD PTR address$[rsp], eax
$LN31@pci_expres:

; 68   : 	}
; 69   : 
; 70   : 	uint64_t result = 0;

	mov	QWORD PTR result$[rsp], 0

; 71   : 	if (address == 0)

	cmp	DWORD PTR address$[rsp], 0
	jne	SHORT $LN30@pci_expres

; 72   : 		return 0;

	xor	eax, eax
	jmp	$LN32@pci_expres
$LN30@pci_expres:

; 73   : 
; 74   : 
; 75   : 	int size = 0;

	mov	DWORD PTR size$[rsp], 0

; 76   : 	switch(reg) {

	mov	eax, DWORD PTR reg$[rsp]
	mov	DWORD PTR tv87[rsp], eax
	cmp	DWORD PTR tv87[rsp], 61			; 0000003dH
	ja	$LN6@pci_expres
	movsxd	rax, DWORD PTR tv87[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN34@pci_expres[rcx+rax]
	mov	eax, DWORD PTR $LN35@pci_expres[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN27@pci_expres:

; 77   : 	case PCI_VENDOR_ID:
; 78   : 		size = 2;

	mov	DWORD PTR size$[rsp], 2

; 79   : 		break;

	jmp	$LN28@pci_expres
$LN26@pci_expres:

; 80   : 	case PCI_DEVICE_ID:
; 81   : 		size = 2;

	mov	DWORD PTR size$[rsp], 2

; 82   : 		break;

	jmp	$LN28@pci_expres
$LN25@pci_expres:

; 83   : 	case PCI_COMMAND:
; 84   : 		size = 2;

	mov	DWORD PTR size$[rsp], 2

; 85   : 		break;

	jmp	$LN28@pci_expres
$LN24@pci_expres:

; 86   : 	case PCI_STATUS:
; 87   : 		size = 2;

	mov	DWORD PTR size$[rsp], 2

; 88   : 		break;

	jmp	$LN28@pci_expres
$LN23@pci_expres:

; 89   : 	case PCI_REVISION_ID:
; 90   : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 91   : 		break;

	jmp	$LN28@pci_expres
$LN22@pci_expres:

; 92   : 	case PCI_PROG_IF:
; 93   : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 94   : 		break;

	jmp	$LN28@pci_expres
$LN21@pci_expres:

; 95   : 	case PCI_SUBCLASS:
; 96   : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 97   : 		break;

	jmp	$LN28@pci_expres
$LN20@pci_expres:

; 98   : 	case PCI_CLASS:
; 99   : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 100  : 		break;

	jmp	$LN28@pci_expres
$LN19@pci_expres:

; 101  : 	case PCI_CACHE_LINE_SIZE:
; 102  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 103  : 		break;

	jmp	$LN28@pci_expres
$LN18@pci_expres:

; 104  : 	case PCI_LATENCY_TIMER:
; 105  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 106  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN17@pci_expres:

; 107  : 	case PCI_HEADER_TYPE:
; 108  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 109  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN16@pci_expres:

; 110  : 	case PCI_BIST:
; 111  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 112  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN15@pci_expres:

; 113  : 	case PCI_BAR0:
; 114  : 		size = 4;

	mov	DWORD PTR size$[rsp], 4

; 115  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN14@pci_expres:

; 116  : 	case PCI_BAR1:
; 117  : 		size = 4;

	mov	DWORD PTR size$[rsp], 4

; 118  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN13@pci_expres:

; 119  : 	case PCI_BAR2:
; 120  : 		size = 4;

	mov	DWORD PTR size$[rsp], 4

; 121  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN12@pci_expres:

; 122  : 	case PCI_BAR3:
; 123  : 		size = 4;

	mov	DWORD PTR size$[rsp], 4

; 124  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN11@pci_expres:

; 125  : 	case PCI_BAR4:
; 126  : 		size = 4;

	mov	DWORD PTR size$[rsp], 4

; 127  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN10@pci_expres:

; 128  : 	case PCI_BAR5:
; 129  : 		size = 4;

	mov	DWORD PTR size$[rsp], 4

; 130  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN9@pci_expres:

; 131  : 	case PCI_CAPABILITIES_PTR:
; 132  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 133  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN8@pci_expres:

; 134  : 	case PCI_INTERRUPT_LINE:
; 135  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 136  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN7@pci_expres:

; 137  : 	case PCI_INTERRUPT_PIN:
; 138  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1

; 139  : 		break;

	jmp	SHORT $LN28@pci_expres
$LN6@pci_expres:

; 140  : 	default:
; 141  : 		size = 1;

	mov	DWORD PTR size$[rsp], 1
$LN28@pci_expres:

; 142  : 		break;
; 143  : 	}
; 144  : 
; 145  : 	if (size == 1){

	cmp	DWORD PTR size$[rsp], 1
	jne	SHORT $LN5@pci_expres

; 146  : 		result = *raw_offset<volatile uint8_t*>(device,reg);

	mov	edx, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR device$[rsp]
	call	??$raw_offset@PECE_K@@YAPECE_KH@Z	; raw_offset<unsigned char volatile * __ptr64,unsigned __int64>
	movzx	eax, BYTE PTR [rax]
	movzx	eax, al
	mov	QWORD PTR result$[rsp], rax

; 147  : 		return result;

	mov	eax, DWORD PTR result$[rsp]
	jmp	SHORT $LN32@pci_expres
	jmp	SHORT $LN4@pci_expres
$LN5@pci_expres:

; 148  : 	}else if (size == 2) {

	cmp	DWORD PTR size$[rsp], 2
	jne	SHORT $LN3@pci_expres

; 149  : 		result = *raw_offset<volatile uint16_t*>(device, reg);

	mov	edx, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR device$[rsp]
	call	??$raw_offset@PECG_K@@YAPECG_KH@Z	; raw_offset<unsigned short volatile * __ptr64,unsigned __int64>
	movzx	eax, WORD PTR [rax]
	movzx	eax, ax
	mov	QWORD PTR result$[rsp], rax

; 150  : 		return result;

	mov	eax, DWORD PTR result$[rsp]
	jmp	SHORT $LN32@pci_expres
	jmp	SHORT $LN2@pci_expres
$LN3@pci_expres:

; 151  : 	}else if (size == 4) {

	cmp	DWORD PTR size$[rsp], 4
	jne	SHORT $LN1@pci_expres

; 152  : 		result = *raw_offset<volatile uint32_t*>(device,reg);

	mov	edx, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR device$[rsp]
	call	??$raw_offset@PECI_K@@YAPECI_KH@Z	; raw_offset<unsigned int volatile * __ptr64,unsigned __int64>
	mov	eax, DWORD PTR [rax]
	mov	eax, eax
	mov	QWORD PTR result$[rsp], rax

; 153  : 		return result;

	mov	eax, DWORD PTR result$[rsp]
	jmp	SHORT $LN32@pci_expres
$LN1@pci_expres:
$LN2@pci_expres:
$LN4@pci_expres:

; 154  : 	}
; 155  : 
; 156  : 	return 0xFFFFFFFF;

	mov	eax, -1					; ffffffffH
$LN32@pci_expres:

; 157  : }

	add	rsp, 88					; 00000058H
	ret	0
	npad	1
$LN35@pci_expres:
	DD	$LN27@pci_expres
	DD	$LN26@pci_expres
	DD	$LN25@pci_expres
	DD	$LN24@pci_expres
	DD	$LN23@pci_expres
	DD	$LN22@pci_expres
	DD	$LN21@pci_expres
	DD	$LN20@pci_expres
	DD	$LN19@pci_expres
	DD	$LN18@pci_expres
	DD	$LN17@pci_expres
	DD	$LN16@pci_expres
	DD	$LN15@pci_expres
	DD	$LN14@pci_expres
	DD	$LN13@pci_expres
	DD	$LN12@pci_expres
	DD	$LN11@pci_expres
	DD	$LN10@pci_expres
	DD	$LN9@pci_expres
	DD	$LN8@pci_expres
	DD	$LN7@pci_expres
	DD	$LN6@pci_expres
$LN34@pci_expres:
	DB	0
	DB	21
	DB	1
	DB	21
	DB	2
	DB	21
	DB	3
	DB	21
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10
	DB	11
	DB	12
	DB	21
	DB	21
	DB	21
	DB	13
	DB	21
	DB	21
	DB	21
	DB	14
	DB	21
	DB	21
	DB	21
	DB	15
	DB	21
	DB	21
	DB	21
	DB	16
	DB	21
	DB	21
	DB	21
	DB	17
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	18
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	21
	DB	19
	DB	20
pci_express_read ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\pcie.cpp
_TEXT	SEGMENT
sub_ClassCode$1 = 48
dev$2 = 52
func$3 = 56
pciSegment$ = 60
class_code$4 = 64
bus$5 = 68
address$6 = 72
allocs$ = 80
mcfg$ = 88
classCode$ = 112
subClassCode$ = 120
bus_$ = 128
dev_$ = 136
func_$ = 144
pci_express_scan_class PROC

; 310  : uint64_t pci_express_scan_class (uint8_t classCode, uint8_t subClassCode, int *bus_, int *dev_, int *func_) {

$LN19:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 104				; 00000068H

; 311  : 	if(acpi_pcie_supported() == false) {

	call	?acpi_pcie_supported@@YA_NXZ		; acpi_pcie_supported
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN16@pci_expres

; 312  : 		return 0; //pci_scan_class(classCode, subClassCode);

	xor	eax, eax
	jmp	$LN17@pci_expres
$LN16@pci_expres:

; 313  : 	}
; 314  : 
; 315  : 	acpiMcfg *mcfg = acpi_get_mcfg();

	call	?acpi_get_mcfg@@YAPEAUacpiMcfg@@XZ	; acpi_get_mcfg
	mov	QWORD PTR mcfg$[rsp], rax

; 316  : 	acpiMcfgAlloc *allocs = mem_after<acpiMcfgAlloc*>(mcfg);

	mov	rcx, QWORD PTR mcfg$[rsp]
	call	??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; mem_after<acpiMcfgAlloc * __ptr64,acpiMcfg>
	mov	QWORD PTR allocs$[rsp], rax

; 317  : 	uint16_t pciSegment = 0;

	xor	eax, eax
	mov	WORD PTR pciSegment$[rsp], ax

; 318  : 	if (allocs->pciSegment <= 65535)

	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, WORD PTR [rax+8]
	cmp	eax, 65535				; 0000ffffH
	jg	SHORT $LN15@pci_expres

; 319  : 		pciSegment = allocs->pciSegment;

	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, WORD PTR [rax+8]
	mov	WORD PTR pciSegment$[rsp], ax

; 320  : 	else

	jmp	SHORT $LN14@pci_expres
$LN15@pci_expres:

; 321  : 		pciSegment = 0;

	xor	eax, eax
	mov	WORD PTR pciSegment$[rsp], ax
$LN14@pci_expres:

; 322  : 
; 323  : 	for (int bus = 0; bus < allocs->endBusNum; bus++){

	mov	DWORD PTR bus$5[rsp], 0
	jmp	SHORT $LN13@pci_expres
$LN12@pci_expres:
	mov	eax, DWORD PTR bus$5[rsp]
	inc	eax
	mov	DWORD PTR bus$5[rsp], eax
$LN13@pci_expres:
	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, BYTE PTR [rax+11]
	cmp	DWORD PTR bus$5[rsp], eax
	jge	$LN11@pci_expres

; 324  : 		for (int dev = 0; dev < PCI_DEVICE_PER_BUS; dev++) {

	mov	DWORD PTR dev$2[rsp], 0
	jmp	SHORT $LN10@pci_expres
$LN9@pci_expres:
	mov	eax, DWORD PTR dev$2[rsp]
	inc	eax
	mov	DWORD PTR dev$2[rsp], eax
$LN10@pci_expres:
	cmp	DWORD PTR dev$2[rsp], 32		; 00000020H
	jge	$LN8@pci_expres

; 325  : 			for (int func = 0; func < PCI_FUNCTION_PER_DEVICE; func++) {

	mov	DWORD PTR func$3[rsp], 0
	jmp	SHORT $LN7@pci_expres
$LN6@pci_expres:
	mov	eax, DWORD PTR func$3[rsp]
	inc	eax
	mov	DWORD PTR func$3[rsp], eax
$LN7@pci_expres:
	cmp	DWORD PTR func$3[rsp], 8
	jge	$LN5@pci_expres

; 326  : 				uint64_t address = pci_express_get_device(pciSegment, bus,dev,func);

	mov	r9d, DWORD PTR func$3[rsp]
	mov	r8d, DWORD PTR dev$2[rsp]
	mov	edx, DWORD PTR bus$5[rsp]
	movzx	ecx, WORD PTR pciSegment$[rsp]
	call	?pci_express_get_device@@YA_KGHHH@Z	; pci_express_get_device
	mov	QWORD PTR address$6[rsp], rax

; 327  : 			
; 328  : 				if (address == 0xFFFFFFFF)

	mov	eax, -1					; ffffffffH
	cmp	QWORD PTR address$6[rsp], rax
	jne	SHORT $LN4@pci_expres

; 329  : 					continue;

	jmp	SHORT $LN6@pci_expres
$LN4@pci_expres:

; 330  : 				uint8_t class_code = pci_express_read(address,PCI_CLASS, bus,dev,func);

	mov	eax, DWORD PTR func$3[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR dev$2[rsp]
	mov	r8d, DWORD PTR bus$5[rsp]
	mov	edx, 11
	mov	rcx, QWORD PTR address$6[rsp]
	call	pci_express_read
	mov	BYTE PTR class_code$4[rsp], al

; 331  : 				uint8_t sub_ClassCode = pci_express_read(address, PCI_SUBCLASS, bus, dev, func);

	mov	eax, DWORD PTR func$3[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR dev$2[rsp]
	mov	r8d, DWORD PTR bus$5[rsp]
	mov	edx, 10
	mov	rcx, QWORD PTR address$6[rsp]
	call	pci_express_read
	mov	BYTE PTR sub_ClassCode$1[rsp], al

; 332  : 				if (classCode == 0xFF || sub_ClassCode == 0xFF)

	movzx	eax, BYTE PTR classCode$[rsp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN2@pci_expres
	movzx	eax, BYTE PTR sub_ClassCode$1[rsp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN3@pci_expres
$LN2@pci_expres:

; 333  : 					continue;

	jmp	$LN6@pci_expres
$LN3@pci_expres:

; 334  : 				if(class_code == classCode && sub_ClassCode == subClassCode) {

	movzx	eax, BYTE PTR class_code$4[rsp]
	movzx	ecx, BYTE PTR classCode$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN1@pci_expres
	movzx	eax, BYTE PTR sub_ClassCode$1[rsp]
	movzx	ecx, BYTE PTR subClassCode$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN1@pci_expres

; 335  : 					*bus_ = bus;

	mov	rax, QWORD PTR bus_$[rsp]
	mov	ecx, DWORD PTR bus$5[rsp]
	mov	DWORD PTR [rax], ecx

; 336  : 					*dev_ = dev;

	mov	rax, QWORD PTR dev_$[rsp]
	mov	ecx, DWORD PTR dev$2[rsp]
	mov	DWORD PTR [rax], ecx

; 337  : 					*func_ = func;

	mov	rax, QWORD PTR func_$[rsp]
	mov	ecx, DWORD PTR func$3[rsp]
	mov	DWORD PTR [rax], ecx

; 338  : 					return address;

	mov	rax, QWORD PTR address$6[rsp]
	jmp	SHORT $LN17@pci_expres
$LN1@pci_expres:

; 339  : 				}
; 340  : 			}

	jmp	$LN6@pci_expres
$LN5@pci_expres:

; 341  : 		}

	jmp	$LN9@pci_expres
$LN8@pci_expres:

; 342  : 	}

	jmp	$LN12@pci_expres
$LN11@pci_expres:

; 343  : 
; 344  : 	return 0xFFFFFFFF;

	mov	eax, -1					; ffffffffH
$LN17@pci_expres:

; 345  : }

	add	rsp, 104				; 00000068H
	ret	0
pci_express_scan_class ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\pcie.cpp
_TEXT	SEGMENT
allocs$ = 32
addr$ = 40
mcfg$ = 48
segment$ = 80
bus$ = 88
device$ = 96
function$ = 104
?pci_express_get_device@@YA_KGHHH@Z PROC		; pci_express_get_device

; 40   : uint64_t pci_express_get_device (uint16_t segment, int bus, int device, int function) {

$LN7:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 72					; 00000048H

; 41   : 	if (bus > 255)

	cmp	DWORD PTR bus$[rsp], 255		; 000000ffH
	jle	SHORT $LN4@pci_expres

; 42   : 		return 0;

	xor	eax, eax
	jmp	$LN5@pci_expres
$LN4@pci_expres:

; 43   : 	if (device > 31)

	cmp	DWORD PTR device$[rsp], 31
	jle	SHORT $LN3@pci_expres

; 44   : 		return 0;

	xor	eax, eax
	jmp	$LN5@pci_expres
$LN3@pci_expres:

; 45   : 	if (function > 7)

	cmp	DWORD PTR function$[rsp], 7
	jle	SHORT $LN2@pci_expres

; 46   : 		return 0;

	xor	eax, eax
	jmp	$LN5@pci_expres
$LN2@pci_expres:

; 47   : 
; 48   : 	uint64_t addr = 0;

	mov	QWORD PTR addr$[rsp], 0

; 49   : 	acpiMcfg *mcfg = acpi_get_mcfg();

	call	?acpi_get_mcfg@@YAPEAUacpiMcfg@@XZ	; acpi_get_mcfg
	mov	QWORD PTR mcfg$[rsp], rax

; 50   : 	acpiMcfgAlloc *allocs = mem_after<acpiMcfgAlloc*>(mcfg);

	mov	rcx, QWORD PTR mcfg$[rsp]
	call	??$mem_after@PEAUacpiMcfgAlloc@@UacpiMcfg@@@@YAPEAUacpiMcfgAlloc@@PEAUacpiMcfg@@@Z ; mem_after<acpiMcfgAlloc * __ptr64,acpiMcfg>
	mov	QWORD PTR allocs$[rsp], rax

; 51   : 	if (allocs->startBusNum <= bus && bus <= allocs->endBusNum) {

	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, BYTE PTR [rax+10]
	cmp	eax, DWORD PTR bus$[rsp]
	jg	SHORT $LN1@pci_expres
	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, BYTE PTR [rax+11]
	cmp	DWORD PTR bus$[rsp], eax
	jg	SHORT $LN1@pci_expres

; 52   : 		addr = allocs->baseAddress + ((bus - allocs->startBusNum) << 20) | (device << 15) | (function << 12);

	mov	rax, QWORD PTR allocs$[rsp]
	movzx	eax, BYTE PTR [rax+10]
	mov	ecx, DWORD PTR bus$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	shl	eax, 20
	cdqe
	mov	rcx, QWORD PTR allocs$[rsp]
	mov	rcx, QWORD PTR [rcx]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR device$[rsp]
	shl	ecx, 15
	movsxd	rcx, ecx
	or	rax, rcx
	mov	ecx, DWORD PTR function$[rsp]
	shl	ecx, 12
	movsxd	rcx, ecx
	or	rax, rcx
	mov	QWORD PTR addr$[rsp], rax

; 53   : 		return addr;

	mov	rax, QWORD PTR addr$[rsp]
	jmp	SHORT $LN5@pci_expres
$LN1@pci_expres:

; 54   : 	}
; 55   : 
; 56   : 	return 0xFFFFFFFF;

	mov	eax, -1					; ffffffffH
$LN5@pci_expres:

; 57   : }

	add	rsp, 72					; 00000048H
	ret	0
?pci_express_get_device@@YA_KGHHH@Z ENDP		; pci_express_get_device
_TEXT	ENDS
END
