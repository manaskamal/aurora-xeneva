; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG3501	DB	'dev', 00H
CONST	ENDS
PUBLIC	?sys_open_file@@YAHPEADPEAU_file_@@@Z		; sys_open_file
PUBLIC	?sys_read_file@@YAXHPEAEPEAU_file_@@@Z		; sys_read_file
PUBLIC	?sys_write_file@@YAXHPEAEPEAU_file_@@@Z		; sys_write_file
EXTRN	?strcmp@@YAHPEBD0@Z:PROC			; strcmp
EXTRN	?strchr@@YAPEADPEADH@Z:PROC			; strchr
EXTRN	?vfs_finddir@@YAPEAU_vfs_node_@@PEAD@Z:PROC	; vfs_finddir
EXTRN	?openfs@@YA?AU_vfs_node_@@PEAU1@PEAD@Z:PROC	; openfs
EXTRN	?readfs@@YAXPEAU_vfs_node_@@0PEAEI@Z:PROC	; readfs
EXTRN	?writefs@@YAXPEAU_vfs_node_@@0PEAEI@Z:PROC	; writefs
EXTRN	x64_cli:PROC
EXTRN	?get_current_thread@@YAPEAU_thread_@@XZ:PROC	; get_current_thread
pdata	SEGMENT
$pdata$?sys_open_file@@YAHPEADPEAU_file_@@@Z DD imagerel $LN12
	DD	imagerel $LN12+535
	DD	imagerel $unwind$?sys_open_file@@YAHPEADPEAU_file_@@@Z
$pdata$?sys_read_file@@YAXHPEAEPEAU_file_@@@Z DD imagerel $LN6
	DD	imagerel $LN6+286
	DD	imagerel $unwind$?sys_read_file@@YAXHPEAEPEAU_file_@@@Z
$pdata$?sys_write_file@@YAXHPEAEPEAU_file_@@@Z DD imagerel $LN6
	DD	imagerel $LN6+286
	DD	imagerel $unwind$?sys_write_file@@YAXHPEAEPEAU_file_@@@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?sys_open_file@@YAHPEADPEAU_file_@@@Z DD 041301H
	DD	0350113H
	DD	0600b700cH
$unwind$?sys_read_file@@YAXHPEAEPEAU_file_@@@Z DD 021501H
	DD	0150115H
$unwind$?sys_write_file@@YAXHPEAEPEAU_file_@@@Z DD 021501H
	DD	0150115H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\sysserv\sysfile.cpp
_TEXT	SEGMENT
node$ = 32
file$ = 48
fd$ = 176
buffer$ = 184
ufile$ = 192
?sys_write_file@@YAXHPEAEPEAU_file_@@@Z PROC		; sys_write_file

; 127  : void sys_write_file (int fd, unsigned char* buffer, FILE *ufile) {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 168				; 000000a8H

; 128  : 	x64_cli();

	call	x64_cli

; 129  : 
; 130  : 	vfs_node_t file;
; 131  : 	file.size = ufile->size;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR file$[rsp+32], eax

; 132  : 	file.eof = ufile->eof;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR file$[rsp+36], eax

; 133  : 	file.pos = ufile->pos;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR file$[rsp+40], eax

; 134  : 	file.current = ufile->start_cluster;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR file$[rsp+44], eax

; 135  : 	file.flags = ufile->flags;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	eax, DWORD PTR [rax+20]
	mov	DWORD PTR file$[rsp+48], eax

; 136  : 	file.status = ufile->status;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	eax, DWORD PTR [rax+24]
	mov	DWORD PTR file$[rsp+52], eax

; 137  : 	file.open = 0;

	mov	QWORD PTR file$[rsp+64], 0

; 138  : 	file.read = 0;

	mov	QWORD PTR file$[rsp+72], 0

; 139  : 	file.read_blk = 0;

	mov	QWORD PTR file$[rsp+88], 0

; 140  : 	file.write = 0;

	mov	QWORD PTR file$[rsp+80], 0

; 141  : 	file.ioquery  = 0;

	mov	QWORD PTR file$[rsp+96], 0

; 142  : 
; 143  : 	vfs_node_t *node = get_current_thread()->fd[fd];

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	movsxd	rcx, DWORD PTR fd$[rsp]
	mov	rax, QWORD PTR [rax+rcx*8+272]
	mov	QWORD PTR node$[rsp], rax

; 144  : 	if (node == NULL)

	cmp	QWORD PTR node$[rsp], 0
	jne	SHORT $LN3@sys_write_

; 145  : 		return;

	jmp	SHORT $LN4@sys_write_
$LN3@sys_write_:

; 146  : 
; 147  : 	if (ufile->flags)

	mov	rax, QWORD PTR ufile$[rsp]
	cmp	DWORD PTR [rax+20], 0
	je	SHORT $LN2@sys_write_

; 148  : 		writefs(node, &file,buffer,file.size);

	mov	r9d, DWORD PTR file$[rsp+32]
	mov	r8, QWORD PTR buffer$[rsp]
	lea	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR node$[rsp]
	call	?writefs@@YAXPEAU_vfs_node_@@0PEAEI@Z	; writefs

; 149  : 	else

	jmp	SHORT $LN1@sys_write_
$LN2@sys_write_:

; 150  : 		writefs(node, node, buffer,file.size);

	mov	r9d, DWORD PTR file$[rsp+32]
	mov	r8, QWORD PTR buffer$[rsp]
	mov	rdx, QWORD PTR node$[rsp]
	mov	rcx, QWORD PTR node$[rsp]
	call	?writefs@@YAXPEAU_vfs_node_@@0PEAEI@Z	; writefs
$LN1@sys_write_:
$LN4@sys_write_:

; 151  : }

	add	rsp, 168				; 000000a8H
	ret	0
?sys_write_file@@YAXHPEAEPEAU_file_@@@Z ENDP		; sys_write_file
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\sysserv\sysfile.cpp
_TEXT	SEGMENT
node$ = 32
file$ = 48
fd$ = 176
buffer$ = 184
ufile$ = 192
?sys_read_file@@YAXHPEAEPEAU_file_@@@Z PROC		; sys_read_file

; 95   : void sys_read_file (int fd, unsigned char* buffer, FILE *ufile) {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 168				; 000000a8H

; 96   : 	x64_cli ();

	call	x64_cli

; 97   : 	vfs_node_t file;
; 98   : 	file.size = ufile->size;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR file$[rsp+32], eax

; 99   : 	file.eof = ufile->eof;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR file$[rsp+36], eax

; 100  : 	file.pos = ufile->pos;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR file$[rsp+40], eax

; 101  : 	file.current = ufile->start_cluster;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR file$[rsp+44], eax

; 102  : 	file.flags = ufile->flags;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	eax, DWORD PTR [rax+20]
	mov	DWORD PTR file$[rsp+48], eax

; 103  : 	file.status = ufile->status;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	eax, DWORD PTR [rax+24]
	mov	DWORD PTR file$[rsp+52], eax

; 104  : 	file.open = 0;

	mov	QWORD PTR file$[rsp+64], 0

; 105  : 	file.read = 0;

	mov	QWORD PTR file$[rsp+72], 0

; 106  : 	file.read_blk = 0;

	mov	QWORD PTR file$[rsp+88], 0

; 107  : 	file.write = 0;

	mov	QWORD PTR file$[rsp+80], 0

; 108  : 	file.ioquery  = 0;

	mov	QWORD PTR file$[rsp+96], 0

; 109  : 
; 110  : 	vfs_node_t *node = get_current_thread()->fd[fd];

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	movsxd	rcx, DWORD PTR fd$[rsp]
	mov	rax, QWORD PTR [rax+rcx*8+272]
	mov	QWORD PTR node$[rsp], rax

; 111  : 	if (node == NULL)

	cmp	QWORD PTR node$[rsp], 0
	jne	SHORT $LN3@sys_read_f

; 112  : 		return;

	jmp	SHORT $LN4@sys_read_f
$LN3@sys_read_f:

; 113  : 
; 114  : 	if (ufile->flags > 0){

	mov	rax, QWORD PTR ufile$[rsp]
	cmp	DWORD PTR [rax+20], 0
	jbe	SHORT $LN2@sys_read_f

; 115  : 		readfs(node,&file,buffer,file.size);

	mov	r9d, DWORD PTR file$[rsp+32]
	mov	r8, QWORD PTR buffer$[rsp]
	lea	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR node$[rsp]
	call	?readfs@@YAXPEAU_vfs_node_@@0PEAEI@Z	; readfs

; 116  : 	}else {

	jmp	SHORT $LN1@sys_read_f
$LN2@sys_read_f:

; 117  : 		readfs(node, node, buffer, file.size);

	mov	r9d, DWORD PTR file$[rsp+32]
	mov	r8, QWORD PTR buffer$[rsp]
	mov	rdx, QWORD PTR node$[rsp]
	mov	rcx, QWORD PTR node$[rsp]
	call	?readfs@@YAXPEAU_vfs_node_@@0PEAEI@Z	; readfs
$LN1@sys_read_f:
$LN4@sys_read_f:

; 118  : 	}
; 119  : }

	add	rsp, 168				; 000000a8H
	ret	0
?sys_read_file@@YAXHPEAEPEAU_file_@@@Z ENDP		; sys_read_file
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\sysserv\sysfile.cpp
_TEXT	SEGMENT
i$ = 32
fd$ = 36
p$ = 40
node$ = 48
tv136 = 56
tv93 = 64
pathname$ = 72
file$1 = 96
$T2 = 208
$T3 = 312
filename$ = 448
ufile$ = 456
?sys_open_file@@YAHPEADPEAU_file_@@@Z PROC		; sys_open_file

; 47   : int sys_open_file (char* filename, FILE *ufile) {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 424				; 000001a8H

; 48   : 	x64_cli();

	call	x64_cli

; 49   : 	char* p = strchr (filename, '/');

	mov	edx, 47					; 0000002fH
	mov	rcx, QWORD PTR filename$[rsp]
	call	?strchr@@YAPEADPEADH@Z			; strchr
	mov	QWORD PTR p$[rsp], rax

; 50   : 	if (p)

	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN9@sys_open_f

; 51   : 		p++;

	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
$LN9@sys_open_f:

; 52   : 
; 53   : 
; 54   : 	char pathname[16];
; 55   : 	int i;
; 56   : 	for (i = 0; i < 16; i++) {

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN8@sys_open_f
$LN7@sys_open_f:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN8@sys_open_f:
	cmp	DWORD PTR i$[rsp], 16
	jge	SHORT $LN6@sys_open_f

; 57   : 		if ( p[i] == '/'  || p[i] == '\0')

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 47					; 0000002fH
	je	SHORT $LN4@sys_open_f
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@sys_open_f
$LN4@sys_open_f:

; 58   : 			break;

	jmp	SHORT $LN6@sys_open_f
$LN5@sys_open_f:

; 59   : 		pathname[i] = p[i];

	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR pathname$[rsp+rcx], al

; 60   : 	}

	jmp	SHORT $LN7@sys_open_f
$LN6@sys_open_f:

; 61   : 
; 62   : 	pathname[i] = 0;

	movsxd	rax, DWORD PTR i$[rsp]
	mov	BYTE PTR pathname$[rsp+rax], 0

; 63   : 
; 64   :     int fd = -1;

	mov	DWORD PTR fd$[rsp], -1

; 65   : 	vfs_node_t *node = vfs_finddir(filename);

	mov	rcx, QWORD PTR filename$[rsp]
	call	?vfs_finddir@@YAPEAU_vfs_node_@@PEAD@Z	; vfs_finddir
	mov	QWORD PTR node$[rsp], rax

; 66   : 	if (node) {

	cmp	QWORD PTR node$[rsp], 0
	je	SHORT $LN3@sys_open_f

; 67   : 		get_current_thread()->fd[get_current_thread()->fd_current] = node;

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	QWORD PTR tv93[rsp], rax
	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	movsxd	rax, DWORD PTR [rax+752]
	mov	rcx, QWORD PTR node$[rsp]
	mov	rdx, QWORD PTR tv93[rsp]
	mov	QWORD PTR [rdx+rax*8+272], rcx

; 68   : 		fd = get_current_thread()->fd_current;

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	eax, DWORD PTR [rax+752]
	mov	DWORD PTR fd$[rsp], eax

; 69   : 		get_current_thread()->fd_current++;

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	add	rax, 752				; 000002f0H
	mov	QWORD PTR tv136[rsp], rax
	mov	rax, QWORD PTR tv136[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR tv136[rsp]
	mov	DWORD PTR [rcx], eax
$LN3@sys_open_f:

; 70   : 	}
; 71   : 
; 72   : 	if (!(strcmp(pathname, "dev") == 0)) {

	lea	rdx, OFFSET FLAT:$SG3501
	lea	rcx, QWORD PTR pathname$[rsp]
	call	?strcmp@@YAHPEBD0@Z			; strcmp
	test	eax, eax
	je	$LN2@sys_open_f

; 73   : 		vfs_node_t file = openfs(node, filename);

	mov	r8, QWORD PTR filename$[rsp]
	mov	rdx, QWORD PTR node$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	?openfs@@YA?AU_vfs_node_@@PEAU1@PEAD@Z	; openfs
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 104				; 00000068H
	rep movsb
	lea	rax, QWORD PTR file$1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 104				; 00000068H
	rep movsb

; 74   : 		if (ufile) {

	cmp	QWORD PTR ufile$[rsp], 0
	je	SHORT $LN1@sys_open_f

; 75   : 			ufile->id = fd;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	ecx, DWORD PTR fd$[rsp]
	mov	DWORD PTR [rax], ecx

; 76   : 			ufile->size = file.size;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	ecx, DWORD PTR file$1[rsp+32]
	mov	DWORD PTR [rax+4], ecx

; 77   : 			ufile->eof = file.eof;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	ecx, DWORD PTR file$1[rsp+36]
	mov	DWORD PTR [rax+8], ecx

; 78   : 			ufile->pos = file.pos;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	ecx, DWORD PTR file$1[rsp+40]
	mov	DWORD PTR [rax+12], ecx

; 79   : 			ufile->start_cluster = file.current;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	ecx, DWORD PTR file$1[rsp+44]
	mov	DWORD PTR [rax+16], ecx

; 80   : 			ufile->flags = file.flags; 

	mov	rax, QWORD PTR ufile$[rsp]
	mov	ecx, DWORD PTR file$1[rsp+48]
	mov	DWORD PTR [rax+20], ecx

; 81   : 			ufile->status = file.status;

	mov	rax, QWORD PTR ufile$[rsp]
	mov	ecx, DWORD PTR file$1[rsp+52]
	mov	DWORD PTR [rax+24], ecx
$LN1@sys_open_f:
$LN2@sys_open_f:

; 82   : 		}
; 83   : 	}
; 84   : 	
; 85   : 	//! return the allocated fd number
; 86   : 	return fd;

	mov	eax, DWORD PTR fd$[rsp]

; 87   : }

	add	rsp, 424				; 000001a8H
	pop	rdi
	pop	rsi
	ret	0
?sys_open_file@@YAHPEADPEAU_file_@@@Z ENDP		; sys_open_file
_TEXT	ENDS
END
