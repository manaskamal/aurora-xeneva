; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?fat32_to_dos_file_name@@YAXPEBDPEADI@Z		; fat32_to_dos_file_name
EXTRN	?strlen@@YA_KPEBD@Z:PROC			; strlen
EXTRN	?memset@@YAXPEAXEI@Z:PROC			; memset
pdata	SEGMENT
$pdata$?fat32_to_dos_file_name@@YAXPEBDPEADI@Z DD imagerel $LN23
	DD	imagerel $LN23+511
	DD	imagerel $unwind$?fat32_to_dos_file_name@@YAXPEBDPEADI@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?fat32_to_dos_file_name@@YAXPEBDPEADI@Z DD 011301H
	DD	08213H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\fs\fat\fat_util.cpp
_TEXT	SEGMENT
i$ = 32
k$1 = 36
tv132 = 40
tv179 = 44
tv71 = 48
filename$ = 80
fname$ = 88
fname_length$ = 96
?fat32_to_dos_file_name@@YAXPEBDPEADI@Z PROC		; fat32_to_dos_file_name

; 47   : {

$LN23:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 48   : 	unsigned int i=0;

	mov	DWORD PTR i$[rsp], 0

; 49   : 
; 50   : 	if (fname_length > 11)

	cmp	DWORD PTR fname_length$[rsp], 11
	jbe	SHORT $LN16@fat32_to_d

; 51   : 		return;

	jmp	$LN17@fat32_to_d
$LN16@fat32_to_d:

; 52   : 
; 53   : 	if (!fname || !filename)

	cmp	QWORD PTR fname$[rsp], 0
	je	SHORT $LN14@fat32_to_d
	cmp	QWORD PTR filename$[rsp], 0
	jne	SHORT $LN15@fat32_to_d
$LN14@fat32_to_d:

; 54   : 		return;

	jmp	$LN17@fat32_to_d
$LN15@fat32_to_d:

; 55   : 
; 56   : 	memset (fname, ' ', fname_length);

	mov	r8d, DWORD PTR fname_length$[rsp]
	mov	dl, 32					; 00000020H
	mov	rcx, QWORD PTR fname$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 57   : 
; 58   : 	for (i=0; i < strlen (filename)-1 && i < fname_length; i++)

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@fat32_to_d
$LN12@fat32_to_d:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN13@fat32_to_d:
	mov	eax, DWORD PTR i$[rsp]
	mov	QWORD PTR tv71[rsp], rax
	mov	rcx, QWORD PTR filename$[rsp]
	call	?strlen@@YA_KPEBD@Z			; strlen
	dec	rax
	mov	rcx, QWORD PTR tv71[rsp]
	cmp	rcx, rax
	jae	$LN11@fat32_to_d
	mov	eax, DWORD PTR fname_length$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN11@fat32_to_d

; 59   : 	{
; 60   : 		if (filename[i] == '.' || i==8)

	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR filename$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	je	SHORT $LN9@fat32_to_d
	cmp	DWORD PTR i$[rsp], 8
	jne	SHORT $LN10@fat32_to_d
$LN9@fat32_to_d:

; 61   : 			break;

	jmp	SHORT $LN11@fat32_to_d
$LN10@fat32_to_d:

; 62   : 
; 63   : 		fname[i] = toupper (filename[i]);

	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR filename$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN19@fat32_to_d
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR filename$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 122				; 0000007aH
	jg	SHORT $LN19@fat32_to_d
	mov	DWORD PTR tv132[rsp], 1
	jmp	SHORT $LN20@fat32_to_d
$LN19@fat32_to_d:
	mov	DWORD PTR tv132[rsp], 0
$LN20@fat32_to_d:
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR filename$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR tv132[rsp]
	imul	ecx, 32					; 00000020H
	sub	eax, ecx
	mov	ecx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR fname$[rsp]
	mov	BYTE PTR [rdx+rcx], al

; 64   : 	}

	jmp	$LN12@fat32_to_d
$LN11@fat32_to_d:

; 65   : 
; 66   : 	if (filename[i] =='.')

	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR filename$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN8@fat32_to_d

; 67   : 	{
; 68   : 		for (int k=0; k < 3; k++)

	mov	DWORD PTR k$1[rsp], 0
	jmp	SHORT $LN7@fat32_to_d
$LN6@fat32_to_d:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN7@fat32_to_d:
	cmp	DWORD PTR k$1[rsp], 3
	jge	SHORT $LN5@fat32_to_d

; 69   : 		{
; 70   : 			 ++i;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 71   : 			 if (filename[i])

	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR filename$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN4@fat32_to_d

; 72   : 				 fname[8+k] = filename[i];

	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR k$1[rsp]
	add	ecx, 8
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR fname$[rsp]
	mov	r8, QWORD PTR filename$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN4@fat32_to_d:

; 73   : 		}

	jmp	SHORT $LN6@fat32_to_d
$LN5@fat32_to_d:
$LN8@fat32_to_d:

; 74   : 	}
; 75   : 
; 76   : 	for (i = 0; i < 3; i++)

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN3@fat32_to_d
$LN2@fat32_to_d:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN3@fat32_to_d:
	cmp	DWORD PTR i$[rsp], 3
	jae	SHORT $LN1@fat32_to_d

; 77   : 		fname[8+i] = toupper (fname[8+i]);

	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	mov	eax, eax
	mov	rcx, QWORD PTR fname$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN21@fat32_to_d
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	mov	eax, eax
	mov	rcx, QWORD PTR fname$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 122				; 0000007aH
	jg	SHORT $LN21@fat32_to_d
	mov	DWORD PTR tv179[rsp], 1
	jmp	SHORT $LN22@fat32_to_d
$LN21@fat32_to_d:
	mov	DWORD PTR tv179[rsp], 0
$LN22@fat32_to_d:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	mov	eax, eax
	mov	rcx, QWORD PTR fname$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR tv179[rsp]
	imul	ecx, 32					; 00000020H
	sub	eax, ecx
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 8
	mov	ecx, ecx
	mov	rdx, QWORD PTR fname$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN2@fat32_to_d
$LN1@fat32_to_d:
$LN17@fat32_to_d:

; 78   : }

	add	rsp, 72					; 00000048H
	ret	0
?fat32_to_dos_file_name@@YAXPEBDPEADI@Z ENDP		; fat32_to_dos_file_name
_TEXT	ENDS
END
