; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	strcmp
PUBLIC	strcpy
PUBLIC	strlen
PUBLIC	strncmp
PUBLIC	strncpy
PUBLIC	strchr
PUBLIC	memset
PUBLIC	memcpy
PUBLIC	memcmp
EXTRN	_fastcpy:PROC
pdata	SEGMENT
$pdata$strcmp DD imagerel $LN9
	DD	imagerel $LN9+145
	DD	imagerel $unwind$strcmp
$pdata$strcpy DD imagerel $LN7
	DD	imagerel $LN7+114
	DD	imagerel $unwind$strcpy
$pdata$strlen DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$strlen
$pdata$strncmp DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$strncmp
$pdata$strncpy DD imagerel $LN11
	DD	imagerel $LN11+171
	DD	imagerel $unwind$strncpy
$pdata$strchr DD imagerel $LN7
	DD	imagerel $LN7+71
	DD	imagerel $unwind$strchr
$pdata$memset DD imagerel $LN5
	DD	imagerel $LN5+83
	DD	imagerel $unwind$memset
$pdata$memcpy DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$memcpy
$pdata$memcmp DD imagerel $LN9
	DD	imagerel $LN9+156
	DD	imagerel $unwind$memcmp
pdata	ENDS
xdata	SEGMENT
$unwind$strcmp DD 010e01H
	DD	0220eH
$unwind$strcpy DD 010e01H
	DD	0220eH
$unwind$strlen DD 010901H
	DD	02209H
$unwind$strncmp DD 011301H
	DD	02213H
$unwind$strncpy DD 011301H
	DD	02213H
$unwind$strchr DD 010d01H
	DD	0220dH
$unwind$memset DD 011201H
	DD	02212H
$unwind$memcpy DD 011301H
	DD	04213H
$unwind$memcmp DD 011301H
	DD	02213H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\string.cpp
_TEXT	SEGMENT
count$ = 0
first$ = 32
second$ = 40
length$ = 48
memcmp	PROC

; 30   : {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 31   : 
; 32   : 	size_t count;
; 33   : 	for (count = 0; count < length; count++)

	mov	QWORD PTR count$[rsp], 0
	jmp	SHORT $LN6@memcmp
$LN5@memcmp:
	mov	rax, QWORD PTR count$[rsp]
	inc	rax
	mov	QWORD PTR count$[rsp], rax
$LN6@memcmp:
	mov	rax, QWORD PTR length$[rsp]
	cmp	QWORD PTR count$[rsp], rax
	jae	SHORT $LN4@memcmp

; 34   : 	{
; 35   : 		if (((unsigned char*)first)[count] != ((unsigned char *) second)[count])

	mov	rax, QWORD PTR count$[rsp]
	mov	rcx, QWORD PTR first$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR count$[rsp]
	mov	rdx, QWORD PTR second$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	movzx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	je	SHORT $LN3@memcmp

; 36   : 		{
; 37   : 			if (((unsigned char*)first)[count] < ((unsigned char *)second)[count])

	mov	rax, QWORD PTR count$[rsp]
	mov	rcx, QWORD PTR first$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR count$[rsp]
	mov	rdx, QWORD PTR second$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	movzx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	jge	SHORT $LN2@memcmp

; 38   : 			{
; 39   : 				return (-1);

	mov	eax, -1
	jmp	SHORT $LN7@memcmp

; 40   : 			}
; 41   : 			else

	jmp	SHORT $LN1@memcmp
$LN2@memcmp:

; 42   : 			{
; 43   : 				return (1);

	mov	eax, 1
	jmp	SHORT $LN7@memcmp
$LN1@memcmp:
$LN3@memcmp:

; 44   : 			}
; 45   : 		}
; 46   : 	}

	jmp	SHORT $LN5@memcmp
$LN4@memcmp:

; 47   : 
; 48   : 	return (0); //return successful code

	xor	eax, eax
$LN7@memcmp:

; 49   : }

	add	rsp, 24
	ret	0
memcmp	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\string.cpp
_TEXT	SEGMENT
dest$ = 48
src$ = 56
count$ = 64
memcpy	PROC

; 52   : {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 53   : 
; 54   :     /*const char *sp = (const char *)src;
; 55   :     char *dp = (char *)dest;
; 56   :     for(; count != 0; count--) *dp++ = *sp++;*/
; 57   : 	_fastcpy(dest,src,count);

	mov	r8, QWORD PTR count$[rsp]
	mov	rdx, QWORD PTR src$[rsp]
	mov	rcx, QWORD PTR dest$[rsp]
	call	_fastcpy

; 58   :     //return dest;
; 59   : }

	add	rsp, 40					; 00000028H
	ret	0
memcpy	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\string.cpp
_TEXT	SEGMENT
tv66 = 0
t$ = 8
targ$ = 32
val$ = 40
len$ = 48
memset	PROC

; 23   : void memset(void *targ, uint8_t val, uint32_t len){

$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 24   : 	uint8_t *t = (uint8_t*) targ;

	mov	rax, QWORD PTR targ$[rsp]
	mov	QWORD PTR t$[rsp], rax
$LN2@memset:

; 25   : 	while (len--)

	mov	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
	cmp	DWORD PTR tv66[rsp], 0
	je	SHORT $LN1@memset

; 26   : 		*t++ = val;

	mov	rax, QWORD PTR t$[rsp]
	movzx	ecx, BYTE PTR val$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR t$[rsp]
	inc	rax
	mov	QWORD PTR t$[rsp], rax
	jmp	SHORT $LN2@memset
$LN1@memset:

; 27   : }

	add	rsp, 24
	ret	0
memset	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\string.cpp
_TEXT	SEGMENT
tv69 = 0
str$ = 32
character$ = 40
strchr	PROC

; 135  : char* strchr (char* str, int character) {

$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
$LN4@strchr:

; 136  : 
; 137  : 	do {
; 138  : 		if (*str == character)

	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, DWORD PTR character$[rsp]
	jne	SHORT $LN1@strchr

; 139  : 			return (char*)str;

	mov	rax, QWORD PTR str$[rsp]
	jmp	SHORT $LN5@strchr
$LN1@strchr:

; 140  : 	}
; 141  : 	while (*str++);

	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv69[rsp], eax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
	cmp	DWORD PTR tv69[rsp], 0
	jne	SHORT $LN4@strchr

; 142  : 
; 143  : 	return 0;

	xor	eax, eax
$LN5@strchr:

; 144  : }

	add	rsp, 24
	ret	0
strchr	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\string.cpp
_TEXT	SEGMENT
count$ = 0
destString$ = 32
sourceString$ = 40
maxLength$ = 48
strncpy	PROC

; 107  : {

$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 108  : 	unsigned count;
; 109  : 
; 110  : 	if ((destString == (char*) NULL) || (sourceString == (char*) NULL))

	cmp	QWORD PTR destString$[rsp], 0
	je	SHORT $LN7@strncpy
	cmp	QWORD PTR sourceString$[rsp], 0
	jne	SHORT $LN8@strncpy
$LN7@strncpy:

; 111  : 	{
; 112  : 		return (destString = NULL);

	mov	QWORD PTR destString$[rsp], 0
	mov	rax, QWORD PTR destString$[rsp]
	jmp	SHORT $LN9@strncpy
$LN8@strncpy:

; 113  : 	}
; 114  : 
; 115  : 	if (maxLength > MAX_STRING_LENGTH)

	cmp	QWORD PTR maxLength$[rsp], 25
	jbe	SHORT $LN6@strncpy

; 116  : 		maxLength = MAX_STRING_LENGTH;

	mov	QWORD PTR maxLength$[rsp], 25
$LN6@strncpy:

; 117  : 
; 118  : 	for (count = 0; count < maxLength; count++ )

	mov	DWORD PTR count$[rsp], 0
	jmp	SHORT $LN5@strncpy
$LN4@strncpy:
	mov	eax, DWORD PTR count$[rsp]
	inc	eax
	mov	DWORD PTR count$[rsp], eax
$LN5@strncpy:
	mov	eax, DWORD PTR count$[rsp]
	cmp	rax, QWORD PTR maxLength$[rsp]
	jae	SHORT $LN3@strncpy

; 119  : 	{
; 120  : 		destString[count] = sourceString[count];

	mov	eax, DWORD PTR count$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	mov	rdx, QWORD PTR destString$[rsp]
	mov	r8, QWORD PTR sourceString$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al

; 121  : 		 
; 122  : 		if (sourceString[count] == '\0')

	mov	eax, DWORD PTR count$[rsp]
	mov	rcx, QWORD PTR sourceString$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@strncpy

; 123  : 			break;

	jmp	SHORT $LN3@strncpy
$LN2@strncpy:

; 124  : 	}

	jmp	SHORT $LN4@strncpy
$LN3@strncpy:

; 125  : 
; 126  : 	if (count >= MAX_STRING_LENGTH)

	cmp	DWORD PTR count$[rsp], 25
	jb	SHORT $LN1@strncpy

; 127  : 	{
; 128  : 		return (destString = NULL);

	mov	QWORD PTR destString$[rsp], 0
	mov	rax, QWORD PTR destString$[rsp]
	jmp	SHORT $LN9@strncpy
$LN1@strncpy:

; 129  : 	}
; 130  : 
; 131  : 	return (destString);

	mov	rax, QWORD PTR destString$[rsp]
$LN9@strncpy:

; 132  : }

	add	rsp, 24
	ret	0
strncpy	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\string.cpp
_TEXT	SEGMENT
tv78 = 0
s1$ = 32
s2$ = 40
n$ = 48
strncmp	PROC

; 98   : {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
$LN2@strncmp:

; 99   : 	while (n > 0 && *s1 != '\0' && *s1 == *s2) {

	cmp	QWORD PTR n$[rsp], 0
	jbe	SHORT $LN1@strncmp
	mov	rax, QWORD PTR s1$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN1@strncmp
	mov	rax, QWORD PTR s1$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR s2$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	jne	SHORT $LN1@strncmp

; 100  : 		n --, s1 ++, s2 ++;

	mov	rax, QWORD PTR n$[rsp]
	dec	rax
	mov	QWORD PTR n$[rsp], rax
	mov	rax, QWORD PTR s1$[rsp]
	inc	rax
	mov	QWORD PTR s1$[rsp], rax
	mov	rax, QWORD PTR s2$[rsp]
	inc	rax
	mov	QWORD PTR s2$[rsp], rax

; 101  : 	}

	jmp	SHORT $LN2@strncmp
$LN1@strncmp:

; 102  : 
; 103  : 	return (n==0)? 0: (size_t)((unsigned char)*s1 - (unsigned char)*s2);

	cmp	QWORD PTR n$[rsp], 0
	jne	SHORT $LN5@strncmp
	mov	QWORD PTR tv78[rsp], 0
	jmp	SHORT $LN6@strncmp
$LN5@strncmp:
	mov	rax, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR s2$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sub	eax, ecx
	cdqe
	mov	QWORD PTR tv78[rsp], rax
$LN6@strncmp:
	mov	eax, DWORD PTR tv78[rsp]

; 104  : }

	add	rsp, 24
	ret	0
strncmp	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\string.cpp
_TEXT	SEGMENT
tv69 = 0
len$ = 8
str$ = 32
strlen	PROC

; 90   : {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 91   : 	size_t len=0;

	mov	QWORD PTR len$[rsp], 0
$LN2@strlen:

; 92   : 	while (str[len++]);

	mov	rax, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv69[rsp], eax
	mov	rax, QWORD PTR len$[rsp]
	inc	rax
	mov	QWORD PTR len$[rsp], rax
	cmp	DWORD PTR tv69[rsp], 0
	je	SHORT $LN1@strlen
	jmp	SHORT $LN2@strlen
$LN1@strlen:

; 93   : 	return len;

	mov	rax, QWORD PTR len$[rsp]

; 94   : }

	add	rsp, 24
	ret	0
strlen	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\string.cpp
_TEXT	SEGMENT
tv70 = 0
s1_p$ = 8
s1$ = 32
s2$ = 40
strcpy	PROC

; 80   : {

$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 81   : 	if (s1 == NULL || s2 == NULL)

	cmp	QWORD PTR s1$[rsp], 0
	je	SHORT $LN3@strcpy
	cmp	QWORD PTR s2$[rsp], 0
	jne	SHORT $LN4@strcpy
$LN3@strcpy:

; 82   : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN5@strcpy
$LN4@strcpy:

; 83   : 
; 84   : 	char *s1_p = s1;

	mov	rax, QWORD PTR s1$[rsp]
	mov	QWORD PTR s1_p$[rsp], rax
$LN2@strcpy:

; 85   : 	while (*s1++ = *s2++);

	mov	rax, QWORD PTR s1$[rsp]
	mov	rcx, QWORD PTR s2$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s1$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv70[rsp], eax
	mov	rax, QWORD PTR s1$[rsp]
	inc	rax
	mov	QWORD PTR s1$[rsp], rax
	mov	rax, QWORD PTR s2$[rsp]
	inc	rax
	mov	QWORD PTR s2$[rsp], rax
	cmp	DWORD PTR tv70[rsp], 0
	je	SHORT $LN1@strcpy
	jmp	SHORT $LN2@strcpy
$LN1@strcpy:

; 86   : 	return s1_p;

	mov	rax, QWORD PTR s1_p$[rsp]
$LN5@strcpy:

; 87   : }

	add	rsp, 24
	ret	0
strcpy	ENDP
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\string.cpp
_TEXT	SEGMENT
res$ = 0
str1$ = 32
str2$ = 40
strcmp	PROC

; 63   : {

$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 64   : 	if (str1 == NULL || str2 == NULL)

	cmp	QWORD PTR str1$[rsp], 0
	je	SHORT $LN5@strcmp
	cmp	QWORD PTR str2$[rsp], 0
	jne	SHORT $LN6@strcmp
$LN5@strcmp:

; 65   : 		return -1;

	mov	eax, -1
	jmp	SHORT $LN7@strcmp
$LN6@strcmp:

; 66   : 
; 67   : 	int res=0;

	mov	DWORD PTR res$[rsp], 0
$LN4@strcmp:

; 68   : 	while (!(res = *(unsigned char*)str1 - *(unsigned char*)str2) && *str2)

	mov	rax, QWORD PTR str1$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR str2$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sub	eax, ecx
	mov	DWORD PTR res$[rsp], eax
	cmp	DWORD PTR res$[rsp], 0
	jne	SHORT $LN3@strcmp
	mov	rax, QWORD PTR str2$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@strcmp

; 69   : 		++str1, ++str2;

	mov	rax, QWORD PTR str1$[rsp]
	inc	rax
	mov	QWORD PTR str1$[rsp], rax
	mov	rax, QWORD PTR str2$[rsp]
	inc	rax
	mov	QWORD PTR str2$[rsp], rax
	jmp	SHORT $LN4@strcmp
$LN3@strcmp:

; 70   : 
; 71   : 	if (res < 0)

	cmp	DWORD PTR res$[rsp], 0
	jge	SHORT $LN2@strcmp

; 72   : 		res = -1;

	mov	DWORD PTR res$[rsp], -1
$LN2@strcmp:

; 73   : 	if (res > 0)

	cmp	DWORD PTR res$[rsp], 0
	jle	SHORT $LN1@strcmp

; 74   : 		res = 1;

	mov	DWORD PTR res$[rsp], 1
$LN1@strcmp:

; 75   : 
; 76   : 	return res;

	mov	eax, DWORD PTR res$[rsp]
$LN7@strcmp:

; 77   : }

	add	rsp, 24
	ret	0
strcmp	ENDP
_TEXT	ENDS
END
