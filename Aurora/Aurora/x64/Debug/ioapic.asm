; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ioapic_init@@YAXPEAX@Z				; ioapic_init
PUBLIC	?ioapic_register_irq@@YAX_KP6AX0PEAX@ZE@Z	; ioapic_register_irq
PUBLIC	?ioapic_mask_irq@@YAXE_N@Z			; ioapic_mask_irq
PUBLIC	?ioapic_redirect@@YAXEIGE@Z			; ioapic_redirect
PUBLIC	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z		; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
EXTRN	?read_apic_register@@YA_KG@Z:PROC		; read_apic_register
EXTRN	?setvect@@YAX_KP6AX0PEAX@Z@Z:PROC		; setvect
pdata	SEGMENT
$pdata$?ioapic_init@@YAXPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+134
	DD	imagerel $unwind$?ioapic_init@@YAXPEAX@Z
$pdata$?ioapic_register_irq@@YAX_KP6AX0PEAX@ZE@Z DD imagerel $LN3
	DD	imagerel $LN3+222
	DD	imagerel $unwind$?ioapic_register_irq@@YAX_KP6AX0PEAX@ZE@Z
$pdata$?ioapic_mask_irq@@YAXE_N@Z DD imagerel $LN5
	DD	imagerel $LN5+139
	DD	imagerel $unwind$?ioapic_mask_irq@@YAXE_N@Z
$pdata$?ioapic_redirect@@YAXEIGE@Z DD imagerel $LN5
	DD	imagerel $LN5+206
	DD	imagerel $unwind$?ioapic_redirect@@YAXEIGE@Z
$pdata$?read_ioapic_register@@YAIPEAXE@Z DD imagerel ?read_ioapic_register@@YAIPEAXE@Z
	DD	imagerel ?read_ioapic_register@@YAIPEAXE@Z+67
	DD	imagerel $unwind$?read_ioapic_register@@YAIPEAXE@Z
$pdata$?write_ioapic_register@@YAXPEAXEI@Z DD imagerel ?write_ioapic_register@@YAXPEAXEI@Z
	DD	imagerel ?write_ioapic_register@@YAXPEAXEI@Z+76
	DD	imagerel $unwind$?write_ioapic_register@@YAXPEAXEI@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?ioapic_init@@YAXPEAX@Z DD 010901H
	DD	08209H
$unwind$?ioapic_register_irq@@YAX_KP6AX0PEAX@ZE@Z DD 011301H
	DD	06213H
$unwind$?ioapic_mask_irq@@YAXE_N@Z DD 010c01H
	DD	0620cH
$unwind$?ioapic_redirect@@YAXEIGE@Z DD 011701H
	DD	08217H
$unwind$?read_ioapic_register@@YAIPEAXE@Z DD 010d01H
	DD	0620dH
$unwind$?write_ioapic_register@@YAXPEAXEI@Z DD 011201H
	DD	06212H
xdata	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\ioapic.cpp
_TEXT	SEGMENT
ioregsel$ = 32
ioregwin$ = 40
apic_base$ = 64
offset$ = 72
val$ = 80
?write_ioapic_register@@YAXPEAXEI@Z PROC		; write_ioapic_register

; 26   : {

	mov	DWORD PTR [rsp+24], r8d
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 27   : 	volatile uint32_t* ioregsel = reinterpret_cast<volatile uint32_t*>(apic_base);

	mov	rax, QWORD PTR apic_base$[rsp]
	mov	QWORD PTR ioregsel$[rsp], rax

; 28   : 	volatile uint32_t* ioregwin = raw_offset<volatile uint32_t*>(apic_base, 0x10);

	mov	edx, 16
	mov	rcx, QWORD PTR apic_base$[rsp]
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR ioregwin$[rsp], rax

; 29   : 	*ioregsel = offset;

	movzx	eax, BYTE PTR offset$[rsp]
	mov	rcx, QWORD PTR ioregsel$[rsp]
	mov	DWORD PTR [rcx], eax

; 30   : 	*ioregwin = val;

	mov	rax, QWORD PTR ioregwin$[rsp]
	mov	ecx, DWORD PTR val$[rsp]
	mov	DWORD PTR [rax], ecx

; 31   : }

	add	rsp, 56					; 00000038H
	ret	0
?write_ioapic_register@@YAXPEAXEI@Z ENDP		; write_ioapic_register
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z PROC		; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>, COMDAT

; 182  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 183  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 184  : 	}

	ret	0
??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z ENDP		; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\ioapic.cpp
_TEXT	SEGMENT
ioregsel$ = 32
ioregwin$ = 40
apic_base$ = 64
offset$ = 72
?read_ioapic_register@@YAIPEAXE@Z PROC			; read_ioapic_register

; 16   : {

	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 17   : 	volatile uint32_t* ioregsel = reinterpret_cast<volatile uint32_t*>(apic_base);

	mov	rax, QWORD PTR apic_base$[rsp]
	mov	QWORD PTR ioregsel$[rsp], rax

; 18   : 	volatile uint32_t* ioregwin = raw_offset<volatile uint32_t*>(apic_base, 0x10);

	mov	edx, 16
	mov	rcx, QWORD PTR apic_base$[rsp]
	call	??$raw_offset@PECIPEAX@@YAPECIPEAXH@Z	; raw_offset<unsigned int volatile * __ptr64,void * __ptr64>
	mov	QWORD PTR ioregwin$[rsp], rax

; 19   : 
; 20   : 	*ioregsel = offset;

	movzx	eax, BYTE PTR offset$[rsp]
	mov	rcx, QWORD PTR ioregsel$[rsp]
	mov	DWORD PTR [rcx], eax

; 21   : 	return *ioregwin;

	mov	rax, QWORD PTR ioregwin$[rsp]
	mov	eax, DWORD PTR [rax]

; 22   : }

	add	rsp, 56					; 00000038H
	ret	0
?read_ioapic_register@@YAIPEAXE@Z ENDP			; read_ioapic_register
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\ioapic.cpp
_TEXT	SEGMENT
ioredtbl$ = 32
ioapic_base$ = 36
redirection$ = 40
tv90 = 48
irq$ = 80
gsi$ = 88
flags$ = 96
apic$ = 104
?ioapic_redirect@@YAXEIGE@Z PROC			; ioapic_redirect

; 66   : void ioapic_redirect (uint8_t irq, uint32_t gsi, uint16_t flags, uint8_t apic) {

$LN5:
	mov	BYTE PTR [rsp+32], r9b
	mov	WORD PTR [rsp+24], r8w
	mov	DWORD PTR [rsp+16], edx
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 72					; 00000048H

; 67   : 	uint32_t ioapic_base = 0xfec00000;

	mov	DWORD PTR ioapic_base$[rsp], -20971520	; fec00000H

; 68   : 	uint64_t redirection = irq + 32;

	movzx	eax, BYTE PTR irq$[rsp]
	add	eax, 32					; 00000020H
	cdqe
	mov	QWORD PTR redirection$[rsp], rax

; 69   : 	if (flags & 2) {

	movzx	eax, WORD PTR flags$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN2@ioapic_red

; 70   : 		redirection |= 1 << 13;

	mov	rax, QWORD PTR redirection$[rsp]
	bts	rax, 13
	mov	QWORD PTR redirection$[rsp], rax
$LN2@ioapic_red:

; 71   : 	}
; 72   : 
; 73   : 
; 74   : 	if (flags & 8) {

	movzx	eax, WORD PTR flags$[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN1@ioapic_red

; 75   : 		redirection |= 1 << 15;

	mov	rax, QWORD PTR redirection$[rsp]
	bts	rax, 15
	mov	QWORD PTR redirection$[rsp], rax
$LN1@ioapic_red:

; 76   : 	}
; 77   : 
; 78   : 	redirection |= ((uint64_t)apic) << 56;

	movzx	eax, BYTE PTR apic$[rsp]
	shl	rax, 56					; 00000038H
	mov	rcx, QWORD PTR redirection$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR redirection$[rsp], rax

; 79   : 	
; 80   : 	uint32_t ioredtbl = (gsi - 0) * 2 + 16;

	mov	eax, DWORD PTR gsi$[rsp]
	lea	eax, DWORD PTR [rax+rax+16]
	mov	DWORD PTR ioredtbl$[rsp], eax

; 81   : 
; 82   : 	write_ioapic_register ((void*)ioapic_base,ioredtbl + 0, (uint32_t)(redirection));

	mov	eax, DWORD PTR ioapic_base$[rsp]
	mov	r8d, DWORD PTR redirection$[rsp]
	movzx	edx, BYTE PTR ioredtbl$[rsp]
	mov	ecx, eax
	call	?write_ioapic_register@@YAXPEAXEI@Z	; write_ioapic_register

; 83   : 	write_ioapic_register ((void*)ioapic_base,ioredtbl + 1, (uint32_t)(redirection >> 32));

	mov	rax, QWORD PTR redirection$[rsp]
	shr	rax, 32					; 00000020H
	mov	ecx, DWORD PTR ioredtbl$[rsp]
	inc	ecx
	mov	edx, DWORD PTR ioapic_base$[rsp]
	mov	QWORD PTR tv90[rsp], rdx
	mov	r8d, eax
	movzx	edx, cl
	mov	rax, QWORD PTR tv90[rsp]
	mov	rcx, rax
	call	?write_ioapic_register@@YAXPEAXEI@Z	; write_ioapic_register

; 84   : }

	add	rsp, 72					; 00000048H
	ret	0
?ioapic_redirect@@YAXEIGE@Z ENDP			; ioapic_redirect
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\ioapic.cpp
_TEXT	SEGMENT
low$ = 32
reg$ = 36
irq$ = 64
value$ = 72
?ioapic_mask_irq@@YAXE_N@Z PROC				; ioapic_mask_irq

; 86   : void ioapic_mask_irq (uint8_t irq, bool value){

$LN5:
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 56					; 00000038H

; 87   : 	uint32_t reg = IOAPIC_REG_RED_TBL_BASE + irq* 2;

	movzx	eax, BYTE PTR irq$[rsp]
	lea	eax, DWORD PTR [rax+rax+16]
	mov	DWORD PTR reg$[rsp], eax

; 88   : 	write_ioapic_register((void*)0xfec00000, reg + 1, read_apic_register(0x02) << 24);

	mov	cx, 2
	call	?read_apic_register@@YA_KG@Z		; read_apic_register
	shl	rax, 24
	mov	ecx, DWORD PTR reg$[rsp]
	inc	ecx
	mov	r8d, eax
	movzx	edx, cl
	mov	ecx, -20971520				; fffffffffec00000H
	call	?write_ioapic_register@@YAXPEAXEI@Z	; write_ioapic_register

; 89   : 	uint32_t low = read_ioapic_register ((void*)0xfec00000,reg);

	movzx	edx, BYTE PTR reg$[rsp]
	mov	ecx, -20971520				; fffffffffec00000H
	call	?read_ioapic_register@@YAIPEAXE@Z	; read_ioapic_register
	mov	DWORD PTR low$[rsp], eax

; 90   : 	//!unmask the irq
; 91   : 	if (value)

	movzx	eax, BYTE PTR value$[rsp]
	test	eax, eax
	je	SHORT $LN2@ioapic_mas

; 92   : 		low |= (1<<16);  //mask

	mov	eax, DWORD PTR low$[rsp]
	bts	eax, 16
	mov	DWORD PTR low$[rsp], eax

; 93   : 	else

	jmp	SHORT $LN1@ioapic_mas
$LN2@ioapic_mas:

; 94   : 		low &= ~(1<<16); //unmask

	mov	eax, DWORD PTR low$[rsp]
	btr	eax, 16
	mov	DWORD PTR low$[rsp], eax
$LN1@ioapic_mas:

; 95   : 
; 96   : 	write_ioapic_register((void*)0xfec00000, reg, low);   //vector + 32

	mov	r8d, DWORD PTR low$[rsp]
	movzx	edx, BYTE PTR reg$[rsp]
	mov	ecx, -20971520				; fffffffffec00000H
	call	?write_ioapic_register@@YAXPEAXEI@Z	; write_ioapic_register

; 97   : }

	add	rsp, 56					; 00000038H
	ret	0
?ioapic_mask_irq@@YAXE_N@Z ENDP				; ioapic_mask_irq
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\ioapic.cpp
_TEXT	SEGMENT
low$ = 32
reg$ = 36
vector$ = 64
fn$ = 72
irq$ = 80
?ioapic_register_irq@@YAX_KP6AX0PEAX@ZE@Z PROC		; ioapic_register_irq

; 45   : {

$LN3:
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 46   : 	uint32_t reg = IOAPIC_REG_RED_TBL_BASE + irq* 2;

	movzx	eax, BYTE PTR irq$[rsp]
	lea	eax, DWORD PTR [rax+rax+16]
	mov	DWORD PTR reg$[rsp], eax

; 47   : 	write_ioapic_register((void*)0xfec00000, reg + 1, read_apic_register(0x02) << 24);

	mov	cx, 2
	call	?read_apic_register@@YA_KG@Z		; read_apic_register
	shl	rax, 24
	mov	ecx, DWORD PTR reg$[rsp]
	inc	ecx
	mov	r8d, eax
	movzx	edx, cl
	mov	ecx, -20971520				; fffffffffec00000H
	call	?write_ioapic_register@@YAXPEAXEI@Z	; write_ioapic_register

; 48   : 	uint32_t low = read_ioapic_register ((void*)0xfec00000,reg);

	movzx	edx, BYTE PTR reg$[rsp]
	mov	ecx, -20971520				; fffffffffec00000H
	call	?read_ioapic_register@@YAIPEAXE@Z	; read_ioapic_register
	mov	DWORD PTR low$[rsp], eax

; 49   : 	//!unmask the irq
; 50   : 	low &= ~(1<<16);

	mov	eax, DWORD PTR low$[rsp]
	btr	eax, 16
	mov	DWORD PTR low$[rsp], eax

; 51   : 	//!set to physical delivery mode
; 52   : 	low &= ~(1<<11);

	mov	eax, DWORD PTR low$[rsp]
	btr	eax, 11
	mov	DWORD PTR low$[rsp], eax

; 53   : 	low &= ~0x700;

	mov	eax, DWORD PTR low$[rsp]
	and	eax, -1793				; fffff8ffH
	mov	DWORD PTR low$[rsp], eax

; 54   : 
; 55   : 	low &= ~0xff;

	mov	eax, DWORD PTR low$[rsp]
	and	eax, -256				; ffffff00H
	mov	DWORD PTR low$[rsp], eax

; 56   : 	low |= vector + 32;

	mov	rax, QWORD PTR vector$[rsp]
	add	rax, 32					; 00000020H
	mov	ecx, DWORD PTR low$[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR low$[rsp], eax

; 57   : 
; 58   : 	low |= (0<<13);

	mov	eax, DWORD PTR low$[rsp]
	mov	DWORD PTR low$[rsp], eax

; 59   : 	low |= (0<<15);

	mov	eax, DWORD PTR low$[rsp]
	mov	DWORD PTR low$[rsp], eax

; 60   : 
; 61   : 	write_ioapic_register((void*)0xfec00000, reg, low);   //vector + 32

	mov	r8d, DWORD PTR low$[rsp]
	movzx	edx, BYTE PTR reg$[rsp]
	mov	ecx, -20971520				; fffffffffec00000H
	call	?write_ioapic_register@@YAXPEAXEI@Z	; write_ioapic_register

; 62   :     setvect(vector + 32, fn);

	mov	rax, QWORD PTR vector$[rsp]
	add	rax, 32					; 00000020H
	mov	rdx, QWORD PTR fn$[rsp]
	mov	rcx, rax
	call	?setvect@@YAX_KP6AX0PEAX@Z@Z		; setvect

; 63   : }

	add	rsp, 56					; 00000038H
	ret	0
?ioapic_register_irq@@YAX_KP6AX0PEAX@ZE@Z ENDP		; ioapic_register_irq
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\ioapic.cpp
_TEXT	SEGMENT
reg$1 = 32
ver$ = 36
intr_num$ = 40
n$2 = 48
address$ = 80
?ioapic_init@@YAXPEAX@Z PROC				; ioapic_init

; 101  : {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 102  : 	uint32_t ver = read_ioapic_register(address, IOAPIC_REG_VER);

	mov	dl, 1
	mov	rcx, QWORD PTR address$[rsp]
	call	?read_ioapic_register@@YAIPEAXE@Z	; read_ioapic_register
	mov	DWORD PTR ver$[rsp], eax

; 103  : 	uint32_t intr_num = (ver >> 16) & 0xFF;

	mov	eax, DWORD PTR ver$[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	DWORD PTR intr_num$[rsp], eax

; 104  : 	for(size_t n = 0; n <= 255; ++n)

	mov	QWORD PTR n$2[rsp], 0
	jmp	SHORT $LN3@ioapic_ini
$LN2@ioapic_ini:
	mov	rax, QWORD PTR n$2[rsp]
	inc	rax
	mov	QWORD PTR n$2[rsp], rax
$LN3@ioapic_ini:
	cmp	QWORD PTR n$2[rsp], 255			; 000000ffH
	ja	SHORT $LN1@ioapic_ini

; 105  : 	{
; 106  : 		uint32_t reg = IOAPIC_REG_RED_TBL_BASE + n * 2;

	mov	rax, QWORD PTR n$2[rsp]
	lea	rax, QWORD PTR [rax+rax+16]
	mov	DWORD PTR reg$1[rsp], eax

; 107  : 		write_ioapic_register(address, reg, read_ioapic_register(address, reg) |(1<<16));

	movzx	edx, BYTE PTR reg$1[rsp]
	mov	rcx, QWORD PTR address$[rsp]
	call	?read_ioapic_register@@YAIPEAXE@Z	; read_ioapic_register
	bts	eax, 16
	mov	r8d, eax
	movzx	edx, BYTE PTR reg$1[rsp]
	mov	rcx, QWORD PTR address$[rsp]
	call	?write_ioapic_register@@YAXPEAXEI@Z	; write_ioapic_register

; 108  : 	}

	jmp	SHORT $LN2@ioapic_ini
$LN1@ioapic_ini:

; 109  : }

	add	rsp, 72					; 00000048H
	ret	0
?ioapic_init@@YAXPEAX@Z ENDP				; ioapic_init
_TEXT	ENDS
END
