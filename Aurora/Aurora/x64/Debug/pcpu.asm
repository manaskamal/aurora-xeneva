; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?cpus@@3PAPEAU_cpu_@@A				; cpus
_BSS	SEGMENT
?cpus@@3PAPEAU_cpu_@@A DQ 0100H DUP (?)			; cpus
_BSS	ENDS
PUBLIC	?AuPCPUGetCpu@@YAPEAU_cpu_@@E@Z			; AuPCPUGetCpu
PUBLIC	?AuCreatePCPU@@YAXPEAX@Z			; AuCreatePCPU
PUBLIC	?AuPCPUSetCPUID@@YAXE@Z				; AuPCPUSetCPUID
PUBLIC	?AuPCPUGetCPUID@@YAEXZ				; AuPCPUGetCPUID
PUBLIC	?AuPCPUSetCurrentThread@@YAXPEAU_thread_@@@Z	; AuPCPUSetCurrentThread
PUBLIC	?AuPCPUGetCurrentThread@@YAPEAU_thread_@@XZ	; AuPCPUGetCurrentThread
PUBLIC	?AuPCPUSetKernelTSS@@YAXPEAU_tss@@@Z		; AuPCPUSetKernelTSS
PUBLIC	?AuPCPUGetKernelTSS@@YAPEAU_tss@@XZ		; AuPCPUGetKernelTSS
EXTRN	memset:PROC
EXTRN	x64_write_msr:PROC
EXTRN	x64_gs_readb:PROC
EXTRN	x64_gs_readq:PROC
EXTRN	x64_gs_writeb:PROC
EXTRN	x64_gs_writeq:PROC
EXTRN	malloc:PROC
pdata	SEGMENT
$pdata$?AuCreatePCPU@@YAXPEAX@Z DD imagerel $LN6
	DD	imagerel $LN6+126
	DD	imagerel $unwind$?AuCreatePCPU@@YAXPEAX@Z
$pdata$?AuPCPUSetCPUID@@YAXE@Z DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$?AuPCPUSetCPUID@@YAXE@Z
$pdata$?AuPCPUGetCPUID@@YAEXZ DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?AuPCPUGetCPUID@@YAEXZ
$pdata$?AuPCPUSetCurrentThread@@YAXPEAU_thread_@@@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?AuPCPUSetCurrentThread@@YAXPEAU_thread_@@@Z
$pdata$?AuPCPUGetCurrentThread@@YAPEAU_thread_@@XZ DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$?AuPCPUGetCurrentThread@@YAPEAU_thread_@@XZ
$pdata$?AuPCPUSetKernelTSS@@YAXPEAU_tss@@@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?AuPCPUSetKernelTSS@@YAXPEAU_tss@@@Z
$pdata$?AuPCPUGetKernelTSS@@YAPEAU_tss@@XZ DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$?AuPCPUGetKernelTSS@@YAPEAU_tss@@XZ
pdata	ENDS
xdata	SEGMENT
$unwind$?AuCreatePCPU@@YAXPEAX@Z DD 010901H
	DD	06209H
$unwind$?AuPCPUSetCPUID@@YAXE@Z DD 010801H
	DD	04208H
$unwind$?AuPCPUGetCPUID@@YAEXZ DD 010401H
	DD	04204H
$unwind$?AuPCPUSetCurrentThread@@YAXPEAU_thread_@@@Z DD 010901H
	DD	04209H
$unwind$?AuPCPUGetCurrentThread@@YAPEAU_thread_@@XZ DD 010401H
	DD	04204H
$unwind$?AuPCPUSetKernelTSS@@YAXPEAU_tss@@@Z DD 010901H
	DD	04209H
$unwind$?AuPCPUGetKernelTSS@@YAPEAU_tss@@XZ DD 010401H
	DD	04204H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\pcpu.cpp
_TEXT	SEGMENT
?AuPCPUGetKernelTSS@@YAPEAU_tss@@XZ PROC		; AuPCPUGetKernelTSS

; 101  : TSS* AuPCPUGetKernelTSS() {

$LN3:
	sub	rsp, 40					; 00000028H

; 102  : 	return (TSS*)x64_gs_readq(9);

	mov	ecx, 9
	call	x64_gs_readq

; 103  : }

	add	rsp, 40					; 00000028H
	ret	0
?AuPCPUGetKernelTSS@@YAPEAU_tss@@XZ ENDP		; AuPCPUGetKernelTSS
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\pcpu.cpp
_TEXT	SEGMENT
tss$ = 48
?AuPCPUSetKernelTSS@@YAXPEAU_tss@@@Z PROC		; AuPCPUSetKernelTSS

; 94   : void AuPCPUSetKernelTSS(TSS *tss) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 95   : 	x64_gs_writeq(9,(uint64_t)tss);

	mov	rdx, QWORD PTR tss$[rsp]
	mov	ecx, 9
	call	x64_gs_writeq

; 96   : }

	add	rsp, 40					; 00000028H
	ret	0
?AuPCPUSetKernelTSS@@YAXPEAU_tss@@@Z ENDP		; AuPCPUSetKernelTSS
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\pcpu.cpp
_TEXT	SEGMENT
?AuPCPUGetCurrentThread@@YAPEAU_thread_@@XZ PROC	; AuPCPUGetCurrentThread

; 86   : thread_t* AuPCPUGetCurrentThread() {

$LN3:
	sub	rsp, 40					; 00000028H

; 87   : 	return (thread_t*)x64_gs_readq(1);

	mov	ecx, 1
	call	x64_gs_readq

; 88   : }

	add	rsp, 40					; 00000028H
	ret	0
?AuPCPUGetCurrentThread@@YAPEAU_thread_@@XZ ENDP	; AuPCPUGetCurrentThread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\pcpu.cpp
_TEXT	SEGMENT
thread$ = 48
?AuPCPUSetCurrentThread@@YAXPEAU_thread_@@@Z PROC	; AuPCPUSetCurrentThread

; 79   : void AuPCPUSetCurrentThread (thread_t* thread) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 80   : 	x64_gs_writeq(1,(uint64_t)thread);

	mov	rdx, QWORD PTR thread$[rsp]
	mov	ecx, 1
	call	x64_gs_writeq

; 81   : }

	add	rsp, 40					; 00000028H
	ret	0
?AuPCPUSetCurrentThread@@YAXPEAU_thread_@@@Z ENDP	; AuPCPUSetCurrentThread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\pcpu.cpp
_TEXT	SEGMENT
?AuPCPUGetCPUID@@YAEXZ PROC				; AuPCPUGetCPUID

; 72   : uint8_t AuPCPUGetCPUID () {

$LN3:
	sub	rsp, 40					; 00000028H

; 73   : 	return x64_gs_readb(0);

	xor	ecx, ecx
	call	x64_gs_readb

; 74   : }

	add	rsp, 40					; 00000028H
	ret	0
?AuPCPUGetCPUID@@YAEXZ ENDP				; AuPCPUGetCPUID
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\pcpu.cpp
_TEXT	SEGMENT
id$ = 48
?AuPCPUSetCPUID@@YAXE@Z PROC				; AuPCPUSetCPUID

; 65   : void AuPCPUSetCPUID (uint8_t id) {

$LN3:
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 40					; 00000028H

; 66   : 	x64_gs_writeb(0,id);

	movzx	edx, BYTE PTR id$[rsp]
	xor	ecx, ecx
	call	x64_gs_writeb

; 67   : }

	add	rsp, 40					; 00000028H
	ret	0
?AuPCPUSetCPUID@@YAXE@Z ENDP				; AuPCPUSetCPUID
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\pcpu.cpp
_TEXT	SEGMENT
cpu$ = 32
alloc$ = 64
?AuCreatePCPU@@YAXPEAX@Z PROC				; AuCreatePCPU

; 41   : void AuCreatePCPU(void* alloc) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 42   : 	cpu_t * cpu;
; 43   : 	if (alloc != 0){

	cmp	QWORD PTR alloc$[rsp], 0
	je	SHORT $LN3@AuCreatePC

; 44   : 		/* because AP's got already allocated structure */
; 45   : 		cpu = (cpu_t*)alloc;

	mov	rax, QWORD PTR alloc$[rsp]
	mov	QWORD PTR cpu$[rsp], rax

; 46   : 	}else  {

	jmp	SHORT $LN2@AuCreatePC
$LN3@AuCreatePC:

; 47   : 		cpu = (cpu_t*)malloc(sizeof(cpu_t));

	mov	ecx, 17
	call	malloc
	mov	QWORD PTR cpu$[rsp], rax

; 48   : 		memset(cpu, 0, sizeof(cpu_t));

	mov	r8d, 17
	xor	edx, edx
	mov	rcx, QWORD PTR cpu$[rsp]
	call	memset
$LN2@AuCreatePC:

; 49   : 	}
; 50   : 	/* if cpu id == 0, means we are in bsp */
; 51   : 	if (cpu->cpu_id == 0)

	mov	rax, QWORD PTR cpu$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN1@AuCreatePC

; 52   : 		cpu->cpu_id = 0;

	mov	rax, QWORD PTR cpu$[rsp]
	mov	BYTE PTR [rax], 0
$LN1@AuCreatePC:

; 53   : 
; 54   : 	cpus[cpu->cpu_id] = cpu;

	mov	rax, QWORD PTR cpu$[rsp]
	movzx	eax, BYTE PTR [rax]
	lea	rcx, OFFSET FLAT:?cpus@@3PAPEAU_cpu_@@A	; cpus
	mov	rdx, QWORD PTR cpu$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx

; 55   : 	x64_write_msr(MSR_IA32_GS_BASE, (uint64_t)cpu);

	mov	rdx, QWORD PTR cpu$[rsp]
	mov	ecx, -1073741567			; c0000101H
	call	x64_write_msr

; 56   : }

	add	rsp, 56					; 00000038H
	ret	0
?AuCreatePCPU@@YAXPEAX@Z ENDP				; AuCreatePCPU
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\arch\x86_64\pcpu.cpp
_TEXT	SEGMENT
id$ = 8
?AuPCPUGetCpu@@YAPEAU_cpu_@@E@Z PROC			; AuPCPUGetCpu

; 58   : cpu_t *AuPCPUGetCpu (uint8_t id) {

	mov	BYTE PTR [rsp+8], cl

; 59   : 	return cpus[id];

	movzx	eax, BYTE PTR id$[rsp]
	lea	rcx, OFFSET FLAT:?cpus@@3PAPEAU_cpu_@@A	; cpus
	mov	rax, QWORD PTR [rcx+rax*8]

; 60   : }

	ret	0
?AuPCPUGetCpu@@YAPEAU_cpu_@@E@Z ENDP			; AuPCPUGetCpu
_TEXT	ENDS
END
