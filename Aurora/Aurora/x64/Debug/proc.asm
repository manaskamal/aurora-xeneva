; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?process_head@@3PEAU_process_@@EA		; process_head
PUBLIC	?process_last@@3PEAU_process_@@EA		; process_last
_BSS	SEGMENT
?process_head@@3PEAU_process_@@EA DQ 01H DUP (?)	; process_head
?process_last@@3PEAU_process_@@EA DQ 01H DUP (?)	; process_last
pid	DD	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
$SG4315	DB	'/dev/stdin', 00H
	ORG $+5
$SG4317	DB	'/dev/stdout', 00H
	ORG $+4
$SG4319	DB	'/dev/stderr', 00H
	ORG $+4
$SG4332	DB	'Executable invalid ', 0dH, 0aH, 00H
	ORG $+2
$SG4333	DB	'Executable image not found', 0aH, 00H
	ORG $+4
$SG4353	DB	'PROCESS CR3 -> %x ', 0dH, 0aH, 00H
	ORG $+3
$SG4367	DB	'xnclib.dll', 00H
	ORG $+5
$SG4379	DB	'xnacrl.dll', 00H
	ORG $+5
$SG4391	DB	'xewid.dll', 00H
	ORG $+6
$SG4410	DB	'***Process created ', 0dH, 0aH, 00H
	ORG $+2
$SG4453	DB	'child', 00H
CONST	ENDS
PUBLIC	?add_process@@YAXPEAU_process_@@@Z		; add_process
PUBLIC	?remove_process@@YAXPEAU_process_@@@Z		; remove_process
PUBLIC	?create_user_stack@@YAPEA_KPEAU_process_@@PEA_K@Z ; create_user_stack
PUBLIC	?create_inc_stack@@YAPEA_KPEA_K@Z		; create_inc_stack
PUBLIC	?AuCreateProcess@@YAHPEBDPEAD@Z			; AuCreateProcess
PUBLIC	?get_num_process@@YAIXZ				; get_num_process
PUBLIC	?get_current_process@@YAPEAU_process_@@XZ	; get_current_process
PUBLIC	?find_process_by_id@@YAPEAU_process_@@I@Z	; find_process_by_id
PUBLIC	?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ; find_process_by_thread
PUBLIC	?process_heap_break@@YAPEAX_K@Z			; process_heap_break
PUBLIC	?process_link_libraries@@YAXXZ			; process_link_libraries
PUBLIC	?AuProcessListInit@@YAXXZ			; AuProcessListInit
PUBLIC	?allocate_fd@@YAXPEAU_thread_@@@Z		; allocate_fd
PUBLIC	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
PUBLIC	?fork@@YAIXZ					; fork
PUBLIC	?exec@@YAXPEBDI@Z				; exec
EXTRN	memset:PROC
EXTRN	memcpy:PROC
EXTRN	initialize_list:PROC
EXTRN	?vfs_finddir@@YAPEAU_vfs_node_@@PEAD@Z:PROC	; vfs_finddir
EXTRN	AuPmmngrAlloc:PROC
EXTRN	AuPmmngrFree:PROC
EXTRN	p2v:PROC
EXTRN	v2p:PROC
EXTRN	x64_cli:PROC
EXTRN	x64_read_cr3:PROC
EXTRN	x64_write_cr3:PROC
EXTRN	AuMapPage:PROC
EXTRN	?AuMapPageEx@@YA_NPEA_K_K1E@Z:PROC		; AuMapPageEx
EXTRN	?AuCreateAddressSpace@@YAPEA_KXZ:PROC		; AuCreateAddressSpace
EXTRN	AuGetFreePage:PROC
EXTRN	malloc:PROC
EXTRN	free:PROC
EXTRN	?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z:PROC ; create_user_thread
EXTRN	get_current_thread:PROC
EXTRN	printf:PROC
EXTRN	?AuPeLinkLibraryEx@@YAXPEAX0@Z:PROC		; AuPeLinkLibraryEx
EXTRN	?AuInsertVMArea@@YAXPEAU_process_@@PEAU_vma_area_@@@Z:PROC ; AuInsertVMArea
EXTRN	?fat32_open@@YAPEAU_vfs_node_@@PEAU1@PEAD@Z:PROC ; fat32_open
EXTRN	?fat32_read@@YA_KPEAU_vfs_node_@@PEA_K@Z:PROC	; fat32_read
EXTRN	?AuGetSysLib@@YAPEAU_libentry_@@PEAD@Z:PROC	; AuGetSysLib
EXTRN	_debug_print_:PROC
pdata	SEGMENT
$pdata$?remove_process@@YAXPEAU_process_@@@Z DD imagerel $LN8
	DD	imagerel $LN8+187
	DD	imagerel $unwind$?remove_process@@YAXPEAU_process_@@@Z
$pdata$?create_user_stack@@YAPEA_KPEAU_process_@@PEA_K@Z DD imagerel $LN6
	DD	imagerel $LN6+281
	DD	imagerel $unwind$?create_user_stack@@YAPEA_KPEAU_process_@@PEA_K@Z
$pdata$?create_inc_stack@@YAPEA_KPEA_K@Z DD imagerel $LN6
	DD	imagerel $LN6+134
	DD	imagerel $unwind$?create_inc_stack@@YAPEA_KPEA_K@Z
$pdata$?AuCreateProcess@@YAHPEBDPEAD@Z DD imagerel $LN18
	DD	imagerel $LN18+1732
	DD	imagerel $unwind$?AuCreateProcess@@YAHPEBDPEAD@Z
$pdata$?get_num_process@@YAIXZ DD imagerel $LN6
	DD	imagerel $LN6+68
	DD	imagerel $unwind$?get_num_process@@YAIXZ
$pdata$?get_current_process@@YAPEAU_process_@@XZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?get_current_process@@YAPEAU_process_@@XZ
$pdata$?find_process_by_id@@YAPEAU_process_@@I@Z DD imagerel $LN7
	DD	imagerel $LN7+70
	DD	imagerel $unwind$?find_process_by_id@@YAPEAU_process_@@I@Z
$pdata$?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z DD imagerel $LN7
	DD	imagerel $LN7+75
	DD	imagerel $unwind$?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z
$pdata$?process_heap_break@@YAPEAX_K@Z DD imagerel $LN7
	DD	imagerel $LN7+193
	DD	imagerel $unwind$?process_heap_break@@YAPEAX_K@Z
$pdata$?process_link_libraries@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$?process_link_libraries@@YAXXZ
$pdata$?allocate_fd@@YAXPEAU_thread_@@@Z DD imagerel $LN3
	DD	imagerel $LN3+227
	DD	imagerel $unwind$?allocate_fd@@YAXPEAU_thread_@@@Z
$pdata$?fork@@YAIXZ DD imagerel $LN6
	DD	imagerel $LN6+216
	DD	imagerel $unwind$?fork@@YAIXZ
$pdata$?exec@@YAXPEBDI@Z DD imagerel $LN3
	DD	imagerel $LN3+392
	DD	imagerel $unwind$?exec@@YAXPEBDI@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?remove_process@@YAXPEAU_process_@@@Z DD 010901H
	DD	04209H
$unwind$?create_user_stack@@YAPEA_KPEAU_process_@@PEA_K@Z DD 010e01H
	DD	0a20eH
$unwind$?create_inc_stack@@YAPEA_KPEA_K@Z DD 010901H
	DD	08209H
$unwind$?AuCreateProcess@@YAHPEBDPEAD@Z DD 021101H
	DD	0230111H
$unwind$?get_num_process@@YAIXZ DD 010401H
	DD	02204H
$unwind$?get_current_process@@YAPEAU_process_@@XZ DD 010401H
	DD	06204H
$unwind$?find_process_by_id@@YAPEAU_process_@@I@Z DD 010801H
	DD	02208H
$unwind$?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z DD 010901H
	DD	02209H
$unwind$?process_heap_break@@YAPEAX_K@Z DD 010901H
	DD	0a209H
$unwind$?process_link_libraries@@YAXXZ DD 010401H
	DD	06204H
$unwind$?allocate_fd@@YAXPEAU_thread_@@@Z DD 010901H
	DD	08209H
$unwind$?fork@@YAIXZ DD 010401H
	DD	0a204H
$unwind$?exec@@YAXPEBDI@Z DD 021001H
	DD	0130110H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
child_proc$ = 48
new_cr3$ = 56
nt$ = 64
c_cr3$ = 72
dos$ = 80
buffer$ = 88
_image_base_$ = 96
ent$ = 104
stack$ = 112
p_cr3$ = 120
position$ = 128
t$ = 136
filename$ = 160
pid$ = 168
?exec@@YAXPEBDI@Z PROC					; exec

; 328  : void exec (const char* filename, uint32_t pid) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H

; 329  : 	process_t *child_proc = find_process_by_id (pid);

	mov	ecx, DWORD PTR pid$[rsp]
	call	?find_process_by_id@@YAPEAU_process_@@I@Z ; find_process_by_id
	mov	QWORD PTR child_proc$[rsp], rax

; 330  : 	uint64_t p_cr3 = x64_read_cr3();

	call	x64_read_cr3
	mov	QWORD PTR p_cr3$[rsp], rax

; 331  : 
; 332  : 	//!Clear up the child address space
; 333  : 	uint64_t c_cr3 = (uint64_t)child_proc->cr3;

	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rax, QWORD PTR [rax+2088]
	mov	QWORD PTR c_cr3$[rsp], rax

; 334  : 	memset((void*)c_cr3, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR c_cr3$[rsp]
	call	memset

; 335  : 	/*FILE f = open (filename);
; 336  : 	if (f.status == FILE_FLAG_INVALID)
; 337  : 		return;*/
; 338  : 	unsigned char* buffer = (unsigned char*)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR buffer$[rsp], rax

; 339  : /*	read_blk (&f, buffer, f.id);
; 340  : */
; 341  : 	//! Create new mappings for exec
; 342  : 	uint64_t* new_cr3 = AuCreateAddressSpace();

	call	?AuCreateAddressSpace@@YAPEA_KXZ	; AuCreateAddressSpace
	mov	QWORD PTR new_cr3$[rsp], rax

; 343  : 	//! copy the new mappings to child_cr3
; 344  : 	memcpy ((void*)c_cr3, new_cr3, 4096);

	mov	r8d, 4096				; 00001000H
	mov	rdx, QWORD PTR new_cr3$[rsp]
	mov	rcx, QWORD PTR c_cr3$[rsp]
	call	memcpy

; 345  : 	//! deallocate the new mappings
; 346  : 	memset((void*)new_cr3, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR new_cr3$[rsp]
	call	memset

; 347  : 	AuPmmngrFree(new_cr3);

	mov	rcx, QWORD PTR new_cr3$[rsp]
	call	AuPmmngrFree

; 348  : 
; 349  : 
; 350  : 	//!After reading we can change cr3
; 351  :     x64_write_cr3((size_t)c_cr3);

	mov	rcx, QWORD PTR c_cr3$[rsp]
	call	x64_write_cr3

; 352  : 
; 353  : 	//!create the stack
; 354  : 	uint64_t stack = (uint64_t)create_user_stack(child_proc,child_proc->cr3);

	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rdx, QWORD PTR [rax+2088]
	mov	rcx, QWORD PTR child_proc$[rsp]
	call	?create_user_stack@@YAPEA_KPEAU_process_@@PEA_K@Z ; create_user_stack
	mov	QWORD PTR stack$[rsp], rax

; 355  : 	child_proc->stack = stack;

	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	QWORD PTR [rax+2104], rcx

; 356  : 
; 357  : 	IMAGE_DOS_HEADER* dos = (IMAGE_DOS_HEADER*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR dos$[rsp], rax

; 358  : 	PIMAGE_NT_HEADERS nt = raw_offset<PIMAGE_NT_HEADERS>(dos, dos->e_lfanew);

	mov	rax, QWORD PTR dos$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR nt$[rsp], rax

; 359  : 	
; 360  : 	//!extract the informations
; 361  :     //load_pe_file(buffer,f.size);
; 362  : 	uint64_t _image_base_ = nt->OptionalHeader.ImageBase;

	mov	rax, QWORD PTR nt$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR _image_base_$[rsp], rax

; 363  : 	ientry ent = (ientry)(nt->OptionalHeader.AddressOfEntryPoint + nt->OptionalHeader.ImageBase); //buffer

	mov	rax, QWORD PTR nt$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR nt$[rsp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR ent$[rsp], rax

; 364  : 
; 365  : 	AuMapPage((uint64_t)buffer,_image_base_, PAGING_USER);

	mov	r8b, 4
	mov	rdx, QWORD PTR _image_base_$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	AuMapPage

; 366  : 	int position = 1;  //we already read 4096 bytes at first

	mov	DWORD PTR position$[rsp], 1

; 367  : 	//while(f.eof != 1){
; 368  : 	//	unsigned char* block = (unsigned char*)pmmngr_alloc();
; 369  : 	//	//read_blk(&f,block, f.id);
; 370  : 	//	map_page((uint64_t)block,_image_base_ + position * 4096);
; 371  : 	//	position++;
; 372  : 	//}
; 373  : 
; 374  : 	child_proc->entry_point = ent;

	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rcx, QWORD PTR ent$[rsp]
	mov	QWORD PTR [rax+16], rcx

; 375  : 	x64_write_cr3(p_cr3);

	mov	rcx, QWORD PTR p_cr3$[rsp]
	call	x64_write_cr3

; 376  : 
; 377  : 
; 378  : 	thread_t *t = create_user_thread(child_proc->entry_point,child_proc->stack,(uint64_t)child_proc->cr3,"child",1);

	mov	BYTE PTR [rsp+32], 1
	lea	r9, OFFSET FLAT:$SG4453
	mov	rax, QWORD PTR child_proc$[rsp]
	mov	r8, QWORD PTR [rax+2088]
	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rdx, QWORD PTR [rax+2104]
	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z ; create_user_thread
	mov	QWORD PTR t$[rsp], rax

; 379  : }

	add	rsp, 152				; 00000098H
	ret	0
?exec@@YAXPEBDI@Z ENDP					; exec
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
i$1 = 32
child_process$ = 40
parent$ = 48
child_cr3$ = 56
p_thread$ = 64
parent_cr3$ = 72
?fork@@YAIXZ PROC					; fork

; 307  : uint32_t fork () {

$LN6:
	sub	rsp, 88					; 00000058H

; 308  : 	process_t *child_process = (process_t*)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR child_process$[rsp], rax

; 309  : 	
; 310  : 	thread_t * p_thread = get_current_thread();

	call	get_current_thread
	mov	QWORD PTR p_thread$[rsp], rax

; 311  : 	process_t *parent = find_process_by_thread (p_thread);

	mov	rcx, QWORD PTR p_thread$[rsp]
	call	?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ; find_process_by_thread
	mov	QWORD PTR parent$[rsp], rax

; 312  : 
; 313  : 	uint64_t *child_cr3 = (uint64_t*)AuPmmngrAlloc(); //create_user_address_space();

	call	AuPmmngrAlloc
	mov	QWORD PTR child_cr3$[rsp], rax

; 314  : 	uint64_t *parent_cr3 = parent->cr3;

	mov	rax, QWORD PTR parent$[rsp]
	mov	rax, QWORD PTR [rax+2088]
	mov	QWORD PTR parent_cr3$[rsp], rax

; 315  : 
; 316  : 	for (int i = 0; i < 512; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@fork
$LN2@fork:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@fork:
	cmp	DWORD PTR i$1[rsp], 512			; 00000200H
	jge	SHORT $LN1@fork

; 317  : 		child_cr3[i] = parent_cr3[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR child_cr3$[rsp]
	mov	r8, QWORD PTR parent_cr3$[rsp]
	mov	rax, QWORD PTR [r8+rax*8]
	mov	QWORD PTR [rdx+rcx*8], rax
	jmp	SHORT $LN2@fork
$LN1@fork:

; 318  : 
; 319  : 	memcpy (child_process, parent,sizeof(process_t));

	mov	r8d, 2184				; 00000888H
	mov	rdx, QWORD PTR parent$[rsp]
	mov	rcx, QWORD PTR child_process$[rsp]
	call	memcpy

; 320  : 	child_process->pid_t = pid;

	mov	rax, QWORD PTR child_process$[rsp]
	mov	ecx, DWORD PTR pid
	mov	DWORD PTR [rax], ecx

; 321  : 	child_process->cr3 = child_cr3; //parent->cr3;

	mov	rax, QWORD PTR child_process$[rsp]
	mov	rcx, QWORD PTR child_cr3$[rsp]
	mov	QWORD PTR [rax+2088], rcx

; 322  : 	child_process->parent = parent;

	mov	rax, QWORD PTR child_process$[rsp]
	mov	rcx, QWORD PTR parent$[rsp]
	mov	QWORD PTR [rax+2176], rcx

; 323  : 	add_process (child_process);

	mov	rcx, QWORD PTR child_process$[rsp]
	call	?add_process@@YAXPEAU_process_@@@Z	; add_process

; 324  : 	return child_process->pid_t;

	mov	rax, QWORD PTR child_process$[rsp]
	mov	eax, DWORD PTR [rax]

; 325  : }

	add	rsp, 88					; 00000058H
	ret	0
?fork@@YAIXZ ENDP					; fork
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z PROC ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ENDP ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
stdin$ = 32
stdout$ = 40
stderr$ = 48
t$ = 80
?allocate_fd@@YAXPEAU_thread_@@@Z PROC			; allocate_fd

; 156  : void allocate_fd (thread_t *t) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 157  : 	vfs_node_t * stdin = vfs_finddir("/dev/stdin");

	lea	rcx, OFFSET FLAT:$SG4315
	call	?vfs_finddir@@YAPEAU_vfs_node_@@PEAD@Z	; vfs_finddir
	mov	QWORD PTR stdin$[rsp], rax

; 158  : 	t->fd[t->fd_current] = stdin;

	mov	rax, QWORD PTR t$[rsp]
	movsxd	rax, DWORD PTR [rax+744]
	mov	rcx, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR stdin$[rsp]
	mov	QWORD PTR [rcx+rax*8+264], rdx

; 159  : 	t->fd_current++;

	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+744]
	inc	eax
	mov	rcx, QWORD PTR t$[rsp]
	mov	DWORD PTR [rcx+744], eax

; 160  : 	vfs_node_t* stdout = vfs_finddir("/dev/stdout");

	lea	rcx, OFFSET FLAT:$SG4317
	call	?vfs_finddir@@YAPEAU_vfs_node_@@PEAD@Z	; vfs_finddir
	mov	QWORD PTR stdout$[rsp], rax

; 161  : 	t->fd[t->fd_current] = stdout;

	mov	rax, QWORD PTR t$[rsp]
	movsxd	rax, DWORD PTR [rax+744]
	mov	rcx, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR stdout$[rsp]
	mov	QWORD PTR [rcx+rax*8+264], rdx

; 162  : 	t->fd_current++;

	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+744]
	inc	eax
	mov	rcx, QWORD PTR t$[rsp]
	mov	DWORD PTR [rcx+744], eax

; 163  : 	vfs_node_t* stderr = vfs_finddir("/dev/stderr");

	lea	rcx, OFFSET FLAT:$SG4319
	call	?vfs_finddir@@YAPEAU_vfs_node_@@PEAD@Z	; vfs_finddir
	mov	QWORD PTR stderr$[rsp], rax

; 164  : 	t->fd[t->fd_current] = stderr;

	mov	rax, QWORD PTR t$[rsp]
	movsxd	rax, DWORD PTR [rax+744]
	mov	rcx, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR stderr$[rsp]
	mov	QWORD PTR [rcx+rax*8+264], rdx

; 165  : 	t->fd_current++;

	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+744]
	inc	eax
	mov	rcx, QWORD PTR t$[rsp]
	mov	DWORD PTR [rcx+744], eax

; 166  : 
; 167  : }

	add	rsp, 72					; 00000048H
	ret	0
?allocate_fd@@YAXPEAU_thread_@@@Z ENDP			; allocate_fd
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
?AuProcessListInit@@YAXXZ PROC				; AuProcessListInit

; 399  : 	pid = 0;

	mov	DWORD PTR pid, 0

; 400  : 	process_head = NULL;

	mov	QWORD PTR ?process_head@@3PEAU_process_@@EA, 0 ; process_head

; 401  : 	process_last = NULL;

	mov	QWORD PTR ?process_last@@3PEAU_process_@@EA, 0 ; process_last

; 402  : }

	ret	0
?AuProcessListInit@@YAXXZ ENDP				; AuProcessListInit
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
proc$ = 32
?process_link_libraries@@YAXXZ PROC			; process_link_libraries

; 428  : void process_link_libraries () {

$LN3:
	sub	rsp, 56					; 00000038H

; 429  : 	x64_cli();

	call	x64_cli

; 430  : 
; 431  : 	process_t *proc = get_current_process();

	call	?get_current_process@@YAPEAU_process_@@XZ ; get_current_process
	mov	QWORD PTR proc$[rsp], rax

; 432  : 	
; 433  : 	AuPeLinkLibraryEx((void*)0x0000000100400000,(void*)0x0000000100000000);

	mov	rdx, 4294967296				; 0000000100000000H
	mov	rcx, 4299161600				; 0000000100400000H
	call	?AuPeLinkLibraryEx@@YAXPEAX0@Z		; AuPeLinkLibraryEx

; 434  :     AuPeLinkLibraryEx((void*)0x0000000100200000,(void*)0x0000000100000000);

	mov	rdx, 4294967296				; 0000000100000000H
	mov	rcx, 4297064448				; 0000000100200000H
	call	?AuPeLinkLibraryEx@@YAXPEAX0@Z		; AuPeLinkLibraryEx

; 435  : 	//AuPeLinkLibraryEx((void*)0x0000000100500000,(void*)0x0000000100000000);
; 436  : 	//
; 437  : 
; 438  : 	AuPeLinkLibraryEx((void*)0x0000000000600000,(void*)0x0000000100000000);  //

	mov	rdx, 4294967296				; 0000000100000000H
	mov	ecx, 6291456				; 00600000H
	call	?AuPeLinkLibraryEx@@YAXPEAX0@Z		; AuPeLinkLibraryEx

; 439  : 	AuPeLinkLibraryEx((void*)0x0000000100000000,(void*)0x0000000000600000); //

	mov	edx, 6291456				; 00600000H
	mov	rcx, 4294967296				; 0000000100000000H
	call	?AuPeLinkLibraryEx@@YAXPEAX0@Z		; AuPeLinkLibraryEx

; 440  : 	
; 441  : 	//AuPeLinkLibraryEx((void*)0x0000000000600000,(void*)0x0000000100400000);
; 442  : 	///* Link the CLIB to every DLL */
; 443  : 	
; 444  : 
; 445  : 	
; 446  :     //AuPeLinkLibraryEx((void*)0x0000000000600000,(void*)0x0000000100200000);
; 447  : }

	add	rsp, 56					; 00000038H
	ret	0
?process_link_libraries@@YAXXZ ENDP			; process_link_libraries
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
i$ = 32
proc$ = 40
first_page$ = 48
page$1 = 56
p$2 = 64
pages$ = 96
?process_heap_break@@YAPEAX_K@Z PROC			; process_heap_break

; 409  : void* process_heap_break (uint64_t pages) {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 410  : 	x64_cli();

	call	x64_cli

; 411  : 	process_t *proc = get_current_process();

	call	?get_current_process@@YAPEAU_process_@@XZ ; get_current_process
	mov	QWORD PTR proc$[rsp], rax

; 412  : 	int i = 0;

	mov	DWORD PTR i$[rsp], 0

; 413  : 	uint64_t first_page = 0;

	mov	QWORD PTR first_page$[rsp], 0

; 414  : 	for (i = 0; i < pages; i++) {

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@process_he
$LN3@process_he:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@process_he:
	movsxd	rax, DWORD PTR i$[rsp]
	cmp	rax, QWORD PTR pages$[rsp]
	jae	SHORT $LN2@process_he

; 415  : 		uint64_t page = (uint64_t)AuGetFreePage(0,true,(void*)proc->_image_heap_break_);

	mov	rax, QWORD PTR proc$[rsp]
	mov	r8, QWORD PTR [rax+2112]
	mov	dl, 1
	xor	ecx, ecx
	call	AuGetFreePage
	mov	QWORD PTR page$1[rsp], rax

; 416  : 		if (first_page == 0)

	cmp	QWORD PTR first_page$[rsp], 0
	jne	SHORT $LN1@process_he

; 417  : 			first_page = page;

	mov	rax, QWORD PTR page$1[rsp]
	mov	QWORD PTR first_page$[rsp], rax
$LN1@process_he:

; 418  : 		uint64_t p = (uint64_t)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR p$2[rsp], rax

; 419  : 		AuMapPage((uint64_t)p, page, PAGING_USER);

	mov	r8b, 4
	mov	rdx, QWORD PTR page$1[rsp]
	mov	rcx, QWORD PTR p$2[rsp]
	call	AuMapPage

; 420  : 	}

	jmp	SHORT $LN3@process_he
$LN2@process_he:

; 421  : 	proc->_heap_size_ += pages * 4096;

	mov	rax, QWORD PTR pages$[rsp]
	imul	rax, 4096				; 00001000H
	mov	rcx, QWORD PTR proc$[rsp]
	add	rax, QWORD PTR [rcx+2120]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rcx+2120], rax

; 422  : 	return (void*)first_page;

	mov	rax, QWORD PTR first_page$[rsp]

; 423  : }

	add	rsp, 88					; 00000058H
	ret	0
?process_heap_break@@YAPEAX_K@Z ENDP			; process_heap_break
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
proc$1 = 0
thread$ = 32
?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z PROC ; find_process_by_thread

; 96   : process_t *find_process_by_thread (thread_t *thread) {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 97   : 	for (process_t *proc = process_head; proc != NULL; proc = proc->next) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	QWORD PTR proc$1[rsp], rax
	jmp	SHORT $LN4@find_proce
$LN3@find_proce:
	mov	rax, QWORD PTR proc$1[rsp]
	mov	rax, QWORD PTR [rax+2160]
	mov	QWORD PTR proc$1[rsp], rax
$LN4@find_proce:
	cmp	QWORD PTR proc$1[rsp], 0
	je	SHORT $LN2@find_proce

; 98   : 		if (proc->main_thread == thread) {

	mov	rax, QWORD PTR proc$1[rsp]
	mov	rcx, QWORD PTR thread$[rsp]
	cmp	QWORD PTR [rax+2064], rcx
	jne	SHORT $LN1@find_proce

; 99   : 			return proc;

	mov	rax, QWORD PTR proc$1[rsp]
	jmp	SHORT $LN5@find_proce
$LN1@find_proce:

; 100  : 		}
; 101  : 	}

	jmp	SHORT $LN3@find_proce
$LN2@find_proce:
$LN5@find_proce:

; 102  : }

	add	rsp, 24
	ret	0
?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ENDP ; find_process_by_thread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
proc$1 = 0
pid$ = 32
?find_process_by_id@@YAPEAU_process_@@I@Z PROC		; find_process_by_id

; 108  : process_t *find_process_by_id (uint32_t pid) {

$LN7:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 109  : 	for (process_t *proc = process_head; proc != NULL; proc = proc->next) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	QWORD PTR proc$1[rsp], rax
	jmp	SHORT $LN4@find_proce
$LN3@find_proce:
	mov	rax, QWORD PTR proc$1[rsp]
	mov	rax, QWORD PTR [rax+2160]
	mov	QWORD PTR proc$1[rsp], rax
$LN4@find_proce:
	cmp	QWORD PTR proc$1[rsp], 0
	je	SHORT $LN2@find_proce

; 110  : 		if (proc->pid_t == pid) {

	mov	rax, QWORD PTR proc$1[rsp]
	mov	ecx, DWORD PTR pid$[rsp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN1@find_proce

; 111  : 			return proc;

	mov	rax, QWORD PTR proc$1[rsp]
	jmp	SHORT $LN5@find_proce
$LN1@find_proce:

; 112  : 		}
; 113  : 	}

	jmp	SHORT $LN3@find_proce
$LN2@find_proce:

; 114  : 	return NULL;

	xor	eax, eax
$LN5@find_proce:

; 115  : }

	add	rsp, 24
	ret	0
?find_process_by_id@@YAPEAU_process_@@I@Z ENDP		; find_process_by_id
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
p_thread$ = 32
c_proc$ = 40
?get_current_process@@YAPEAU_process_@@XZ PROC		; get_current_process

; 392  : process_t * get_current_process () {

$LN3:
	sub	rsp, 56					; 00000038H

; 393  : 	thread_t * p_thread = get_current_thread();

	call	get_current_thread
	mov	QWORD PTR p_thread$[rsp], rax

; 394  : 	process_t *c_proc = find_process_by_thread (p_thread);

	mov	rcx, QWORD PTR p_thread$[rsp]
	call	?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ; find_process_by_thread
	mov	QWORD PTR c_proc$[rsp], rax

; 395  : 	return c_proc;

	mov	rax, QWORD PTR c_proc$[rsp]

; 396  : }

	add	rsp, 56					; 00000038H
	ret	0
?get_current_process@@YAPEAU_process_@@XZ ENDP		; get_current_process
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
num_process$ = 0
current_proc$1 = 8
?get_num_process@@YAIXZ PROC				; get_num_process

; 383  : uint32_t get_num_process () {

$LN6:
	sub	rsp, 24

; 384  : 	uint32_t num_process = 0;

	mov	DWORD PTR num_process$[rsp], 0

; 385  : 	for (process_t * current_proc = process_head; current_proc != NULL; current_proc = current_proc->next) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	QWORD PTR current_proc$1[rsp], rax
	jmp	SHORT $LN3@get_num_pr
$LN2@get_num_pr:
	mov	rax, QWORD PTR current_proc$1[rsp]
	mov	rax, QWORD PTR [rax+2160]
	mov	QWORD PTR current_proc$1[rsp], rax
$LN3@get_num_pr:
	cmp	QWORD PTR current_proc$1[rsp], 0
	je	SHORT $LN1@get_num_pr

; 386  : 		num_process++;

	mov	eax, DWORD PTR num_process$[rsp]
	inc	eax
	mov	DWORD PTR num_process$[rsp], eax

; 387  : 	}

	jmp	SHORT $LN2@get_num_pr
$LN1@get_num_pr:

; 388  : 	return num_process;

	mov	eax, DWORD PTR num_process$[rsp]

; 389  : }

	add	rsp, 24
	ret	0
?get_num_process@@YAIXZ ENDP				; get_num_process
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
process$ = 48
i$1 = 56
i$2 = 60
i$3 = 64
position$ = 68
cr3$ = 72
vma$ = 80
file$ = 88
_image_base_$ = 96
nt$ = 104
lib$ = 112
buf$ = 120
lib2$ = 128
t$ = 136
dos$ = 144
ent$ = 152
phys$4 = 160
phys$5 = 168
lib3$ = 176
stack$ = 184
phys$6 = 192
block$7 = 200
fname$ = 208
tv208 = 216
tv235 = 224
tv181 = 232
text_section_start$ = 240
tv153 = 248
text_section_end$ = 256
filename$ = 288
procname$ = 296
?AuCreateProcess@@YAHPEBDPEAD@Z PROC			; AuCreateProcess

; 176  : int AuCreateProcess(const char* filename, char* procname) {

$LN18:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H

; 177  : 	//!allocate a data-structure for process 
; 178  : 	
; 179  : 	process_t *process = (process_t*)malloc(sizeof(process_t));

	mov	ecx, 2184				; 00000888H
	call	malloc
	mov	QWORD PTR process$[rsp], rax

; 180  : 	memset(process, 0,sizeof(process_t));

	mov	r8d, 2184				; 00000888H
	xor	edx, edx
	mov	rcx, QWORD PTR process$[rsp]
	call	memset

; 181  : 	process->pid_t = pid;

	mov	rax, QWORD PTR process$[rsp]
	mov	ecx, DWORD PTR pid
	mov	DWORD PTR [rax], ecx

; 182  : 
; 183  : 
; 184  : 	//!open the process file-binary
; 185  : 	char *fname = (char*)filename;

	mov	rax, QWORD PTR filename$[rsp]
	mov	QWORD PTR fname$[rsp], rax

; 186  : 
; 187  : 	//vfs_node_t file = openfs (n,fname);
; 188  : 	vfs_node_t *file = fat32_open(NULL, fname);

	mov	rdx, QWORD PTR fname$[rsp]
	xor	ecx, ecx
	call	?fat32_open@@YAPEAU_vfs_node_@@PEAU1@PEAD@Z ; fat32_open
	mov	QWORD PTR file$[rsp], rax

; 189  : 	if (file->status == FS_FLAG_INVALID) {

	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, BYTE PTR [rax+49]
	cmp	eax, 3
	jne	SHORT $LN15@AuCreatePr

; 190  : 		_debug_print_ ("Executable invalid \r\n");

	lea	rcx, OFFSET FLAT:$SG4332
	call	_debug_print_

; 191  : 		printf("Executable image not found\n");

	lea	rcx, OFFSET FLAT:$SG4333
	call	printf

; 192  : 		return -1;

	mov	eax, -1
	jmp	$LN16@AuCreatePr
$LN15@AuCreatePr:

; 193  : 	}
; 194  : 
; 195  : 	//!open the binary file and read it
; 196  : 	uint64_t* buf = (uint64_t*)p2v((size_t)AuPmmngrAlloc());   

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	p2v
	mov	QWORD PTR buf$[rsp], rax

; 197  : 	//readfs_block(n,&file,buf);
; 198  : 	
; 199  : 	fat32_read (file,(uint64_t*)v2p((size_t)buf));

	mov	rcx, QWORD PTR buf$[rsp]
	call	v2p
	mov	rdx, rax
	mov	rcx, QWORD PTR file$[rsp]
	call	?fat32_read@@YA_KPEAU_vfs_node_@@PEA_K@Z ; fat32_read

; 200  : 	
; 201  : 
; 202  : 	IMAGE_DOS_HEADER* dos = (IMAGE_DOS_HEADER*)buf;

	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR dos$[rsp], rax

; 203  : 	PIMAGE_NT_HEADERS nt = raw_offset<PIMAGE_NT_HEADERS>(dos, dos->e_lfanew);

	mov	rax, QWORD PTR dos$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR nt$[rsp], rax

; 204  : 
; 205  : 	
; 206  : 	//!extract the informations
; 207  :  
; 208  : 	uint64_t _image_base_ = nt->OptionalHeader.ImageBase;

	mov	rax, QWORD PTR nt$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR _image_base_$[rsp], rax

; 209  : 	ientry ent = (ientry)(nt->OptionalHeader.AddressOfEntryPoint + nt->OptionalHeader.ImageBase); //buffer

	mov	rax, QWORD PTR nt$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR nt$[rsp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR ent$[rsp], rax

; 210  : 
; 211  : 	//! create the user stack and address space
; 212  : 	uint64_t *cr3 = AuCreateAddressSpace();	

	call	?AuCreateAddressSpace@@YAPEA_KXZ	; AuCreateAddressSpace
	mov	QWORD PTR cr3$[rsp], rax

; 213  : 	_debug_print_ ("PROCESS CR3 -> %x \r\n", cr3);

	mov	rdx, QWORD PTR cr3$[rsp]
	lea	rcx, OFFSET FLAT:$SG4353
	call	_debug_print_

; 214  : 
; 215  : 
; 216  : 	AuMapPageEx(cr3,v2p((size_t)buf),_image_base_, PAGING_USER);

	mov	rcx, QWORD PTR buf$[rsp]
	call	v2p
	mov	r9b, 4
	mov	r8, QWORD PTR _image_base_$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?AuMapPageEx@@YA_NPEA_K_K1E@Z		; AuMapPageEx

; 217  : 	////! read rest of the image
; 218  : 	int position = 1;  //we already read 4096 bytes at first

	mov	DWORD PTR position$[rsp], 1

; 219  : 
; 220  : 	uint64_t text_section_start = _image_base_;

	mov	rax, QWORD PTR _image_base_$[rsp]
	mov	QWORD PTR text_section_start$[rsp], rax
$LN14@AuCreatePr:

; 221  : 
; 222  : 
; 223  : 	while (file->eof != 1){

	mov	rax, QWORD PTR file$[rsp]
	movzx	eax, BYTE PTR [rax+36]
	cmp	eax, 1
	je	$LN13@AuCreatePr

; 224  : 		uint64_t* block = (uint64_t*)p2v((size_t)AuPmmngrAlloc());

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	p2v
	mov	QWORD PTR block$7[rsp], rax

; 225  : 		
; 226  : 		fat32_read (file,(uint64_t*)v2p((size_t)block));

	mov	rcx, QWORD PTR block$7[rsp]
	call	v2p
	mov	rdx, rax
	mov	rcx, QWORD PTR file$[rsp]
	call	?fat32_read@@YA_KPEAU_vfs_node_@@PEA_K@Z ; fat32_read

; 227  : 		AuMapPageEx(cr3,v2p((size_t)block),_image_base_ + position * 4096, PAGING_USER);

	mov	eax, DWORD PTR position$[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR _image_base_$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv153[rsp], rax
	mov	rcx, QWORD PTR block$7[rsp]
	call	v2p
	mov	r9b, 4
	mov	rcx, QWORD PTR tv153[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?AuMapPageEx@@YA_NPEA_K_K1E@Z		; AuMapPageEx

; 228  : 		position++;

	mov	eax, DWORD PTR position$[rsp]
	inc	eax
	mov	DWORD PTR position$[rsp], eax

; 229  : 	}

	jmp	$LN14@AuCreatePr
$LN13@AuCreatePr:

; 230  : 
; 231  : 	/*
; 232  : 	 * Hacky way, for now we just have two system known shared library
; 233  : 	 * the graphics library and the widget library
; 234  : 	 */
; 235  : 
; 236  : 	AuLibEntry_t *lib = AuGetSysLib("xnclib.dll");

	lea	rcx, OFFSET FLAT:$SG4367
	call	?AuGetSysLib@@YAPEAU_libentry_@@PEAD@Z	; AuGetSysLib
	mov	QWORD PTR lib$[rsp], rax

; 237  : 	if (lib != NULL)

	cmp	QWORD PTR lib$[rsp], 0
	je	$LN12@AuCreatePr

; 238  : 		for (int i = 0; i < lib->phys_blocks_count; i++) {

	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN11@AuCreatePr
$LN10@AuCreatePr:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN11@AuCreatePr:
	mov	rax, QWORD PTR lib$[rsp]
	mov	eax, DWORD PTR [rax+88]
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN9@AuCreatePr

; 239  : 			void* phys = (void*)p2v((size_t)AuPmmngrAlloc());

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	p2v
	mov	QWORD PTR phys$6[rsp], rax

; 240  : 			memcpy (phys, (void*)p2v(lib->phys_start + i * 4096), 4096);

	mov	eax, DWORD PTR i$3[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR lib$[rsp]
	add	rax, QWORD PTR [rcx+72]
	mov	rcx, rax
	call	p2v
	mov	r8d, 4096				; 00001000H
	mov	rdx, rax
	mov	rcx, QWORD PTR phys$6[rsp]
	call	memcpy

; 241  : 			AuMapPageEx(cr3, v2p((size_t)phys),0x100000000 + i * 4096, PAGING_USER); 

	mov	eax, DWORD PTR i$3[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, 4294967296				; 0000000100000000H
	add	rax, rcx
	mov	QWORD PTR tv181[rsp], rax
	mov	rcx, QWORD PTR phys$6[rsp]
	call	v2p
	mov	r9b, 4
	mov	rcx, QWORD PTR tv181[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?AuMapPageEx@@YA_NPEA_K_K1E@Z		; AuMapPageEx

; 242  : 		}

	jmp	$LN10@AuCreatePr
$LN9@AuCreatePr:
$LN12@AuCreatePr:

; 243  : 
; 244  : 	AuLibEntry_t *lib3 = AuGetSysLib("xnacrl.dll");

	lea	rcx, OFFSET FLAT:$SG4379
	call	?AuGetSysLib@@YAPEAU_libentry_@@PEAD@Z	; AuGetSysLib
	mov	QWORD PTR lib3$[rsp], rax

; 245  : 	if (lib != NULL) {

	cmp	QWORD PTR lib$[rsp], 0
	je	$LN8@AuCreatePr

; 246  : 		for (int i = 0; i < lib3->phys_blocks_count; i++) {

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN7@AuCreatePr
$LN6@AuCreatePr:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN7@AuCreatePr:
	mov	rax, QWORD PTR lib3$[rsp]
	mov	eax, DWORD PTR [rax+88]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN5@AuCreatePr

; 247  : 			void* phys = (void*)p2v((size_t)AuPmmngrAlloc());

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	p2v
	mov	QWORD PTR phys$4[rsp], rax

; 248  : 			memcpy (phys, (void*)p2v(lib3->phys_start + i * 4096), 4096);

	mov	eax, DWORD PTR i$2[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR lib3$[rsp]
	add	rax, QWORD PTR [rcx+72]
	mov	rcx, rax
	call	p2v
	mov	r8d, 4096				; 00001000H
	mov	rdx, rax
	mov	rcx, QWORD PTR phys$4[rsp]
	call	memcpy

; 249  : 			AuMapPageEx(cr3, v2p((size_t)phys), 0x100400000 + i * 4096, PAGING_USER);

	mov	eax, DWORD PTR i$2[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, 4299161600				; 0000000100400000H
	add	rax, rcx
	mov	QWORD PTR tv208[rsp], rax
	mov	rcx, QWORD PTR phys$4[rsp]
	call	v2p
	mov	r9b, 4
	mov	rcx, QWORD PTR tv208[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?AuMapPageEx@@YA_NPEA_K_K1E@Z		; AuMapPageEx

; 250  : 		}

	jmp	$LN6@AuCreatePr
$LN5@AuCreatePr:
$LN8@AuCreatePr:

; 251  : 	}
; 252  : 
; 253  : 	AuLibEntry_t *lib2 = AuGetSysLib("xewid.dll");

	lea	rcx, OFFSET FLAT:$SG4391
	call	?AuGetSysLib@@YAPEAU_libentry_@@PEAD@Z	; AuGetSysLib
	mov	QWORD PTR lib2$[rsp], rax

; 254  : 	if (lib2 != NULL){

	cmp	QWORD PTR lib2$[rsp], 0
	je	$LN4@AuCreatePr

; 255  : 		for (int i = 0; i < lib2->phys_blocks_count; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@AuCreatePr
$LN2@AuCreatePr:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@AuCreatePr:
	mov	rax, QWORD PTR lib2$[rsp]
	mov	eax, DWORD PTR [rax+88]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN1@AuCreatePr

; 256  : 			void* phys = (void*)p2v((size_t)AuPmmngrAlloc());

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	p2v
	mov	QWORD PTR phys$5[rsp], rax

; 257  : 			memcpy (phys, (void*)p2v(lib2->phys_start + i * 4096), 4096);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR lib2$[rsp]
	add	rax, QWORD PTR [rcx+72]
	mov	rcx, rax
	call	p2v
	mov	r8d, 4096				; 00001000H
	mov	rdx, rax
	mov	rcx, QWORD PTR phys$5[rsp]
	call	memcpy

; 258  : 			AuMapPageEx(cr3, v2p((size_t)phys),0x100200000 + i * 4096, PAGING_USER); 

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, 4297064448				; 0000000100200000H
	add	rax, rcx
	mov	QWORD PTR tv235[rsp], rax
	mov	rcx, QWORD PTR phys$5[rsp]
	call	v2p
	mov	r9b, 4
	mov	rcx, QWORD PTR tv235[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?AuMapPageEx@@YA_NPEA_K_K1E@Z		; AuMapPageEx

; 259  : 		}

	jmp	$LN2@AuCreatePr
$LN1@AuCreatePr:
$LN4@AuCreatePr:

; 260  : 	}
; 261  : 	
; 262  : 
; 263  : 
; 264  : 	uint64_t text_section_end = _image_base_ + position * 4096;

	mov	eax, DWORD PTR position$[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR _image_base_$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR text_section_end$[rsp], rax

; 265  : 	
; 266  : 	au_vm_area_t *vma = (au_vm_area_t*)malloc(sizeof(au_vm_area_t));

	mov	ecx, 80					; 00000050H
	call	malloc
	mov	QWORD PTR vma$[rsp], rax

; 267  : 	vma->start = text_section_start;

	mov	rax, QWORD PTR vma$[rsp]
	mov	rcx, QWORD PTR text_section_start$[rsp]
	mov	QWORD PTR [rax], rcx

; 268  : 	vma->end = text_section_end;

	mov	rax, QWORD PTR vma$[rsp]
	mov	rcx, QWORD PTR text_section_end$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 269  : 	vma->file = NULL;

	mov	rax, QWORD PTR vma$[rsp]
	mov	QWORD PTR [rax+24], 0

; 270  : 	vma->offset = 0;

	mov	rax, QWORD PTR vma$[rsp]
	mov	QWORD PTR [rax+32], 0

; 271  : 	vma->prot_flags = VM_READ | VM_EXEC;

	mov	eax, 5
	mov	rcx, QWORD PTR vma$[rsp]
	mov	WORD PTR [rcx+16], ax

; 272  : 	vma->type = VM_TYPE_TEXT;

	mov	rax, QWORD PTR vma$[rsp]
	mov	BYTE PTR [rax+48], 1

; 273  : 	vma->length = file->size;

	mov	rax, QWORD PTR file$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	rcx, QWORD PTR vma$[rsp]
	mov	QWORD PTR [rcx+40], rax

; 274  : 	AuInsertVMArea(process, vma);

	mov	rdx, QWORD PTR vma$[rsp]
	mov	rcx, QWORD PTR process$[rsp]
	call	?AuInsertVMArea@@YAXPEAU_process_@@PEAU_vma_area_@@@Z ; AuInsertVMArea

; 275  : 
; 276  : 	uint64_t stack = (uint64_t)create_user_stack(process,cr3);

	mov	rdx, QWORD PTR cr3$[rsp]
	mov	rcx, QWORD PTR process$[rsp]
	call	?create_user_stack@@YAPEA_KPEAU_process_@@PEA_K@Z ; create_user_stack
	mov	QWORD PTR stack$[rsp], rax

; 277  : 
; 278  : 	//!allocate current process
; 279  : 	process->name = procname;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR procname$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 280  : 	process->entry_point = ent;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR ent$[rsp]
	mov	QWORD PTR [rax+16], rcx

; 281  : 	process->num_thread = 0;

	mov	rax, QWORD PTR process$[rsp]
	mov	BYTE PTR [rax+2072], 0

; 282  : 	process->cr3 = cr3;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	mov	QWORD PTR [rax+2088], rcx

; 283  : 	process->image_base = _image_base_;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR _image_base_$[rsp]
	mov	QWORD PTR [rax+2096], rcx

; 284  : 	process->stack = stack;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	QWORD PTR [rax+2104], rcx

; 285  : 	process->image_size = nt->OptionalHeader.SizeOfImage;

	mov	rax, QWORD PTR nt$[rsp]
	mov	eax, DWORD PTR [rax+80]
	mov	rcx, QWORD PTR process$[rsp]
	mov	QWORD PTR [rcx+2080], rax

; 286  : 	process->parent = NULL;

	mov	rax, QWORD PTR process$[rsp]
	mov	QWORD PTR [rax+2176], 0

; 287  : 	process->_image_heap_break_ = PROCESS_HEAP_BREAK;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, 15032385536			; 0000000380000000H
	mov	QWORD PTR [rax+2112], rcx

; 288  : 	process->_heap_size_ = 0;

	mov	rax, QWORD PTR process$[rsp]
	mov	QWORD PTR [rax+2120], 0

; 289  : 	process->process_file = file;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	mov	QWORD PTR [rax+2144], rcx

; 290  : 	process->shared_mem_list = initialize_list();

	call	initialize_list
	mov	rcx, QWORD PTR process$[rsp]
	mov	QWORD PTR [rcx+2152], rax

; 291  : 	//! Create and thread and start scheduling when scheduler starts */
; 292  : 	thread_t *t = create_user_thread(ent,stack,(uint64_t)cr3,procname,0);

	mov	BYTE PTR [rsp+32], 0
	mov	r9, QWORD PTR procname$[rsp]
	mov	r8, QWORD PTR cr3$[rsp]
	mov	rdx, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR ent$[rsp]
	call	?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z ; create_user_thread
	mov	QWORD PTR t$[rsp], rax

; 293  : 	//! add the process to process manager
; 294  : 	process->threads[process->num_thread] = t;

	mov	rax, QWORD PTR process$[rsp]
	movzx	eax, BYTE PTR [rax+2072]
	mov	rcx, QWORD PTR process$[rsp]
	mov	rdx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rcx+rax*8+24], rdx

; 295  : 	process->num_thread++;

	mov	rax, QWORD PTR process$[rsp]
	movzx	eax, BYTE PTR [rax+2072]
	inc	al
	mov	rcx, QWORD PTR process$[rsp]
	mov	BYTE PTR [rcx+2072], al

; 296  : 	process->main_thread = t; 

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+2064], rcx

; 297  :     add_process(process);

	mov	rcx, QWORD PTR process$[rsp]
	call	?add_process@@YAXPEAU_process_@@@Z	; add_process

; 298  : 
; 299  : 	_debug_print_ ("***Process created \r\n");

	lea	rcx, OFFSET FLAT:$SG4410
	call	_debug_print_

; 300  : 
; 301  : 	return t->id;

	mov	rax, QWORD PTR t$[rsp]
	movzx	eax, WORD PTR [rax+242]
$LN16@AuCreatePr:

; 302  : }

	add	rsp, 280				; 00000118H
	ret	0
?AuCreateProcess@@YAHPEBDPEAD@Z ENDP			; AuCreateProcess
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
i$1 = 32
location$ = 40
tv74 = 48
cr3$ = 80
?create_inc_stack@@YAPEA_KPEA_K@Z PROC			; create_inc_stack

; 146  : uint64_t* create_inc_stack (uint64_t* cr3) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 147  : #define INC_STACK 0x00000000C0000000
; 148  : 	uint64_t location = (uint64_t)AuGetFreePage(0,true,(void*)INC_STACK);

	mov	r8d, -1073741824			; ffffffffc0000000H
	mov	dl, 1
	xor	ecx, ecx
	call	AuGetFreePage
	mov	QWORD PTR location$[rsp], rax

; 149  : 	for (int i = 0; i < (2*1024*1024) / 4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@create_inc
$LN2@create_inc:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@create_inc:
	cmp	DWORD PTR i$1[rsp], 512			; 00000200H
	jge	SHORT $LN1@create_inc

; 150  : 		AuMapPageEx(cr3,(uint64_t)AuPmmngrAlloc(), location + i * 4096, PAGING_USER);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR location$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv74[rsp], rax
	call	AuPmmngrAlloc
	mov	r9b, 4
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?AuMapPageEx@@YA_NPEA_K_K1E@Z		; AuMapPageEx

; 151  : 	}

	jmp	SHORT $LN2@create_inc
$LN1@create_inc:

; 152  : 
; 153  : 	return (uint64_t*)(location + (1*1024*1024));

	mov	rax, QWORD PTR location$[rsp]
	add	rax, 1048576				; 00100000H

; 154  : }

	add	rsp, 72					; 00000048H
	ret	0
?create_inc_stack@@YAPEA_KPEA_K@Z ENDP			; create_inc_stack
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
i$1 = 32
vma$ = 40
location$ = 48
block$2 = 56
tv73 = 64
proc$ = 96
cr3$ = 104
?create_user_stack@@YAPEA_KPEAU_process_@@PEA_K@Z PROC	; create_user_stack

; 121  : uint64_t *create_user_stack (process_t *proc, uint64_t* cr3) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 122  : #define USER_STACK  0x0000700000000000 
; 123  : 	uint64_t location = USER_STACK;

	mov	rax, 123145302310912			; 0000700000000000H
	mov	QWORD PTR location$[rsp], rax

; 124  : 	
; 125  : 	/* 2 mb stack / process */
; 126  : 	for (int i=0; i < (2*1024*1024)/4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@create_use
$LN2@create_use:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@create_use:
	cmp	DWORD PTR i$1[rsp], 512			; 00000200H
	jge	SHORT $LN1@create_use

; 127  : 		uint64_t *block = (uint64_t*)p2v((size_t)AuPmmngrAlloc());

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	p2v
	mov	QWORD PTR block$2[rsp], rax

; 128  : 		AuMapPageEx(cr3,v2p((size_t)block),location + i * 4096, PAGING_USER);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR location$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv73[rsp], rax
	mov	rcx, QWORD PTR block$2[rsp]
	call	v2p
	mov	r9b, 4
	mov	rcx, QWORD PTR tv73[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?AuMapPageEx@@YA_NPEA_K_K1E@Z		; AuMapPageEx

; 129  : 	}

	jmp	SHORT $LN2@create_use
$LN1@create_use:

; 130  : 
; 131  : 	au_vm_area_t *vma = (au_vm_area_t*)malloc(sizeof(au_vm_area_t));

	mov	ecx, 80					; 00000050H
	call	malloc
	mov	QWORD PTR vma$[rsp], rax

; 132  : 	vma->start = location;

	mov	rax, QWORD PTR vma$[rsp]
	mov	rcx, QWORD PTR location$[rsp]
	mov	QWORD PTR [rax], rcx

; 133  : 	vma->end = (location + 2*1024*1024);

	mov	rax, QWORD PTR location$[rsp]
	add	rax, 2097152				; 00200000H
	mov	rcx, QWORD PTR vma$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 134  : 	vma->file = NULL;

	mov	rax, QWORD PTR vma$[rsp]
	mov	QWORD PTR [rax+24], 0

; 135  : 	vma->offset = 0;

	mov	rax, QWORD PTR vma$[rsp]
	mov	QWORD PTR [rax+32], 0

; 136  : 	vma->prot_flags = VM_READ | VM_EXEC;

	mov	eax, 5
	mov	rcx, QWORD PTR vma$[rsp]
	mov	WORD PTR [rcx+16], ax

; 137  : 	vma->type = VM_TYPE_STACK;

	mov	rax, QWORD PTR vma$[rsp]
	mov	BYTE PTR [rax+48], 3

; 138  : 	vma->length = 2*1024*1024;

	mov	rax, QWORD PTR vma$[rsp]
	mov	QWORD PTR [rax+40], 2097152		; 00200000H

; 139  : 	AuInsertVMArea(proc, vma);

	mov	rdx, QWORD PTR vma$[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	call	?AuInsertVMArea@@YAXPEAU_process_@@PEAU_vma_area_@@@Z ; AuInsertVMArea

; 140  : 	return (uint64_t*)(USER_STACK + (2*1024*1024));

	mov	rax, 123145304408064			; 0000700000200000H

; 141  : }

	add	rsp, 88					; 00000058H
	ret	0
?create_user_stack@@YAPEA_KPEAU_process_@@PEA_K@Z ENDP	; create_user_stack
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
proc$ = 48
?remove_process@@YAXPEAU_process_@@@Z PROC		; remove_process

; 71   : void remove_process (process_t *proc) {

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 72   : 	
; 73   : 	if (process_head == NULL)

	cmp	QWORD PTR ?process_head@@3PEAU_process_@@EA, 0 ; process_head
	jne	SHORT $LN5@remove_pro

; 74   : 		return;

	jmp	$LN6@remove_pro
$LN5@remove_pro:

; 75   : 
; 76   : 	if (proc == process_head) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	cmp	QWORD PTR proc$[rsp], rax
	jne	SHORT $LN4@remove_pro

; 77   : 		process_head = process_head->next;

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	rax, QWORD PTR [rax+2160]
	mov	QWORD PTR ?process_head@@3PEAU_process_@@EA, rax ; process_head

; 78   : 	} else {

	jmp	SHORT $LN3@remove_pro
$LN4@remove_pro:

; 79   : 		proc->prev->next = proc->next;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+2168]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+2160]
	mov	QWORD PTR [rax+2160], rcx
$LN3@remove_pro:

; 80   : 	}
; 81   : 
; 82   : 	if (proc == process_last) {

	mov	rax, QWORD PTR ?process_last@@3PEAU_process_@@EA ; process_last
	cmp	QWORD PTR proc$[rsp], rax
	jne	SHORT $LN2@remove_pro

; 83   : 		process_last = proc->prev;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+2168]
	mov	QWORD PTR ?process_last@@3PEAU_process_@@EA, rax ; process_last

; 84   : 	} else {

	jmp	SHORT $LN1@remove_pro
$LN2@remove_pro:

; 85   : 		proc->next->prev = proc->prev;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+2160]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+2168]
	mov	QWORD PTR [rax+2168], rcx
$LN1@remove_pro:

; 86   : 	}
; 87   : 	pid--;

	mov	eax, DWORD PTR pid
	dec	eax
	mov	DWORD PTR pid, eax

; 88   : 	free(proc);

	mov	rcx, QWORD PTR proc$[rsp]
	call	free
$LN6@remove_pro:

; 89   : }

	add	rsp, 40					; 00000028H
	ret	0
?remove_process@@YAXPEAU_process_@@@Z ENDP		; remove_process
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
proc$ = 8
?add_process@@YAXPEAU_process_@@@Z PROC			; add_process

; 50   : void add_process (process_t *proc) {

	mov	QWORD PTR [rsp+8], rcx

; 51   : 	//mutex_lock (add_mutex);
; 52   : 	proc->next = NULL;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+2160], 0

; 53   : 	proc->prev = NULL;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+2168], 0

; 54   : 
; 55   : 	if (process_head == NULL) {

	cmp	QWORD PTR ?process_head@@3PEAU_process_@@EA, 0 ; process_head
	jne	SHORT $LN2@add_proces

; 56   : 		process_head = proc;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR ?process_head@@3PEAU_process_@@EA, rax ; process_head

; 57   : 		process_last = proc;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR ?process_last@@3PEAU_process_@@EA, rax ; process_last

; 58   : 	} else {

	jmp	SHORT $LN1@add_proces
$LN2@add_proces:

; 59   : 		process_last->next = proc;

	mov	rax, QWORD PTR ?process_last@@3PEAU_process_@@EA ; process_last
	mov	rcx, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+2160], rcx

; 60   : 		proc->prev = process_last;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR ?process_last@@3PEAU_process_@@EA ; process_last
	mov	QWORD PTR [rax+2168], rcx

; 61   : 		process_last = proc;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR ?process_last@@3PEAU_process_@@EA, rax ; process_last
$LN1@add_proces:

; 62   : 	}
; 63   : 	pid++;

	mov	eax, DWORD PTR pid
	inc	eax
	mov	DWORD PTR pid, eax

; 64   : 	//mutex_unlock (add_mutex);
; 65   : }

	ret	0
?add_process@@YAXPEAU_process_@@@Z ENDP			; add_process
_TEXT	ENDS
END
