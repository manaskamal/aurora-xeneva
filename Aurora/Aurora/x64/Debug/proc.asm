; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?process_head@@3PEAU_process_@@EA		; process_head
PUBLIC	?process_last@@3PEAU_process_@@EA		; process_last
_BSS	SEGMENT
user_stack_index DD 01H DUP (?)
	ALIGN	8

?process_head@@3PEAU_process_@@EA DQ 01H DUP (?)	; process_head
?process_last@@3PEAU_process_@@EA DQ 01H DUP (?)	; process_last
pid	DD	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
$SG3757	DB	'Executable image not found', 0aH, 00H
$SG3857	DB	'child', 00H
CONST	ENDS
PUBLIC	?create_user_stack@@YAPEA_KPEA_K@Z		; create_user_stack
PUBLIC	?create_inc_stack@@YAPEA_KPEA_K@Z		; create_inc_stack
PUBLIC	?create_process@@YAXPEBDPEADE@Z			; create_process
PUBLIC	?kill_process@@YAXXZ				; kill_process
PUBLIC	?get_num_process@@YAIXZ				; get_num_process
PUBLIC	?process_map_addresses@@YAX_K0PEA_KPEAU_process_@@@Z ; process_map_addresses
PUBLIC	?get_current_process@@YAPEAU_process_@@XZ	; get_current_process
PUBLIC	?add_process@@YAXPEAU_process_@@@Z		; add_process
PUBLIC	?remove_process@@YAXPEAU_process_@@@Z		; remove_process
PUBLIC	?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ; find_process_by_thread
PUBLIC	?find_process_by_id@@YAPEAU_process_@@I@Z	; find_process_by_id
PUBLIC	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
PUBLIC	?fork@@YAIXZ					; fork
PUBLIC	?exec@@YAXPEBDI@Z				; exec
EXTRN	?memset@@YAXPEAXEI@Z:PROC			; memset
EXTRN	memcpy:PROC
EXTRN	?pmmngr_alloc@@YAPEAXXZ:PROC			; pmmngr_alloc
EXTRN	?pmmngr_free@@YAXPEAX@Z:PROC			; pmmngr_free
EXTRN	x64_cli:PROC
EXTRN	x64_read_cr3:PROC
EXTRN	x64_write_cr3:PROC
EXTRN	?pml4_index@@YA_K_K@Z:PROC			; pml4_index
EXTRN	?map_page@@YA_N_K0@Z:PROC			; map_page
EXTRN	?map_page_ex@@YA_NPEA_K_K1@Z:PROC		; map_page_ex
EXTRN	?create_user_address_space@@YAPEA_KXZ:PROC	; create_user_address_space
EXTRN	?unmap_page@@YAX_K@Z:PROC			; unmap_page
EXTRN	?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z:PROC ; create_user_thread
EXTRN	?get_current_thread@@YAPEAU_thread_@@XZ:PROC	; get_current_thread
EXTRN	?task_delete@@YAXPEAU_thread_@@@Z:PROC		; task_delete
EXTRN	?printf@@YAXPEBDZZ:PROC				; printf
EXTRN	?open@@YA?AU_file_@@PEBD@Z:PROC			; open
EXTRN	?read_blk@@YAXPEAU_file_@@PEAE@Z:PROC		; read_blk
EXTRN	?load_pe_file@@YAXPEAEH@Z:PROC			; load_pe_file
EXTRN	?create_mutex@@YAPEAUmutex_t@@XZ:PROC		; create_mutex
EXTRN	?mutex_lock@@YAXPEAUmutex_t@@@Z:PROC		; mutex_lock
EXTRN	?mutex_unlock@@YAXPEAUmutex_t@@@Z:PROC		; mutex_unlock
_BSS	SEGMENT
	ALIGN	8

process_mutex DQ 01H DUP (?)
kill_mutex DQ	01H DUP (?)
add_mutex DQ	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$?create_user_stack@@YAPEA_KPEA_K@Z DD imagerel $LN6
	DD	imagerel $LN6+125
	DD	imagerel $unwind$?create_user_stack@@YAPEA_KPEA_K@Z
$pdata$?create_inc_stack@@YAPEA_KPEA_K@Z DD imagerel $LN6
	DD	imagerel $LN6+152
	DD	imagerel $unwind$?create_inc_stack@@YAPEA_KPEA_K@Z
$pdata$?create_process@@YAXPEBDPEADE@Z DD imagerel $LN9
	DD	imagerel $LN9+748
	DD	imagerel $unwind$?create_process@@YAXPEBDPEADE@Z
$pdata$?kill_process@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+263
	DD	imagerel $unwind$?kill_process@@YAXXZ
$pdata$?get_num_process@@YAIXZ DD imagerel $LN6
	DD	imagerel $LN6+65
	DD	imagerel $unwind$?get_num_process@@YAIXZ
$pdata$?process_map_addresses@@YAX_K0PEA_KPEAU_process_@@@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?process_map_addresses@@YAX_K0PEA_KPEAU_process_@@@Z
$pdata$?get_current_process@@YAPEAU_process_@@XZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?get_current_process@@YAPEAU_process_@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eprocess_mutex@@YAXXZ DD imagerel ??__Eprocess_mutex@@YAXXZ
	DD	imagerel ??__Eprocess_mutex@@YAXXZ+21
	DD	imagerel $unwind$??__Eprocess_mutex@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ekill_mutex@@YAXXZ DD imagerel ??__Ekill_mutex@@YAXXZ
	DD	imagerel ??__Ekill_mutex@@YAXXZ+21
	DD	imagerel $unwind$??__Ekill_mutex@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eadd_mutex@@YAXXZ DD imagerel ??__Eadd_mutex@@YAXXZ
	DD	imagerel ??__Eadd_mutex@@YAXXZ+21
	DD	imagerel $unwind$??__Eadd_mutex@@YAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?add_process@@YAXPEAU_process_@@@Z DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$?add_process@@YAXPEAU_process_@@@Z
$pdata$?remove_process@@YAXPEAU_process_@@@Z DD imagerel $LN8
	DD	imagerel $LN8+163
	DD	imagerel $unwind$?remove_process@@YAXPEAU_process_@@@Z
$pdata$?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z DD imagerel $LN7
	DD	imagerel $LN7+69
	DD	imagerel $unwind$?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z
$pdata$?find_process_by_id@@YAPEAU_process_@@I@Z DD imagerel $LN7
	DD	imagerel $LN7+67
	DD	imagerel $unwind$?find_process_by_id@@YAPEAU_process_@@I@Z
$pdata$?fork@@YAIXZ DD imagerel $LN6
	DD	imagerel $LN6+207
	DD	imagerel $unwind$?fork@@YAIXZ
$pdata$?exec@@YAXPEBDI@Z DD imagerel $LN6
	DD	imagerel $LN6+589
	DD	imagerel $unwind$?exec@@YAXPEBDI@Z
pdata	ENDS
CRT$XCU	SEGMENT
process_mutex$initializer$ DQ FLAT:??__Eprocess_mutex@@YAXXZ
CRT$XCU	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eadd_mutex@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ekill_mutex@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eprocess_mutex@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
xdata	SEGMENT
$unwind$?create_user_stack@@YAPEA_KPEA_K@Z DD 010901H
	DD	08209H
$unwind$?create_inc_stack@@YAPEA_KPEA_K@Z DD 010901H
	DD	08209H
$unwind$?create_process@@YAXPEBDPEADE@Z DD 041801H
	DD	02b0118H
	DD	060107011H
$unwind$?kill_process@@YAXXZ DD 010401H
	DD	0a204H
$unwind$?get_num_process@@YAIXZ DD 010401H
	DD	02204H
$unwind$?process_map_addresses@@YAX_K0PEA_KPEAU_process_@@@Z DD 011801H
	DD	08218H
$unwind$?get_current_process@@YAPEAU_process_@@XZ DD 010401H
	DD	06204H
$unwind$?add_process@@YAXPEAU_process_@@@Z DD 010901H
	DD	04209H
$unwind$?remove_process@@YAXPEAU_process_@@@Z DD 010901H
	DD	04209H
$unwind$?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z DD 010901H
	DD	02209H
$unwind$?find_process_by_id@@YAPEAU_process_@@I@Z DD 010801H
	DD	02208H
$unwind$?fork@@YAIXZ DD 010401H
	DD	0a204H
$unwind$?exec@@YAXPEBDI@Z DD 041201H
	DD	02d0112H
	DD	0600a700bH
xdata	ENDS
CRT$XCU	SEGMENT
kill_mutex$initializer$ DQ FLAT:??__Ekill_mutex@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
add_mutex$initializer$ DQ FLAT:??__Eadd_mutex@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
position$ = 48
child_proc$ = 56
buffer$ = 64
c_cr3$ = 72
new_cr3$ = 80
nt$ = 88
_image_base_$ = 96
dos$ = 104
block$1 = 112
p_cr3$ = 120
ent$ = 128
stack$ = 136
t$ = 144
f$ = 152
$T2 = 216
$T3 = 280
filename$ = 384
pid$ = 392
?exec@@YAXPEBDI@Z PROC					; exec

; 223  : void exec (const char* filename, uint32_t pid) {

$LN6:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 360				; 00000168H

; 224  : 	process_t *child_proc = find_process_by_id (pid);

	mov	ecx, DWORD PTR pid$[rsp]
	call	?find_process_by_id@@YAPEAU_process_@@I@Z ; find_process_by_id
	mov	QWORD PTR child_proc$[rsp], rax

; 225  : 	uint64_t p_cr3 = x64_read_cr3();

	call	x64_read_cr3
	mov	QWORD PTR p_cr3$[rsp], rax

; 226  : 
; 227  : 	//!Clear up the child address space
; 228  : 	uint64_t c_cr3 = (uint64_t)child_proc->cr3;

	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR c_cr3$[rsp], rax

; 229  : 	memset((void*)c_cr3, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR c_cr3$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 230  : 
; 231  : 	FILE f = open (filename);

	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	?open@@YA?AU_file_@@PEBD@Z		; open
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 60					; 0000003cH
	rep movsb
	lea	rax, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 60					; 0000003cH
	rep movsb

; 232  : 	if (f.status == FILE_FLAG_INVALID)

	cmp	DWORD PTR f$[rsp+56], 3
	jne	SHORT $LN3@exec

; 233  : 		return;

	jmp	$LN4@exec
$LN3@exec:

; 234  : 	unsigned char* buffer = (unsigned char*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR buffer$[rsp], rax

; 235  : 	read_blk (&f, buffer);

	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	?read_blk@@YAXPEAU_file_@@PEAE@Z	; read_blk

; 236  : 
; 237  : 	//! Create new mappings for exec
; 238  : 	uint64_t* new_cr3 = create_user_address_space();

	call	?create_user_address_space@@YAPEA_KXZ	; create_user_address_space
	mov	QWORD PTR new_cr3$[rsp], rax

; 239  : 	//! copy the new mappings to child_cr3
; 240  : 	memcpy ((void*)c_cr3, new_cr3, 4096);

	mov	r8d, 4096				; 00001000H
	mov	rdx, QWORD PTR new_cr3$[rsp]
	mov	rcx, QWORD PTR c_cr3$[rsp]
	call	memcpy

; 241  : 	//! deallocate the new mappings
; 242  : 	memset((void*)new_cr3, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR new_cr3$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 243  : 	pmmngr_free(new_cr3);

	mov	rcx, QWORD PTR new_cr3$[rsp]
	call	?pmmngr_free@@YAXPEAX@Z			; pmmngr_free

; 244  : 
; 245  : 
; 246  : 	//!After reading we can change cr3
; 247  :     x64_write_cr3((size_t)c_cr3);

	mov	rcx, QWORD PTR c_cr3$[rsp]
	call	x64_write_cr3

; 248  : 
; 249  : 	//!create the stack
; 250  : 	uint64_t stack = (uint64_t)create_user_stack(child_proc->cr3);

	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	?create_user_stack@@YAPEA_KPEA_K@Z	; create_user_stack
	mov	QWORD PTR stack$[rsp], rax

; 251  : 	child_proc->stack = stack;

	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	QWORD PTR [rax+56], rcx

; 252  : 
; 253  : 	IMAGE_DOS_HEADER* dos = (IMAGE_DOS_HEADER*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR dos$[rsp], rax

; 254  : 	PIMAGE_NT_HEADERS nt = raw_offset<PIMAGE_NT_HEADERS>(dos, dos->e_lfanew);

	mov	rax, QWORD PTR dos$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR nt$[rsp], rax

; 255  : 	
; 256  : 	//!extract the informations
; 257  :     load_pe_file(buffer,f.size);

	mov	edx, DWORD PTR f$[rsp+36]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	?load_pe_file@@YAXPEAEH@Z		; load_pe_file

; 258  : 	uint64_t _image_base_ = nt->OptionalHeader.ImageBase;

	mov	rax, QWORD PTR nt$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR _image_base_$[rsp], rax

; 259  : 	ientry ent = (ientry)(nt->OptionalHeader.AddressOfEntryPoint + nt->OptionalHeader.ImageBase); //buffer

	mov	rax, QWORD PTR nt$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR nt$[rsp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR ent$[rsp], rax

; 260  : 
; 261  : 	map_page((uint64_t)buffer,_image_base_);

	mov	rdx, QWORD PTR _image_base_$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	?map_page@@YA_N_K0@Z			; map_page

; 262  : 	int position = 1;  //we already read 4096 bytes at first

	mov	DWORD PTR position$[rsp], 1
$LN2@exec:

; 263  : 	while(f.eof != 1){

	cmp	DWORD PTR f$[rsp+40], 1
	je	SHORT $LN1@exec

; 264  : 		unsigned char* block = (unsigned char*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR block$1[rsp], rax

; 265  : 		read_blk(&f,block);

	mov	rdx, QWORD PTR block$1[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	?read_blk@@YAXPEAU_file_@@PEAE@Z	; read_blk

; 266  : 		map_page((uint64_t)block,_image_base_ + position * 4096);

	mov	eax, DWORD PTR position$[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR _image_base_$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR block$1[rsp]
	call	?map_page@@YA_N_K0@Z			; map_page

; 267  : 		position++;

	mov	eax, DWORD PTR position$[rsp]
	inc	eax
	mov	DWORD PTR position$[rsp], eax

; 268  : 	}

	jmp	SHORT $LN2@exec
$LN1@exec:

; 269  : 
; 270  : 	child_proc->entry_point = ent;

	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rcx, QWORD PTR ent$[rsp]
	mov	QWORD PTR [rax+16], rcx

; 271  : 	x64_write_cr3(p_cr3);

	mov	rcx, QWORD PTR p_cr3$[rsp]
	call	x64_write_cr3

; 272  : 
; 273  : 
; 274  : 	thread_t *t = create_user_thread(child_proc->entry_point,child_proc->stack,(uint64_t)child_proc->cr3,"child",1);

	mov	BYTE PTR [rsp+32], 1
	lea	r9, OFFSET FLAT:$SG3857
	mov	rax, QWORD PTR child_proc$[rsp]
	mov	r8, QWORD PTR [rax+40]
	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rdx, QWORD PTR [rax+56]
	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z ; create_user_thread
	mov	QWORD PTR t$[rsp], rax
$LN4@exec:

; 275  : }

	add	rsp, 360				; 00000168H
	pop	rdi
	pop	rsi
	ret	0
?exec@@YAXPEBDI@Z ENDP					; exec
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
i$1 = 32
child_process$ = 40
parent$ = 48
child_cr3$ = 56
p_thread$ = 64
parent_cr3$ = 72
?fork@@YAIXZ PROC					; fork

; 202  : uint32_t fork () {

$LN6:
	sub	rsp, 88					; 00000058H

; 203  : 	process_t *child_process = (process_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR child_process$[rsp], rax

; 204  : 	
; 205  : 	thread_t * p_thread = get_current_thread();

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	QWORD PTR p_thread$[rsp], rax

; 206  : 	process_t *parent = find_process_by_thread (p_thread);

	mov	rcx, QWORD PTR p_thread$[rsp]
	call	?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ; find_process_by_thread
	mov	QWORD PTR parent$[rsp], rax

; 207  : 
; 208  : 	uint64_t *child_cr3 = (uint64_t*)pmmngr_alloc(); //create_user_address_space();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR child_cr3$[rsp], rax

; 209  : 	uint64_t *parent_cr3 = parent->cr3;

	mov	rax, QWORD PTR parent$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR parent_cr3$[rsp], rax

; 210  : 
; 211  : 	for (int i = 0; i < 512; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@fork
$LN2@fork:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@fork:
	cmp	DWORD PTR i$1[rsp], 512			; 00000200H
	jge	SHORT $LN1@fork

; 212  : 		child_cr3[i] = parent_cr3[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR child_cr3$[rsp]
	mov	r8, QWORD PTR parent_cr3$[rsp]
	mov	rax, QWORD PTR [r8+rax*8]
	mov	QWORD PTR [rdx+rcx*8], rax
	jmp	SHORT $LN2@fork
$LN1@fork:

; 213  : 
; 214  : 	memcpy (child_process, parent,sizeof(process_t));

	mov	r8d, 104				; 00000068H
	mov	rdx, QWORD PTR parent$[rsp]
	mov	rcx, QWORD PTR child_process$[rsp]
	call	memcpy

; 215  : 	child_process->pid_t = pid;

	mov	rax, QWORD PTR child_process$[rsp]
	mov	ecx, DWORD PTR pid
	mov	DWORD PTR [rax], ecx

; 216  : 	child_process->cr3 = child_cr3; //parent->cr3;

	mov	rax, QWORD PTR child_process$[rsp]
	mov	rcx, QWORD PTR child_cr3$[rsp]
	mov	QWORD PTR [rax+40], rcx

; 217  : 	child_process->parent = parent;

	mov	rax, QWORD PTR child_process$[rsp]
	mov	rcx, QWORD PTR parent$[rsp]
	mov	QWORD PTR [rax+96], rcx

; 218  : 	add_process (child_process);

	mov	rcx, QWORD PTR child_process$[rsp]
	call	?add_process@@YAXPEAU_process_@@@Z	; add_process

; 219  : 	return child_process->pid_t;

	mov	rax, QWORD PTR child_process$[rsp]
	mov	eax, DWORD PTR [rax]

; 220  : }

	add	rsp, 88					; 00000058H
	ret	0
?fork@@YAIXZ ENDP					; fork
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z PROC ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>, COMDAT

; 182  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 183  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 184  : 	}

	ret	0
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ENDP ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
proc$1 = 0
pid$ = 32
?find_process_by_id@@YAPEAU_process_@@I@Z PROC		; find_process_by_id

; 75   : process_t *find_process_by_id (uint32_t pid) {

$LN7:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 76   : 	for (process_t *proc = process_head; proc != NULL; proc = proc->next) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	QWORD PTR proc$1[rsp], rax
	jmp	SHORT $LN4@find_proce
$LN3@find_proce:
	mov	rax, QWORD PTR proc$1[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR proc$1[rsp], rax
$LN4@find_proce:
	cmp	QWORD PTR proc$1[rsp], 0
	je	SHORT $LN2@find_proce

; 77   : 		if (proc->pid_t == pid) {

	mov	rax, QWORD PTR proc$1[rsp]
	mov	ecx, DWORD PTR pid$[rsp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN1@find_proce

; 78   : 			return proc;

	mov	rax, QWORD PTR proc$1[rsp]
	jmp	SHORT $LN5@find_proce
$LN1@find_proce:

; 79   : 		}
; 80   : 	}

	jmp	SHORT $LN3@find_proce
$LN2@find_proce:

; 81   : 	return NULL;

	xor	eax, eax
$LN5@find_proce:

; 82   : }

	add	rsp, 24
	ret	0
?find_process_by_id@@YAPEAU_process_@@I@Z ENDP		; find_process_by_id
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
proc$1 = 0
thread$ = 32
?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z PROC ; find_process_by_thread

; 66   : process_t *find_process_by_thread (thread_t *thread) {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 67   : 	for (process_t *proc = process_head; proc != NULL; proc = proc->next) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	QWORD PTR proc$1[rsp], rax
	jmp	SHORT $LN4@find_proce
$LN3@find_proce:
	mov	rax, QWORD PTR proc$1[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR proc$1[rsp], rax
$LN4@find_proce:
	cmp	QWORD PTR proc$1[rsp], 0
	je	SHORT $LN2@find_proce

; 68   : 		if (proc->thread_data_pointer == thread) {

	mov	rax, QWORD PTR proc$1[rsp]
	mov	rcx, QWORD PTR thread$[rsp]
	cmp	QWORD PTR [rax+24], rcx
	jne	SHORT $LN1@find_proce

; 69   : 			return proc;

	mov	rax, QWORD PTR proc$1[rsp]
	jmp	SHORT $LN5@find_proce
$LN1@find_proce:

; 70   : 		}
; 71   : 	}

	jmp	SHORT $LN3@find_proce
$LN2@find_proce:
$LN5@find_proce:

; 72   : }

	add	rsp, 24
	ret	0
?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ENDP ; find_process_by_thread
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
proc$ = 48
?remove_process@@YAXPEAU_process_@@@Z PROC		; remove_process

; 44   : void remove_process (process_t *proc) {

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 45   : 	
; 46   : 	if (process_head == NULL)

	cmp	QWORD PTR ?process_head@@3PEAU_process_@@EA, 0 ; process_head
	jne	SHORT $LN5@remove_pro

; 47   : 		return;

	jmp	$LN6@remove_pro
$LN5@remove_pro:

; 48   : 
; 49   : 	if (proc == process_head) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	cmp	QWORD PTR proc$[rsp], rax
	jne	SHORT $LN4@remove_pro

; 50   : 		process_head = process_head->next;

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR ?process_head@@3PEAU_process_@@EA, rax ; process_head

; 51   : 	} else {

	jmp	SHORT $LN3@remove_pro
$LN4@remove_pro:

; 52   : 		proc->prev->next = proc->next;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+80]
	mov	QWORD PTR [rax+80], rcx
$LN3@remove_pro:

; 53   : 	}
; 54   : 
; 55   : 	if (proc == process_last) {

	mov	rax, QWORD PTR ?process_last@@3PEAU_process_@@EA ; process_last
	cmp	QWORD PTR proc$[rsp], rax
	jne	SHORT $LN2@remove_pro

; 56   : 		process_last = proc->prev;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR ?process_last@@3PEAU_process_@@EA, rax ; process_last

; 57   : 	} else {

	jmp	SHORT $LN1@remove_pro
$LN2@remove_pro:

; 58   : 		proc->next->prev = proc->prev;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+88]
	mov	QWORD PTR [rax+88], rcx
$LN1@remove_pro:

; 59   : 	}
; 60   : 	pid--;

	mov	eax, DWORD PTR pid
	dec	eax
	mov	DWORD PTR pid, eax

; 61   : 	pmmngr_free (proc);

	mov	rcx, QWORD PTR proc$[rsp]
	call	?pmmngr_free@@YAXPEAX@Z			; pmmngr_free
$LN6@remove_pro:

; 62   : }

	add	rsp, 40					; 00000028H
	ret	0
?remove_process@@YAXPEAU_process_@@@Z ENDP		; remove_process
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
proc$ = 48
?add_process@@YAXPEAU_process_@@@Z PROC			; add_process

; 26   : void add_process (process_t *proc) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 27   : 	mutex_lock (add_mutex);

	mov	rcx, QWORD PTR add_mutex
	call	?mutex_lock@@YAXPEAUmutex_t@@@Z		; mutex_lock

; 28   : 	proc->next = NULL;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+80], 0

; 29   : 	proc->prev = NULL;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+88], 0

; 30   : 
; 31   : 	if (process_head == NULL) {

	cmp	QWORD PTR ?process_head@@3PEAU_process_@@EA, 0 ; process_head
	jne	SHORT $LN2@add_proces

; 32   : 		process_head = proc;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR ?process_head@@3PEAU_process_@@EA, rax ; process_head

; 33   : 		process_last = proc;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR ?process_last@@3PEAU_process_@@EA, rax ; process_last

; 34   : 	} else {

	jmp	SHORT $LN1@add_proces
$LN2@add_proces:

; 35   : 		process_last->next = proc;

	mov	rax, QWORD PTR ?process_last@@3PEAU_process_@@EA ; process_last
	mov	rcx, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+80], rcx

; 36   : 		proc->prev = process_last;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR ?process_last@@3PEAU_process_@@EA ; process_last
	mov	QWORD PTR [rax+88], rcx

; 37   : 		process_last = proc;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR ?process_last@@3PEAU_process_@@EA, rax ; process_last
$LN1@add_proces:

; 38   : 	}
; 39   : 	pid++;

	mov	eax, DWORD PTR pid
	inc	eax
	mov	DWORD PTR pid, eax

; 40   : 	mutex_unlock (add_mutex);

	mov	rcx, QWORD PTR add_mutex
	call	?mutex_unlock@@YAXPEAUmutex_t@@@Z	; mutex_unlock

; 41   : }

	add	rsp, 40					; 00000028H
	ret	0
?add_process@@YAXPEAU_process_@@@Z ENDP			; add_process
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
;	COMDAT ??__Eadd_mutex@@YAXXZ
text$yc	SEGMENT
??__Eadd_mutex@@YAXXZ PROC				; `dynamic initializer for 'add_mutex'', COMDAT

; 20   : static mutex_t *add_mutex = create_mutex();

	sub	rsp, 40					; 00000028H
	call	?create_mutex@@YAPEAUmutex_t@@XZ	; create_mutex
	mov	QWORD PTR add_mutex, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Eadd_mutex@@YAXXZ ENDP				; `dynamic initializer for 'add_mutex''
text$yc	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
;	COMDAT ??__Ekill_mutex@@YAXXZ
text$yc	SEGMENT
??__Ekill_mutex@@YAXXZ PROC				; `dynamic initializer for 'kill_mutex'', COMDAT

; 19   : static mutex_t *kill_mutex = create_mutex();

	sub	rsp, 40					; 00000028H
	call	?create_mutex@@YAPEAUmutex_t@@XZ	; create_mutex
	mov	QWORD PTR kill_mutex, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ekill_mutex@@YAXXZ ENDP				; `dynamic initializer for 'kill_mutex''
text$yc	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
;	COMDAT ??__Eprocess_mutex@@YAXXZ
text$yc	SEGMENT
??__Eprocess_mutex@@YAXXZ PROC				; `dynamic initializer for 'process_mutex'', COMDAT

; 18   : static mutex_t *process_mutex = create_mutex();

	sub	rsp, 40					; 00000028H
	call	?create_mutex@@YAPEAUmutex_t@@XZ	; create_mutex
	mov	QWORD PTR process_mutex, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Eprocess_mutex@@YAXXZ ENDP				; `dynamic initializer for 'process_mutex''
text$yc	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
p_thread$ = 32
c_proc$ = 40
?get_current_process@@YAPEAU_process_@@XZ PROC		; get_current_process

; 297  : process_t * get_current_process () {

$LN3:
	sub	rsp, 56					; 00000038H

; 298  : 	thread_t * p_thread = get_current_thread();

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	QWORD PTR p_thread$[rsp], rax

; 299  : 	process_t *c_proc = find_process_by_thread (p_thread);

	mov	rcx, QWORD PTR p_thread$[rsp]
	call	?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ; find_process_by_thread
	mov	QWORD PTR c_proc$[rsp], rax

; 300  : 	return c_proc;

	mov	rax, QWORD PTR c_proc$[rsp]

; 301  : }

	add	rsp, 56					; 00000038H
	ret	0
?get_current_process@@YAPEAU_process_@@XZ ENDP		; get_current_process
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
current_proc$1 = 32
c_cr3$ = 40
tv73 = 48
addr$ = 80
length$ = 88
current_address_space$ = 96
c_proc$ = 104
?process_map_addresses@@YAX_K0PEA_KPEAU_process_@@@Z PROC ; process_map_addresses

; 287  : void process_map_addresses (uint64_t addr, uint64_t length, uint64_t *current_address_space, process_t *c_proc) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 288  : 	uint64_t *c_cr3 = 0;

	mov	QWORD PTR c_cr3$[rsp], 0

; 289  : 	for (process_t * current_proc = process_head; current_proc != NULL; current_proc = current_proc->next) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	QWORD PTR current_proc$1[rsp], rax
	jmp	SHORT $LN4@process_ma
$LN3@process_ma:
	mov	rax, QWORD PTR current_proc$1[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR current_proc$1[rsp], rax
$LN4@process_ma:
	cmp	QWORD PTR current_proc$1[rsp], 0
	je	SHORT $LN2@process_ma

; 290  : 		if (current_proc == c_proc) 

	mov	rax, QWORD PTR c_proc$[rsp]
	cmp	QWORD PTR current_proc$1[rsp], rax
	jne	SHORT $LN1@process_ma

; 291  : 			continue;

	jmp	SHORT $LN3@process_ma
$LN1@process_ma:

; 292  : 		c_cr3 = (uint64_t*)current_proc->thread_data_pointer->cr3;

	mov	rax, QWORD PTR current_proc$1[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	rax, QWORD PTR [rax+192]
	mov	QWORD PTR c_cr3$[rsp], rax

; 293  : 		c_cr3[pml4_index(addr)] = current_address_space[pml4_index(addr)];

	mov	rcx, QWORD PTR addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	QWORD PTR tv73[rsp], rax
	mov	rcx, QWORD PTR addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR c_cr3$[rsp]
	mov	rdx, QWORD PTR current_address_space$[rsp]
	mov	r8, QWORD PTR tv73[rsp]
	mov	rdx, QWORD PTR [rdx+r8*8]
	mov	QWORD PTR [rcx+rax*8], rdx

; 294  : 	}

	jmp	SHORT $LN3@process_ma
$LN2@process_ma:

; 295  : }

	add	rsp, 72					; 00000048H
	ret	0
?process_map_addresses@@YAX_K0PEA_KPEAU_process_@@@Z ENDP ; process_map_addresses
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
num_process$ = 0
current_proc$1 = 8
?get_num_process@@YAIXZ PROC				; get_num_process

; 279  : uint32_t get_num_process () {

$LN6:
	sub	rsp, 24

; 280  : 	uint32_t num_process = 0;

	mov	DWORD PTR num_process$[rsp], 0

; 281  : 	for (process_t * current_proc = process_head; current_proc != NULL; current_proc = current_proc->next) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	QWORD PTR current_proc$1[rsp], rax
	jmp	SHORT $LN3@get_num_pr
$LN2@get_num_pr:
	mov	rax, QWORD PTR current_proc$1[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR current_proc$1[rsp], rax
$LN3@get_num_pr:
	cmp	QWORD PTR current_proc$1[rsp], 0
	je	SHORT $LN1@get_num_pr

; 282  : 		num_process++;

	mov	eax, DWORD PTR num_process$[rsp]
	inc	eax
	mov	DWORD PTR num_process$[rsp], eax

; 283  : 	}

	jmp	SHORT $LN2@get_num_pr
$LN1@get_num_pr:

; 284  : 	return num_process;

	mov	eax, DWORD PTR num_process$[rsp]

; 285  : }

	add	rsp, 24
	ret	0
?get_num_process@@YAIXZ ENDP				; get_num_process
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
i$1 = 32
i$2 = 36
proc$ = 40
remove_thread$ = 48
init_stack$ = 56
tv77 = 64
virtual_addr$3 = 72
?kill_process@@YAXXZ PROC				; kill_process

; 181  : void kill_process () {

$LN9:
	sub	rsp, 88					; 00000058H

; 182  : 	x64_cli();

	call	x64_cli

; 183  : 	mutex_lock (kill_mutex);

	mov	rcx, QWORD PTR kill_mutex
	call	?mutex_lock@@YAXPEAUmutex_t@@@Z		; mutex_lock

; 184  : 	thread_t * remove_thread = get_current_thread();

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	QWORD PTR remove_thread$[rsp], rax

; 185  : 	process_t *proc = find_process_by_thread (remove_thread);

	mov	rcx, QWORD PTR remove_thread$[rsp]
	call	?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ; find_process_by_thread
	mov	QWORD PTR proc$[rsp], rax

; 186  : 	uint64_t  init_stack = proc->stack - 0x100000;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+56]
	sub	rax, 1048576				; 00100000H
	mov	QWORD PTR init_stack$[rsp], rax

; 187  : 	for (int i = 0; i < 0x100000 / 256; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN6@kill_proce
$LN5@kill_proce:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN6@kill_proce:
	cmp	DWORD PTR i$1[rsp], 4096		; 00001000H
	jge	SHORT $LN4@kill_proce

; 188  : 		unmap_page (init_stack + i * 4096);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR init_stack$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?unmap_page@@YAX_K@Z			; unmap_page

; 189  : 	}

	jmp	SHORT $LN5@kill_proce
$LN4@kill_proce:

; 190  : 
; 191  : 	for (int i = 0; i < proc->image_size / 4096; i++) {

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN3@kill_proce
$LN2@kill_proce:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN3@kill_proce:
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	QWORD PTR tv77[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rcx+32]
	mov	ecx, 4096				; 00001000H
	div	rcx
	mov	rcx, QWORD PTR tv77[rsp]
	cmp	rcx, rax
	jae	SHORT $LN1@kill_proce

; 192  : 		uint64_t virtual_addr = proc->image_base + (i * 4096);

	mov	eax, DWORD PTR i$2[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR proc$[rsp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR virtual_addr$3[rsp], rax

; 193  : 		unmap_page (virtual_addr);

	mov	rcx, QWORD PTR virtual_addr$3[rsp]
	call	?unmap_page@@YAX_K@Z			; unmap_page

; 194  : 	}

	jmp	SHORT $LN2@kill_proce
$LN1@kill_proce:

; 195  : 
; 196  : 	remove_process (proc);

	mov	rcx, QWORD PTR proc$[rsp]
	call	?remove_process@@YAXPEAU_process_@@@Z	; remove_process

; 197  : 	task_delete (remove_thread);

	mov	rcx, QWORD PTR remove_thread$[rsp]
	call	?task_delete@@YAXPEAU_thread_@@@Z	; task_delete

; 198  : 	mutex_unlock (kill_mutex);

	mov	rcx, QWORD PTR kill_mutex
	call	?mutex_unlock@@YAXPEAUmutex_t@@@Z	; mutex_unlock

; 199  : }

	add	rsp, 88					; 00000058H
	ret	0
?kill_process@@YAXXZ ENDP				; kill_process
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
process$ = 48
i$1 = 56
position$ = 60
cr3$ = 64
nt$ = 72
buf$ = 80
_image_base_$ = 88
dos$ = 96
block$2 = 104
stack$ = 112
ent$ = 120
tv145 = 128
t$ = 136
file$ = 144
$T3 = 208
$T4 = 272
filename$ = 368
procname$ = 376
priority$ = 384
?create_process@@YAXPEBDPEADE@Z PROC			; create_process

; 116  : void create_process(const char* filename, char* procname, uint8_t priority) {

$LN9:
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 344				; 00000158H

; 117  : 	mutex_lock (process_mutex);

	mov	rcx, QWORD PTR process_mutex
	call	?mutex_lock@@YAXPEAUmutex_t@@@Z		; mutex_lock

; 118  : 	//!allocate a data-structure for process 
; 119  : 	process_t *process = (process_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR process$[rsp], rax

; 120  : 	process->pid_t = pid;

	mov	rax, QWORD PTR process$[rsp]
	mov	ecx, DWORD PTR pid
	mov	DWORD PTR [rax], ecx

; 121  : 	//!open the process file-binary
; 122  : 	FILE file = open(filename);

	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	?open@@YA?AU_file_@@PEBD@Z		; open
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 60					; 0000003cH
	rep movsb
	lea	rax, QWORD PTR file$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 60					; 0000003cH
	rep movsb

; 123  : 	if (file.status == FILE_FLAG_INVALID) {

	cmp	DWORD PTR file$[rsp+56], 3
	jne	SHORT $LN6@create_pro

; 124  : 		printf("Executable image not found\n");

	lea	rcx, OFFSET FLAT:$SG3757
	call	?printf@@YAXPEBDZZ			; printf

; 125  : 		return;

	jmp	$LN7@create_pro
$LN6@create_pro:

; 126  : 	}
; 127  : 
; 128  : 	//!open the binary file and read it
; 129  : 	unsigned char* buf = (unsigned char*)pmmngr_alloc();   //18*1024

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR buf$[rsp], rax

; 130  : 	read_blk(&file,buf);

	mov	rdx, QWORD PTR buf$[rsp]
	lea	rcx, QWORD PTR file$[rsp]
	call	?read_blk@@YAXPEAU_file_@@PEAE@Z	; read_blk

; 131  : 	
; 132  : 	IMAGE_DOS_HEADER* dos = (IMAGE_DOS_HEADER*)buf;

	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR dos$[rsp], rax

; 133  : 	PIMAGE_NT_HEADERS nt = raw_offset<PIMAGE_NT_HEADERS>(dos, dos->e_lfanew);

	mov	rax, QWORD PTR dos$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR nt$[rsp], rax

; 134  : 
; 135  : 
; 136  : 	//!extract the informations
; 137  :     load_pe_file(buf,file.size);

	mov	edx, DWORD PTR file$[rsp+36]
	mov	rcx, QWORD PTR buf$[rsp]
	call	?load_pe_file@@YAXPEAEH@Z		; load_pe_file

; 138  : 	uint64_t _image_base_ = nt->OptionalHeader.ImageBase;

	mov	rax, QWORD PTR nt$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR _image_base_$[rsp], rax

; 139  : 	ientry ent = (ientry)(nt->OptionalHeader.AddressOfEntryPoint + nt->OptionalHeader.ImageBase); //buffer

	mov	rax, QWORD PTR nt$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR nt$[rsp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR ent$[rsp], rax

; 140  : 	
; 141  : 	//! create the user stack and address space
; 142  :     uint64_t *cr3 = create_user_address_space();

	call	?create_user_address_space@@YAPEA_KXZ	; create_user_address_space
	mov	QWORD PTR cr3$[rsp], rax

; 143  : 	uint64_t stack = (uint64_t)create_user_stack(cr3);

	mov	rcx, QWORD PTR cr3$[rsp]
	call	?create_user_stack@@YAPEA_KPEA_K@Z	; create_user_stack
	mov	QWORD PTR stack$[rsp], rax

; 144  : 	map_page_ex(cr3,(uint64_t)buf,_image_base_);

	mov	r8, QWORD PTR _image_base_$[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?map_page_ex@@YA_NPEA_K_K1@Z		; map_page_ex

; 145  : 
; 146  : 	//! read rest of the image
; 147  : 	int position = 1;  //we already read 4096 bytes at first

	mov	DWORD PTR position$[rsp], 1
$LN5@create_pro:

; 148  : 	while(file.eof != 1){

	cmp	DWORD PTR file$[rsp+40], 1
	je	SHORT $LN4@create_pro

; 149  : 		unsigned char* block = (unsigned char*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR block$2[rsp], rax

; 150  : 		read_blk(&file,block);

	mov	rdx, QWORD PTR block$2[rsp]
	lea	rcx, QWORD PTR file$[rsp]
	call	?read_blk@@YAXPEAU_file_@@PEAE@Z	; read_blk

; 151  : 		map_page_ex(cr3,(uint64_t)block,_image_base_ + position * 4096);

	mov	eax, DWORD PTR position$[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR _image_base_$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR block$2[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?map_page_ex@@YA_NPEA_K_K1@Z		; map_page_ex

; 152  : 		position++;

	mov	eax, DWORD PTR position$[rsp]
	inc	eax
	mov	DWORD PTR position$[rsp], eax

; 153  : 	}

	jmp	SHORT $LN5@create_pro
$LN4@create_pro:

; 154  : 
; 155  : 
; 156  : 	for (int i = 0; i < 0xB00000 / 4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@create_pro
$LN2@create_pro:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@create_pro:
	cmp	DWORD PTR i$1[rsp], 2816		; 00000b00H
	jge	SHORT $LN1@create_pro

; 157  : 		map_page_ex (cr3, (uint64_t)pmmngr_alloc(), 0x0000080000000000 + i * 4096);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, 8796093022208			; 0000080000000000H
	add	rax, rcx
	mov	QWORD PTR tv145[rsp], rax
	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	rcx, QWORD PTR tv145[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?map_page_ex@@YA_NPEA_K_K1@Z		; map_page_ex

; 158  : 	}

	jmp	SHORT $LN2@create_pro
$LN1@create_pro:

; 159  : 
; 160  : 	//!allocate current process
; 161  : 	process->name = procname;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR procname$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 162  : 	process->entry_point = ent;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR ent$[rsp]
	mov	QWORD PTR [rax+16], rcx

; 163  : 
; 164  : 	process->cr3 = cr3;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	mov	QWORD PTR [rax+40], rcx

; 165  : 	process->image_base = _image_base_;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR _image_base_$[rsp]
	mov	QWORD PTR [rax+48], rcx

; 166  : 	process->stack = stack;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	QWORD PTR [rax+56], rcx

; 167  : 	process->image_size = nt->OptionalHeader.SizeOfImage;

	mov	rax, QWORD PTR nt$[rsp]
	mov	eax, DWORD PTR [rax+80]
	mov	rcx, QWORD PTR process$[rsp]
	mov	QWORD PTR [rcx+32], rax

; 168  : 	process->parent = NULL;

	mov	rax, QWORD PTR process$[rsp]
	mov	QWORD PTR [rax+96], 0

; 169  : 	process->user_heap_start = (void*)0x0000080000000000;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, 8796093022208			; 0000080000000000H
	mov	QWORD PTR [rax+64], rcx

; 170  : 	process->heap_size = 0xB00000;

	mov	rax, QWORD PTR process$[rsp]
	mov	QWORD PTR [rax+72], 11534336		; 00b00000H

; 171  : 	//! Create and thread and start scheduling when scheduler starts */
; 172  : 	thread_t *t = create_user_thread(process->entry_point,stack,(uint64_t)cr3,procname,priority);

	movzx	eax, BYTE PTR priority$[rsp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR procname$[rsp]
	mov	r8, QWORD PTR cr3$[rsp]
	mov	rdx, QWORD PTR stack$[rsp]
	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z ; create_user_thread
	mov	QWORD PTR t$[rsp], rax

; 173  : 	//! add the process to process manager
; 174  : 	process->thread_data_pointer = t;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 175  :     add_process(process);

	mov	rcx, QWORD PTR process$[rsp]
	call	?add_process@@YAXPEAU_process_@@@Z	; add_process

; 176  : 	mutex_unlock (process_mutex);

	mov	rcx, QWORD PTR process_mutex
	call	?mutex_unlock@@YAXPEAUmutex_t@@@Z	; mutex_unlock
$LN7@create_pro:

; 177  : 
; 178  : }

	add	rsp, 344				; 00000158H
	pop	rdi
	pop	rsi
	ret	0
?create_process@@YAXPEBDPEADE@Z ENDP			; create_process
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
i$1 = 32
location$ = 40
tv71 = 48
cr3$ = 80
?create_inc_stack@@YAPEA_KPEA_K@Z PROC			; create_inc_stack

; 101  : uint64_t* create_inc_stack (uint64_t* cr3) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 102  : #define INC_STACK 0x0000010000000000
; 103  : 	uint64_t location = INC_STACK + user_stack_index;

	movsxd	rax, DWORD PTR user_stack_index
	mov	rcx, 1099511627776			; 0000010000000000H
	add	rax, rcx
	mov	QWORD PTR location$[rsp], rax

; 104  : 
; 105  : 	for (int i = 0; i < 0x100000 / 4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@create_inc
$LN2@create_inc:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@create_inc:
	cmp	DWORD PTR i$1[rsp], 256			; 00000100H
	jge	SHORT $LN1@create_inc

; 106  : 		map_page_ex (cr3, (uint64_t)pmmngr_alloc(), location + i * 4096);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR location$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv71[rsp], rax
	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	rcx, QWORD PTR tv71[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?map_page_ex@@YA_NPEA_K_K1@Z		; map_page_ex

; 107  : 	}

	jmp	SHORT $LN2@create_inc
$LN1@create_inc:

; 108  : 
; 109  : 	user_stack_index += 0x100000;

	mov	eax, DWORD PTR user_stack_index
	add	eax, 1048576				; 00100000H
	mov	DWORD PTR user_stack_index, eax

; 110  : 	return (uint64_t*)(INC_STACK + 0x100000);

	mov	rax, 1099512676352			; 0000010000100000H

; 111  : }

	add	rsp, 72					; 00000048H
	ret	0
?create_inc_stack@@YAPEA_KPEA_K@Z ENDP			; create_inc_stack
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
i$1 = 32
location$ = 40
tv69 = 48
cr3$ = 80
?create_user_stack@@YAPEA_KPEA_K@Z PROC			; create_user_stack

; 84   : uint64_t *create_user_stack (uint64_t* cr3) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 85   : 
; 86   : #define USER_STACK 0x0000700000000000
; 87   : 	uint64_t location = USER_STACK; // + user_stack_index;

	mov	rax, 123145302310912			; 0000700000000000H
	mov	QWORD PTR location$[rsp], rax

; 88   : 	
; 89   : 	/* 1 mb stack / process */
; 90   : 	for (int i=0; i < 0x100000/4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@create_use
$LN2@create_use:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@create_use:
	cmp	DWORD PTR i$1[rsp], 256			; 00000100H
	jge	SHORT $LN1@create_use

; 91   : 		map_page_ex(cr3,(uint64_t)pmmngr_alloc(),location + i * 4096);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR location$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv69[rsp], rax
	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	rcx, QWORD PTR tv69[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?map_page_ex@@YA_NPEA_K_K1@Z		; map_page_ex

; 92   : 	}

	jmp	SHORT $LN2@create_use
$LN1@create_use:

; 93   : 
; 94   : 	//user_stack_index += 0x100000;
; 95   : 	return (uint64_t*)(USER_STACK + 0x100000); // +  user_stack_index);

	mov	rax, 123145303359488			; 0000700000100000H

; 96   : }

	add	rsp, 72					; 00000048H
	ret	0
?create_user_stack@@YAPEA_KPEA_K@Z ENDP			; create_user_stack
_TEXT	ENDS
END
