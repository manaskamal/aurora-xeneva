; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?process_head@@3PEAU_process_@@EA		; process_head
PUBLIC	?process_last@@3PEAU_process_@@EA		; process_last
_BSS	SEGMENT
?process_head@@3PEAU_process_@@EA DQ 01H DUP (?)	; process_head
?process_last@@3PEAU_process_@@EA DQ 01H DUP (?)	; process_last
pid	DD	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
$SG4123	DB	'Used Pmmngr -> %d MB / Total -> %d MB ', 0dH, 0aH, 00H
	ORG $+3
$SG4189	DB	'child', 00H
	ORG $+6
$SG4046	DB	'/dev/stdin', 00H
	ORG $+5
$SG4048	DB	'/dev/stdout', 00H
	ORG $+4
$SG4050	DB	'/dev/stderr', 00H
	ORG $+4
$SG4064	DB	'Executable image not found', 0aH, 00H
CONST	ENDS
PUBLIC	?create_user_stack@@YAPEA_KPEAU_process_@@PEA_K@Z ; create_user_stack
PUBLIC	?create_inc_stack@@YAPEA_KPEA_K@Z		; create_inc_stack
PUBLIC	?AuCreateProcess@@YAHPEBDPEAD@Z			; AuCreateProcess
PUBLIC	?kill_process@@YAXXZ				; kill_process
PUBLIC	?kill_process_by_id@@YAXG@Z			; kill_process_by_id
PUBLIC	?get_num_process@@YAIXZ				; get_num_process
PUBLIC	?get_current_process@@YAPEAU_process_@@XZ	; get_current_process
PUBLIC	?find_process_by_id@@YAPEAU_process_@@I@Z	; find_process_by_id
PUBLIC	?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ; find_process_by_thread
PUBLIC	?process_heap_break@@YAPEAX_K@Z			; process_heap_break
PUBLIC	?process_list_initialize@@YAXXZ			; process_list_initialize
PUBLIC	?add_process@@YAXPEAU_process_@@@Z		; add_process
PUBLIC	?remove_process@@YAXPEAU_process_@@@Z		; remove_process
PUBLIC	?allocate_fd@@YAXPEAU_thread_@@@Z		; allocate_fd
PUBLIC	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
PUBLIC	?fork@@YAIXZ					; fork
PUBLIC	?exec@@YAXPEBDI@Z				; exec
EXTRN	memset:PROC
EXTRN	memcpy:PROC
EXTRN	?initialize_list@@YAPEAU_list_@@XZ:PROC		; initialize_list
EXTRN	?vfs_finddir@@YAPEAU_vfs_node_@@PEAD@Z:PROC	; vfs_finddir
EXTRN	AuPmmngrAlloc:PROC
EXTRN	AuPmmngrFree:PROC
EXTRN	?pmmngr_get_used_ram@@YA_KXZ:PROC		; pmmngr_get_used_ram
EXTRN	?pmmngr_get_total_ram@@YA_KXZ:PROC		; pmmngr_get_total_ram
EXTRN	p2v:PROC
EXTRN	v2p:PROC
EXTRN	x64_cli:PROC
EXTRN	x64_read_cr3:PROC
EXTRN	x64_write_cr3:PROC
EXTRN	AuMapPage:PROC
EXTRN	?AuMapPageEx@@YA_NPEA_K_K1E@Z:PROC		; AuMapPageEx
EXTRN	?AuUnmapPageEx@@YAXPEA_K_K_N@Z:PROC		; AuUnmapPageEx
EXTRN	AuUnmapPage:PROC
EXTRN	?AuCreateAddressSpace@@YAPEA_KXZ:PROC		; AuCreateAddressSpace
EXTRN	AuGetFreePage:PROC
EXTRN	malloc:PROC
EXTRN	?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z:PROC ; create_user_thread
EXTRN	?unblock_thread@@YAXPEAU_thread_@@@Z:PROC	; unblock_thread
EXTRN	get_current_thread:PROC
EXTRN	?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z:PROC ; thread_iterate_ready_list
EXTRN	?thread_iterate_block_list@@YAPEAU_thread_@@H@Z:PROC ; thread_iterate_block_list
EXTRN	?task_delete@@YAXPEAU_thread_@@@Z:PROC		; task_delete
EXTRN	printf:PROC
EXTRN	?AuInsertVMArea@@YAXPEAU_process_@@PEAU_vma_area_@@@Z:PROC ; AuInsertVMArea
EXTRN	?destroy_timer@@YAXH@Z:PROC			; destroy_timer
EXTRN	?find_timer_id@@YAHG@Z:PROC			; find_timer_id
EXTRN	?fat32_open@@YA?AU_vfs_node_@@PEAU1@PEAD@Z:PROC	; fat32_open
EXTRN	?fat32_read@@YAXPEAU_vfs_node_@@PEA_K@Z:PROC	; fat32_read
EXTRN	_debug_print_:PROC
EXTRN	?pri_loop_destroy_by_id@@YAXG@Z:PROC		; pri_loop_destroy_by_id
pdata	SEGMENT
$pdata$?create_user_stack@@YAPEA_KPEAU_process_@@PEA_K@Z DD imagerel $LN6
	DD	imagerel $LN6+281
	DD	imagerel $unwind$?create_user_stack@@YAPEA_KPEAU_process_@@PEA_K@Z
$pdata$?create_inc_stack@@YAPEA_KPEA_K@Z DD imagerel $LN6
	DD	imagerel $LN6+143
	DD	imagerel $unwind$?create_inc_stack@@YAPEA_KPEA_K@Z
$pdata$?AuCreateProcess@@YAHPEBDPEAD@Z DD imagerel $LN6
	DD	imagerel $LN6+922
	DD	imagerel $unwind$?AuCreateProcess@@YAHPEBDPEAD@Z
$pdata$?kill_process@@YAXXZ DD imagerel $LN10
	DD	imagerel $LN10+443
	DD	imagerel $unwind$?kill_process@@YAXXZ
$pdata$?kill_process_by_id@@YAXG@Z DD imagerel $LN11
	DD	imagerel $LN11+400
	DD	imagerel $unwind$?kill_process_by_id@@YAXG@Z
$pdata$?get_num_process@@YAIXZ DD imagerel $LN6
	DD	imagerel $LN6+65
	DD	imagerel $unwind$?get_num_process@@YAIXZ
$pdata$?get_current_process@@YAPEAU_process_@@XZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?get_current_process@@YAPEAU_process_@@XZ
$pdata$?find_process_by_id@@YAPEAU_process_@@I@Z DD imagerel $LN7
	DD	imagerel $LN7+67
	DD	imagerel $unwind$?find_process_by_id@@YAPEAU_process_@@I@Z
$pdata$?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z DD imagerel $LN7
	DD	imagerel $LN7+69
	DD	imagerel $unwind$?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z
$pdata$?process_heap_break@@YAPEAX_K@Z DD imagerel $LN7
	DD	imagerel $LN7+147
	DD	imagerel $unwind$?process_heap_break@@YAPEAX_K@Z
$pdata$?remove_process@@YAXPEAU_process_@@@Z DD imagerel $LN8
	DD	imagerel $LN8+163
	DD	imagerel $unwind$?remove_process@@YAXPEAU_process_@@@Z
$pdata$?allocate_fd@@YAXPEAU_thread_@@@Z DD imagerel $LN3
	DD	imagerel $LN3+227
	DD	imagerel $unwind$?allocate_fd@@YAXPEAU_thread_@@@Z
$pdata$?fork@@YAIXZ DD imagerel $LN6
	DD	imagerel $LN6+207
	DD	imagerel $unwind$?fork@@YAIXZ
$pdata$?exec@@YAXPEBDI@Z DD imagerel $LN3
	DD	imagerel $LN3+377
	DD	imagerel $unwind$?exec@@YAXPEBDI@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?create_user_stack@@YAPEA_KPEAU_process_@@PEA_K@Z DD 010e01H
	DD	0a20eH
$unwind$?create_inc_stack@@YAPEA_KPEA_K@Z DD 010901H
	DD	08209H
$unwind$?AuCreateProcess@@YAHPEBDPEAD@Z DD 041301H
	DD	03f0113H
	DD	0600b700cH
$unwind$?kill_process@@YAXXZ DD 010401H
	DD	0e204H
$unwind$?kill_process_by_id@@YAXG@Z DD 010901H
	DD	0e209H
$unwind$?get_num_process@@YAIXZ DD 010401H
	DD	02204H
$unwind$?get_current_process@@YAPEAU_process_@@XZ DD 010401H
	DD	06204H
$unwind$?find_process_by_id@@YAPEAU_process_@@I@Z DD 010801H
	DD	02208H
$unwind$?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z DD 010901H
	DD	02209H
$unwind$?process_heap_break@@YAPEAX_K@Z DD 010901H
	DD	08209H
$unwind$?remove_process@@YAXPEAU_process_@@@Z DD 010901H
	DD	04209H
$unwind$?allocate_fd@@YAXPEAU_thread_@@@Z DD 010901H
	DD	08209H
$unwind$?fork@@YAIXZ DD 010401H
	DD	0a204H
$unwind$?exec@@YAXPEBDI@Z DD 021001H
	DD	0130110H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
child_proc$ = 48
new_cr3$ = 56
nt$ = 64
c_cr3$ = 72
dos$ = 80
buffer$ = 88
_image_base_$ = 96
ent$ = 104
stack$ = 112
p_cr3$ = 120
position$ = 128
t$ = 136
filename$ = 160
pid$ = 168
?exec@@YAXPEBDI@Z PROC					; exec

; 361  : void exec (const char* filename, uint32_t pid) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H

; 362  : 	process_t *child_proc = find_process_by_id (pid);

	mov	ecx, DWORD PTR pid$[rsp]
	call	?find_process_by_id@@YAPEAU_process_@@I@Z ; find_process_by_id
	mov	QWORD PTR child_proc$[rsp], rax

; 363  : 	uint64_t p_cr3 = x64_read_cr3();

	call	x64_read_cr3
	mov	QWORD PTR p_cr3$[rsp], rax

; 364  : 
; 365  : 	//!Clear up the child address space
; 366  : 	uint64_t c_cr3 = (uint64_t)child_proc->cr3;

	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR c_cr3$[rsp], rax

; 367  : 	memset((void*)c_cr3, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR c_cr3$[rsp]
	call	memset

; 368  : 	/*FILE f = open (filename);
; 369  : 	if (f.status == FILE_FLAG_INVALID)
; 370  : 		return;*/
; 371  : 	unsigned char* buffer = (unsigned char*)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR buffer$[rsp], rax

; 372  : /*	read_blk (&f, buffer, f.id);
; 373  : */
; 374  : 	//! Create new mappings for exec
; 375  : 	uint64_t* new_cr3 = AuCreateAddressSpace();

	call	?AuCreateAddressSpace@@YAPEA_KXZ	; AuCreateAddressSpace
	mov	QWORD PTR new_cr3$[rsp], rax

; 376  : 	//! copy the new mappings to child_cr3
; 377  : 	memcpy ((void*)c_cr3, new_cr3, 4096);

	mov	r8d, 4096				; 00001000H
	mov	rdx, QWORD PTR new_cr3$[rsp]
	mov	rcx, QWORD PTR c_cr3$[rsp]
	call	memcpy

; 378  : 	//! deallocate the new mappings
; 379  : 	memset((void*)new_cr3, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR new_cr3$[rsp]
	call	memset

; 380  : 	AuPmmngrFree(new_cr3);

	mov	rcx, QWORD PTR new_cr3$[rsp]
	call	AuPmmngrFree

; 381  : 
; 382  : 
; 383  : 	//!After reading we can change cr3
; 384  :     x64_write_cr3((size_t)c_cr3);

	mov	rcx, QWORD PTR c_cr3$[rsp]
	call	x64_write_cr3

; 385  : 
; 386  : 	//!create the stack
; 387  : 	uint64_t stack = (uint64_t)create_user_stack(child_proc,child_proc->cr3);

	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rdx, QWORD PTR [rax+40]
	mov	rcx, QWORD PTR child_proc$[rsp]
	call	?create_user_stack@@YAPEA_KPEAU_process_@@PEA_K@Z ; create_user_stack
	mov	QWORD PTR stack$[rsp], rax

; 388  : 	child_proc->stack = stack;

	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	QWORD PTR [rax+56], rcx

; 389  : 
; 390  : 	IMAGE_DOS_HEADER* dos = (IMAGE_DOS_HEADER*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR dos$[rsp], rax

; 391  : 	PIMAGE_NT_HEADERS nt = raw_offset<PIMAGE_NT_HEADERS>(dos, dos->e_lfanew);

	mov	rax, QWORD PTR dos$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR nt$[rsp], rax

; 392  : 	
; 393  : 	//!extract the informations
; 394  :     //load_pe_file(buffer,f.size);
; 395  : 	uint64_t _image_base_ = nt->OptionalHeader.ImageBase;

	mov	rax, QWORD PTR nt$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR _image_base_$[rsp], rax

; 396  : 	ientry ent = (ientry)(nt->OptionalHeader.AddressOfEntryPoint + nt->OptionalHeader.ImageBase); //buffer

	mov	rax, QWORD PTR nt$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR nt$[rsp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR ent$[rsp], rax

; 397  : 
; 398  : 	AuMapPage((uint64_t)buffer,_image_base_, PAGING_USER);

	mov	r8b, 4
	mov	rdx, QWORD PTR _image_base_$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	AuMapPage

; 399  : 	int position = 1;  //we already read 4096 bytes at first

	mov	DWORD PTR position$[rsp], 1

; 400  : 	//while(f.eof != 1){
; 401  : 	//	unsigned char* block = (unsigned char*)pmmngr_alloc();
; 402  : 	//	//read_blk(&f,block, f.id);
; 403  : 	//	map_page((uint64_t)block,_image_base_ + position * 4096);
; 404  : 	//	position++;
; 405  : 	//}
; 406  : 
; 407  : 	child_proc->entry_point = ent;

	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rcx, QWORD PTR ent$[rsp]
	mov	QWORD PTR [rax+16], rcx

; 408  : 	x64_write_cr3(p_cr3);

	mov	rcx, QWORD PTR p_cr3$[rsp]
	call	x64_write_cr3

; 409  : 
; 410  : 
; 411  : 	thread_t *t = create_user_thread(child_proc->entry_point,child_proc->stack,(uint64_t)child_proc->cr3,"child",1);

	mov	BYTE PTR [rsp+32], 1
	lea	r9, OFFSET FLAT:$SG4189
	mov	rax, QWORD PTR child_proc$[rsp]
	mov	r8, QWORD PTR [rax+40]
	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rdx, QWORD PTR [rax+56]
	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z ; create_user_thread
	mov	QWORD PTR t$[rsp], rax

; 412  : }

	add	rsp, 152				; 00000098H
	ret	0
?exec@@YAXPEBDI@Z ENDP					; exec
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
i$1 = 32
child_process$ = 40
parent$ = 48
child_cr3$ = 56
p_thread$ = 64
parent_cr3$ = 72
?fork@@YAIXZ PROC					; fork

; 340  : uint32_t fork () {

$LN6:
	sub	rsp, 88					; 00000058H

; 341  : 	process_t *child_process = (process_t*)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR child_process$[rsp], rax

; 342  : 	
; 343  : 	thread_t * p_thread = get_current_thread();

	call	get_current_thread
	mov	QWORD PTR p_thread$[rsp], rax

; 344  : 	process_t *parent = find_process_by_thread (p_thread);

	mov	rcx, QWORD PTR p_thread$[rsp]
	call	?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ; find_process_by_thread
	mov	QWORD PTR parent$[rsp], rax

; 345  : 
; 346  : 	uint64_t *child_cr3 = (uint64_t*)AuPmmngrAlloc(); //create_user_address_space();

	call	AuPmmngrAlloc
	mov	QWORD PTR child_cr3$[rsp], rax

; 347  : 	uint64_t *parent_cr3 = parent->cr3;

	mov	rax, QWORD PTR parent$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR parent_cr3$[rsp], rax

; 348  : 
; 349  : 	for (int i = 0; i < 512; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@fork
$LN2@fork:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@fork:
	cmp	DWORD PTR i$1[rsp], 512			; 00000200H
	jge	SHORT $LN1@fork

; 350  : 		child_cr3[i] = parent_cr3[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR child_cr3$[rsp]
	mov	r8, QWORD PTR parent_cr3$[rsp]
	mov	rax, QWORD PTR [r8+rax*8]
	mov	QWORD PTR [rdx+rcx*8], rax
	jmp	SHORT $LN2@fork
$LN1@fork:

; 351  : 
; 352  : 	memcpy (child_process, parent,sizeof(process_t));

	mov	r8d, 128				; 00000080H
	mov	rdx, QWORD PTR parent$[rsp]
	mov	rcx, QWORD PTR child_process$[rsp]
	call	memcpy

; 353  : 	child_process->pid_t = pid;

	mov	rax, QWORD PTR child_process$[rsp]
	mov	ecx, DWORD PTR pid
	mov	DWORD PTR [rax], ecx

; 354  : 	child_process->cr3 = child_cr3; //parent->cr3;

	mov	rax, QWORD PTR child_process$[rsp]
	mov	rcx, QWORD PTR child_cr3$[rsp]
	mov	QWORD PTR [rax+40], rcx

; 355  : 	child_process->parent = parent;

	mov	rax, QWORD PTR child_process$[rsp]
	mov	rcx, QWORD PTR parent$[rsp]
	mov	QWORD PTR [rax+120], rcx

; 356  : 	add_process (child_process);

	mov	rcx, QWORD PTR child_process$[rsp]
	call	?add_process@@YAXPEAU_process_@@@Z	; add_process

; 357  : 	return child_process->pid_t;

	mov	rax, QWORD PTR child_process$[rsp]
	mov	eax, DWORD PTR [rax]

; 358  : }

	add	rsp, 88					; 00000058H
	ret	0
?fork@@YAIXZ ENDP					; fork
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z PROC ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ENDP ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
stdin$ = 32
stdout$ = 40
stderr$ = 48
t$ = 80
?allocate_fd@@YAXPEAU_thread_@@@Z PROC			; allocate_fd

; 139  : void allocate_fd (thread_t *t) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 140  : 	vfs_node_t * stdin = vfs_finddir("/dev/stdin");

	lea	rcx, OFFSET FLAT:$SG4046
	call	?vfs_finddir@@YAPEAU_vfs_node_@@PEAD@Z	; vfs_finddir
	mov	QWORD PTR stdin$[rsp], rax

; 141  : 	t->fd[t->fd_current] = stdin;

	mov	rax, QWORD PTR t$[rsp]
	movsxd	rax, DWORD PTR [rax+752]
	mov	rcx, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR stdin$[rsp]
	mov	QWORD PTR [rcx+rax*8+272], rdx

; 142  : 	t->fd_current++;

	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+752]
	inc	eax
	mov	rcx, QWORD PTR t$[rsp]
	mov	DWORD PTR [rcx+752], eax

; 143  : 	vfs_node_t* stdout = vfs_finddir("/dev/stdout");

	lea	rcx, OFFSET FLAT:$SG4048
	call	?vfs_finddir@@YAPEAU_vfs_node_@@PEAD@Z	; vfs_finddir
	mov	QWORD PTR stdout$[rsp], rax

; 144  : 	t->fd[t->fd_current] = stdout;

	mov	rax, QWORD PTR t$[rsp]
	movsxd	rax, DWORD PTR [rax+752]
	mov	rcx, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR stdout$[rsp]
	mov	QWORD PTR [rcx+rax*8+272], rdx

; 145  : 	t->fd_current++;

	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+752]
	inc	eax
	mov	rcx, QWORD PTR t$[rsp]
	mov	DWORD PTR [rcx+752], eax

; 146  : 	vfs_node_t* stderr = vfs_finddir("/dev/stderr");

	lea	rcx, OFFSET FLAT:$SG4050
	call	?vfs_finddir@@YAPEAU_vfs_node_@@PEAD@Z	; vfs_finddir
	mov	QWORD PTR stderr$[rsp], rax

; 147  : 	t->fd[t->fd_current] = stderr;

	mov	rax, QWORD PTR t$[rsp]
	movsxd	rax, DWORD PTR [rax+752]
	mov	rcx, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR stderr$[rsp]
	mov	QWORD PTR [rcx+rax*8+272], rdx

; 148  : 	t->fd_current++;

	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+752]
	inc	eax
	mov	rcx, QWORD PTR t$[rsp]
	mov	DWORD PTR [rcx+752], eax

; 149  : 
; 150  : }

	add	rsp, 72					; 00000048H
	ret	0
?allocate_fd@@YAXPEAU_thread_@@@Z ENDP			; allocate_fd
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
proc$ = 48
?remove_process@@YAXPEAU_process_@@@Z PROC		; remove_process

; 50   : void remove_process (process_t *proc) {

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 51   : 	
; 52   : 	if (process_head == NULL)

	cmp	QWORD PTR ?process_head@@3PEAU_process_@@EA, 0 ; process_head
	jne	SHORT $LN5@remove_pro

; 53   : 		return;

	jmp	$LN6@remove_pro
$LN5@remove_pro:

; 54   : 
; 55   : 	if (proc == process_head) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	cmp	QWORD PTR proc$[rsp], rax
	jne	SHORT $LN4@remove_pro

; 56   : 		process_head = process_head->next;

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR ?process_head@@3PEAU_process_@@EA, rax ; process_head

; 57   : 	} else {

	jmp	SHORT $LN3@remove_pro
$LN4@remove_pro:

; 58   : 		proc->prev->next = proc->next;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+104]
	mov	QWORD PTR [rax+104], rcx
$LN3@remove_pro:

; 59   : 	}
; 60   : 
; 61   : 	if (proc == process_last) {

	mov	rax, QWORD PTR ?process_last@@3PEAU_process_@@EA ; process_last
	cmp	QWORD PTR proc$[rsp], rax
	jne	SHORT $LN2@remove_pro

; 62   : 		process_last = proc->prev;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR ?process_last@@3PEAU_process_@@EA, rax ; process_last

; 63   : 	} else {

	jmp	SHORT $LN1@remove_pro
$LN2@remove_pro:

; 64   : 		proc->next->prev = proc->prev;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+112]
	mov	QWORD PTR [rax+112], rcx
$LN1@remove_pro:

; 65   : 	}
; 66   : 	pid--;

	mov	eax, DWORD PTR pid
	dec	eax
	mov	DWORD PTR pid, eax

; 67   : 	AuPmmngrFree(proc);

	mov	rcx, QWORD PTR proc$[rsp]
	call	AuPmmngrFree
$LN6@remove_pro:

; 68   : }

	add	rsp, 40					; 00000028H
	ret	0
?remove_process@@YAXPEAU_process_@@@Z ENDP		; remove_process
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
proc$ = 8
?add_process@@YAXPEAU_process_@@@Z PROC			; add_process

; 29   : void add_process (process_t *proc) {

	mov	QWORD PTR [rsp+8], rcx

; 30   : 	//mutex_lock (add_mutex);
; 31   : 	proc->next = NULL;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+104], 0

; 32   : 	proc->prev = NULL;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+112], 0

; 33   : 
; 34   : 	if (process_head == NULL) {

	cmp	QWORD PTR ?process_head@@3PEAU_process_@@EA, 0 ; process_head
	jne	SHORT $LN2@add_proces

; 35   : 		process_head = proc;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR ?process_head@@3PEAU_process_@@EA, rax ; process_head

; 36   : 		process_last = proc;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR ?process_last@@3PEAU_process_@@EA, rax ; process_last

; 37   : 	} else {

	jmp	SHORT $LN1@add_proces
$LN2@add_proces:

; 38   : 		process_last->next = proc;

	mov	rax, QWORD PTR ?process_last@@3PEAU_process_@@EA ; process_last
	mov	rcx, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+104], rcx

; 39   : 		proc->prev = process_last;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR ?process_last@@3PEAU_process_@@EA ; process_last
	mov	QWORD PTR [rax+112], rcx

; 40   : 		process_last = proc;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR ?process_last@@3PEAU_process_@@EA, rax ; process_last
$LN1@add_proces:

; 41   : 	}
; 42   : 	pid++;

	mov	eax, DWORD PTR pid
	inc	eax
	mov	DWORD PTR pid, eax

; 43   : 	//mutex_unlock (add_mutex);
; 44   : }

	ret	0
?add_process@@YAXPEAU_process_@@@Z ENDP			; add_process
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
?process_list_initialize@@YAXXZ PROC			; process_list_initialize

; 432  : 	pid = 0;

	mov	DWORD PTR pid, 0

; 433  : 	process_head = NULL;

	mov	QWORD PTR ?process_head@@3PEAU_process_@@EA, 0 ; process_head

; 434  : 	process_last = NULL;

	mov	QWORD PTR ?process_last@@3PEAU_process_@@EA, 0 ; process_last

; 435  : }

	ret	0
?process_list_initialize@@YAXXZ ENDP			; process_list_initialize
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
i$ = 32
first_page$ = 40
page$1 = 48
proc$ = 56
pages$ = 80
?process_heap_break@@YAPEAX_K@Z PROC			; process_heap_break

; 442  : void* process_heap_break (uint64_t pages) {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 443  : 	x64_cli();

	call	x64_cli

; 444  : 	process_t *proc = get_current_process();

	call	?get_current_process@@YAPEAU_process_@@XZ ; get_current_process
	mov	QWORD PTR proc$[rsp], rax

; 445  : 	int i = 0;

	mov	DWORD PTR i$[rsp], 0

; 446  : 	uint64_t first_page = 0;

	mov	QWORD PTR first_page$[rsp], 0

; 447  : 	for (i = 0; i < pages; i++) {

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@process_he
$LN3@process_he:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@process_he:
	movsxd	rax, DWORD PTR i$[rsp]
	cmp	rax, QWORD PTR pages$[rsp]
	jae	SHORT $LN2@process_he

; 448  : 		uint64_t page = (uint64_t)AuGetFreePage(0,true,(void*)proc->_image_heap_break_);

	mov	rax, QWORD PTR proc$[rsp]
	mov	r8, QWORD PTR [rax+64]
	mov	dl, 1
	xor	ecx, ecx
	call	AuGetFreePage
	mov	QWORD PTR page$1[rsp], rax

; 449  : 		if (first_page == 0)

	cmp	QWORD PTR first_page$[rsp], 0
	jne	SHORT $LN1@process_he

; 450  : 			first_page = page;

	mov	rax, QWORD PTR page$1[rsp]
	mov	QWORD PTR first_page$[rsp], rax
$LN1@process_he:

; 451  : 		AuMapPage((uint64_t)AuPmmngrAlloc(), page, PAGING_USER);

	call	AuPmmngrAlloc
	mov	r8b, 4
	mov	rdx, QWORD PTR page$1[rsp]
	mov	rcx, rax
	call	AuMapPage

; 452  : 	}

	jmp	SHORT $LN3@process_he
$LN2@process_he:

; 453  : 	return (void*)first_page;

	mov	rax, QWORD PTR first_page$[rsp]

; 454  : }

	add	rsp, 72					; 00000048H
	ret	0
?process_heap_break@@YAPEAX_K@Z ENDP			; process_heap_break
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
proc$1 = 0
thread$ = 32
?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z PROC ; find_process_by_thread

; 75   : process_t *find_process_by_thread (thread_t *thread) {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 76   : 	for (process_t *proc = process_head; proc != NULL; proc = proc->next) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	QWORD PTR proc$1[rsp], rax
	jmp	SHORT $LN4@find_proce
$LN3@find_proce:
	mov	rax, QWORD PTR proc$1[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR proc$1[rsp], rax
$LN4@find_proce:
	cmp	QWORD PTR proc$1[rsp], 0
	je	SHORT $LN2@find_proce

; 77   : 		if (proc->thread_data_pointer == thread) {

	mov	rax, QWORD PTR proc$1[rsp]
	mov	rcx, QWORD PTR thread$[rsp]
	cmp	QWORD PTR [rax+24], rcx
	jne	SHORT $LN1@find_proce

; 78   : 			return proc;

	mov	rax, QWORD PTR proc$1[rsp]
	jmp	SHORT $LN5@find_proce
$LN1@find_proce:

; 79   : 		}
; 80   : 	}

	jmp	SHORT $LN3@find_proce
$LN2@find_proce:
$LN5@find_proce:

; 81   : }

	add	rsp, 24
	ret	0
?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ENDP ; find_process_by_thread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
proc$1 = 0
pid$ = 32
?find_process_by_id@@YAPEAU_process_@@I@Z PROC		; find_process_by_id

; 87   : process_t *find_process_by_id (uint32_t pid) {

$LN7:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 88   : 	for (process_t *proc = process_head; proc != NULL; proc = proc->next) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	QWORD PTR proc$1[rsp], rax
	jmp	SHORT $LN4@find_proce
$LN3@find_proce:
	mov	rax, QWORD PTR proc$1[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR proc$1[rsp], rax
$LN4@find_proce:
	cmp	QWORD PTR proc$1[rsp], 0
	je	SHORT $LN2@find_proce

; 89   : 		if (proc->pid_t == pid) {

	mov	rax, QWORD PTR proc$1[rsp]
	mov	ecx, DWORD PTR pid$[rsp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN1@find_proce

; 90   : 			return proc;

	mov	rax, QWORD PTR proc$1[rsp]
	jmp	SHORT $LN5@find_proce
$LN1@find_proce:

; 91   : 		}
; 92   : 	}

	jmp	SHORT $LN3@find_proce
$LN2@find_proce:

; 93   : 	return NULL;

	xor	eax, eax
$LN5@find_proce:

; 94   : }

	add	rsp, 24
	ret	0
?find_process_by_id@@YAPEAU_process_@@I@Z ENDP		; find_process_by_id
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
p_thread$ = 32
c_proc$ = 40
?get_current_process@@YAPEAU_process_@@XZ PROC		; get_current_process

; 425  : process_t * get_current_process () {

$LN3:
	sub	rsp, 56					; 00000038H

; 426  : 	thread_t * p_thread = get_current_thread();

	call	get_current_thread
	mov	QWORD PTR p_thread$[rsp], rax

; 427  : 	process_t *c_proc = find_process_by_thread (p_thread);

	mov	rcx, QWORD PTR p_thread$[rsp]
	call	?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ; find_process_by_thread
	mov	QWORD PTR c_proc$[rsp], rax

; 428  : 	return c_proc;

	mov	rax, QWORD PTR c_proc$[rsp]

; 429  : }

	add	rsp, 56					; 00000038H
	ret	0
?get_current_process@@YAPEAU_process_@@XZ ENDP		; get_current_process
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
num_process$ = 0
current_proc$1 = 8
?get_num_process@@YAIXZ PROC				; get_num_process

; 416  : uint32_t get_num_process () {

$LN6:
	sub	rsp, 24

; 417  : 	uint32_t num_process = 0;

	mov	DWORD PTR num_process$[rsp], 0

; 418  : 	for (process_t * current_proc = process_head; current_proc != NULL; current_proc = current_proc->next) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	QWORD PTR current_proc$1[rsp], rax
	jmp	SHORT $LN3@get_num_pr
$LN2@get_num_pr:
	mov	rax, QWORD PTR current_proc$1[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR current_proc$1[rsp], rax
$LN3@get_num_pr:
	cmp	QWORD PTR current_proc$1[rsp], 0
	je	SHORT $LN1@get_num_pr

; 419  : 		num_process++;

	mov	eax, DWORD PTR num_process$[rsp]
	inc	eax
	mov	DWORD PTR num_process$[rsp], eax

; 420  : 	}

	jmp	SHORT $LN2@get_num_pr
$LN1@get_num_pr:

; 421  : 	return num_process;

	mov	eax, DWORD PTR num_process$[rsp]

; 422  : }

	add	rsp, 24
	ret	0
?get_num_process@@YAIXZ ENDP				; get_num_process
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
was_blocked$ = 32
i$1 = 36
i$2 = 40
remove_thread$ = 48
proc$ = 56
cr3$ = 64
tv93 = 72
init_stack$ = 80
image_base$ = 88
image_size$ = 96
virtual_addr$3 = 104
id$ = 128
?kill_process_by_id@@YAXG@Z PROC			; kill_process_by_id

; 296  : void kill_process_by_id (uint16_t id) {

$LN11:
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 120				; 00000078H

; 297  : 	x64_cli();

	call	x64_cli

; 298  : 	bool was_blocked = false;

	mov	BYTE PTR was_blocked$[rsp], 0

; 299  : 	thread_t * remove_thread = thread_iterate_ready_list(id);

	movzx	ecx, WORD PTR id$[rsp]
	call	?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z ; thread_iterate_ready_list
	mov	QWORD PTR remove_thread$[rsp], rax

; 300  : 	if (remove_thread == NULL) {

	cmp	QWORD PTR remove_thread$[rsp], 0
	jne	SHORT $LN8@kill_proce

; 301  : 		remove_thread = (thread_t*)thread_iterate_block_list(id);

	movzx	eax, WORD PTR id$[rsp]
	mov	ecx, eax
	call	?thread_iterate_block_list@@YAPEAU_thread_@@H@Z ; thread_iterate_block_list
	mov	QWORD PTR remove_thread$[rsp], rax

; 302  : 		was_blocked = true;

	mov	BYTE PTR was_blocked$[rsp], 1
$LN8@kill_proce:

; 303  : 	}
; 304  : 	process_t *proc = find_process_by_thread (remove_thread);

	mov	rcx, QWORD PTR remove_thread$[rsp]
	call	?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ; find_process_by_thread
	mov	QWORD PTR proc$[rsp], rax

; 305  : 
; 306  : 	uint64_t  init_stack = proc->stack - 0x100000;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+56]
	sub	rax, 1048576				; 00100000H
	mov	QWORD PTR init_stack$[rsp], rax

; 307  : 	uint64_t image_base = proc->image_base;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR image_base$[rsp], rax

; 308  : 	size_t image_size = proc->image_size;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR image_size$[rsp], rax

; 309  : 	//uint64_t heap_base = (uint64_t)proc->user_heap_start;
; 310  : 	uint64_t *cr3 = (uint64_t*)remove_thread->cr3;

	mov	rax, QWORD PTR remove_thread$[rsp]
	mov	rax, QWORD PTR [rax+192]
	mov	QWORD PTR cr3$[rsp], rax

; 311  : 
; 312  : 	if (was_blocked)

	movzx	eax, BYTE PTR was_blocked$[rsp]
	test	eax, eax
	je	SHORT $LN7@kill_proce

; 313  : 		unblock_thread(remove_thread);

	mov	rcx, QWORD PTR remove_thread$[rsp]
	call	?unblock_thread@@YAXPEAU_thread_@@@Z	; unblock_thread
$LN7@kill_proce:

; 314  : 	remove_thread->state = THREAD_STATE_BLOCKED;

	mov	rax, QWORD PTR remove_thread$[rsp]
	mov	BYTE PTR [rax+232], 3

; 315  : 	task_delete (remove_thread);

	mov	rcx, QWORD PTR remove_thread$[rsp]
	call	?task_delete@@YAXPEAU_thread_@@@Z	; task_delete

; 316  : 	AuPmmngrFree(remove_thread);

	mov	rcx, QWORD PTR remove_thread$[rsp]
	call	AuPmmngrFree

; 317  : 	remove_process (proc);

	mov	rcx, QWORD PTR proc$[rsp]
	call	?remove_process@@YAXPEAU_process_@@@Z	; remove_process

; 318  : 
; 319  : 	
; 320  : 	//!unmap the runtime stack
; 321  : 	for (int i = 0; i < 0x100000 / 4096; i++) {

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN6@kill_proce
$LN5@kill_proce:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN6@kill_proce:
	cmp	DWORD PTR i$2[rsp], 256			; 00000100H
	jge	SHORT $LN4@kill_proce

; 322  : 		AuUnmapPageEx(cr3,init_stack + i * 4096, true);

	mov	eax, DWORD PTR i$2[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR init_stack$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8b, 1
	mov	rdx, rax
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?AuUnmapPageEx@@YAXPEA_K_K_N@Z		; AuUnmapPageEx

; 323  : 	}

	jmp	SHORT $LN5@kill_proce
$LN4@kill_proce:

; 324  : 
; 325  : 	//!unmap the binary image
; 326  : 	for (int i = 0; i < image_size / 4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@kill_proce
$LN2@kill_proce:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@kill_proce:
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	QWORD PTR tv93[rsp], rax
	xor	edx, edx
	mov	rax, QWORD PTR image_size$[rsp]
	mov	ecx, 4096				; 00001000H
	div	rcx
	mov	rcx, QWORD PTR tv93[rsp]
	cmp	rcx, rax
	jae	SHORT $LN1@kill_proce

; 327  : 		uint64_t virtual_addr = image_base + (i * 4096);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR image_base$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR virtual_addr$3[rsp], rax

; 328  : 		AuUnmapPageEx(cr3, virtual_addr, true);

	mov	r8b, 1
	mov	rdx, QWORD PTR virtual_addr$3[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?AuUnmapPageEx@@YAXPEA_K_K_N@Z		; AuUnmapPageEx

; 329  : 	}

	jmp	SHORT $LN2@kill_proce
$LN1@kill_proce:

; 330  : 
; 331  : 	//!unmap user heap
; 332  : 	/*for (int i = 0; i < 0xB01000 / 4096; i++) {
; 333  : 		unmap_page_ex(cr3,heap_base + i * 4096, true);
; 334  : 	}*/
; 335  : 
; 336  : 	AuPmmngrFree(cr3);

	mov	rcx, QWORD PTR cr3$[rsp]
	call	AuPmmngrFree

; 337  : }

	add	rsp, 120				; 00000078H
	ret	0
?kill_process_by_id@@YAXG@Z ENDP			; kill_process_by_id
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
i$1 = 32
i$2 = 36
t_id$ = 40
remove_thread$ = 48
timer$ = 56
proc$ = 64
init_stack$ = 72
tv84 = 80
tv132 = 88
image_base$ = 96
cr3$ = 104
?kill_process@@YAXXZ PROC				; kill_process

; 245  : void kill_process () {

$LN10:
	sub	rsp, 120				; 00000078H

; 246  : 	x64_cli();

	call	x64_cli

; 247  : 	thread_t * remove_thread = get_current_thread();

	call	get_current_thread
	mov	QWORD PTR remove_thread$[rsp], rax

; 248  : 	uint16_t t_id = remove_thread->id;

	mov	rax, QWORD PTR remove_thread$[rsp]
	movzx	eax, WORD PTR [rax+234]
	mov	WORD PTR t_id$[rsp], ax

; 249  : 	process_t *proc = find_process_by_thread (remove_thread);

	mov	rcx, QWORD PTR remove_thread$[rsp]
	call	?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ; find_process_by_thread
	mov	QWORD PTR proc$[rsp], rax

; 250  : 	uint64_t  init_stack = proc->stack - 0x100000;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+56]
	sub	rax, 1048576				; 00100000H
	mov	QWORD PTR init_stack$[rsp], rax

; 251  : 	uint64_t image_base = proc->image_base;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR image_base$[rsp], rax

; 252  : 	uint64_t *cr3 = (uint64_t*)remove_thread->cr3;

	mov	rax, QWORD PTR remove_thread$[rsp]
	mov	rax, QWORD PTR [rax+192]
	mov	QWORD PTR cr3$[rsp], rax

; 253  : 	
; 254  : 	int timer = find_timer_id (remove_thread->id);

	mov	rax, QWORD PTR remove_thread$[rsp]
	movzx	ecx, WORD PTR [rax+234]
	call	?find_timer_id@@YAHG@Z			; find_timer_id
	mov	DWORD PTR timer$[rsp], eax

; 255  : 
; 256  : 	/** destroy the timer */
; 257  : 	if (timer != -1) {

	cmp	DWORD PTR timer$[rsp], -1
	je	SHORT $LN7@kill_proce

; 258  : 		destroy_timer (timer);

	mov	ecx, DWORD PTR timer$[rsp]
	call	?destroy_timer@@YAXH@Z			; destroy_timer
$LN7@kill_proce:

; 259  : 	}
; 260  : 
; 261  : 
; 262  : 	/*uint64_t virt = USER_BASE_ADDRESS;
; 263  : 	for (int i = 0; i < proc->mmap_sz + 1; i++) {
; 264  : 		unmap_page (virt);
; 265  : 		virt = virt + i * 4096;
; 266  : 	}*/
; 267  : 		
; 268  : 
; 269  : 	remove_process (proc);

	mov	rcx, QWORD PTR proc$[rsp]
	call	?remove_process@@YAXPEAU_process_@@@Z	; remove_process

; 270  : 	task_delete (remove_thread);

	mov	rcx, QWORD PTR remove_thread$[rsp]
	call	?task_delete@@YAXPEAU_thread_@@@Z	; task_delete

; 271  : 	AuPmmngrFree(remove_thread);

	mov	rcx, QWORD PTR remove_thread$[rsp]
	call	AuPmmngrFree

; 272  : 	AuPmmngrFree(remove_thread->msg_box);

	mov	rax, QWORD PTR remove_thread$[rsp]
	mov	rcx, QWORD PTR [rax+248]
	call	AuPmmngrFree

; 273  : 	pri_loop_destroy_by_id (t_id);

	movzx	ecx, WORD PTR t_id$[rsp]
	call	?pri_loop_destroy_by_id@@YAXG@Z		; pri_loop_destroy_by_id

; 274  : 
; 275  : 	//!unmap the binary image
; 276  : 	for (uint32_t i = 0; i < proc->image_size / 4096; i++) {

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN6@kill_proce
$LN5@kill_proce:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN6@kill_proce:
	mov	eax, DWORD PTR i$2[rsp]
	mov	QWORD PTR tv84[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rcx+32]
	mov	ecx, 4096				; 00001000H
	div	rcx
	mov	rcx, QWORD PTR tv84[rsp]
	cmp	rcx, rax
	jae	SHORT $LN4@kill_proce

; 277  : 	//	uint64_t virtual_addr = proc->image_base + (i * 4096);
; 278  : 		AuUnmapPage(image_base + i * 4096);

	mov	eax, DWORD PTR i$2[rsp]
	imul	eax, 4096				; 00001000H
	mov	eax, eax
	mov	rcx, QWORD PTR image_base$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	AuUnmapPage

; 279  : 	}

	jmp	SHORT $LN5@kill_proce
$LN4@kill_proce:

; 280  : 	
; 281  : 	//!unmap the runtime stack
; 282  : 	for (int i = 0; i < 0x100000 / 4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@kill_proce
$LN2@kill_proce:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@kill_proce:
	cmp	DWORD PTR i$1[rsp], 256			; 00000100H
	jge	SHORT $LN1@kill_proce

; 283  : 		AuUnmapPage(init_stack + i * 4096);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR init_stack$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	AuUnmapPage

; 284  : 	}

	jmp	SHORT $LN2@kill_proce
$LN1@kill_proce:

; 285  : 
; 286  : 
; 287  : 	_debug_print_ ("Used Pmmngr -> %d MB / Total -> %d MB \r\n", pmmngr_get_used_ram () / 1024 / 1024, pmmngr_get_total_ram() / 1024 / 1024);

	call	?pmmngr_get_total_ram@@YA_KXZ		; pmmngr_get_total_ram
	xor	edx, edx
	mov	ecx, 1024				; 00000400H
	div	rcx
	xor	edx, edx
	mov	ecx, 1024				; 00000400H
	div	rcx
	mov	QWORD PTR tv132[rsp], rax
	call	?pmmngr_get_used_ram@@YA_KXZ		; pmmngr_get_used_ram
	xor	edx, edx
	mov	ecx, 1024				; 00000400H
	div	rcx
	xor	edx, edx
	mov	ecx, 1024				; 00000400H
	div	rcx
	mov	rcx, QWORD PTR tv132[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG4123
	call	_debug_print_

; 288  : 
; 289  : 	AuPmmngrFree(cr3);

	mov	rcx, QWORD PTR cr3$[rsp]
	call	AuPmmngrFree

; 290  : }

	add	rsp, 120				; 00000078H
	ret	0
?kill_process@@YAXXZ ENDP				; kill_process
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
process$ = 48
position$ = 56
vma$ = 64
_image_base_$ = 72
cr3$ = 80
nt$ = 88
buf$ = 96
stack$ = 104
dos$ = 112
ent$ = 120
block$1 = 128
t$ = 136
tv150 = 144
text_section_end$ = 152
text_section_start$ = 160
fname$ = 168
file$ = 176
$T2 = 288
$T3 = 392
filename$ = 528
procname$ = 536
?AuCreateProcess@@YAHPEBDPEAD@Z PROC			; AuCreateProcess

; 159  : int AuCreateProcess(const char* filename, char* procname) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 504				; 000001f8H

; 160  : 	//!allocate a data-structure for process 
; 161  : 	process_t *process = (process_t*)malloc(sizeof(process_t)); //pmmngr_alloc();

	mov	ecx, 128				; 00000080H
	call	malloc
	mov	QWORD PTR process$[rsp], rax

; 162  : 	memset(process, 0,sizeof(process_t));

	mov	r8d, 128				; 00000080H
	xor	edx, edx
	mov	rcx, QWORD PTR process$[rsp]
	call	memset

; 163  : 	process->pid_t = pid;

	mov	rax, QWORD PTR process$[rsp]
	mov	ecx, DWORD PTR pid
	mov	DWORD PTR [rax], ecx

; 164  : 	
; 165  : 
; 166  : 	//!open the process file-binary
; 167  : 	char *fname = (char*)filename;

	mov	rax, QWORD PTR filename$[rsp]
	mov	QWORD PTR fname$[rsp], rax

; 168  : 
; 169  : 	//vfs_node_t file = openfs (n,fname);
; 170  : 	vfs_node_t file = fat32_open(NULL, fname);

	mov	r8, QWORD PTR fname$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	?fat32_open@@YA?AU_vfs_node_@@PEAU1@PEAD@Z ; fat32_open
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 104				; 00000068H
	rep movsb
	lea	rax, QWORD PTR file$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 104				; 00000068H
	rep movsb

; 171  : 	
; 172  : 	if (file.status == FS_FLAG_INVALID) {

	movzx	eax, BYTE PTR file$[rsp+49]
	cmp	eax, 3
	jne	SHORT $LN3@AuCreatePr

; 173  : 		printf("Executable image not found\n");

	lea	rcx, OFFSET FLAT:$SG4064
	call	printf

; 174  : 		return -1;

	mov	eax, -1
	jmp	$LN4@AuCreatePr
$LN3@AuCreatePr:

; 175  : 	}
; 176  : 
; 177  : 	//!open the binary file and read it
; 178  : 	uint64_t* buf = (uint64_t*)p2v((size_t)AuPmmngrAlloc());   

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	p2v
	mov	QWORD PTR buf$[rsp], rax

; 179  : 	//readfs_block(n,&file,buf);
; 180  : 	
; 181  : 	fat32_read (&file,(uint64_t*)v2p((size_t)buf));

	mov	rcx, QWORD PTR buf$[rsp]
	call	v2p
	mov	rdx, rax
	lea	rcx, QWORD PTR file$[rsp]
	call	?fat32_read@@YAXPEAU_vfs_node_@@PEA_K@Z	; fat32_read

; 182  : 	
; 183  : 
; 184  : 	IMAGE_DOS_HEADER* dos = (IMAGE_DOS_HEADER*)buf;

	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR dos$[rsp], rax

; 185  : 	PIMAGE_NT_HEADERS nt = raw_offset<PIMAGE_NT_HEADERS>(dos, dos->e_lfanew);

	mov	rax, QWORD PTR dos$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR nt$[rsp], rax

; 186  : 
; 187  : 	//!extract the informations
; 188  :  
; 189  : 	uint64_t _image_base_ = nt->OptionalHeader.ImageBase;

	mov	rax, QWORD PTR nt$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR _image_base_$[rsp], rax

; 190  : 	ientry ent = (ientry)(nt->OptionalHeader.AddressOfEntryPoint + nt->OptionalHeader.ImageBase); //buffer

	mov	rax, QWORD PTR nt$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR nt$[rsp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR ent$[rsp], rax

; 191  : 
; 192  : 	//! create the user stack and address space
; 193  : 	uint64_t *cr3 = AuCreateAddressSpace();	

	call	?AuCreateAddressSpace@@YAPEA_KXZ	; AuCreateAddressSpace
	mov	QWORD PTR cr3$[rsp], rax

; 194  : 
; 195  : 	AuMapPageEx(cr3,v2p((size_t)buf),_image_base_, PAGING_USER);

	mov	rcx, QWORD PTR buf$[rsp]
	call	v2p
	mov	r9b, 4
	mov	r8, QWORD PTR _image_base_$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?AuMapPageEx@@YA_NPEA_K_K1E@Z		; AuMapPageEx

; 196  : 	////! read rest of the image
; 197  : 	int position = 1;  //we already read 4096 bytes at first

	mov	DWORD PTR position$[rsp], 1

; 198  : 
; 199  : 	uint64_t text_section_start = _image_base_;

	mov	rax, QWORD PTR _image_base_$[rsp]
	mov	QWORD PTR text_section_start$[rsp], rax
$LN2@AuCreatePr:

; 200  : 
; 201  : 	while (file.eof != 1){

	movzx	eax, BYTE PTR file$[rsp+36]
	cmp	eax, 1
	je	$LN1@AuCreatePr

; 202  : 		uint64_t* block = (uint64_t*)p2v((size_t)AuPmmngrAlloc());

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	p2v
	mov	QWORD PTR block$1[rsp], rax

; 203  : 		fat32_read (&file,(uint64_t*)v2p((size_t)block));

	mov	rcx, QWORD PTR block$1[rsp]
	call	v2p
	mov	rdx, rax
	lea	rcx, QWORD PTR file$[rsp]
	call	?fat32_read@@YAXPEAU_vfs_node_@@PEA_K@Z	; fat32_read

; 204  : 		AuMapPageEx(cr3,v2p((size_t)block),_image_base_ + position * 4096, PAGING_USER);

	mov	eax, DWORD PTR position$[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR _image_base_$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv150[rsp], rax
	mov	rcx, QWORD PTR block$1[rsp]
	call	v2p
	mov	r9b, 4
	mov	rcx, QWORD PTR tv150[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?AuMapPageEx@@YA_NPEA_K_K1E@Z		; AuMapPageEx

; 205  : 		position++;

	mov	eax, DWORD PTR position$[rsp]
	inc	eax
	mov	DWORD PTR position$[rsp], eax

; 206  : 	}

	jmp	$LN2@AuCreatePr
$LN1@AuCreatePr:

; 207  : 	uint64_t text_section_end = _image_base_ + position * 4096;

	mov	eax, DWORD PTR position$[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR _image_base_$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR text_section_end$[rsp], rax

; 208  : 
; 209  : 	au_vm_area_t *vma = (au_vm_area_t*)malloc(sizeof(au_vm_area_t));

	mov	ecx, 72					; 00000048H
	call	malloc
	mov	QWORD PTR vma$[rsp], rax

; 210  : 	vma->start = text_section_start;

	mov	rax, QWORD PTR vma$[rsp]
	mov	rcx, QWORD PTR text_section_start$[rsp]
	mov	QWORD PTR [rax], rcx

; 211  : 	vma->end = text_section_end;

	mov	rax, QWORD PTR vma$[rsp]
	mov	rcx, QWORD PTR text_section_end$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 212  : 	vma->file = NULL;

	mov	rax, QWORD PTR vma$[rsp]
	mov	QWORD PTR [rax+24], 0

; 213  : 	vma->offset = 0;

	mov	rax, QWORD PTR vma$[rsp]
	mov	QWORD PTR [rax+32], 0

; 214  : 	vma->prot_flags = VM_READ | VM_EXEC;

	mov	eax, 5
	mov	rcx, QWORD PTR vma$[rsp]
	mov	WORD PTR [rcx+16], ax

; 215  : 	vma->type = VM_TYPE_TEXT;

	mov	rax, QWORD PTR vma$[rsp]
	mov	BYTE PTR [rax+48], 1

; 216  : 	vma->length = file.size;

	mov	eax, DWORD PTR file$[rsp+32]
	mov	rcx, QWORD PTR vma$[rsp]
	mov	QWORD PTR [rcx+40], rax

; 217  : 	AuInsertVMArea(process, vma);

	mov	rdx, QWORD PTR vma$[rsp]
	mov	rcx, QWORD PTR process$[rsp]
	call	?AuInsertVMArea@@YAXPEAU_process_@@PEAU_vma_area_@@@Z ; AuInsertVMArea

; 218  : 
; 219  : 	uint64_t stack = (uint64_t)create_user_stack(process,cr3);

	mov	rdx, QWORD PTR cr3$[rsp]
	mov	rcx, QWORD PTR process$[rsp]
	call	?create_user_stack@@YAPEA_KPEAU_process_@@PEA_K@Z ; create_user_stack
	mov	QWORD PTR stack$[rsp], rax

; 220  : 
; 221  : 	//!allocate current process
; 222  : 	//strcpy (process->name,procname);
; 223  : 	process->name = procname;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR procname$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 224  : 	process->entry_point = ent;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR ent$[rsp]
	mov	QWORD PTR [rax+16], rcx

; 225  : 
; 226  : 	process->cr3 = cr3;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	mov	QWORD PTR [rax+40], rcx

; 227  : 	process->image_base = _image_base_;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR _image_base_$[rsp]
	mov	QWORD PTR [rax+48], rcx

; 228  : 	process->stack = stack;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	QWORD PTR [rax+56], rcx

; 229  : 	process->image_size = nt->OptionalHeader.SizeOfImage;

	mov	rax, QWORD PTR nt$[rsp]
	mov	eax, DWORD PTR [rax+80]
	mov	rcx, QWORD PTR process$[rsp]
	mov	QWORD PTR [rcx+32], rax

; 230  : 	process->parent = NULL;

	mov	rax, QWORD PTR process$[rsp]
	mov	QWORD PTR [rax+120], 0

; 231  : 	process->_image_heap_break_ = PROCESS_HEAP_BREAK;

	mov	rax, QWORD PTR process$[rsp]
	mov	QWORD PTR [rax+64], 536870912		; 20000000H

; 232  : 	process->shared_mem_list = initialize_list();

	call	?initialize_list@@YAPEAU_list_@@XZ	; initialize_list
	mov	rcx, QWORD PTR process$[rsp]
	mov	QWORD PTR [rcx+96], rax

; 233  : 	//! Create and thread and start scheduling when scheduler starts */
; 234  : 	thread_t *t = create_user_thread(ent,stack,(uint64_t)cr3,procname,0);

	mov	BYTE PTR [rsp+32], 0
	mov	r9, QWORD PTR procname$[rsp]
	mov	r8, QWORD PTR cr3$[rsp]
	mov	rdx, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR ent$[rsp]
	call	?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z ; create_user_thread
	mov	QWORD PTR t$[rsp], rax

; 235  : 	//! add the process to process manager
; 236  : 	process->thread_data_pointer = t;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 237  :     add_process(process);

	mov	rcx, QWORD PTR process$[rsp]
	call	?add_process@@YAXPEAU_process_@@@Z	; add_process

; 238  : 
; 239  : 	return t->id;

	mov	rax, QWORD PTR t$[rsp]
	movzx	eax, WORD PTR [rax+234]
$LN4@AuCreatePr:

; 240  : }

	add	rsp, 504				; 000001f8H
	pop	rdi
	pop	rsi
	ret	0
?AuCreateProcess@@YAHPEBDPEAD@Z ENDP			; AuCreateProcess
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
i$1 = 32
p$2 = 40
location$ = 48
cr3$ = 80
?create_inc_stack@@YAPEA_KPEA_K@Z PROC			; create_inc_stack

; 125  : uint64_t* create_inc_stack (uint64_t* cr3) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 126  : #define INC_STACK 0x0000010000000000 
; 127  : 	uint64_t location = INC_STACK ; //+ user_stack_index;

	mov	rax, 1099511627776			; 0000010000000000H
	mov	QWORD PTR location$[rsp], rax

; 128  : 
; 129  : 	for (int i = 0; i < (2*1024*1024) / 4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@create_inc
$LN2@create_inc:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@create_inc:
	cmp	DWORD PTR i$1[rsp], 512			; 00000200H
	jge	SHORT $LN1@create_inc

; 130  : 		void* p = AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR p$2[rsp], rax

; 131  : 		memset(p, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR p$2[rsp]
	call	memset

; 132  : 		AuMapPageEx(cr3,(uint64_t)p, location + i * 4096, PAGING_USER);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR location$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r9b, 4
	mov	r8, rax
	mov	rdx, QWORD PTR p$2[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?AuMapPageEx@@YA_NPEA_K_K1E@Z		; AuMapPageEx

; 133  : 	}

	jmp	SHORT $LN2@create_inc
$LN1@create_inc:

; 134  : 
; 135  : 	//user_stack_index += 0x100000;
; 136  : 	return (uint64_t*)(INC_STACK + (2*1024*1024));

	mov	rax, 1099513724928			; 0000010000200000H

; 137  : }

	add	rsp, 72					; 00000048H
	ret	0
?create_inc_stack@@YAPEA_KPEA_K@Z ENDP			; create_inc_stack
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
i$1 = 32
vma$ = 40
location$ = 48
block$2 = 56
tv73 = 64
proc$ = 96
cr3$ = 104
?create_user_stack@@YAPEA_KPEAU_process_@@PEA_K@Z PROC	; create_user_stack

; 100  : uint64_t *create_user_stack (process_t *proc, uint64_t* cr3) {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H

; 101  : #define USER_STACK  0x0000700000000000 
; 102  : 	uint64_t location = USER_STACK;

	mov	rax, 123145302310912			; 0000700000000000H
	mov	QWORD PTR location$[rsp], rax

; 103  : 	
; 104  : 	/* 2 mb stack / process */
; 105  : 	for (int i=0; i < (2*1024*1024)/4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@create_use
$LN2@create_use:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@create_use:
	cmp	DWORD PTR i$1[rsp], 512			; 00000200H
	jge	SHORT $LN1@create_use

; 106  : 		uint64_t *block = (uint64_t*)p2v((size_t)AuPmmngrAlloc());

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	p2v
	mov	QWORD PTR block$2[rsp], rax

; 107  : 		AuMapPageEx(cr3,v2p((size_t)block),location + i * 4096, PAGING_USER);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR location$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv73[rsp], rax
	mov	rcx, QWORD PTR block$2[rsp]
	call	v2p
	mov	r9b, 4
	mov	rcx, QWORD PTR tv73[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?AuMapPageEx@@YA_NPEA_K_K1E@Z		; AuMapPageEx

; 108  : 	}

	jmp	SHORT $LN2@create_use
$LN1@create_use:

; 109  : 
; 110  : 	au_vm_area_t *vma = (au_vm_area_t*)malloc(sizeof(au_vm_area_t));

	mov	ecx, 72					; 00000048H
	call	malloc
	mov	QWORD PTR vma$[rsp], rax

; 111  : 	vma->start = location;

	mov	rax, QWORD PTR vma$[rsp]
	mov	rcx, QWORD PTR location$[rsp]
	mov	QWORD PTR [rax], rcx

; 112  : 	vma->end = (location + 2*1024*1024);

	mov	rax, QWORD PTR location$[rsp]
	add	rax, 2097152				; 00200000H
	mov	rcx, QWORD PTR vma$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 113  : 	vma->file = NULL;

	mov	rax, QWORD PTR vma$[rsp]
	mov	QWORD PTR [rax+24], 0

; 114  : 	vma->offset = 0;

	mov	rax, QWORD PTR vma$[rsp]
	mov	QWORD PTR [rax+32], 0

; 115  : 	vma->prot_flags = VM_READ | VM_EXEC;

	mov	eax, 5
	mov	rcx, QWORD PTR vma$[rsp]
	mov	WORD PTR [rcx+16], ax

; 116  : 	vma->type = VM_TYPE_STACK;

	mov	rax, QWORD PTR vma$[rsp]
	mov	BYTE PTR [rax+48], 3

; 117  : 	vma->length = 2*1024*1024;

	mov	rax, QWORD PTR vma$[rsp]
	mov	QWORD PTR [rax+40], 2097152		; 00200000H

; 118  : 	AuInsertVMArea(proc, vma);

	mov	rdx, QWORD PTR vma$[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	call	?AuInsertVMArea@@YAXPEAU_process_@@PEAU_vma_area_@@@Z ; AuInsertVMArea

; 119  : 	return (uint64_t*)(USER_STACK + (2*1024*1024));

	mov	rax, 123145304408064			; 0000700000200000H

; 120  : }

	add	rsp, 88					; 00000058H
	ret	0
?create_user_stack@@YAPEA_KPEAU_process_@@PEA_K@Z ENDP	; create_user_stack
_TEXT	ENDS
END
