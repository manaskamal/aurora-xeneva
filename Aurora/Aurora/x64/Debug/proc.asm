; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?process_head@@3PEAU_process_@@EA		; process_head
PUBLIC	?process_last@@3PEAU_process_@@EA		; process_last
_BSS	SEGMENT
user_stack_index DD 01H DUP (?)
user_stack_index_2 DD 01H DUP (?)
?process_head@@3PEAU_process_@@EA DQ 01H DUP (?)	; process_head
?process_last@@3PEAU_process_@@EA DQ 01H DUP (?)	; process_last
pid	DD	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
$SG3787	DB	'/dev/stdin', 00H
	ORG $+5
$SG3789	DB	'/dev/stdout', 00H
	ORG $+4
$SG3791	DB	'/dev/stderr', 00H
	ORG $+4
$SG3804	DB	'Executable image not found', 0aH, 00H
	ORG $+4
$SG3841	DB	'stack -> %x', 0aH, 00H
	ORG $+3
$SG3918	DB	'child', 00H
CONST	ENDS
PUBLIC	?create_user_stack@@YAPEA_KPEA_K@Z		; create_user_stack
PUBLIC	?create_inc_stack@@YAPEA_KPEA_K@Z		; create_inc_stack
PUBLIC	?create_process@@YAXPEBDPEAD@Z			; create_process
PUBLIC	?kill_process@@YAXXZ				; kill_process
PUBLIC	?kill_process_by_id@@YAXG@Z			; kill_process_by_id
PUBLIC	?get_num_process@@YAIXZ				; get_num_process
PUBLIC	?process_map_addresses@@YAX_K0PEA_KPEAU_process_@@@Z ; process_map_addresses
PUBLIC	?get_current_process@@YAPEAU_process_@@XZ	; get_current_process
PUBLIC	?find_process_by_id@@YAPEAU_process_@@I@Z	; find_process_by_id
PUBLIC	?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ; find_process_by_thread
PUBLIC	?add_process@@YAXPEAU_process_@@@Z		; add_process
PUBLIC	?remove_process@@YAXPEAU_process_@@@Z		; remove_process
PUBLIC	?allocate_fd@@YAXPEAU_thread_@@@Z		; allocate_fd
PUBLIC	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
PUBLIC	?fork@@YAIXZ					; fork
PUBLIC	?exec@@YAXPEBDI@Z				; exec
EXTRN	?memset@@YAXPEAXEI@Z:PROC			; memset
EXTRN	memcpy:PROC
EXTRN	?vfs_finddir@@YAPEAU_vfs_node_@@PEAD@Z:PROC	; vfs_finddir
EXTRN	?openfs@@YA?AU_vfs_node_@@PEAU1@PEAD@Z:PROC	; openfs
EXTRN	?readfs_block@@YAXPEAU_vfs_node_@@0PEAE@Z:PROC	; readfs_block
EXTRN	?pmmngr_alloc@@YAPEAXXZ:PROC			; pmmngr_alloc
EXTRN	?pmmngr_free@@YAXPEAX@Z:PROC			; pmmngr_free
EXTRN	x64_cli:PROC
EXTRN	x64_read_cr3:PROC
EXTRN	x64_write_cr3:PROC
EXTRN	?pml4_index@@YA_K_K@Z:PROC			; pml4_index
EXTRN	?map_page@@YA_N_K0E@Z:PROC			; map_page
EXTRN	?map_page_ex@@YA_NPEA_K_K1E@Z:PROC		; map_page_ex
EXTRN	?unmap_page_ex@@YAXPEA_K_K_N@Z:PROC		; unmap_page_ex
EXTRN	?create_user_address_space@@YAPEA_KXZ:PROC	; create_user_address_space
EXTRN	?unmap_page@@YAX_K@Z:PROC			; unmap_page
EXTRN	?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z:PROC ; create_user_thread
EXTRN	?get_current_thread@@YAPEAU_thread_@@XZ:PROC	; get_current_thread
EXTRN	?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z:PROC ; thread_iterate_ready_list
EXTRN	?thread_iterate_block_list@@YAPEAU_thread_@@H@Z:PROC ; thread_iterate_block_list
EXTRN	?task_delete@@YAXPEAU_thread_@@@Z:PROC		; task_delete
EXTRN	?printf@@YAXPEBDZZ:PROC				; printf
EXTRN	?load_pe_file@@YAXPEAEH@Z:PROC			; load_pe_file
EXTRN	?create_mutex@@YAPEAUmutex_t@@XZ:PROC		; create_mutex
EXTRN	?mutex_lock@@YAXPEAUmutex_t@@@Z:PROC		; mutex_lock
EXTRN	?mutex_unlock@@YAXPEAUmutex_t@@@Z:PROC		; mutex_unlock
_BSS	SEGMENT
	ALIGN	8

process_mutex DQ 01H DUP (?)
kill_mutex DQ	01H DUP (?)
add_mutex DQ	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$?create_user_stack@@YAPEA_KPEA_K@Z DD imagerel $LN6
	DD	imagerel $LN6+143
	DD	imagerel $unwind$?create_user_stack@@YAPEA_KPEA_K@Z
$pdata$?create_inc_stack@@YAPEA_KPEA_K@Z DD imagerel $LN6
	DD	imagerel $LN6+143
	DD	imagerel $unwind$?create_inc_stack@@YAPEA_KPEA_K@Z
$pdata$?create_process@@YAXPEBDPEAD@Z DD imagerel $LN9
	DD	imagerel $LN9+830
	DD	imagerel $unwind$?create_process@@YAXPEBDPEAD@Z
$pdata$?kill_process@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+263
	DD	imagerel $unwind$?kill_process@@YAXXZ
$pdata$?kill_process_by_id@@YAXG@Z DD imagerel $LN10
	DD	imagerel $LN10+338
	DD	imagerel $unwind$?kill_process_by_id@@YAXG@Z
$pdata$?get_num_process@@YAIXZ DD imagerel $LN6
	DD	imagerel $LN6+65
	DD	imagerel $unwind$?get_num_process@@YAIXZ
$pdata$?process_map_addresses@@YAX_K0PEA_KPEAU_process_@@@Z DD imagerel $LN7
	DD	imagerel $LN7+159
	DD	imagerel $unwind$?process_map_addresses@@YAX_K0PEA_KPEAU_process_@@@Z
$pdata$?get_current_process@@YAPEAU_process_@@XZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?get_current_process@@YAPEAU_process_@@XZ
$pdata$?find_process_by_id@@YAPEAU_process_@@I@Z DD imagerel $LN7
	DD	imagerel $LN7+67
	DD	imagerel $unwind$?find_process_by_id@@YAPEAU_process_@@I@Z
$pdata$?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z DD imagerel $LN7
	DD	imagerel $LN7+69
	DD	imagerel $unwind$?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eprocess_mutex@@YAXXZ DD imagerel ??__Eprocess_mutex@@YAXXZ
	DD	imagerel ??__Eprocess_mutex@@YAXXZ+21
	DD	imagerel $unwind$??__Eprocess_mutex@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ekill_mutex@@YAXXZ DD imagerel ??__Ekill_mutex@@YAXXZ
	DD	imagerel ??__Ekill_mutex@@YAXXZ+21
	DD	imagerel $unwind$??__Ekill_mutex@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eadd_mutex@@YAXXZ DD imagerel ??__Eadd_mutex@@YAXXZ
	DD	imagerel ??__Eadd_mutex@@YAXXZ+21
	DD	imagerel $unwind$??__Eadd_mutex@@YAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?add_process@@YAXPEAU_process_@@@Z DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$?add_process@@YAXPEAU_process_@@@Z
$pdata$?remove_process@@YAXPEAU_process_@@@Z DD imagerel $LN8
	DD	imagerel $LN8+163
	DD	imagerel $unwind$?remove_process@@YAXPEAU_process_@@@Z
$pdata$?allocate_fd@@YAXPEAU_thread_@@@Z DD imagerel $LN3
	DD	imagerel $LN3+227
	DD	imagerel $unwind$?allocate_fd@@YAXPEAU_thread_@@@Z
$pdata$?fork@@YAIXZ DD imagerel $LN6
	DD	imagerel $LN6+207
	DD	imagerel $unwind$?fork@@YAIXZ
$pdata$?exec@@YAXPEBDI@Z DD imagerel $LN3
	DD	imagerel $LN3+372
	DD	imagerel $unwind$?exec@@YAXPEBDI@Z
pdata	ENDS
CRT$XCU	SEGMENT
process_mutex$initializer$ DQ FLAT:??__Eprocess_mutex@@YAXXZ
CRT$XCU	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eadd_mutex@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ekill_mutex@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eprocess_mutex@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
xdata	SEGMENT
$unwind$?create_user_stack@@YAPEA_KPEA_K@Z DD 010901H
	DD	08209H
$unwind$?create_inc_stack@@YAPEA_KPEA_K@Z DD 010901H
	DD	08209H
$unwind$?create_process@@YAXPEBDPEAD@Z DD 041301H
	DD	03f0113H
	DD	0600b700cH
$unwind$?kill_process@@YAXXZ DD 010401H
	DD	0a204H
$unwind$?kill_process_by_id@@YAXG@Z DD 010901H
	DD	0c209H
$unwind$?get_num_process@@YAIXZ DD 010401H
	DD	02204H
$unwind$?process_map_addresses@@YAX_K0PEA_KPEAU_process_@@@Z DD 011801H
	DD	08218H
$unwind$?get_current_process@@YAPEAU_process_@@XZ DD 010401H
	DD	06204H
$unwind$?find_process_by_id@@YAPEAU_process_@@I@Z DD 010801H
	DD	02208H
$unwind$?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z DD 010901H
	DD	02209H
$unwind$?add_process@@YAXPEAU_process_@@@Z DD 010901H
	DD	04209H
$unwind$?remove_process@@YAXPEAU_process_@@@Z DD 010901H
	DD	04209H
$unwind$?allocate_fd@@YAXPEAU_thread_@@@Z DD 010901H
	DD	08209H
$unwind$?fork@@YAIXZ DD 010401H
	DD	0a204H
$unwind$?exec@@YAXPEBDI@Z DD 021001H
	DD	0130110H
xdata	ENDS
CRT$XCU	SEGMENT
kill_mutex$initializer$ DQ FLAT:??__Ekill_mutex@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
add_mutex$initializer$ DQ FLAT:??__Eadd_mutex@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
child_proc$ = 48
new_cr3$ = 56
nt$ = 64
c_cr3$ = 72
dos$ = 80
buffer$ = 88
_image_base_$ = 96
ent$ = 104
stack$ = 112
p_cr3$ = 120
position$ = 128
t$ = 136
filename$ = 160
pid$ = 168
?exec@@YAXPEBDI@Z PROC					; exec

; 285  : void exec (const char* filename, uint32_t pid) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H

; 286  : 	process_t *child_proc = find_process_by_id (pid);

	mov	ecx, DWORD PTR pid$[rsp]
	call	?find_process_by_id@@YAPEAU_process_@@I@Z ; find_process_by_id
	mov	QWORD PTR child_proc$[rsp], rax

; 287  : 	uint64_t p_cr3 = x64_read_cr3();

	call	x64_read_cr3
	mov	QWORD PTR p_cr3$[rsp], rax

; 288  : 
; 289  : 	//!Clear up the child address space
; 290  : 	uint64_t c_cr3 = (uint64_t)child_proc->cr3;

	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR c_cr3$[rsp], rax

; 291  : 	memset((void*)c_cr3, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR c_cr3$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 292  : 	/*FILE f = open (filename);
; 293  : 	if (f.status == FILE_FLAG_INVALID)
; 294  : 		return;*/
; 295  : 	unsigned char* buffer = (unsigned char*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR buffer$[rsp], rax

; 296  : /*	read_blk (&f, buffer, f.id);
; 297  : */
; 298  : 	//! Create new mappings for exec
; 299  : 	uint64_t* new_cr3 = create_user_address_space();

	call	?create_user_address_space@@YAPEA_KXZ	; create_user_address_space
	mov	QWORD PTR new_cr3$[rsp], rax

; 300  : 	//! copy the new mappings to child_cr3
; 301  : 	memcpy ((void*)c_cr3, new_cr3, 4096);

	mov	r8d, 4096				; 00001000H
	mov	rdx, QWORD PTR new_cr3$[rsp]
	mov	rcx, QWORD PTR c_cr3$[rsp]
	call	memcpy

; 302  : 	//! deallocate the new mappings
; 303  : 	memset((void*)new_cr3, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR new_cr3$[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 304  : 	pmmngr_free(new_cr3);

	mov	rcx, QWORD PTR new_cr3$[rsp]
	call	?pmmngr_free@@YAXPEAX@Z			; pmmngr_free

; 305  : 
; 306  : 
; 307  : 	//!After reading we can change cr3
; 308  :     x64_write_cr3((size_t)c_cr3);

	mov	rcx, QWORD PTR c_cr3$[rsp]
	call	x64_write_cr3

; 309  : 
; 310  : 	//!create the stack
; 311  : 	uint64_t stack = (uint64_t)create_user_stack(child_proc->cr3);

	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	?create_user_stack@@YAPEA_KPEA_K@Z	; create_user_stack
	mov	QWORD PTR stack$[rsp], rax

; 312  : 	child_proc->stack = stack;

	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	QWORD PTR [rax+56], rcx

; 313  : 
; 314  : 	IMAGE_DOS_HEADER* dos = (IMAGE_DOS_HEADER*)buffer;

	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR dos$[rsp], rax

; 315  : 	PIMAGE_NT_HEADERS nt = raw_offset<PIMAGE_NT_HEADERS>(dos, dos->e_lfanew);

	mov	rax, QWORD PTR dos$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR nt$[rsp], rax

; 316  : 	
; 317  : 	//!extract the informations
; 318  :     //load_pe_file(buffer,f.size);
; 319  : 	uint64_t _image_base_ = nt->OptionalHeader.ImageBase;

	mov	rax, QWORD PTR nt$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR _image_base_$[rsp], rax

; 320  : 	ientry ent = (ientry)(nt->OptionalHeader.AddressOfEntryPoint + nt->OptionalHeader.ImageBase); //buffer

	mov	rax, QWORD PTR nt$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR nt$[rsp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR ent$[rsp], rax

; 321  : 
; 322  : 	map_page((uint64_t)buffer,_image_base_, PAGING_USER);

	mov	r8b, 4
	mov	rdx, QWORD PTR _image_base_$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	?map_page@@YA_N_K0E@Z			; map_page

; 323  : 	int position = 1;  //we already read 4096 bytes at first

	mov	DWORD PTR position$[rsp], 1

; 324  : 	//while(f.eof != 1){
; 325  : 	//	unsigned char* block = (unsigned char*)pmmngr_alloc();
; 326  : 	//	//read_blk(&f,block, f.id);
; 327  : 	//	map_page((uint64_t)block,_image_base_ + position * 4096);
; 328  : 	//	position++;
; 329  : 	//}
; 330  : 
; 331  : 	child_proc->entry_point = ent;

	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rcx, QWORD PTR ent$[rsp]
	mov	QWORD PTR [rax+16], rcx

; 332  : 	x64_write_cr3(p_cr3);

	mov	rcx, QWORD PTR p_cr3$[rsp]
	call	x64_write_cr3

; 333  : 
; 334  : 
; 335  : 	thread_t *t = create_user_thread(child_proc->entry_point,child_proc->stack,(uint64_t)child_proc->cr3,"child",1);

	mov	BYTE PTR [rsp+32], 1
	lea	r9, OFFSET FLAT:$SG3918
	mov	rax, QWORD PTR child_proc$[rsp]
	mov	r8, QWORD PTR [rax+40]
	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rdx, QWORD PTR [rax+56]
	mov	rax, QWORD PTR child_proc$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z ; create_user_thread
	mov	QWORD PTR t$[rsp], rax

; 336  : }

	add	rsp, 152				; 00000098H
	ret	0
?exec@@YAXPEBDI@Z ENDP					; exec
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
i$1 = 32
child_process$ = 40
parent$ = 48
child_cr3$ = 56
p_thread$ = 64
parent_cr3$ = 72
?fork@@YAIXZ PROC					; fork

; 264  : uint32_t fork () {

$LN6:
	sub	rsp, 88					; 00000058H

; 265  : 	process_t *child_process = (process_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR child_process$[rsp], rax

; 266  : 	
; 267  : 	thread_t * p_thread = get_current_thread();

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	QWORD PTR p_thread$[rsp], rax

; 268  : 	process_t *parent = find_process_by_thread (p_thread);

	mov	rcx, QWORD PTR p_thread$[rsp]
	call	?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ; find_process_by_thread
	mov	QWORD PTR parent$[rsp], rax

; 269  : 
; 270  : 	uint64_t *child_cr3 = (uint64_t*)pmmngr_alloc(); //create_user_address_space();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR child_cr3$[rsp], rax

; 271  : 	uint64_t *parent_cr3 = parent->cr3;

	mov	rax, QWORD PTR parent$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR parent_cr3$[rsp], rax

; 272  : 
; 273  : 	for (int i = 0; i < 512; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@fork
$LN2@fork:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@fork:
	cmp	DWORD PTR i$1[rsp], 512			; 00000200H
	jge	SHORT $LN1@fork

; 274  : 		child_cr3[i] = parent_cr3[i];

	movsxd	rax, DWORD PTR i$1[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR child_cr3$[rsp]
	mov	r8, QWORD PTR parent_cr3$[rsp]
	mov	rax, QWORD PTR [r8+rax*8]
	mov	QWORD PTR [rdx+rcx*8], rax
	jmp	SHORT $LN2@fork
$LN1@fork:

; 275  : 
; 276  : 	memcpy (child_process, parent,sizeof(process_t));

	mov	r8d, 104				; 00000068H
	mov	rdx, QWORD PTR parent$[rsp]
	mov	rcx, QWORD PTR child_process$[rsp]
	call	memcpy

; 277  : 	child_process->pid_t = pid;

	mov	rax, QWORD PTR child_process$[rsp]
	mov	ecx, DWORD PTR pid
	mov	DWORD PTR [rax], ecx

; 278  : 	child_process->cr3 = child_cr3; //parent->cr3;

	mov	rax, QWORD PTR child_process$[rsp]
	mov	rcx, QWORD PTR child_cr3$[rsp]
	mov	QWORD PTR [rax+40], rcx

; 279  : 	child_process->parent = parent;

	mov	rax, QWORD PTR child_process$[rsp]
	mov	rcx, QWORD PTR parent$[rsp]
	mov	QWORD PTR [rax+96], rcx

; 280  : 	add_process (child_process);

	mov	rcx, QWORD PTR child_process$[rsp]
	call	?add_process@@YAXPEAU_process_@@@Z	; add_process

; 281  : 	return child_process->pid_t;

	mov	rax, QWORD PTR child_process$[rsp]
	mov	eax, DWORD PTR [rax]

; 282  : }

	add	rsp, 88					; 00000058H
	ret	0
?fork@@YAIXZ ENDP					; fork
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\include\stdint.h
;	COMDAT ??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z
_TEXT	SEGMENT
p1$ = 8
offset$ = 16
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z PROC ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>, COMDAT

; 183  : 	{

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx

; 184  : 		return (T) ((size_t)p1 + offset);

	movsxd	rax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR p1$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 185  : 	};

	ret	0
??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ENDP ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
stdin$ = 32
stdout$ = 40
stderr$ = 48
t$ = 80
?allocate_fd@@YAXPEAU_thread_@@@Z PROC			; allocate_fd

; 122  : void allocate_fd (thread_t *t) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 123  : 	vfs_node_t * stdin = vfs_finddir("/dev/stdin");

	lea	rcx, OFFSET FLAT:$SG3787
	call	?vfs_finddir@@YAPEAU_vfs_node_@@PEAD@Z	; vfs_finddir
	mov	QWORD PTR stdin$[rsp], rax

; 124  : 	t->fd[t->fd_current] = stdin;

	mov	rax, QWORD PTR t$[rsp]
	movsxd	rax, DWORD PTR [rax+744]
	mov	rcx, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR stdin$[rsp]
	mov	QWORD PTR [rcx+rax*8+264], rdx

; 125  : 	t->fd_current++;

	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+744]
	inc	eax
	mov	rcx, QWORD PTR t$[rsp]
	mov	DWORD PTR [rcx+744], eax

; 126  : 	vfs_node_t* stdout = vfs_finddir("/dev/stdout");

	lea	rcx, OFFSET FLAT:$SG3789
	call	?vfs_finddir@@YAPEAU_vfs_node_@@PEAD@Z	; vfs_finddir
	mov	QWORD PTR stdout$[rsp], rax

; 127  : 	t->fd[t->fd_current] = stdout;

	mov	rax, QWORD PTR t$[rsp]
	movsxd	rax, DWORD PTR [rax+744]
	mov	rcx, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR stdout$[rsp]
	mov	QWORD PTR [rcx+rax*8+264], rdx

; 128  : 	t->fd_current++;

	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+744]
	inc	eax
	mov	rcx, QWORD PTR t$[rsp]
	mov	DWORD PTR [rcx+744], eax

; 129  : 	vfs_node_t* stderr = vfs_finddir("/dev/stderr");

	lea	rcx, OFFSET FLAT:$SG3791
	call	?vfs_finddir@@YAPEAU_vfs_node_@@PEAD@Z	; vfs_finddir
	mov	QWORD PTR stderr$[rsp], rax

; 130  : 	t->fd[t->fd_current] = stderr;

	mov	rax, QWORD PTR t$[rsp]
	movsxd	rax, DWORD PTR [rax+744]
	mov	rcx, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR stderr$[rsp]
	mov	QWORD PTR [rcx+rax*8+264], rdx

; 131  : 	t->fd_current++;

	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+744]
	inc	eax
	mov	rcx, QWORD PTR t$[rsp]
	mov	DWORD PTR [rcx+744], eax

; 132  : 
; 133  : }

	add	rsp, 72					; 00000048H
	ret	0
?allocate_fd@@YAXPEAU_thread_@@@Z ENDP			; allocate_fd
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
proc$ = 48
?remove_process@@YAXPEAU_process_@@@Z PROC		; remove_process

; 46   : void remove_process (process_t *proc) {

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 47   : 	
; 48   : 	if (process_head == NULL)

	cmp	QWORD PTR ?process_head@@3PEAU_process_@@EA, 0 ; process_head
	jne	SHORT $LN5@remove_pro

; 49   : 		return;

	jmp	$LN6@remove_pro
$LN5@remove_pro:

; 50   : 
; 51   : 	if (proc == process_head) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	cmp	QWORD PTR proc$[rsp], rax
	jne	SHORT $LN4@remove_pro

; 52   : 		process_head = process_head->next;

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR ?process_head@@3PEAU_process_@@EA, rax ; process_head

; 53   : 	} else {

	jmp	SHORT $LN3@remove_pro
$LN4@remove_pro:

; 54   : 		proc->prev->next = proc->next;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+80]
	mov	QWORD PTR [rax+80], rcx
$LN3@remove_pro:

; 55   : 	}
; 56   : 
; 57   : 	if (proc == process_last) {

	mov	rax, QWORD PTR ?process_last@@3PEAU_process_@@EA ; process_last
	cmp	QWORD PTR proc$[rsp], rax
	jne	SHORT $LN2@remove_pro

; 58   : 		process_last = proc->prev;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR ?process_last@@3PEAU_process_@@EA, rax ; process_last

; 59   : 	} else {

	jmp	SHORT $LN1@remove_pro
$LN2@remove_pro:

; 60   : 		proc->next->prev = proc->prev;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+88]
	mov	QWORD PTR [rax+88], rcx
$LN1@remove_pro:

; 61   : 	}
; 62   : 	pid--;

	mov	eax, DWORD PTR pid
	dec	eax
	mov	DWORD PTR pid, eax

; 63   : 	pmmngr_free (proc);

	mov	rcx, QWORD PTR proc$[rsp]
	call	?pmmngr_free@@YAXPEAX@Z			; pmmngr_free
$LN6@remove_pro:

; 64   : }

	add	rsp, 40					; 00000028H
	ret	0
?remove_process@@YAXPEAU_process_@@@Z ENDP		; remove_process
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
proc$ = 48
?add_process@@YAXPEAU_process_@@@Z PROC			; add_process

; 28   : void add_process (process_t *proc) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 29   : 	mutex_lock (add_mutex);

	mov	rcx, QWORD PTR add_mutex
	call	?mutex_lock@@YAXPEAUmutex_t@@@Z		; mutex_lock

; 30   : 	proc->next = NULL;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+80], 0

; 31   : 	proc->prev = NULL;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+88], 0

; 32   : 
; 33   : 	if (process_head == NULL) {

	cmp	QWORD PTR ?process_head@@3PEAU_process_@@EA, 0 ; process_head
	jne	SHORT $LN2@add_proces

; 34   : 		process_head = proc;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR ?process_head@@3PEAU_process_@@EA, rax ; process_head

; 35   : 		process_last = proc;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR ?process_last@@3PEAU_process_@@EA, rax ; process_last

; 36   : 	} else {

	jmp	SHORT $LN1@add_proces
$LN2@add_proces:

; 37   : 		process_last->next = proc;

	mov	rax, QWORD PTR ?process_last@@3PEAU_process_@@EA ; process_last
	mov	rcx, QWORD PTR proc$[rsp]
	mov	QWORD PTR [rax+80], rcx

; 38   : 		proc->prev = process_last;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR ?process_last@@3PEAU_process_@@EA ; process_last
	mov	QWORD PTR [rax+88], rcx

; 39   : 		process_last = proc;

	mov	rax, QWORD PTR proc$[rsp]
	mov	QWORD PTR ?process_last@@3PEAU_process_@@EA, rax ; process_last
$LN1@add_proces:

; 40   : 	}
; 41   : 	pid++;

	mov	eax, DWORD PTR pid
	inc	eax
	mov	DWORD PTR pid, eax

; 42   : 	mutex_unlock (add_mutex);

	mov	rcx, QWORD PTR add_mutex
	call	?mutex_unlock@@YAXPEAUmutex_t@@@Z	; mutex_unlock

; 43   : }

	add	rsp, 40					; 00000028H
	ret	0
?add_process@@YAXPEAU_process_@@@Z ENDP			; add_process
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
;	COMDAT ??__Eadd_mutex@@YAXXZ
text$yc	SEGMENT
??__Eadd_mutex@@YAXXZ PROC				; `dynamic initializer for 'add_mutex'', COMDAT

; 22   : static mutex_t *add_mutex = create_mutex();

	sub	rsp, 40					; 00000028H
	call	?create_mutex@@YAPEAUmutex_t@@XZ	; create_mutex
	mov	QWORD PTR add_mutex, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Eadd_mutex@@YAXXZ ENDP				; `dynamic initializer for 'add_mutex''
text$yc	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
;	COMDAT ??__Ekill_mutex@@YAXXZ
text$yc	SEGMENT
??__Ekill_mutex@@YAXXZ PROC				; `dynamic initializer for 'kill_mutex'', COMDAT

; 21   : static mutex_t *kill_mutex = create_mutex();

	sub	rsp, 40					; 00000028H
	call	?create_mutex@@YAPEAUmutex_t@@XZ	; create_mutex
	mov	QWORD PTR kill_mutex, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ekill_mutex@@YAXXZ ENDP				; `dynamic initializer for 'kill_mutex''
text$yc	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
;	COMDAT ??__Eprocess_mutex@@YAXXZ
text$yc	SEGMENT
??__Eprocess_mutex@@YAXXZ PROC				; `dynamic initializer for 'process_mutex'', COMDAT

; 20   : static mutex_t *process_mutex = create_mutex();

	sub	rsp, 40					; 00000028H
	call	?create_mutex@@YAPEAUmutex_t@@XZ	; create_mutex
	mov	QWORD PTR process_mutex, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Eprocess_mutex@@YAXXZ ENDP				; `dynamic initializer for 'process_mutex''
text$yc	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
proc$1 = 0
thread$ = 32
?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z PROC ; find_process_by_thread

; 68   : process_t *find_process_by_thread (thread_t *thread) {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24

; 69   : 	for (process_t *proc = process_head; proc != NULL; proc = proc->next) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	QWORD PTR proc$1[rsp], rax
	jmp	SHORT $LN4@find_proce
$LN3@find_proce:
	mov	rax, QWORD PTR proc$1[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR proc$1[rsp], rax
$LN4@find_proce:
	cmp	QWORD PTR proc$1[rsp], 0
	je	SHORT $LN2@find_proce

; 70   : 		if (proc->thread_data_pointer == thread) {

	mov	rax, QWORD PTR proc$1[rsp]
	mov	rcx, QWORD PTR thread$[rsp]
	cmp	QWORD PTR [rax+24], rcx
	jne	SHORT $LN1@find_proce

; 71   : 			return proc;

	mov	rax, QWORD PTR proc$1[rsp]
	jmp	SHORT $LN5@find_proce
$LN1@find_proce:

; 72   : 		}
; 73   : 	}

	jmp	SHORT $LN3@find_proce
$LN2@find_proce:
$LN5@find_proce:

; 74   : }

	add	rsp, 24
	ret	0
?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ENDP ; find_process_by_thread
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
proc$1 = 0
pid$ = 32
?find_process_by_id@@YAPEAU_process_@@I@Z PROC		; find_process_by_id

; 77   : process_t *find_process_by_id (uint32_t pid) {

$LN7:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 78   : 	for (process_t *proc = process_head; proc != NULL; proc = proc->next) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	QWORD PTR proc$1[rsp], rax
	jmp	SHORT $LN4@find_proce
$LN3@find_proce:
	mov	rax, QWORD PTR proc$1[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR proc$1[rsp], rax
$LN4@find_proce:
	cmp	QWORD PTR proc$1[rsp], 0
	je	SHORT $LN2@find_proce

; 79   : 		if (proc->pid_t == pid) {

	mov	rax, QWORD PTR proc$1[rsp]
	mov	ecx, DWORD PTR pid$[rsp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN1@find_proce

; 80   : 			return proc;

	mov	rax, QWORD PTR proc$1[rsp]
	jmp	SHORT $LN5@find_proce
$LN1@find_proce:

; 81   : 		}
; 82   : 	}

	jmp	SHORT $LN3@find_proce
$LN2@find_proce:

; 83   : 	return NULL;

	xor	eax, eax
$LN5@find_proce:

; 84   : }

	add	rsp, 24
	ret	0
?find_process_by_id@@YAPEAU_process_@@I@Z ENDP		; find_process_by_id
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
p_thread$ = 32
c_proc$ = 40
?get_current_process@@YAPEAU_process_@@XZ PROC		; get_current_process

; 358  : process_t * get_current_process () {

$LN3:
	sub	rsp, 56					; 00000038H

; 359  : 	thread_t * p_thread = get_current_thread();

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	QWORD PTR p_thread$[rsp], rax

; 360  : 	process_t *c_proc = find_process_by_thread (p_thread);

	mov	rcx, QWORD PTR p_thread$[rsp]
	call	?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ; find_process_by_thread
	mov	QWORD PTR c_proc$[rsp], rax

; 361  : 	return c_proc;

	mov	rax, QWORD PTR c_proc$[rsp]

; 362  : }

	add	rsp, 56					; 00000038H
	ret	0
?get_current_process@@YAPEAU_process_@@XZ ENDP		; get_current_process
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
current_proc$1 = 32
c_cr3$ = 40
tv73 = 48
addr$ = 80
length$ = 88
current_address_space$ = 96
c_proc$ = 104
?process_map_addresses@@YAX_K0PEA_KPEAU_process_@@@Z PROC ; process_map_addresses

; 348  : void process_map_addresses (uint64_t addr, uint64_t length, uint64_t *current_address_space, process_t *c_proc) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 349  : 	uint64_t *c_cr3 = 0;

	mov	QWORD PTR c_cr3$[rsp], 0

; 350  : 	for (process_t * current_proc = process_head; current_proc != NULL; current_proc = current_proc->next) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	QWORD PTR current_proc$1[rsp], rax
	jmp	SHORT $LN4@process_ma
$LN3@process_ma:
	mov	rax, QWORD PTR current_proc$1[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR current_proc$1[rsp], rax
$LN4@process_ma:
	cmp	QWORD PTR current_proc$1[rsp], 0
	je	SHORT $LN2@process_ma

; 351  : 		if (current_proc == c_proc) 

	mov	rax, QWORD PTR c_proc$[rsp]
	cmp	QWORD PTR current_proc$1[rsp], rax
	jne	SHORT $LN1@process_ma

; 352  : 			continue;

	jmp	SHORT $LN3@process_ma
$LN1@process_ma:

; 353  : 		c_cr3 = (uint64_t*)current_proc->thread_data_pointer->cr3;

	mov	rax, QWORD PTR current_proc$1[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	rax, QWORD PTR [rax+192]
	mov	QWORD PTR c_cr3$[rsp], rax

; 354  : 		c_cr3[pml4_index(addr)] = current_address_space[pml4_index(addr)];

	mov	rcx, QWORD PTR addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	QWORD PTR tv73[rsp], rax
	mov	rcx, QWORD PTR addr$[rsp]
	call	?pml4_index@@YA_K_K@Z			; pml4_index
	mov	rcx, QWORD PTR c_cr3$[rsp]
	mov	rdx, QWORD PTR current_address_space$[rsp]
	mov	r8, QWORD PTR tv73[rsp]
	mov	rdx, QWORD PTR [rdx+r8*8]
	mov	QWORD PTR [rcx+rax*8], rdx

; 355  : 	}

	jmp	SHORT $LN3@process_ma
$LN2@process_ma:

; 356  : }

	add	rsp, 72					; 00000048H
	ret	0
?process_map_addresses@@YAX_K0PEA_KPEAU_process_@@@Z ENDP ; process_map_addresses
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
num_process$ = 0
current_proc$1 = 8
?get_num_process@@YAIXZ PROC				; get_num_process

; 340  : uint32_t get_num_process () {

$LN6:
	sub	rsp, 24

; 341  : 	uint32_t num_process = 0;

	mov	DWORD PTR num_process$[rsp], 0

; 342  : 	for (process_t * current_proc = process_head; current_proc != NULL; current_proc = current_proc->next) {

	mov	rax, QWORD PTR ?process_head@@3PEAU_process_@@EA ; process_head
	mov	QWORD PTR current_proc$1[rsp], rax
	jmp	SHORT $LN3@get_num_pr
$LN2@get_num_pr:
	mov	rax, QWORD PTR current_proc$1[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR current_proc$1[rsp], rax
$LN3@get_num_pr:
	cmp	QWORD PTR current_proc$1[rsp], 0
	je	SHORT $LN1@get_num_pr

; 343  : 		num_process++;

	mov	eax, DWORD PTR num_process$[rsp]
	inc	eax
	mov	DWORD PTR num_process$[rsp], eax

; 344  : 	}

	jmp	SHORT $LN2@get_num_pr
$LN1@get_num_pr:

; 345  : 	return num_process;

	mov	eax, DWORD PTR num_process$[rsp]

; 346  : }

	add	rsp, 24
	ret	0
?get_num_process@@YAIXZ ENDP				; get_num_process
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
was_blocked$ = 32
i$1 = 36
i$2 = 40
remove_thread$ = 48
proc$ = 56
init_stack$ = 64
tv85 = 72
virtual_addr$3 = 80
id$ = 112
?kill_process_by_id@@YAXG@Z PROC			; kill_process_by_id

; 234  : void kill_process_by_id (uint16_t id) {

$LN10:
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 104				; 00000068H

; 235  : 	x64_cli();

	call	x64_cli

; 236  : 	mutex_lock (kill_mutex);

	mov	rcx, QWORD PTR kill_mutex
	call	?mutex_lock@@YAXPEAUmutex_t@@@Z		; mutex_lock

; 237  : 	bool was_blocked = false;

	mov	BYTE PTR was_blocked$[rsp], 0

; 238  : 	thread_t * remove_thread = thread_iterate_ready_list(id);

	movzx	ecx, WORD PTR id$[rsp]
	call	?thread_iterate_ready_list@@YAPEAU_thread_@@G@Z ; thread_iterate_ready_list
	mov	QWORD PTR remove_thread$[rsp], rax

; 239  : 	if (remove_thread == NULL) {

	cmp	QWORD PTR remove_thread$[rsp], 0
	jne	SHORT $LN7@kill_proce

; 240  : 		remove_thread = (thread_t*)thread_iterate_block_list(id);

	movzx	eax, WORD PTR id$[rsp]
	mov	ecx, eax
	call	?thread_iterate_block_list@@YAPEAU_thread_@@H@Z ; thread_iterate_block_list
	mov	QWORD PTR remove_thread$[rsp], rax

; 241  : 		was_blocked = true;

	mov	BYTE PTR was_blocked$[rsp], 1
$LN7@kill_proce:

; 242  : 	}
; 243  : 	process_t *proc = find_process_by_thread (remove_thread);

	mov	rcx, QWORD PTR remove_thread$[rsp]
	call	?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ; find_process_by_thread
	mov	QWORD PTR proc$[rsp], rax

; 244  : 	
; 245  : 	uint64_t  init_stack = proc->stack - 0x100000;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+56]
	sub	rax, 1048576				; 00100000H
	mov	QWORD PTR init_stack$[rsp], rax

; 246  : 
; 247  : 	//!unmap the runtime stack
; 248  : 	for (int i = 0; i < 0x100000 / 4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN6@kill_proce
$LN5@kill_proce:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN6@kill_proce:
	cmp	DWORD PTR i$1[rsp], 256			; 00000100H
	jge	SHORT $LN4@kill_proce

; 249  : 		unmap_page_ex ((uint64_t*)remove_thread->cr3,init_stack + i * 4096, true);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR init_stack$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8b, 1
	mov	rdx, rax
	mov	rax, QWORD PTR remove_thread$[rsp]
	mov	rcx, QWORD PTR [rax+192]
	call	?unmap_page_ex@@YAXPEA_K_K_N@Z		; unmap_page_ex

; 250  : 	}

	jmp	SHORT $LN5@kill_proce
$LN4@kill_proce:

; 251  : 
; 252  : 	//!unmap the binary image
; 253  : 	for (int i = 0; i < proc->image_size / 4096; i++) {

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN3@kill_proce
$LN2@kill_proce:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN3@kill_proce:
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	QWORD PTR tv85[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rcx+32]
	mov	ecx, 4096				; 00001000H
	div	rcx
	mov	rcx, QWORD PTR tv85[rsp]
	cmp	rcx, rax
	jae	SHORT $LN1@kill_proce

; 254  : 		uint64_t virtual_addr = proc->image_base + (i * 4096);

	mov	eax, DWORD PTR i$2[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR proc$[rsp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR virtual_addr$3[rsp], rax

; 255  : 		unmap_page_ex ((uint64_t*)remove_thread->cr3, virtual_addr, true);

	mov	r8b, 1
	mov	rdx, QWORD PTR virtual_addr$3[rsp]
	mov	rax, QWORD PTR remove_thread$[rsp]
	mov	rcx, QWORD PTR [rax+192]
	call	?unmap_page_ex@@YAXPEA_K_K_N@Z		; unmap_page_ex

; 256  : 	}

	jmp	SHORT $LN2@kill_proce
$LN1@kill_proce:

; 257  : 
; 258  : 	task_delete (remove_thread);

	mov	rcx, QWORD PTR remove_thread$[rsp]
	call	?task_delete@@YAXPEAU_thread_@@@Z	; task_delete

; 259  : 	remove_process (proc);

	mov	rcx, QWORD PTR proc$[rsp]
	call	?remove_process@@YAXPEAU_process_@@@Z	; remove_process

; 260  : 	mutex_unlock (kill_mutex);

	mov	rcx, QWORD PTR kill_mutex
	call	?mutex_unlock@@YAXPEAUmutex_t@@@Z	; mutex_unlock

; 261  : }

	add	rsp, 104				; 00000068H
	ret	0
?kill_process_by_id@@YAXG@Z ENDP			; kill_process_by_id
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
i$1 = 32
i$2 = 36
proc$ = 40
remove_thread$ = 48
init_stack$ = 56
tv77 = 64
virtual_addr$3 = 72
?kill_process@@YAXXZ PROC				; kill_process

; 210  : void kill_process () {

$LN9:
	sub	rsp, 88					; 00000058H

; 211  : 	x64_cli();

	call	x64_cli

; 212  : 	mutex_lock (kill_mutex);

	mov	rcx, QWORD PTR kill_mutex
	call	?mutex_lock@@YAXPEAUmutex_t@@@Z		; mutex_lock

; 213  : 	thread_t * remove_thread = get_current_thread();

	call	?get_current_thread@@YAPEAU_thread_@@XZ	; get_current_thread
	mov	QWORD PTR remove_thread$[rsp], rax

; 214  : 	process_t *proc = find_process_by_thread (remove_thread);

	mov	rcx, QWORD PTR remove_thread$[rsp]
	call	?find_process_by_thread@@YAPEAU_process_@@PEAU_thread_@@@Z ; find_process_by_thread
	mov	QWORD PTR proc$[rsp], rax

; 215  : 	uint64_t  init_stack = proc->stack - 0x100000;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+56]
	sub	rax, 1048576				; 00100000H
	mov	QWORD PTR init_stack$[rsp], rax

; 216  : 
; 217  : 	//!unmap the runtime stack
; 218  : 	for (int i = 0; i < 0x100000 / 4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN6@kill_proce
$LN5@kill_proce:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN6@kill_proce:
	cmp	DWORD PTR i$1[rsp], 256			; 00000100H
	jge	SHORT $LN4@kill_proce

; 219  : 		unmap_page (init_stack + i * 4096);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR init_stack$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?unmap_page@@YAX_K@Z			; unmap_page

; 220  : 	}

	jmp	SHORT $LN5@kill_proce
$LN4@kill_proce:

; 221  : 
; 222  : 	//!unmap the binary image
; 223  : 	for (int i = 0; i < proc->image_size / 4096; i++) {

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN3@kill_proce
$LN2@kill_proce:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN3@kill_proce:
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	QWORD PTR tv77[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rcx+32]
	mov	ecx, 4096				; 00001000H
	div	rcx
	mov	rcx, QWORD PTR tv77[rsp]
	cmp	rcx, rax
	jae	SHORT $LN1@kill_proce

; 224  : 		uint64_t virtual_addr = proc->image_base + (i * 4096);

	mov	eax, DWORD PTR i$2[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR proc$[rsp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR virtual_addr$3[rsp], rax

; 225  : 		unmap_page (virtual_addr);

	mov	rcx, QWORD PTR virtual_addr$3[rsp]
	call	?unmap_page@@YAX_K@Z			; unmap_page

; 226  : 	}

	jmp	SHORT $LN2@kill_proce
$LN1@kill_proce:

; 227  : 
; 228  : 	remove_process (proc);

	mov	rcx, QWORD PTR proc$[rsp]
	call	?remove_process@@YAXPEAU_process_@@@Z	; remove_process

; 229  : 	task_delete (remove_thread);

	mov	rcx, QWORD PTR remove_thread$[rsp]
	call	?task_delete@@YAXPEAU_thread_@@@Z	; task_delete

; 230  : 	mutex_unlock (kill_mutex);

	mov	rcx, QWORD PTR kill_mutex
	call	?mutex_unlock@@YAXPEAUmutex_t@@@Z	; mutex_unlock

; 231  : }

	add	rsp, 88					; 00000058H
	ret	0
?kill_process@@YAXXZ ENDP				; kill_process
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
process$ = 48
i$1 = 56
position$ = 60
cr3$ = 64
buf$ = 72
nt$ = 80
n$ = 88
_image_base_$ = 96
stack$ = 104
fname$ = 112
block$2 = 120
dos$ = 128
p$3 = 136
ent$ = 144
pos$ = 152
t$ = 160
file$ = 176
$T4 = 288
$T5 = 392
filename$ = 528
procname$ = 536
?create_process@@YAXPEBDPEAD@Z PROC			; create_process

; 135  : void create_process(const char* filename, char* procname) {

$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 504				; 000001f8H

; 136  : 	
; 137  : 	//printf ("Creating processs -> %s\n", filename);
; 138  : 	//mutex_lock (process_mutex);
; 139  : 	//!allocate a data-structure for process 
; 140  : 	process_t *process = (process_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR process$[rsp], rax

; 141  : 	process->pid_t = pid;

	mov	rax, QWORD PTR process$[rsp]
	mov	ecx, DWORD PTR pid
	mov	DWORD PTR [rax], ecx

; 142  : 
; 143  : 
; 144  : 	//!open the process file-binary
; 145  : 	char *fname = (char*)filename;

	mov	rax, QWORD PTR filename$[rsp]
	mov	QWORD PTR fname$[rsp], rax

; 146  :     vfs_node_t *n = vfs_finddir (fname);

	mov	rcx, QWORD PTR fname$[rsp]
	call	?vfs_finddir@@YAPEAU_vfs_node_@@PEAD@Z	; vfs_finddir
	mov	QWORD PTR n$[rsp], rax

; 147  : 	vfs_node_t file = openfs(n, fname);

	mov	r8, QWORD PTR fname$[rsp]
	mov	rdx, QWORD PTR n$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	?openfs@@YA?AU_vfs_node_@@PEAU1@PEAD@Z	; openfs
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 104				; 00000068H
	rep movsb
	lea	rax, QWORD PTR file$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 104				; 00000068H
	rep movsb

; 148  : 
; 149  : 	if (file.status == FS_FLAG_INVALID) {

	cmp	DWORD PTR file$[rsp+52], 3
	jne	SHORT $LN6@create_pro

; 150  : 		printf("Executable image not found\n");

	lea	rcx, OFFSET FLAT:$SG3804
	call	?printf@@YAXPEBDZZ			; printf

; 151  : 		return;

	jmp	$LN7@create_pro
$LN6@create_pro:

; 152  : 	}
; 153  : 	//!open the binary file and read it
; 154  : 	unsigned char* buf = (unsigned char*)pmmngr_alloc();   //18*1024

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR buf$[rsp], rax

; 155  : 	readfs_block(n,&file,buf);

	mov	r8, QWORD PTR buf$[rsp]
	lea	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR n$[rsp]
	call	?readfs_block@@YAXPEAU_vfs_node_@@0PEAE@Z ; readfs_block

; 156  : 
; 157  : 	IMAGE_DOS_HEADER* dos = (IMAGE_DOS_HEADER*)buf;

	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR dos$[rsp], rax

; 158  : 	PIMAGE_NT_HEADERS nt = raw_offset<PIMAGE_NT_HEADERS>(dos, dos->e_lfanew);

	mov	rax, QWORD PTR dos$[rsp]
	movzx	eax, WORD PTR [rax+60]
	mov	edx, eax
	mov	rcx, QWORD PTR dos$[rsp]
	call	??$raw_offset@PEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@@@YAPEAU_IMAGE_NT_HEADERS_PE32PLUS@@PEAU_IMAGE_DOS_HEADER_@@H@Z ; raw_offset<_IMAGE_NT_HEADERS_PE32PLUS * __ptr64,_IMAGE_DOS_HEADER_ * __ptr64>
	mov	QWORD PTR nt$[rsp], rax

; 159  : 
; 160  : 	//!extract the informations
; 161  :     load_pe_file(buf,file.size);

	mov	edx, DWORD PTR file$[rsp+32]
	mov	rcx, QWORD PTR buf$[rsp]
	call	?load_pe_file@@YAXPEAEH@Z		; load_pe_file

; 162  : 	uint64_t _image_base_ = nt->OptionalHeader.ImageBase;

	mov	rax, QWORD PTR nt$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR _image_base_$[rsp], rax

; 163  : 	ientry ent = (ientry)(nt->OptionalHeader.AddressOfEntryPoint + nt->OptionalHeader.ImageBase); //buffer

	mov	rax, QWORD PTR nt$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR nt$[rsp]
	add	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR ent$[rsp], rax

; 164  : 	
; 165  : 	//! create the user stack and address space
; 166  :     uint64_t *cr3 = create_user_address_space();	

	call	?create_user_address_space@@YAPEA_KXZ	; create_user_address_space
	mov	QWORD PTR cr3$[rsp], rax

; 167  : 	uint64_t stack = (uint64_t)create_user_stack(cr3);

	mov	rcx, QWORD PTR cr3$[rsp]
	call	?create_user_stack@@YAPEA_KPEA_K@Z	; create_user_stack
	mov	QWORD PTR stack$[rsp], rax

; 168  : 
; 169  : 	map_page_ex(cr3,(uint64_t)buf,_image_base_, PAGING_USER);

	mov	r9b, 4
	mov	r8, QWORD PTR _image_base_$[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?map_page_ex@@YA_NPEA_K_K1E@Z		; map_page_ex

; 170  : 	////! read rest of the image
; 171  : 	int position = 1;  //we already read 4096 bytes at first

	mov	DWORD PTR position$[rsp], 1
$LN5@create_pro:

; 172  : 
; 173  : 	while (file.eof != 1){

	cmp	DWORD PTR file$[rsp+36], 1
	je	SHORT $LN4@create_pro

; 174  : 		unsigned char* block = (unsigned char*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR block$2[rsp], rax

; 175  : 		//read_blk(&file,block,file.id);
; 176  : 		readfs_block (n, &file, block);

	mov	r8, QWORD PTR block$2[rsp]
	lea	rdx, QWORD PTR file$[rsp]
	mov	rcx, QWORD PTR n$[rsp]
	call	?readfs_block@@YAXPEAU_vfs_node_@@0PEAE@Z ; readfs_block

; 177  : 		//fat32_read (&file,block);
; 178  : 		map_page_ex(cr3,(uint64_t)block,_image_base_ + position * 4096, PAGING_USER);

	mov	eax, DWORD PTR position$[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR _image_base_$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r9b, 4
	mov	r8, rax
	mov	rdx, QWORD PTR block$2[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?map_page_ex@@YA_NPEA_K_K1E@Z		; map_page_ex

; 179  : 		position++;

	mov	eax, DWORD PTR position$[rsp]
	inc	eax
	mov	DWORD PTR position$[rsp], eax

; 180  : 	}

	jmp	SHORT $LN5@create_pro
$LN4@create_pro:

; 181  : 
; 182  : 	uint64_t pos = 0x0000080000000000;   //0x0000080000000000;

	mov	rax, 8796093022208			; 0000080000000000H
	mov	QWORD PTR pos$[rsp], rax

; 183  : 	for (int i = 0; i < 0xB01000 / 4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@create_pro
$LN2@create_pro:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@create_pro:
	cmp	DWORD PTR i$1[rsp], 2817		; 00000b01H
	jge	SHORT $LN1@create_pro

; 184  : 		void* p = pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR p$3[rsp], rax

; 185  : 		memset (p, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR p$3[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 186  : 		map_page_ex(cr3,(uint64_t)p, pos + i * 4096, PAGING_USER);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR pos$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r9b, 4
	mov	r8, rax
	mov	rdx, QWORD PTR p$3[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?map_page_ex@@YA_NPEA_K_K1E@Z		; map_page_ex

; 187  : 	}

	jmp	SHORT $LN2@create_pro
$LN1@create_pro:

; 188  : 	//!allocate current process
; 189  : 	process->name = procname;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR procname$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 190  : 	process->entry_point = ent;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR ent$[rsp]
	mov	QWORD PTR [rax+16], rcx

; 191  : 
; 192  : 	process->cr3 = cr3;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	mov	QWORD PTR [rax+40], rcx

; 193  : 	process->image_base = _image_base_;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR _image_base_$[rsp]
	mov	QWORD PTR [rax+48], rcx

; 194  : 	process->stack = stack;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	QWORD PTR [rax+56], rcx

; 195  : 	process->image_size = nt->OptionalHeader.SizeOfImage;

	mov	rax, QWORD PTR nt$[rsp]
	mov	eax, DWORD PTR [rax+80]
	mov	rcx, QWORD PTR process$[rsp]
	mov	QWORD PTR [rcx+32], rax

; 196  : 	process->parent = NULL;

	mov	rax, QWORD PTR process$[rsp]
	mov	QWORD PTR [rax+96], 0

; 197  : 	process->user_heap_start = (void*)0x0000080000000000;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, 8796093022208			; 0000080000000000H
	mov	QWORD PTR [rax+64], rcx

; 198  : 	process->heap_size = 0xB00000;

	mov	rax, QWORD PTR process$[rsp]
	mov	QWORD PTR [rax+72], 11534336		; 00b00000H

; 199  : 	//! Create and thread and start scheduling when scheduler starts */
; 200  : 	thread_t *t = create_user_thread(process->entry_point,stack,(uint64_t)cr3,procname,0);

	mov	BYTE PTR [rsp+32], 0
	mov	r9, QWORD PTR procname$[rsp]
	mov	r8, QWORD PTR cr3$[rsp]
	mov	rdx, QWORD PTR stack$[rsp]
	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	?create_user_thread@@YAPEAU_thread_@@P6AXPEAX@Z_K2QEADE@Z ; create_user_thread
	mov	QWORD PTR t$[rsp], rax

; 201  : 	printf ("stack -> %x\n",stack);

	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, OFFSET FLAT:$SG3841
	call	?printf@@YAXPEBDZZ			; printf

; 202  : 	//allocate_fd(t);
; 203  : 	//! add the process to process manager
; 204  : 	process->thread_data_pointer = t;

	mov	rax, QWORD PTR process$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 205  :     add_process(process);

	mov	rcx, QWORD PTR process$[rsp]
	call	?add_process@@YAXPEAU_process_@@@Z	; add_process
$LN7@create_pro:

; 206  : 	//mutex_unlock (process_mutex);
; 207  : }

	add	rsp, 504				; 000001f8H
	pop	rdi
	pop	rsi
	ret	0
?create_process@@YAXPEBDPEAD@Z ENDP			; create_process
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
i$1 = 32
p$2 = 40
location$ = 48
cr3$ = 80
?create_inc_stack@@YAPEA_KPEA_K@Z PROC			; create_inc_stack

; 108  : uint64_t* create_inc_stack (uint64_t* cr3) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 109  : #define INC_STACK 0x0000700000000000 
; 110  : 	uint64_t location = INC_STACK ; //+ user_stack_index;

	mov	rax, 123145302310912			; 0000700000000000H
	mov	QWORD PTR location$[rsp], rax

; 111  : 
; 112  : 	for (int i = 0; i < (2*1024*1024) / 4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@create_inc
$LN2@create_inc:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@create_inc:
	cmp	DWORD PTR i$1[rsp], 512			; 00000200H
	jge	SHORT $LN1@create_inc

; 113  : 		void* p = pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR p$2[rsp], rax

; 114  : 		memset(p, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR p$2[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 115  : 		map_page_ex(cr3,(uint64_t)p, location + i * 4096, PAGING_USER);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR location$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r9b, 4
	mov	r8, rax
	mov	rdx, QWORD PTR p$2[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?map_page_ex@@YA_NPEA_K_K1E@Z		; map_page_ex

; 116  : 	}

	jmp	SHORT $LN2@create_inc
$LN1@create_inc:

; 117  : 
; 118  : 	//user_stack_index += 0x100000;
; 119  : 	return (uint64_t*)(INC_STACK + (2*1024*1024));

	mov	rax, 123145304408064			; 0000700000200000H

; 120  : }

	add	rsp, 72					; 00000048H
	ret	0
?create_inc_stack@@YAPEA_KPEA_K@Z ENDP			; create_inc_stack
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\proc.cpp
_TEXT	SEGMENT
i$1 = 32
block$2 = 40
location$ = 48
cr3$ = 80
?create_user_stack@@YAPEA_KPEA_K@Z PROC			; create_user_stack

; 86   : uint64_t *create_user_stack (uint64_t* cr3) {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 87   : #define USER_STACK  0x0000700000000000 
; 88   : 	
; 89   : 	/*uint64_t* old_cr3 = (uint64_t*)x64_read_cr3();
; 90   : 	x64_write_cr3 ((size_t)cr3);*/
; 91   : 	uint64_t location = USER_STACK;

	mov	rax, 123145302310912			; 0000700000000000H
	mov	QWORD PTR location$[rsp], rax

; 92   : 	
; 93   : 	/* 1 mb stack / process */
; 94   : 	for (int i=0; i < (2*1024*1024)/4096; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@create_use
$LN2@create_use:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@create_use:
	cmp	DWORD PTR i$1[rsp], 512			; 00000200H
	jge	SHORT $LN1@create_use

; 95   : 		uint64_t *block = (uint64_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR block$2[rsp], rax

; 96   : 		memset (block, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR block$2[rsp]
	call	?memset@@YAXPEAXEI@Z			; memset

; 97   : 		map_page_ex(cr3, (uint64_t)block,location + i * 4096, PAGING_USER);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR location$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r9b, 4
	mov	r8, rax
	mov	rdx, QWORD PTR block$2[rsp]
	mov	rcx, QWORD PTR cr3$[rsp]
	call	?map_page_ex@@YA_NPEA_K_K1E@Z		; map_page_ex

; 98   : 	}

	jmp	SHORT $LN2@create_use
$LN1@create_use:

; 99   :  
; 100  : 	//x64_write_cr3((size_t)old_cr3);
; 101  : 	
; 102  : 	return (uint64_t*)(USER_STACK + (2*1024*1024));

	mov	rax, 123145304408064			; 0000700000200000H

; 103  : }

	add	rsp, 72					; 00000048H
	ret	0
?create_user_stack@@YAPEA_KPEA_K@Z ENDP			; create_user_stack
_TEXT	ENDS
END
