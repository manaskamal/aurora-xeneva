; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG5449	DB	'[VMware SVGA]: Virtual Device does not have screen objec'
	DB	't enabled', 0aH, 00H
CONST	ENDS
PUBLIC	?svga_screen_init@@YAXXZ			; svga_screen_init
PUBLIC	?svga_screen_create@@YAXPEAUSVGAScreenObject@@@Z ; svga_screen_create
PUBLIC	?svga_screen_define@@YAXPEBUSVGAScreenObject@@@Z ; svga_screen_define
PUBLIC	?svga_screen_define_gmrfb@@YAXUSVGAGuestPtr@@IUSVGAGMRImageFormat@@@Z ; svga_screen_define_gmrfb
PUBLIC	?svga_screen_blit_from_gmrfb@@YAXPEBUSVGASignedPoint@@PEBUSVGASignedRect@@I@Z ; svga_screen_blit_from_gmrfb
PUBLIC	?svga_screen_blit_to_gmrfb@@YAXPEBUSVGASignedPoint@@PEBUSVGASignedRect@@I@Z ; svga_screen_blit_to_gmrfb
PUBLIC	?svga_screen_annotate_fill@@YAXUSVGAColorBGRX@@@Z ; svga_screen_annotate_fill
PUBLIC	?svga_paint_screen@@YAXIHHHH@Z			; svga_paint_screen
PUBLIC	?svga_screen_destroy@@YAXI@Z			; svga_screen_destroy
PUBLIC	?svga_screen_annotate_copy@@YAXPEBUSVGASignedPoint@@I@Z ; svga_screen_annotate_copy
EXTRN	?svga_has_fifo_cap@@YA_NH@Z:PROC		; svga_has_fifo_cap
EXTRN	?svga_fifo_commit_all@@YAXXZ:PROC		; svga_fifo_commit_all
EXTRN	?svga_fifo_reserved_cmd@@YAPEAXII@Z:PROC	; svga_fifo_reserved_cmd
EXTRN	?svga_alloc_gmr@@YAPEAXIPEAUSVGAGuestPtr@@@Z:PROC ; svga_alloc_gmr
EXTRN	?svga_update@@YAXIIII@Z:PROC			; svga_update
EXTRN	memcpy:PROC
EXTRN	?printf@@YAXPEBDZZ:PROC				; printf
EXTRN	?svga_dev@@3U_svga_drive_@@A:BYTE		; svga_dev
pdata	SEGMENT
$pdata$?svga_screen_init@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+55
	DD	imagerel $unwind$?svga_screen_init@@YAXXZ
$pdata$?svga_screen_create@@YAXPEAUSVGAScreenObject@@@Z DD imagerel $LN5
	DD	imagerel $LN5+143
	DD	imagerel $unwind$?svga_screen_create@@YAXPEAUSVGAScreenObject@@@Z
$pdata$?svga_screen_define@@YAXPEBUSVGAScreenObject@@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?svga_screen_define@@YAXPEBUSVGAScreenObject@@@Z
$pdata$?svga_screen_define_gmrfb@@YAXUSVGAGuestPtr@@IUSVGAGMRImageFormat@@@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$?svga_screen_define_gmrfb@@YAXUSVGAGuestPtr@@IUSVGAGMRImageFormat@@@Z
$pdata$?svga_screen_blit_from_gmrfb@@YAXPEBUSVGASignedPoint@@PEBUSVGASignedRect@@I@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$?svga_screen_blit_from_gmrfb@@YAXPEBUSVGASignedPoint@@PEBUSVGASignedRect@@I@Z
$pdata$?svga_screen_blit_to_gmrfb@@YAXPEBUSVGASignedPoint@@PEBUSVGASignedRect@@I@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$?svga_screen_blit_to_gmrfb@@YAXPEBUSVGASignedPoint@@PEBUSVGASignedRect@@I@Z
$pdata$?svga_screen_annotate_fill@@YAXUSVGAColorBGRX@@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?svga_screen_annotate_fill@@YAXUSVGAColorBGRX@@@Z
$pdata$?svga_paint_screen@@YAXIHHHH@Z DD imagerel $LN9
	DD	imagerel $LN9+182
	DD	imagerel $unwind$?svga_paint_screen@@YAXIHHHH@Z
$pdata$?svga_screen_destroy@@YAXI@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?svga_screen_destroy@@YAXI@Z
$pdata$?svga_screen_annotate_copy@@YAXPEBUSVGASignedPoint@@I@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$?svga_screen_annotate_copy@@YAXPEBUSVGASignedPoint@@I@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?svga_screen_init@@YAXXZ DD 010401H
	DD	04204H
$unwind$?svga_screen_create@@YAXPEAUSVGAScreenObject@@@Z DD 010901H
	DD	06209H
$unwind$?svga_screen_define@@YAXPEBUSVGAScreenObject@@@Z DD 010901H
	DD	06209H
$unwind$?svga_screen_define_gmrfb@@YAXUSVGAGuestPtr@@IUSVGAGMRImageFormat@@@Z DD 011201H
	DD	06212H
$unwind$?svga_screen_blit_from_gmrfb@@YAXPEBUSVGASignedPoint@@PEBUSVGASignedRect@@I@Z DD 031501H
	DD	070116215H
	DD	06010H
$unwind$?svga_screen_blit_to_gmrfb@@YAXPEBUSVGASignedPoint@@PEBUSVGASignedRect@@I@Z DD 031501H
	DD	070116215H
	DD	06010H
$unwind$?svga_screen_annotate_fill@@YAXUSVGAColorBGRX@@@Z DD 010801H
	DD	06208H
$unwind$?svga_paint_screen@@YAXIHHHH@Z DD 011601H
	DD	08216H
$unwind$?svga_screen_destroy@@YAXI@Z DD 010801H
	DD	06208H
$unwind$?svga_screen_annotate_copy@@YAXPEBUSVGASignedPoint@@I@Z DD 010d01H
	DD	0620dH
xdata	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\svga\svga_screen.cpp
_TEXT	SEGMENT
cmd$ = 32
srcOrigin$ = 64
srcScreen$ = 72
?svga_screen_annotate_copy@@YAXPEBUSVGASignedPoint@@I@Z PROC ; svga_screen_annotate_copy

; 112  : {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 113  :    SVGAFifoCmdAnnotationCopy *cmd =(SVGAFifoCmdAnnotationCopy *)svga_fifo_reserved_cmd(SVGA_CMD_ANNOTATION_COPY,
; 114  :                                                         sizeof *cmd);

	mov	edx, 12
	mov	ecx, 40					; 00000028H
	call	?svga_fifo_reserved_cmd@@YAPEAXII@Z	; svga_fifo_reserved_cmd
	mov	QWORD PTR cmd$[rsp], rax

; 115  :    cmd->srcOrigin = *srcOrigin;

	mov	rax, QWORD PTR srcOrigin$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR cmd$[rsp]
	mov	QWORD PTR [rcx], rax

; 116  :    cmd->srcScreenId = srcScreen;

	mov	rax, QWORD PTR cmd$[rsp]
	mov	ecx, DWORD PTR srcScreen$[rsp]
	mov	DWORD PTR [rax+8], ecx

; 117  :    svga_fifo_commit_all ();

	call	?svga_fifo_commit_all@@YAXXZ		; svga_fifo_commit_all

; 118  : }

	add	rsp, 56					; 00000038H
	ret	0
?svga_screen_annotate_copy@@YAXPEBUSVGASignedPoint@@I@Z ENDP ; svga_screen_annotate_copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\svga\svga_screen.cpp
_TEXT	SEGMENT
cmd$ = 32
id$ = 64
?svga_screen_destroy@@YAXI@Z PROC			; svga_screen_destroy

; 47   : void svga_screen_destroy (uint32_t id) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H

; 48   : 	SVGAFifoCmdDestroyScreen *cmd = (SVGAFifoCmdDestroyScreen *)svga_fifo_reserved_cmd (SVGA_CMD_DESTROY_SCREEN, sizeof *cmd);

	mov	edx, 4
	mov	ecx, 35					; 00000023H
	call	?svga_fifo_reserved_cmd@@YAPEAXII@Z	; svga_fifo_reserved_cmd
	mov	QWORD PTR cmd$[rsp], rax

; 49   : 	cmd->screenId = id;

	mov	rax, QWORD PTR cmd$[rsp]
	mov	ecx, DWORD PTR id$[rsp]
	mov	DWORD PTR [rax], ecx

; 50   : 	svga_fifo_commit_all();

	call	?svga_fifo_commit_all@@YAXXZ		; svga_fifo_commit_all

; 51   : }

	add	rsp, 56					; 00000038H
	ret	0
?svga_screen_destroy@@YAXI@Z ENDP			; svga_screen_destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\svga\svga_screen.cpp
_TEXT	SEGMENT
y$ = 32
x$ = 36
fb$ = 40
row$1 = 48
color$ = 80
x_$ = 88
y_$ = 96
width$ = 104
height$ = 112
?svga_paint_screen@@YAXIHHHH@Z PROC			; svga_paint_screen

; 121  : void svga_paint_screen (uint32_t color, int x_, int y_, int width, int height) {

$LN9:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H

; 122  : 	uint32_t *fb = (uint32_t*)svga_dev.fb_mem;

	mov	rax, QWORD PTR ?svga_dev@@3U_svga_drive_@@A+16
	mov	QWORD PTR fb$[rsp], rax

; 123  : 	int x, y;
; 124  : 	static uint32_t fence = 0;
; 125  : 
; 126  : 	for (y = 0; y < height; y++) {

	mov	DWORD PTR y$[rsp], 0
	jmp	SHORT $LN6@svga_paint
$LN5@svga_paint:
	mov	eax, DWORD PTR y$[rsp]
	inc	eax
	mov	DWORD PTR y$[rsp], eax
$LN6@svga_paint:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$[rsp], eax
	jge	SHORT $LN4@svga_paint

; 127  : 		uint32_t *row = &fb[(y_ + y) * svga_dev.width + x_];

	mov	eax, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR y_$[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, DWORD PTR ?svga_dev@@3U_svga_drive_@@A+44
	add	eax, DWORD PTR x_$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR fb$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR row$1[rsp], rax

; 128  : 
; 129  : 		for (x = 0; x < width; x++) {

	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN3@svga_paint
$LN2@svga_paint:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN3@svga_paint:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN1@svga_paint

; 130  : 			row[x] = color;

	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR row$1[rsp]
	mov	edx, DWORD PTR color$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx

; 131  : 			
; 132  : 		}

	jmp	SHORT $LN2@svga_paint
$LN1@svga_paint:

; 133  : 	}

	jmp	SHORT $LN5@svga_paint
$LN4@svga_paint:

; 134  : 	svga_update(x_, y_, width,height);

	mov	r9d, DWORD PTR height$[rsp]
	mov	r8d, DWORD PTR width$[rsp]
	mov	edx, DWORD PTR y_$[rsp]
	mov	ecx, DWORD PTR x_$[rsp]
	call	?svga_update@@YAXIIII@Z			; svga_update

; 135  : }

	add	rsp, 72					; 00000048H
	ret	0
?svga_paint_screen@@YAXIHHHH@Z ENDP			; svga_paint_screen
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\svga\svga_screen.cpp
_TEXT	SEGMENT
cmd$ = 32
color$ = 64
?svga_screen_annotate_fill@@YAXUSVGAColorBGRX@@@Z PROC	; svga_screen_annotate_fill

; 99   : {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H

; 100  :    SVGAFifoCmdAnnotationFill *cmd = (SVGAFifoCmdAnnotationFill*)svga_fifo_reserved_cmd(SVGA_CMD_ANNOTATION_FILL,
; 101  :                                                         sizeof *cmd);

	mov	edx, 4
	mov	ecx, 39					; 00000027H
	call	?svga_fifo_reserved_cmd@@YAPEAXII@Z	; svga_fifo_reserved_cmd
	mov	QWORD PTR cmd$[rsp], rax

; 102  :    cmd->color = color;

	mov	rax, QWORD PTR cmd$[rsp]
	mov	ecx, DWORD PTR color$[rsp]
	mov	DWORD PTR [rax], ecx

; 103  :    svga_fifo_commit_all();

	call	?svga_fifo_commit_all@@YAXXZ		; svga_fifo_commit_all

; 104  : }

	add	rsp, 56					; 00000038H
	ret	0
?svga_screen_annotate_fill@@YAXUSVGAColorBGRX@@@Z ENDP	; svga_screen_annotate_fill
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\svga\svga_screen.cpp
_TEXT	SEGMENT
cmd$ = 32
destOrigin$ = 80
srcRect$ = 88
srcScreen$ = 96
?svga_screen_blit_to_gmrfb@@YAXPEBUSVGASignedPoint@@PEBUSVGASignedRect@@I@Z PROC ; svga_screen_blit_to_gmrfb

; 85   : {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 86   :    SVGAFifoCmdBlitScreenToGMRFB *cmd = (SVGAFifoCmdBlitScreenToGMRFB *)svga_fifo_reserved_cmd(SVGA_CMD_BLIT_SCREEN_TO_GMRFB,
; 87   :                                                            sizeof *cmd);

	mov	edx, 28
	mov	ecx, 38					; 00000026H
	call	?svga_fifo_reserved_cmd@@YAPEAXII@Z	; svga_fifo_reserved_cmd
	mov	QWORD PTR cmd$[rsp], rax

; 88   :    cmd->destOrigin = *destOrigin;

	mov	rax, QWORD PTR destOrigin$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR cmd$[rsp]
	mov	QWORD PTR [rcx], rax

; 89   :    cmd->srcRect = *srcRect;

	mov	rax, QWORD PTR cmd$[rsp]
	lea	rdi, QWORD PTR [rax+8]
	mov	rsi, QWORD PTR srcRect$[rsp]
	mov	ecx, 16
	rep movsb

; 90   :    cmd->srcScreenId = srcScreen;

	mov	rax, QWORD PTR cmd$[rsp]
	mov	ecx, DWORD PTR srcScreen$[rsp]
	mov	DWORD PTR [rax+24], ecx

; 91   :    svga_fifo_commit_all ();

	call	?svga_fifo_commit_all@@YAXXZ		; svga_fifo_commit_all

; 92   : }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?svga_screen_blit_to_gmrfb@@YAXPEBUSVGASignedPoint@@PEBUSVGASignedRect@@I@Z ENDP ; svga_screen_blit_to_gmrfb
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\svga\svga_screen.cpp
_TEXT	SEGMENT
cmd$ = 32
srcOrigin$ = 80
destRect$ = 88
destScreen$ = 96
?svga_screen_blit_from_gmrfb@@YAXPEBUSVGASignedPoint@@PEBUSVGASignedRect@@I@Z PROC ; svga_screen_blit_from_gmrfb

; 71   : {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 72   : 	SVGAFifoCmdBlitGMRFBToScreen *cmd = (SVGAFifoCmdBlitGMRFBToScreen*)svga_fifo_reserved_cmd(SVGA_CMD_BLIT_GMRFB_TO_SCREEN,
; 73   : 		sizeof(SVGAFifoCmdBlitGMRFBToScreen));

	mov	edx, 28
	mov	ecx, 37					; 00000025H
	call	?svga_fifo_reserved_cmd@@YAPEAXII@Z	; svga_fifo_reserved_cmd
	mov	QWORD PTR cmd$[rsp], rax

; 74   :    cmd->srcOrigin = *srcOrigin;

	mov	rax, QWORD PTR srcOrigin$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR cmd$[rsp]
	mov	QWORD PTR [rcx], rax

; 75   :    cmd->destRect = *destRect;

	mov	rax, QWORD PTR cmd$[rsp]
	lea	rdi, QWORD PTR [rax+8]
	mov	rsi, QWORD PTR destRect$[rsp]
	mov	ecx, 16
	rep movsb

; 76   :    cmd->destScreenId = destScreen;

	mov	rax, QWORD PTR cmd$[rsp]
	mov	ecx, DWORD PTR destScreen$[rsp]
	mov	DWORD PTR [rax+24], ecx

; 77   :    svga_fifo_commit_all();

	call	?svga_fifo_commit_all@@YAXXZ		; svga_fifo_commit_all

; 78   : }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?svga_screen_blit_from_gmrfb@@YAXPEBUSVGASignedPoint@@PEBUSVGASignedRect@@I@Z ENDP ; svga_screen_blit_from_gmrfb
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\svga\svga_screen.cpp
_TEXT	SEGMENT
cmd$ = 32
ptr$ = 64
bytesPerLine$ = 72
format$ = 80
?svga_screen_define_gmrfb@@YAXUSVGAGuestPtr@@IUSVGAGMRImageFormat@@@Z PROC ; svga_screen_define_gmrfb

; 57   : {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 58   :    SVGAFifoCmdDefineGMRFB *cmd = (SVGAFifoCmdDefineGMRFB*)svga_fifo_reserved_cmd(SVGA_CMD_DEFINE_GMRFB, sizeof *cmd);

	mov	edx, 16
	mov	ecx, 36					; 00000024H
	call	?svga_fifo_reserved_cmd@@YAPEAXII@Z	; svga_fifo_reserved_cmd
	mov	QWORD PTR cmd$[rsp], rax

; 59   :    cmd->ptr = ptr;

	mov	rax, QWORD PTR cmd$[rsp]
	mov	rcx, QWORD PTR ptr$[rsp]
	mov	QWORD PTR [rax], rcx

; 60   :    cmd->bytesPerLine = bytesPerLine;

	mov	rax, QWORD PTR cmd$[rsp]
	mov	ecx, DWORD PTR bytesPerLine$[rsp]
	mov	DWORD PTR [rax+8], ecx

; 61   :    cmd->format = format;

	mov	rax, QWORD PTR cmd$[rsp]
	mov	ecx, DWORD PTR format$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 62   :    svga_fifo_commit_all();

	call	?svga_fifo_commit_all@@YAXXZ		; svga_fifo_commit_all

; 63   : }

	add	rsp, 56					; 00000038H
	ret	0
?svga_screen_define_gmrfb@@YAXUSVGAGuestPtr@@IUSVGAGMRImageFormat@@@Z ENDP ; svga_screen_define_gmrfb
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\svga\svga_screen.cpp
_TEXT	SEGMENT
cmd$ = 32
screen$ = 64
?svga_screen_define@@YAXPEBUSVGAScreenObject@@@Z PROC	; svga_screen_define

; 39   : void svga_screen_define (const SVGAScreenObject *screen) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 40   : 	SVGAFifoCmdDefineScreen *cmd = (SVGAFifoCmdDefineScreen*)svga_fifo_reserved_cmd (SVGA_CMD_DEFINE_SCREEN,
; 41   : 		screen->structSize);

	mov	rax, QWORD PTR screen$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, 34					; 00000022H
	call	?svga_fifo_reserved_cmd@@YAPEAXII@Z	; svga_fifo_reserved_cmd
	mov	QWORD PTR cmd$[rsp], rax

; 42   : 
; 43   : 	memcpy (cmd, (void*)screen, screen->structSize);

	mov	rax, QWORD PTR screen$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rdx, QWORD PTR screen$[rsp]
	mov	rcx, QWORD PTR cmd$[rsp]
	call	memcpy

; 44   : 	svga_fifo_commit_all();

	call	?svga_fifo_commit_all@@YAXXZ		; svga_fifo_commit_all

; 45   : }

	add	rsp, 56					; 00000038H
	ret	0
?svga_screen_define@@YAXPEBUSVGAScreenObject@@@Z ENDP	; svga_screen_define
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\svga\svga_screen.cpp
_TEXT	SEGMENT
pitch$1 = 32
size$2 = 36
screen$ = 64
?svga_screen_create@@YAXPEAUSVGAScreenObject@@@Z PROC	; svga_screen_create

; 25   : void svga_screen_create (SVGAScreenObject* screen) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 26   : 	if (svga_has_fifo_cap (SVGA_FIFO_CAP_SCREEN_OBJECT_2)) {

	mov	ecx, 512				; 00000200H
	call	?svga_has_fifo_cap@@YA_NH@Z		; svga_has_fifo_cap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@svga_scree

; 27   : 		const uint32_t pitch = screen->size.width * sizeof (uint32_t);

	mov	rax, QWORD PTR screen$[rsp]
	mov	eax, DWORD PTR [rax+12]
	shl	rax, 2
	mov	DWORD PTR pitch$1[rsp], eax

; 28   : 		const uint32_t size = screen->size.height * pitch;

	mov	rax, QWORD PTR screen$[rsp]
	mov	eax, DWORD PTR [rax+16]
	imul	eax, DWORD PTR pitch$1[rsp]
	mov	DWORD PTR size$2[rsp], eax

; 29   : 		screen->structSize = sizeof (SVGAScreenObject);

	mov	rax, QWORD PTR screen$[rsp]
	mov	DWORD PTR [rax], 44			; 0000002cH

; 30   : 		svga_alloc_gmr (size, &screen->backingStore.ptr);

	mov	rax, QWORD PTR screen$[rsp]
	add	rax, 28
	mov	rdx, rax
	mov	ecx, DWORD PTR size$2[rsp]
	call	?svga_alloc_gmr@@YAPEAXIPEAUSVGAGuestPtr@@@Z ; svga_alloc_gmr

; 31   : 		screen->backingStore.ptr.offset = 0;

	mov	rax, QWORD PTR screen$[rsp]
	mov	DWORD PTR [rax+32], 0

; 32   : 		screen->backingStore.pitch = pitch;

	mov	rax, QWORD PTR screen$[rsp]
	mov	ecx, DWORD PTR pitch$1[rsp]
	mov	DWORD PTR [rax+36], ecx

; 33   : 	} else {

	jmp	SHORT $LN1@svga_scree
$LN2@svga_scree:

; 34   : 		screen->structSize = offsetof (SVGAScreenObject, backingStore);

	mov	rax, QWORD PTR screen$[rsp]
	mov	DWORD PTR [rax], 28
$LN1@svga_scree:

; 35   : 	}
; 36   : 	svga_screen_define (screen);

	mov	rcx, QWORD PTR screen$[rsp]
	call	?svga_screen_define@@YAXPEBUSVGAScreenObject@@@Z ; svga_screen_define

; 37   : }

	add	rsp, 56					; 00000038H
	ret	0
?svga_screen_create@@YAXPEAUSVGAScreenObject@@@Z ENDP	; svga_screen_create
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\svga\svga_screen.cpp
_TEXT	SEGMENT
?svga_screen_init@@YAXXZ PROC				; svga_screen_init

; 17   : void svga_screen_init () {

$LN4:
	sub	rsp, 40					; 00000028H

; 18   : 	if (!(svga_has_fifo_cap (SVGA_FIFO_CAP_SCREEN_OBJECT) ||
; 19   : 		svga_has_fifo_cap (SVGA_FIFO_CAP_SCREEN_OBJECT_2))) {

	mov	ecx, 128				; 00000080H
	call	?svga_has_fifo_cap@@YA_NH@Z		; svga_has_fifo_cap
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@svga_scree
	mov	ecx, 512				; 00000200H
	call	?svga_has_fifo_cap@@YA_NH@Z		; svga_has_fifo_cap
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@svga_scree

; 20   : 			printf ("[VMware SVGA]: Virtual Device does not have screen object enabled\n");

	lea	rcx, OFFSET FLAT:$SG5449
	call	?printf@@YAXPEBDZZ			; printf
$LN1@svga_scree:

; 21   : 	}
; 22   : }

	add	rsp, 40					; 00000028H
	ret	0
?svga_screen_init@@YAXXZ ENDP				; svga_screen_init
_TEXT	ENDS
END
