; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?i_net_dev@@3PEAU_e1000_dev_@@EA		; i_net_dev
_BSS	SEGMENT
?i_net_dev@@3PEAU_e1000_dev_@@EA DQ 01H DUP (?)		; i_net_dev
_BSS	ENDS
CONST	SEGMENT
$SG3433	DB	'EEPROM exist', 0aH, 00H
	ORG $+2
$SG3436	DB	'Applying memory map', 0aH, 00H
	ORG $+3
$SG3457	DB	'E1000 recevied ', 0dH, 0aH, 00H
	ORG $+2
$SG3469	DB	'up', 00H
	ORG $+1
$SG3461	DB	'E1000 Bytes received -> %d bytes, status 0x%x ', 0dH, 0aH
	DB	00H
	ORG $+7
$SG3466	DB	'E1000 interrupt data transmit ', 0dH, 0aH, 00H
	ORG $+3
$SG3470	DB	'down', 00H
	ORG $+7
$SG3471	DB	'E1000 interrupt link change %s ', 0dH, 0aH, 00H
	ORG $+6
$SG3473	DB	'E1000 unknown interrupt ', 0dH, 0aH, 00H
	ORG $+5
$SG3505	DB	'CUR Tx tail -> %d', 0aH, 00H
	ORG $+5
$SG3509	DB	'TX Next tail -> %d', 0aH, 00H
	ORG $+4
$SG3514	DB	'Transmit status ->%x', 0aH, 00H
	ORG $+2
$SG3515	DB	'Transmitted', 0aH, 00H
	ORG $+3
$SG3526	DB	'E1000 New Packet received #3', 0aH, 00H
	ORG $+2
$SG3561	DB	'Intel Ethernet not found', 0aH, 00H
	ORG $+6
$SG3564	DB	'E1000 INterrupt Disabled in PCI ConfigSpace', 0aH, 00H
	ORG $+3
$SG3574	DB	'E1000 Supports MSI', 0aH, 00H
	ORG $+4
$SG3577	DB	'E1000 legacy irq -> %d, pin -> %d', 0aH, 00H
	ORG $+5
$SG3601	DB	'MAC Address read successfully', 0aH, 00H
	ORG $+1
$SG3602	DB	'e1000 setup completed', 0aH, 00H
CONST	ENDS
PUBLIC	?e1000_initialize@@YAXXZ			; e1000_initialize
PUBLIC	?e1000_send_packet@@YAXPEAX_K@Z			; e1000_send_packet
PUBLIC	?e1000_read_command@@YAIG@Z			; e1000_read_command
PUBLIC	?e1000_write_command@@YAXGI@Z			; e1000_write_command
PUBLIC	?e1000_detect_eeprom@@YA_NXZ			; e1000_detect_eeprom
PUBLIC	?e1000_eerprom_read@@YAIE@Z			; e1000_eerprom_read
PUBLIC	?e1000_read_mac_address@@YA_NXZ			; e1000_read_mac_address
PUBLIC	?e1000_interrupt_handler@@YAX_KPEAX@Z		; e1000_interrupt_handler
PUBLIC	?e1000_rx_init@@YAXXZ				; e1000_rx_init
PUBLIC	?e1000_tx_init@@YAXXZ				; e1000_tx_init
PUBLIC	?e1000_setup_interrupt@@YAXXZ			; e1000_setup_interrupt
PUBLIC	?e1000_handle_receive@@YAXXZ			; e1000_handle_receive
PUBLIC	?e1000_reset@@YAXXZ				; e1000_reset
EXTRN	x64_cli:PROC
EXTRN	x64_sti:PROC
EXTRN	x64_inportd:PROC
EXTRN	x64_outportd:PROC
EXTRN	?inportd@@YAIG@Z:PROC				; inportd
EXTRN	?interrupt_end@@YAXI@Z:PROC			; interrupt_end
EXTRN	?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z:PROC	; interrupt_set
EXTRN	?read_config_16@@YAXGHHHHPEAG@Z:PROC		; read_config_16
EXTRN	?read_config_8@@YAXGHHHHPEAE@Z:PROC		; read_config_8
EXTRN	?write_config_8@@YAXGHHHHE@Z:PROC		; write_config_8
EXTRN	?pci_find_device_class@@YA_NEEPEATpci_device_info@@PEAH11@Z:PROC ; pci_find_device_class
EXTRN	?pci_alloc_msi@@YA_NHHHP6AX_KPEAX@Z@Z:PROC	; pci_alloc_msi
EXTRN	?pci_enable_bus_master@@YAXHHH@Z:PROC		; pci_enable_bus_master
EXTRN	?pmmngr_alloc@@YAPEAXXZ:PROC			; pmmngr_alloc
EXTRN	?memset@@YAXPEAXEI@Z:PROC			; memset
EXTRN	memcpy:PROC
EXTRN	?printf@@YAXPEBDZZ:PROC				; printf
EXTRN	?malloc@@YAPEAX_K@Z:PROC			; malloc
EXTRN	?_debug_print_@@YAXPEADZZ:PROC			; _debug_print_
pdata	SEGMENT
$pdata$?e1000_initialize@@YAXXZ DD imagerel $LN28
	DD	imagerel $LN28+1076
	DD	imagerel $unwind$?e1000_initialize@@YAXXZ
$pdata$?e1000_send_packet@@YAXPEAX_K@Z DD imagerel $LN8
	DD	imagerel $LN8+418
	DD	imagerel $unwind$?e1000_send_packet@@YAXPEAX_K@Z
$pdata$?e1000_read_command@@YAIG@Z DD imagerel $LN5
	DD	imagerel $LN5+101
	DD	imagerel $unwind$?e1000_read_command@@YAIG@Z
$pdata$?e1000_write_command@@YAXGI@Z DD imagerel $LN5
	DD	imagerel $LN5+104
	DD	imagerel $unwind$?e1000_write_command@@YAXGI@Z
$pdata$?e1000_detect_eeprom@@YA_NXZ DD imagerel $LN8
	DD	imagerel $LN8+137
	DD	imagerel $unwind$?e1000_detect_eeprom@@YA_NXZ
$pdata$?e1000_eerprom_read@@YAIE@Z DD imagerel $LN9
	DD	imagerel $LN9+163
	DD	imagerel $unwind$?e1000_eerprom_read@@YAIE@Z
$pdata$?e1000_read_mac_address@@YA_NXZ DD imagerel $LN10
	DD	imagerel $LN10+390
	DD	imagerel $unwind$?e1000_read_mac_address@@YA_NXZ
$pdata$?e1000_interrupt_handler@@YAX_KPEAX@Z DD imagerel $LN16
	DD	imagerel $LN16+497
	DD	imagerel $unwind$?e1000_interrupt_handler@@YAX_KPEAX@Z
$pdata$?e1000_rx_init@@YAXXZ DD imagerel $LN6
	DD	imagerel $LN6+280
	DD	imagerel $unwind$?e1000_rx_init@@YAXXZ
$pdata$?e1000_tx_init@@YAXXZ DD imagerel $LN6
	DD	imagerel $LN6+321
	DD	imagerel $unwind$?e1000_tx_init@@YAXXZ
$pdata$?e1000_setup_interrupt@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?e1000_setup_interrupt@@YAXXZ
$pdata$?e1000_handle_receive@@YAXXZ DD imagerel $LN6
	DD	imagerel $LN6+223
	DD	imagerel $unwind$?e1000_handle_receive@@YAXXZ
$pdata$?e1000_reset@@YAXXZ DD imagerel $LN21
	DD	imagerel $LN21+341
	DD	imagerel $unwind$?e1000_reset@@YAXXZ
pdata	ENDS
xdata	SEGMENT
$unwind$?e1000_initialize@@YAXXZ DD 010401H
	DD	0e204H
$unwind$?e1000_send_packet@@YAXPEAX_K@Z DD 010e01H
	DD	0620eH
$unwind$?e1000_read_command@@YAIG@Z DD 010901H
	DD	06209H
$unwind$?e1000_write_command@@YAXGI@Z DD 010d01H
	DD	0420dH
$unwind$?e1000_detect_eeprom@@YA_NXZ DD 010401H
	DD	06204H
$unwind$?e1000_eerprom_read@@YAIE@Z DD 010801H
	DD	06208H
$unwind$?e1000_read_mac_address@@YA_NXZ DD 010401H
	DD	08204H
$unwind$?e1000_interrupt_handler@@YAX_KPEAX@Z DD 010e01H
	DD	0820eH
$unwind$?e1000_rx_init@@YAXXZ DD 010401H
	DD	06204H
$unwind$?e1000_tx_init@@YAXXZ DD 010401H
	DD	06204H
$unwind$?e1000_setup_interrupt@@YAXXZ DD 010401H
	DD	04204H
$unwind$?e1000_handle_receive@@YAXXZ DD 010401H
	DD	06204H
$unwind$?e1000_reset@@YAXXZ DD 010401H
	DD	08204H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
i$1 = 32
i$2 = 36
i$3 = 40
i$4 = 44
i$5 = 48
i$6 = 52
?e1000_reset@@YAXXZ PROC				; e1000_reset

; 268  : void e1000_reset () {

$LN21:
	sub	rsp, 72					; 00000048H

; 269  : 	e1000_write_command (REG_CTRL, (1<<31));

	mov	edx, -2147483648			; 80000000H
	xor	ecx, ecx
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 270  : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN18@e1000_rese
$LN17@e1000_rese:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN18@e1000_rese:
	cmp	DWORD PTR i$1[rsp], 1000		; 000003e8H
	jge	SHORT $LN16@e1000_rese

; 271  : 		;

	jmp	SHORT $LN17@e1000_rese
$LN16@e1000_rese:

; 272  : 	//! Reset the hardware guide from MINIX3
; 273  : 	e1000_write_command (REG_CTRL, (1 << 26));

	mov	edx, 67108864				; 04000000H
	xor	ecx, ecx
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 274  : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN15@e1000_rese
$LN14@e1000_rese:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN15@e1000_rese:
	cmp	DWORD PTR i$2[rsp], 1000		; 000003e8H
	jge	SHORT $LN13@e1000_rese

; 275  : 		;

	jmp	SHORT $LN14@e1000_rese
$LN13@e1000_rese:

; 276  : 	e1000_write_command (REG_CTRL, (1<<0));

	mov	edx, 1
	xor	ecx, ecx
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 277  : 
; 278  : 	e1000_write_command (REG_CTRL, (1<<3));

	mov	edx, 8
	xor	ecx, ecx
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 279  : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN12@e1000_rese
$LN11@e1000_rese:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN12@e1000_rese:
	cmp	DWORD PTR i$3[rsp], 1000		; 000003e8H
	jge	SHORT $LN10@e1000_rese

; 280  : 		;

	jmp	SHORT $LN11@e1000_rese
$LN10@e1000_rese:

; 281  : 	e1000_write_command (REG_CTRL, (1<<6));

	mov	edx, 64					; 00000040H
	xor	ecx, ecx
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 282  : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN9@e1000_rese
$LN8@e1000_rese:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN9@e1000_rese:
	cmp	DWORD PTR i$4[rsp], 1000		; 000003e8H
	jge	SHORT $LN7@e1000_rese

; 283  : 		;

	jmp	SHORT $LN8@e1000_rese
$LN7@e1000_rese:

; 284  : 	e1000_write_command (REG_CTRL, (1<<11));

	mov	edx, 2048				; 00000800H
	xor	ecx, ecx
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 285  : 	e1000_write_command (REG_CTRL, ~(1<<3));

	mov	edx, -9					; fffffff7H
	xor	ecx, ecx
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 286  : 	for (int i = 0; i < 1000;i++)

	mov	DWORD PTR i$5[rsp], 0
	jmp	SHORT $LN6@e1000_rese
$LN5@e1000_rese:
	mov	eax, DWORD PTR i$5[rsp]
	inc	eax
	mov	DWORD PTR i$5[rsp], eax
$LN6@e1000_rese:
	cmp	DWORD PTR i$5[rsp], 1000		; 000003e8H
	jge	SHORT $LN4@e1000_rese

; 287  : 		;

	jmp	SHORT $LN5@e1000_rese
$LN4@e1000_rese:

; 288  : 	e1000_write_command (REG_CTRL, ~(1<<31));

	mov	edx, 2147483647				; 7fffffffH
	xor	ecx, ecx
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 289  : 
; 290  : 	e1000_write_command (REG_FCAL, 0);

	xor	edx, edx
	mov	cx, 40					; 00000028H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 291  : 	e1000_write_command (REG_FCAH, 0);

	xor	edx, edx
	mov	cx, 44					; 0000002cH
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 292  : 	e1000_write_command (REG_FCT, 0);

	xor	edx, edx
	mov	cx, 48					; 00000030H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 293  : 	e1000_write_command (REG_FCTTV, 0);

	xor	edx, edx
	mov	cx, 10240				; 00002800H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 294  : 	//e1000_write_command (REG_CTRL, (1<<30));
; 295  : 
; 296  : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$6[rsp], 0
	jmp	SHORT $LN3@e1000_rese
$LN2@e1000_rese:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN3@e1000_rese:
	cmp	DWORD PTR i$6[rsp], 1000		; 000003e8H
	jge	SHORT $LN1@e1000_rese

; 297  : 		;

	jmp	SHORT $LN2@e1000_rese
$LN1@e1000_rese:

; 298  : 	
; 299  : 
; 300  : 
; 301  : }

	add	rsp, 72					; 00000048H
	ret	0
?e1000_reset@@YAXXZ ENDP				; e1000_reset
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
old_cur$1 = 32
len$2 = 36
buf$3 = 40
?e1000_handle_receive@@YAXXZ PROC			; e1000_handle_receive

; 251  : void e1000_handle_receive () {

$LN6:
	sub	rsp, 56					; 00000038H
$LN3@e1000_hand:

; 252  : 	for(;;) {
; 253  : 	if((i_net_dev->rx_desc[i_net_dev->rx_tail]->status)) {

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, WORD PTR [rax+50]
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rcx+rax*8+56]
	movzx	eax, BYTE PTR [rax+12]
	movzx	eax, al
	test	eax, eax
	je	$LN1@e1000_hand

; 254  : 		//printf ("E1000 New Packet received #1\n");
; 255  : 		uint8_t *buf = (uint8_t*)i_net_dev->rx_desc[i_net_dev->rx_tail]->addr;

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, WORD PTR [rax+50]
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rcx+rax*8+56]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR buf$3[rsp], rax

; 256  : 		uint16_t len = i_net_dev->rx_desc[i_net_dev->rx_tail]->length;

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, WORD PTR [rax+50]
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rcx+rax*8+56]
	movzx	eax, WORD PTR [rax+8]
	mov	WORD PTR len$2[rsp], ax

; 257  : 		//printf ("E1000 New Packet received #2\n");
; 258  : 		i_net_dev->rx_desc[i_net_dev->rx_tail]->status = 0;

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, WORD PTR [rax+50]
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rcx+rax*8+56]
	mov	BYTE PTR [rax+12], 0

; 259  : 		uint16_t old_cur = i_net_dev->rx_tail;

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, WORD PTR [rax+50]
	mov	WORD PTR old_cur$1[rsp], ax

; 260  : 		i_net_dev->rx_tail = (i_net_dev->rx_tail + 1) % E1000_NUM_RX_DESC;

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, WORD PTR [rax+50]
	inc	eax
	cdq
	and	edx, 31
	add	eax, edx
	and	eax, 31
	sub	eax, edx
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	WORD PTR [rcx+50], ax

; 261  : 		e1000_write_command (REG_RXDESCTAIL, old_cur);

	movzx	eax, WORD PTR old_cur$1[rsp]
	mov	edx, eax
	mov	cx, 10264				; 00002818H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 262  : 		printf ("E1000 New Packet received #3\n");

	lea	rcx, OFFSET FLAT:$SG3526
	call	?printf@@YAXPEBDZZ			; printf

; 263  : 		break;

	jmp	SHORT $LN2@e1000_hand
$LN1@e1000_hand:

; 264  : 	}
; 265  : 	}

	jmp	$LN3@e1000_hand
$LN2@e1000_hand:

; 266  : }

	add	rsp, 56					; 00000038H
	ret	0
?e1000_handle_receive@@YAXXZ ENDP			; e1000_handle_receive
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
?e1000_setup_interrupt@@YAXXZ PROC			; e1000_setup_interrupt

; 211  : void e1000_setup_interrupt () {

$LN3:
	sub	rsp, 40					; 00000028H

; 212  : 	e1000_write_command (0xD8, 0xFFFF);

	mov	edx, 65535				; 0000ffffH
	mov	cx, 216					; 000000d8H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 213  : 	e1000_write_command (0xD0, 0xFFFF);

	mov	edx, 65535				; 0000ffffH
	mov	cx, 208					; 000000d0H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 214  : 	e1000_read_command (0xc0);

	mov	cx, 192					; 000000c0H
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command

; 215  : }

	add	rsp, 40					; 00000028H
	ret	0
?e1000_setup_interrupt@@YAXXZ ENDP			; e1000_setup_interrupt
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
tctl$ = 32
i$1 = 36
base_address$ = 40
?e1000_tx_init@@YAXXZ PROC				; e1000_tx_init

; 182  : void e1000_tx_init () {

$LN6:
	sub	rsp, 56					; 00000038H

; 183  : 
; 184  : 	i_net_dev->tx_desc_base = (uint64_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	QWORD PTR [rcx+40], rax

; 185  : 	uint64_t base_address = (uint64_t)i_net_dev->tx_desc_base;

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR base_address$[rsp], rax

; 186  : 	for (int i = 0; i < E1000_NUM_TX_DESC; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@e1000_tx_i
$LN2@e1000_tx_i:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@e1000_tx_i:
	cmp	DWORD PTR i$1[rsp], 8
	jge	SHORT $LN1@e1000_tx_i

; 187  : 		i_net_dev->tx_desc[i] = (e1000_tx_desc*)(i_net_dev->tx_desc_base + (i * 16));

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 16
	cdqe
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rcx, QWORD PTR [rcx+40]
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	QWORD PTR [rdx+rcx*8+312], rax

; 188  : 		i_net_dev->tx_desc[i]->addr = (uint64_t)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rcx, QWORD PTR [rdx+rcx*8+312]
	mov	QWORD PTR [rcx], rax

; 189  : 		i_net_dev->tx_desc[i]->cmd = (1<<0);

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rcx+rax*8+312]
	mov	BYTE PTR [rax+11], 1

; 190  : 	}

	jmp	SHORT $LN2@e1000_tx_i
$LN1@e1000_tx_i:

; 191  : 	e1000_write_command (REG_TXDESCHI, base_address >> 32);

	mov	rax, QWORD PTR base_address$[rsp]
	shr	rax, 32					; 00000020H
	mov	edx, eax
	mov	cx, 14340				; 00003804H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 192  : 	e1000_write_command (REG_TXDESCLO, base_address);

	mov	edx, DWORD PTR base_address$[rsp]
	mov	cx, 14336				; 00003800H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 193  : 
; 194  : 	e1000_write_command (REG_TXDESCLEN, E1000_NUM_TX_DESC * 16);

	mov	edx, 128				; 00000080H
	mov	cx, 14344				; 00003808H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 195  : 
; 196  : 	e1000_write_command (REG_TXDESCHEAD, 0);

	xor	edx, edx
	mov	cx, 14352				; 00003810H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 197  : 	e1000_write_command (REG_TXDESCTAIL,0);

	xor	edx, edx
	mov	cx, 14360				; 00003818H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 198  : 	i_net_dev->tx_tail = 0;

	xor	eax, eax
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	WORD PTR [rcx+48], ax

; 199  : 
; 200  : 	uint32_t tctl = e1000_read_command (REG_TCTRL);

	mov	cx, 1024				; 00000400H
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command
	mov	DWORD PTR tctl$[rsp], eax

; 201  : 	tctl &= ~(0xFF << 4);

	mov	eax, DWORD PTR tctl$[rsp]
	and	eax, -4081				; fffff00fH
	mov	DWORD PTR tctl$[rsp], eax

; 202  : 	//tctl |= (15<<4);
; 203  : 
; 204  : 	tctl |= TCTL_EN;

	mov	eax, DWORD PTR tctl$[rsp]
	or	eax, 2
	mov	DWORD PTR tctl$[rsp], eax

; 205  : 	tctl |= TCTL_PSP;

	mov	eax, DWORD PTR tctl$[rsp]
	or	eax, 8
	mov	DWORD PTR tctl$[rsp], eax

; 206  : 	tctl |= (1<<24);

	mov	eax, DWORD PTR tctl$[rsp]
	bts	eax, 24
	mov	DWORD PTR tctl$[rsp], eax

; 207  : 	e1000_write_command(REG_TCTRL,tctl);

	mov	edx, DWORD PTR tctl$[rsp]
	mov	cx, 1024				; 00000400H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 208  : 
; 209  : }

	add	rsp, 56					; 00000038H
	ret	0
?e1000_tx_init@@YAXXZ ENDP				; e1000_tx_init
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
i$1 = 32
rx_desc_base$ = 40
?e1000_rx_init@@YAXXZ PROC				; e1000_rx_init

; 153  : void e1000_rx_init () {

$LN6:
	sub	rsp, 56					; 00000038H

; 154  : 
; 155  : 	i_net_dev->rx_desc_base = (uint64_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	QWORD PTR [rcx+32], rax

; 156  : 	memset (i_net_dev->rx_desc_base, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rcx, QWORD PTR [rax+32]
	call	?memset@@YAXPEAXEI@Z			; memset

; 157  : 	uint64_t rx_desc_base = (uint64_t)i_net_dev->rx_desc_base;

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR rx_desc_base$[rsp], rax

; 158  : 
; 159  : 	for (int i = 0; i < E1000_NUM_RX_DESC; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@e1000_rx_i
$LN2@e1000_rx_i:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@e1000_rx_i:
	cmp	DWORD PTR i$1[rsp], 32			; 00000020H
	jge	SHORT $LN1@e1000_rx_i

; 160  : 		i_net_dev->rx_desc[i] = (e1000_rx_desc*)(i_net_dev->rx_desc_base + (i * 16));

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 16
	cdqe
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rcx, QWORD PTR [rcx+32]
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	QWORD PTR [rdx+rcx*8+56], rax

; 161  : 		i_net_dev->rx_desc[i]->addr = (uint64_t)pmmngr_alloc();   

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rcx, QWORD PTR [rdx+rcx*8+56]
	mov	QWORD PTR [rcx], rax

; 162  : 		i_net_dev->rx_desc[i]->status = 0;

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rcx+rax*8+56]
	mov	BYTE PTR [rax+12], 0

; 163  : 	}

	jmp	SHORT $LN2@e1000_rx_i
$LN1@e1000_rx_i:

; 164  : 
; 165  : 
; 166  : 
; 167  : 	e1000_write_command (REG_RXDESCLEN, E1000_NUM_RX_DESC * 16);

	mov	edx, 512				; 00000200H
	mov	cx, 10248				; 00002808H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 168  : 
; 169  : 	e1000_write_command(REG_RXDESCHEAD, 0);

	xor	edx, edx
	mov	cx, 10256				; 00002810H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 170  : 	e1000_write_command(REG_RXDESCTAIL, E1000_NUM_RX_DESC - 1);

	mov	edx, 31
	mov	cx, 10264				; 00002818H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 171  : 
; 172  : 	e1000_write_command (REG_RXDESCKHI, rx_desc_base >> 32);

	mov	rax, QWORD PTR rx_desc_base$[rsp]
	shr	rax, 32					; 00000020H
	mov	edx, eax
	mov	cx, 10244				; 00002804H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 173  : 	e1000_write_command (REG_RXDESCLO, rx_desc_base);

	mov	edx, DWORD PTR rx_desc_base$[rsp]
	mov	cx, 10240				; 00002800H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 174  : 	
; 175  : 	i_net_dev->rx_tail = 0;

	xor	eax, eax
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	WORD PTR [rcx+50], ax

; 176  : 
; 177  : 	e1000_write_command (REG_RCTRL, RCTL_EN | (1<<2) | 
; 178  : 		(1<<4) | (1<<15) | (1<<25) | (3<<16) | (1<<26));

	mov	edx, 100892694				; 06038016H
	mov	cx, 256					; 00000100H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 179  : }

	add	rsp, 56					; 00000038H
	ret	0
?e1000_rx_init@@YAXXZ ENDP				; e1000_rx_init
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
status$1 = 32
head$2 = 36
icr$ = 40
size$3 = 48
tv159 = 56
v$ = 80
p$ = 88
?e1000_interrupt_handler@@YAX_KPEAX@Z PROC		; e1000_interrupt_handler

; 106  : void e1000_interrupt_handler (size_t v, void* p) {

$LN16:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 107  : 	x64_cli();

	call	x64_cli

; 108  : 
; 109  : 	uint32_t icr = e1000_read_command (REG_ICR);

	mov	cx, 192					; 000000c0H
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command
	mov	DWORD PTR icr$[rsp], eax

; 110  : 
; 111  : 	//e1000_write_command (REG_IMASK, 0x1);
; 112  : 	if (icr & E1000_ICR_RECEIVE) {

	mov	eax, DWORD PTR icr$[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN11@e1000_inte

; 113  : 		
; 114  : 		uint32_t head = inportd (REG_RXDESCHEAD);

	mov	cx, 10256				; 00002810H
	call	?inportd@@YAIG@Z			; inportd
	mov	DWORD PTR head$2[rsp], eax
$LN10@e1000_inte:

; 115  : 
; 116  : 		while (i_net_dev->rx_tail != head){

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, WORD PTR [rax+50]
	cmp	eax, DWORD PTR head$2[rsp]
	je	$LN9@e1000_inte

; 117  : 			_debug_print_ ("E1000 recevied \r\n");

	lea	rcx, OFFSET FLAT:$SG3457
	call	?_debug_print_@@YAXPEADZZ		; _debug_print_

; 118  : 			size_t size = i_net_dev->rx_desc[i_net_dev->rx_tail]->length;

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, WORD PTR [rax+50]
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rcx+rax*8+56]
	movzx	eax, WORD PTR [rax+8]
	movzx	eax, ax
	mov	QWORD PTR size$3[rsp], rax

; 119  : 			uint8_t status = i_net_dev->rx_desc[i_net_dev->rx_tail]->status;

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, WORD PTR [rax+50]
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rcx+rax*8+56]
	movzx	eax, BYTE PTR [rax+12]
	mov	BYTE PTR status$1[rsp], al

; 120  : 
; 121  : 			if ((status & 0x1)==0){

	movzx	eax, BYTE PTR status$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN8@e1000_inte

; 122  : 				break;

	jmp	SHORT $LN9@e1000_inte
$LN8@e1000_inte:

; 123  : 			}
; 124  : 			
; 125  : 			size -= 4;

	mov	rax, QWORD PTR size$3[rsp]
	sub	rax, 4
	mov	QWORD PTR size$3[rsp], rax

; 126  : 
; 127  : 			_debug_print_ ("E1000 Bytes received -> %d bytes, status 0x%x \r\n", size, status);

	movzx	eax, BYTE PTR status$1[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR size$3[rsp]
	lea	rcx, OFFSET FLAT:$SG3461
	call	?_debug_print_@@YAXPEADZZ		; _debug_print_

; 128  : 
; 129  : 			i_net_dev->rx_tail++;

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, WORD PTR [rax+50]
	inc	ax
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	WORD PTR [rcx+50], ax

; 130  : 			i_net_dev->rx_tail %= E1000_NUM_RX_DESC;

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, WORD PTR [rax+50]
	cdq
	and	edx, 31
	add	eax, edx
	and	eax, 31
	sub	eax, edx
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	WORD PTR [rcx+50], ax

; 131  : 		}

	jmp	$LN10@e1000_inte
$LN9@e1000_inte:

; 132  : 
; 133  : 		if (i_net_dev->rx_tail == head) {

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, WORD PTR [rax+50]
	cmp	eax, DWORD PTR head$2[rsp]
	jne	SHORT $LN7@e1000_inte

; 134  : 			e1000_write_command (REG_RXDESCTAIL, (head + E1000_NUM_RX_DESC - 1) % E1000_NUM_RX_DESC);

	mov	eax, DWORD PTR head$2[rsp]
	add	eax, 31
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	eax, edx
	mov	edx, eax
	mov	cx, 10264				; 00002818H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 135  : 		}else {

	jmp	SHORT $LN6@e1000_inte
$LN7@e1000_inte:

; 136  : 			e1000_write_command (REG_RXDESCTAIL, i_net_dev->rx_tail);

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, WORD PTR [rax+50]
	mov	edx, eax
	mov	cx, 10264				; 00002818H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command
$LN6@e1000_inte:

; 137  : 		}

	jmp	SHORT $LN5@e1000_inte
$LN11@e1000_inte:

; 138  : 
; 139  : 	}else if (icr & E1000_ICR_TRANSMIT) {

	mov	eax, DWORD PTR icr$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN4@e1000_inte

; 140  : 		_debug_print_ ("E1000 interrupt data transmit \r\n");

	lea	rcx, OFFSET FLAT:$SG3466
	call	?_debug_print_@@YAXPEADZZ		; _debug_print_
	jmp	SHORT $LN3@e1000_inte
$LN4@e1000_inte:

; 141  : 	} else if (icr & E1000_ICR_LINK_CHANGE) {

	mov	eax, DWORD PTR icr$[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN2@e1000_inte

; 142  : 		_debug_print_ ("E1000 interrupt link change %s \r\n", (e1000_read_command(REG_STATUS) & (1<<1)) ? "up" : "down");

	mov	cx, 8
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command
	and	eax, 2
	test	eax, eax
	je	SHORT $LN14@e1000_inte
	lea	rax, OFFSET FLAT:$SG3469
	mov	QWORD PTR tv159[rsp], rax
	jmp	SHORT $LN15@e1000_inte
$LN14@e1000_inte:
	lea	rax, OFFSET FLAT:$SG3470
	mov	QWORD PTR tv159[rsp], rax
$LN15@e1000_inte:
	mov	rdx, QWORD PTR tv159[rsp]
	lea	rcx, OFFSET FLAT:$SG3471
	call	?_debug_print_@@YAXPEADZZ		; _debug_print_

; 143  : 	} else {

	jmp	SHORT $LN1@e1000_inte
$LN2@e1000_inte:

; 144  : 		_debug_print_ ("E1000 unknown interrupt \r\n");

	lea	rcx, OFFSET FLAT:$SG3473
	call	?_debug_print_@@YAXPEADZZ		; _debug_print_
$LN1@e1000_inte:
$LN3@e1000_inte:
$LN5@e1000_inte:

; 145  : 	}
; 146  : 
; 147  : 	e1000_write_command (REG_ICR, 1);

	mov	edx, 1
	mov	cx, 192					; 000000c0H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 148  : 	interrupt_end(i_net_dev->e1000_irq);

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	ecx, DWORD PTR [rax+20]
	call	?interrupt_end@@YAXI@Z			; interrupt_end

; 149  : 	x64_sti();

	call	x64_sti

; 150  : }

	add	rsp, 72					; 00000048H
	ret	0
?e1000_interrupt_handler@@YAX_KPEAX@Z ENDP		; e1000_interrupt_handler
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
temp$1 = 32
i$2 = 36
mem_base_mac_32$3 = 40
mem_base_mac_8$4 = 48
?e1000_read_mac_address@@YA_NXZ PROC			; e1000_read_mac_address

; 77   : bool e1000_read_mac_address () {

$LN10:
	sub	rsp, 72					; 00000048H

; 78   : 	if (i_net_dev->eerprom_exists) {

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, BYTE PTR [rax+16]
	test	eax, eax
	je	$LN7@e1000_read

; 79   : 		printf ("EEPROM exist\n");

	lea	rcx, OFFSET FLAT:$SG3433
	call	?printf@@YAXPEBDZZ			; printf

; 80   : 		uint32_t temp;
; 81   : 		temp = e1000_eerprom_read (0);

	xor	ecx, ecx
	call	?e1000_eerprom_read@@YAIE@Z		; e1000_eerprom_read
	mov	DWORD PTR temp$1[rsp], eax

; 82   : 		i_net_dev->mac[0] = temp & 0xff;

	mov	eax, DWORD PTR temp$1[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, 0
	mov	rdx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	BYTE PTR [rdx+rcx+24], al

; 83   : 		i_net_dev->mac[1] = temp >> 8;

	mov	eax, DWORD PTR temp$1[rsp]
	shr	eax, 8
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	BYTE PTR [rdx+rcx+24], al

; 84   : 		temp = e1000_eerprom_read (1);

	mov	cl, 1
	call	?e1000_eerprom_read@@YAIE@Z		; e1000_eerprom_read
	mov	DWORD PTR temp$1[rsp], eax

; 85   : 		i_net_dev->mac[2] = temp & 0xff;

	mov	eax, DWORD PTR temp$1[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, 2
	mov	rdx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	BYTE PTR [rdx+rcx+24], al

; 86   : 		i_net_dev->mac[3] = temp >> 8;

	mov	eax, DWORD PTR temp$1[rsp]
	shr	eax, 8
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	BYTE PTR [rdx+rcx+24], al

; 87   : 		temp = e1000_eerprom_read (2);

	mov	cl, 2
	call	?e1000_eerprom_read@@YAIE@Z		; e1000_eerprom_read
	mov	DWORD PTR temp$1[rsp], eax

; 88   : 		i_net_dev->mac[4] = temp & 0xff;

	mov	eax, DWORD PTR temp$1[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, 4
	mov	rdx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	BYTE PTR [rdx+rcx+24], al

; 89   : 		i_net_dev->mac[5] = temp >> 8;

	mov	eax, DWORD PTR temp$1[rsp]
	shr	eax, 8
	mov	ecx, 1
	imul	rcx, 5
	mov	rdx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	BYTE PTR [rdx+rcx+24], al

; 90   : 	} else {

	jmp	$LN6@e1000_read
$LN7@e1000_read:

; 91   : 		printf ("Applying memory map\n");

	lea	rcx, OFFSET FLAT:$SG3436
	call	?printf@@YAXPEBDZZ			; printf

; 92   : 		uint8_t * mem_base_mac_8 = (uint8_t*)(i_net_dev->e1000_mem_base + 0x5400);

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rax+8]
	add	rax, 21504				; 00005400H
	mov	QWORD PTR mem_base_mac_8$4[rsp], rax

; 93   : 		uint32_t * mem_base_mac_32 = (uint32_t*) (i_net_dev->e1000_mem_base + 0x5400);

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rax+8]
	add	rax, 21504				; 00005400H
	mov	QWORD PTR mem_base_mac_32$3[rsp], rax

; 94   : 		if (mem_base_mac_32[0] != 0) {

	mov	eax, 4
	imul	rax, 0
	mov	rcx, QWORD PTR mem_base_mac_32$3[rsp]
	cmp	DWORD PTR [rcx+rax], 0
	je	SHORT $LN5@e1000_read

; 95   : 			for (int i = 0; i < 6; i++) {

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@e1000_read
$LN3@e1000_read:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN4@e1000_read:
	cmp	DWORD PTR i$2[rsp], 6
	jge	SHORT $LN2@e1000_read

; 96   : 				i_net_dev->mac[i] = mem_base_mac_8[i];

	movsxd	rax, DWORD PTR i$2[rsp]
	movsxd	rcx, DWORD PTR i$2[rsp]
	mov	rdx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	r8, QWORD PTR mem_base_mac_8$4[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx+24], al

; 97   : 			}

	jmp	SHORT $LN3@e1000_read
$LN2@e1000_read:
	jmp	SHORT $LN1@e1000_read
$LN5@e1000_read:

; 98   : 		}else {
; 99   : 			return false;

	xor	al, al
	jmp	SHORT $LN8@e1000_read
$LN1@e1000_read:
$LN6@e1000_read:

; 100  : 		}
; 101  : 	}
; 102  : 
; 103  : 	return true;

	mov	al, 1
$LN8@e1000_read:

; 104  : }

	add	rsp, 72					; 00000048H
	ret	0
?e1000_read_mac_address@@YA_NXZ ENDP			; e1000_read_mac_address
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
data$ = 32
tmp$ = 36
addr$ = 64
?e1000_eerprom_read@@YAIE@Z PROC			; e1000_eerprom_read

; 61   : uint32_t e1000_eerprom_read (uint8_t addr) {

$LN9:
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 56					; 00000038H

; 62   : 	
; 63   : 	uint16_t data = 0;

	xor	eax, eax
	mov	WORD PTR data$[rsp], ax

; 64   : 	uint32_t tmp = 0;

	mov	DWORD PTR tmp$[rsp], 0

; 65   : 	if (i_net_dev->eerprom_exists) {

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, BYTE PTR [rax+16]
	test	eax, eax
	je	SHORT $LN6@e1000_eerp

; 66   : 		e1000_write_command (REG_EEPROM, (1) | ((uint32_t)(addr) << 8));

	movzx	eax, BYTE PTR addr$[rsp]
	shl	eax, 8
	or	eax, 1
	mov	edx, eax
	mov	cx, 20
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command
$LN5@e1000_eerp:

; 67   : 		while (! ((tmp = e1000_read_command (REG_EEPROM)) & (1 << 4)));

	mov	cx, 20
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command
	mov	DWORD PTR tmp$[rsp], eax
	mov	eax, DWORD PTR tmp$[rsp]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN4@e1000_eerp
	jmp	SHORT $LN5@e1000_eerp
$LN4@e1000_eerp:

; 68   : 	} else {

	jmp	SHORT $LN3@e1000_eerp
$LN6@e1000_eerp:

; 69   : 		e1000_write_command ( REG_EEPROM, (1) | ((uint32_t)(addr) << 2));

	movzx	eax, BYTE PTR addr$[rsp]
	shl	eax, 2
	or	eax, 1
	mov	edx, eax
	mov	cx, 20
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command
$LN2@e1000_eerp:

; 70   : 		while (!((tmp = e1000_read_command (REG_EEPROM)) & (1 << 1)));

	mov	cx, 20
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command
	mov	DWORD PTR tmp$[rsp], eax
	mov	eax, DWORD PTR tmp$[rsp]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN1@e1000_eerp
	jmp	SHORT $LN2@e1000_eerp
$LN1@e1000_eerp:
$LN3@e1000_eerp:

; 71   : 	}
; 72   : 	data = (uint16_t)((tmp >> 16) & 0xFFFF);

	mov	eax, DWORD PTR tmp$[rsp]
	shr	eax, 16
	and	eax, 65535				; 0000ffffH
	mov	WORD PTR data$[rsp], ax

; 73   : 	return data;

	movzx	eax, WORD PTR data$[rsp]

; 74   : }

	add	rsp, 56					; 00000038H
	ret	0
?e1000_eerprom_read@@YAIE@Z ENDP			; e1000_eerprom_read
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
i$1 = 32
val$ = 36
?e1000_detect_eeprom@@YA_NXZ PROC			; e1000_detect_eeprom

; 44   : bool e1000_detect_eeprom () {

$LN8:
	sub	rsp, 56					; 00000038H

; 45   : 	
; 46   : 	uint32_t val = 0;

	mov	DWORD PTR val$[rsp], 0

; 47   : 	e1000_write_command (REG_EEPROM, 0x1);

	mov	edx, 1
	mov	cx, 20
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 48   : 
; 49   : 	for (int i = 0; i < 1000 && ! i_net_dev->eerprom_exists; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN5@e1000_dete
$LN4@e1000_dete:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN5@e1000_dete:
	cmp	DWORD PTR i$1[rsp], 1000		; 000003e8H
	jge	SHORT $LN3@e1000_dete
	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, BYTE PTR [rax+16]
	test	eax, eax
	jne	SHORT $LN3@e1000_dete

; 50   : 		val = e1000_read_command (REG_EEPROM);

	mov	cx, 20
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command
	mov	DWORD PTR val$[rsp], eax

; 51   : 		if (val & 0x10)

	mov	eax, DWORD PTR val$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN2@e1000_dete

; 52   : 			i_net_dev->eerprom_exists = true;

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	BYTE PTR [rax+16], 1

; 53   : 		else

	jmp	SHORT $LN1@e1000_dete
$LN2@e1000_dete:

; 54   : 			i_net_dev->eerprom_exists = false;

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	BYTE PTR [rax+16], 0
$LN1@e1000_dete:

; 55   : 	}

	jmp	SHORT $LN4@e1000_dete
$LN3@e1000_dete:

; 56   : 
; 57   : 	return i_net_dev->eerprom_exists;

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, BYTE PTR [rax+16]

; 58   : }

	add	rsp, 56					; 00000038H
	ret	0
?e1000_detect_eeprom@@YA_NXZ ENDP			; e1000_detect_eeprom
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
p_address$ = 48
p_value$ = 56
?e1000_write_command@@YAXGI@Z PROC			; e1000_write_command

; 36   : void e1000_write_command (uint16_t p_address, uint32_t p_value) {

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 40					; 00000028H

; 37   : 	if (i_net_dev->e1000_base != 0) {

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@e1000_writ

; 38   : 		x64_outportd (i_net_dev->e1000_base, p_address);

	movzx	eax, WORD PTR p_address$[rsp]
	mov	edx, eax
	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	ecx, WORD PTR [rax]
	call	x64_outportd

; 39   : 		x64_outportd (i_net_dev->e1000_base + 4, p_value);  //4

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rax]
	add	rax, 4
	mov	edx, DWORD PTR p_value$[rsp]
	movzx	ecx, ax
	call	x64_outportd

; 40   : 	}else

	jmp	SHORT $LN1@e1000_writ
$LN2@e1000_writ:

; 41   : 		*(uint32_t*)(i_net_dev->e1000_mem_base + p_address) = p_value;

	movzx	eax, WORD PTR p_address$[rsp]
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR p_value$[rsp]
	mov	DWORD PTR [rax+rcx], edx
$LN1@e1000_writ:

; 42   : }

	add	rsp, 40					; 00000028H
	ret	0
?e1000_write_command@@YAXGI@Z ENDP			; e1000_write_command
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
io_data$1 = 32
p_address$ = 64
?e1000_read_command@@YAIG@Z PROC			; e1000_read_command

; 26   : uint32_t e1000_read_command (uint16_t p_address) {

$LN5:
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 56					; 00000038H

; 27   : 	if (i_net_dev->e1000_base != 0) {

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@e1000_read

; 28   : 		x64_outportd (i_net_dev->e1000_base,p_address);

	movzx	eax, WORD PTR p_address$[rsp]
	mov	edx, eax
	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	ecx, WORD PTR [rax]
	call	x64_outportd

; 29   : 		char *io_data = (char*)(i_net_dev->e1000_base + 4);

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rax]
	add	rax, 4
	mov	QWORD PTR io_data$1[rsp], rax

; 30   : 		return x64_inportd ((uint16_t)io_data);

	movzx	ecx, WORD PTR io_data$1[rsp]
	call	x64_inportd
	jmp	SHORT $LN3@e1000_read

; 31   : 	}else 

	jmp	SHORT $LN1@e1000_read
$LN2@e1000_read:

; 32   : 		return *(uint32_t*)(i_net_dev->e1000_mem_base + p_address);

	movzx	eax, WORD PTR p_address$[rsp]
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rcx, QWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+rcx]
$LN1@e1000_read:
$LN3@e1000_read:

; 33   : 
; 34   : }

	add	rsp, 56					; 00000038H
	ret	0
?e1000_read_command@@YAIG@Z ENDP			; e1000_read_command
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
cur$ = 32
head$ = 36
data$ = 64
size$ = 72
?e1000_send_packet@@YAXPEAX_K@Z PROC			; e1000_send_packet

; 217  : void e1000_send_packet (void* data, size_t size) {

$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 218  : 	uint32_t cur, head;
; 219  : 	
; 220  : 	cur = e1000_read_command (REG_TXDESCTAIL) % E1000_NUM_TX_DESC; //i_net_dev->tx_tail;

	mov	cx, 14360				; 00003818H
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command
	xor	edx, edx
	mov	ecx, 8
	div	ecx
	mov	eax, edx
	mov	DWORD PTR cur$[rsp], eax

; 221  : 	printf ("CUR Tx tail -> %d\n", cur);

	mov	edx, DWORD PTR cur$[rsp]
	lea	rcx, OFFSET FLAT:$SG3505
	call	?printf@@YAXPEBDZZ			; printf

; 222  : 	i_net_dev->tx_tail++;

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, WORD PTR [rax+48]
	inc	ax
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	WORD PTR [rcx+48], ax

; 223  : 	i_net_dev->tx_tail %= E1000_NUM_TX_DESC;

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, WORD PTR [rax+48]
	cdq
	and	edx, 7
	add	eax, edx
	and	eax, 7
	sub	eax, edx
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	WORD PTR [rcx+48], ax

; 224  : 
; 225  : 	head = e1000_read_command(REG_TXDESCHEAD);

	mov	cx, 14352				; 00003810H
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command
	mov	DWORD PTR head$[rsp], eax

; 226  : 	if (i_net_dev->tx_tail == head) {

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, WORD PTR [rax+48]
	cmp	eax, DWORD PTR head$[rsp]
	jne	SHORT $LN5@e1000_send

; 227  : 		i_net_dev->tx_tail = cur;

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	ecx, WORD PTR cur$[rsp]
	mov	WORD PTR [rax+48], cx

; 228  : 		return;

	jmp	$LN6@e1000_send
$LN5@e1000_send:

; 229  : 	}
; 230  : 
; 231  : 	if (size > 2048) {  //max buffer size 2048 (2KB)

	cmp	QWORD PTR size$[rsp], 2048		; 00000800H
	jbe	SHORT $LN4@e1000_send

; 232  : 		size = 2048;

	mov	QWORD PTR size$[rsp], 2048		; 00000800H
$LN4@e1000_send:

; 233  : 	}
; 234  : 
; 235  : 	
; 236  : 
; 237  : 	i_net_dev->tx_desc[cur]->cmd = CMD_EOP | CMD_IFCS | CMD_RS; // | CMD_RPS | CMD_IDE;

	mov	eax, DWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rcx+rax*8+312]
	mov	BYTE PTR [rax+11], 11

; 238  : 	i_net_dev->tx_desc[cur]->length = size;

	mov	eax, DWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rcx+rax*8+312]
	movzx	ecx, WORD PTR size$[rsp]
	mov	WORD PTR [rax+8], cx

; 239  : 	memcpy ((void*)i_net_dev->tx_desc[cur]->addr, data, size);

	mov	eax, DWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rcx+rax*8+312]
	mov	r8d, DWORD PTR size$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	memcpy

; 240  : 	e1000_write_command(REG_TXDESCTAIL, i_net_dev->tx_tail);

	mov	rax, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	movzx	eax, WORD PTR [rax+48]
	mov	edx, eax
	mov	cx, 14360				; 00003818H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 241  : 	printf ("TX Next tail -> %d\n", e1000_read_command (REG_TXDESCTAIL) % E1000_NUM_TX_DESC);

	mov	cx, 14360				; 00003818H
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command
	xor	edx, edx
	mov	ecx, 8
	div	ecx
	mov	eax, edx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG3509
	call	?printf@@YAXPEBDZZ			; printf
$LN3@e1000_send:

; 242  : 	for(;;) {
; 243  : 		if (i_net_dev->tx_desc[cur]->status) {

	mov	eax, DWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rcx+rax*8+312]
	movzx	eax, BYTE PTR [rax+12]
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@e1000_send

; 244  : 			printf ("Transmit status ->%x\n", i_net_dev->tx_desc[cur]->status);

	mov	eax, DWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	rax, QWORD PTR [rcx+rax*8+312]
	movzx	eax, BYTE PTR [rax+12]
	movzx	eax, al
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG3514
	call	?printf@@YAXPEBDZZ			; printf

; 245  : 			printf ("Transmitted\n");

	lea	rcx, OFFSET FLAT:$SG3515
	call	?printf@@YAXPEBDZZ			; printf

; 246  : 			break;

	jmp	SHORT $LN2@e1000_send
$LN1@e1000_send:

; 247  : 		}
; 248  : 	}

	jmp	SHORT $LN3@e1000_send
$LN2@e1000_send:
$LN6@e1000_send:

; 249  : }

	add	rsp, 56					; 00000038H
	ret	0
?e1000_send_packet@@YAXPEAX_K@Z ENDP			; e1000_send_packet
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
pci_status$ = 48
status$ = 52
bus$ = 56
dev_$ = 60
func$ = 64
command$ = 68
i$1 = 72
dev$ = 80
i$2 = 88
i$3 = 92
i$4 = 96
i$5 = 100
i$6 = 104
ctrl$ = 108
?e1000_initialize@@YAXXZ PROC				; e1000_initialize

; 304  : void e1000_initialize () {

$LN28:
	sub	rsp, 120				; 00000078H

; 305  : 	int func, dev_, bus = 0;

	mov	DWORD PTR bus$[rsp], 0

; 306  : 	pci_device_info *dev = (pci_device_info*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR dev$[rsp], rax

; 307  : 	if (!pci_find_device_class (0x02,0x00, dev,&bus, &dev_, &func)) {

	lea	rax, QWORD PTR func$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR dev_$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR bus$[rsp]
	mov	r8, QWORD PTR dev$[rsp]
	xor	edx, edx
	mov	cl, 2
	call	?pci_find_device_class@@YA_NEEPEATpci_device_info@@PEAH11@Z ; pci_find_device_class
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN25@e1000_init

; 308  : 		_debug_print_ ("Intel Ethernet not found\n");

	lea	rcx, OFFSET FLAT:$SG3561
	call	?_debug_print_@@YAXPEADZZ		; _debug_print_

; 309  : 		return;

	jmp	$LN26@e1000_init
$LN25@e1000_init:

; 310  : 	}
; 311  : 
; 312  : 	uint16_t command = 0;

	xor	eax, eax
	mov	WORD PTR command$[rsp], ax

; 313  : 	read_config_16 (0,bus,dev_,func,0x4,&command);

	lea	rax, QWORD PTR command$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 4
	mov	r9d, DWORD PTR func$[rsp]
	mov	r8d, DWORD PTR dev_$[rsp]
	mov	edx, DWORD PTR bus$[rsp]
	xor	ecx, ecx
	call	?read_config_16@@YAXGHHHHPEAG@Z		; read_config_16

; 314  : 	if (((command >> 10) & 0xff) != 0) {

	movzx	eax, WORD PTR command$[rsp]
	sar	eax, 10
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $LN24@e1000_init

; 315  : 		_debug_print_ ("E1000 INterrupt Disabled in PCI ConfigSpace\n");

	lea	rcx, OFFSET FLAT:$SG3564
	call	?_debug_print_@@YAXPEADZZ		; _debug_print_
$LN24@e1000_init:

; 316  : 	}
; 317  : 
; 318  : 	i_net_dev = (e1000_dev*)malloc(sizeof(e1000_dev));

	mov	ecx, 376				; 00000178H
	call	?malloc@@YAPEAX_K@Z			; malloc
	mov	QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA, rax ; i_net_dev

; 319  :     
; 320  :     i_net_dev->e1000_mem_base = dev->device.nonBridge.baseAddress[1] & ~0xf;

	mov	eax, 4
	imul	rax, 1
	mov	rcx, QWORD PTR dev$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	and	eax, -16				; fffffff0H
	mov	eax, eax
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	QWORD PTR [rcx+8], rax

; 321  : 
; 322  : 	for (int i = 0; i < 6; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN23@e1000_init
$LN22@e1000_init:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN23@e1000_init:
	cmp	DWORD PTR i$1[rsp], 6
	jge	SHORT $LN21@e1000_init

; 323  : 		if ( dev->device.nonBridge.baseAddress[i] & 1){

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR dev$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+16]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN20@e1000_init

; 324  : 			  //TODO:Auto search  4
; 325  : 			
; 326  : 	        i_net_dev->e1000_base = dev->device.nonBridge.baseAddress[i] & ~3; 

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR dev$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+16]
	and	eax, -4					; fffffffcH
	mov	eax, eax
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	QWORD PTR [rcx], rax

; 327  : 			break;

	jmp	SHORT $LN21@e1000_init
$LN20@e1000_init:

; 328  : 		}
; 329  : 	}

	jmp	SHORT $LN22@e1000_init
$LN21@e1000_init:

; 330  : 	i_net_dev->e1000_irq = dev->device.nonBridge.interruptLine;

	mov	rax, QWORD PTR dev$[rsp]
	movzx	eax, BYTE PTR [rax+60]
	mov	rcx, QWORD PTR ?i_net_dev@@3PEAU_e1000_dev_@@EA ; i_net_dev
	mov	DWORD PTR [rcx+20], eax

; 331  : 	bool pci_status = pci_alloc_msi (func, dev_, bus, e1000_interrupt_handler);

	lea	r9, OFFSET FLAT:?e1000_interrupt_handler@@YAX_KPEAX@Z ; e1000_interrupt_handler
	mov	r8d, DWORD PTR bus$[rsp]
	mov	edx, DWORD PTR dev_$[rsp]
	mov	ecx, DWORD PTR func$[rsp]
	call	?pci_alloc_msi@@YA_NHHHP6AX_KPEAX@Z@Z	; pci_alloc_msi
	mov	BYTE PTR pci_status$[rsp], al

; 332  : 	if (pci_status) {

	movzx	eax, BYTE PTR pci_status$[rsp]
	test	eax, eax
	je	SHORT $LN19@e1000_init

; 333  : 		_debug_print_ ("E1000 Supports MSI\n");

	lea	rcx, OFFSET FLAT:$SG3574
	call	?_debug_print_@@YAXPEADZZ		; _debug_print_
$LN19@e1000_init:

; 334  : 	}
; 335  : 	if (!pci_status) {

	movzx	eax, BYTE PTR pci_status$[rsp]
	test	eax, eax
	jne	$LN18@e1000_init

; 336  : 		if (dev->device.nonBridge.interruptLine != 255) {

	mov	rax, QWORD PTR dev$[rsp]
	movzx	eax, BYTE PTR [rax+60]
	cmp	eax, 255				; 000000ffH
	je	$LN17@e1000_init

; 337  : 			_debug_print_("E1000 legacy irq -> %d, pin -> %d\n", dev->device.nonBridge.interruptLine, dev->device.nonBridge.interruptPin);

	mov	rax, QWORD PTR dev$[rsp]
	movzx	eax, BYTE PTR [rax+61]
	mov	rcx, QWORD PTR dev$[rsp]
	movzx	ecx, BYTE PTR [rcx+60]
	mov	r8d, eax
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:$SG3577
	call	?_debug_print_@@YAXPEADZZ		; _debug_print_

; 338  : 			write_config_8 (0,bus,dev_,func,0x3C, 10);

	mov	BYTE PTR [rsp+40], 10
	mov	DWORD PTR [rsp+32], 60			; 0000003cH
	mov	r9d, DWORD PTR func$[rsp]
	mov	r8d, DWORD PTR dev_$[rsp]
	mov	edx, DWORD PTR bus$[rsp]
	xor	ecx, ecx
	call	?write_config_8@@YAXGHHHHE@Z		; write_config_8

; 339  : 			read_config_8 (0,bus, dev_, func, 0x3C,&dev->device.all.interruptLine);

	mov	rax, QWORD PTR dev$[rsp]
	add	rax, 60					; 0000003cH
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 60			; 0000003cH
	mov	r9d, DWORD PTR func$[rsp]
	mov	r8d, DWORD PTR dev_$[rsp]
	mov	edx, DWORD PTR bus$[rsp]
	xor	ecx, ecx
	call	?read_config_8@@YAXGHHHHPEAE@Z		; read_config_8

; 340  : 			interrupt_set (10, e1000_interrupt_handler,dev->device.nonBridge.interruptLine);

	mov	rax, QWORD PTR dev$[rsp]
	movzx	r8d, BYTE PTR [rax+60]
	lea	rdx, OFFSET FLAT:?e1000_interrupt_handler@@YAX_KPEAX@Z ; e1000_interrupt_handler
	mov	ecx, 10
	call	?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z	; interrupt_set
$LN17@e1000_init:
$LN18@e1000_init:

; 341  : 		}
; 342  : 	}
; 343  : 
; 344  : 	pci_enable_bus_master (bus,dev_,func);

	mov	r8d, DWORD PTR func$[rsp]
	mov	edx, DWORD PTR dev_$[rsp]
	mov	ecx, DWORD PTR bus$[rsp]
	call	?pci_enable_bus_master@@YAXHHH@Z	; pci_enable_bus_master

; 345  : 
; 346  : 	
; 347  : 	e1000_write_command (REG_RCTRL, 0);

	xor	edx, edx
	mov	cx, 256					; 00000100H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 348  : 	e1000_write_command (REG_TCTRL, TCTL_PSP);

	mov	edx, 8
	mov	cx, 1024				; 00000400H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 349  : 	e1000_read_command (REG_STATUS);

	mov	cx, 8
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command

; 350  : 	for (int i = 0; i < 10000; i++)

	mov	DWORD PTR i$6[rsp], 0
	jmp	SHORT $LN16@e1000_init
$LN15@e1000_init:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN16@e1000_init:
	cmp	DWORD PTR i$6[rsp], 10000		; 00002710H
	jge	SHORT $LN14@e1000_init

; 351  : 		;

	jmp	SHORT $LN15@e1000_init
$LN14@e1000_init:

; 352  : 
; 353  : 	uint32_t ctrl = e1000_read_command(REG_CTRL);

	xor	ecx, ecx
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command
	mov	DWORD PTR ctrl$[rsp], eax

; 354  : 	ctrl |= CTRL_RST;

	mov	eax, DWORD PTR ctrl$[rsp]
	bts	eax, 26
	mov	DWORD PTR ctrl$[rsp], eax

; 355  : 	e1000_write_command(REG_CTRL, ctrl);

	mov	edx, DWORD PTR ctrl$[rsp]
	xor	ecx, ecx
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 356  : 	for (int i = 0; i < 20000; i++)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN13@e1000_init
$LN12@e1000_init:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN13@e1000_init:
	cmp	DWORD PTR i$4[rsp], 20000		; 00004e20H
	jge	SHORT $LN11@e1000_init

; 357  : 		;

	jmp	SHORT $LN12@e1000_init
$LN11@e1000_init:

; 358  : 
; 359  : 	e1000_write_command (REG_IMC, 0xFFFFFFFF);

	mov	edx, -1					; ffffffffH
	mov	cx, 216					; 000000d8H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 360  : 	e1000_write_command (REG_ICR, 0xFFFFFFFF);

	mov	edx, -1					; ffffffffH
	mov	cx, 192					; 000000c0H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 361  : 	e1000_read_command (REG_STATUS);

	mov	cx, 8
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command

; 362  : 
; 363  : 	e1000_write_command(0x0028, 0x002C8001);

	mov	edx, 2916353				; 002c8001H
	mov	cx, 40					; 00000028H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 364  : 	e1000_write_command(0x002c, 0x0100);

	mov	edx, 256				; 00000100H
	mov	cx, 44					; 0000002cH
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 365  : 	e1000_write_command(0x0030, 0x8808);

	mov	edx, 34824				; 00008808H
	mov	cx, 48					; 00000030H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 366  : 	e1000_write_command(0x0170, 0xFFFF);

	mov	edx, 65535				; 0000ffffH
	mov	cx, 368					; 00000170H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 367  : 
; 368  : 	/* Link up */
; 369  : 	uint32_t status = e1000_read_command (REG_CTRL);

	xor	ecx, ecx
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command
	mov	DWORD PTR status$[rsp], eax

; 370  : 	status |= CTRL_SLU;

	mov	eax, DWORD PTR status$[rsp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR status$[rsp], eax

; 371  : 	status |= (2<<8);

	mov	eax, DWORD PTR status$[rsp]
	bts	eax, 9
	mov	DWORD PTR status$[rsp], eax

; 372  : 	status &= ~CTRL_LRST;

	mov	eax, DWORD PTR status$[rsp]
	and	eax, -9					; fffffff7H
	mov	DWORD PTR status$[rsp], eax

; 373  : 	status &= ~CTRL_PHY_RST;

	mov	eax, DWORD PTR status$[rsp]
	btr	eax, 31
	mov	DWORD PTR status$[rsp], eax

; 374  : 	e1000_write_command(REG_CTRL, status);

	mov	edx, DWORD PTR status$[rsp]
	xor	ecx, ecx
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 375  : 
; 376  : 	for (int i = 0; i < 128; ++i) {

	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN10@e1000_init
$LN9@e1000_init:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN10@e1000_init:
	cmp	DWORD PTR i$3[rsp], 128			; 00000080H
	jge	SHORT $LN8@e1000_init

; 377  : 		e1000_write_command (REG_MTA + i * 4, 0);

	mov	eax, DWORD PTR i$3[rsp]
	lea	eax, DWORD PTR [rax*4+20992]
	xor	edx, edx
	movzx	ecx, ax
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 378  : 	}

	jmp	SHORT $LN9@e1000_init
$LN8@e1000_init:

; 379  : 
; 380  : 	for (int i = 0; i < 64; ++i) {

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN7@e1000_init
$LN6@e1000_init:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN7@e1000_init:
	cmp	DWORD PTR i$2[rsp], 64			; 00000040H
	jge	SHORT $LN5@e1000_init

; 381  : 		e1000_read_command (0x4000 + i * 4);

	mov	eax, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax*4+16384]
	movzx	ecx, ax
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command

; 382  : 	}

	jmp	SHORT $LN6@e1000_init
$LN5@e1000_init:

; 383  : 
; 384  : 
; 385  : 	e1000_rx_init ();

	call	?e1000_rx_init@@YAXXZ			; e1000_rx_init

; 386  : 	e1000_tx_init ();

	call	?e1000_tx_init@@YAXXZ			; e1000_tx_init

; 387  : 
; 388  : 	e1000_write_command (REG_RDTR, 0);

	xor	edx, edx
	mov	cx, 10272				; 00002820H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 389  : 	e1000_write_command (REG_ITR, 500);

	mov	edx, 500				; 000001f4H
	mov	cx, 196					; 000000c4H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 390  : 	e1000_read_command (REG_STATUS);

	mov	cx, 8
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command

; 391  : 
; 392  : 
; 393  : 	e1000_write_command (REG_IMASK, INTS);

	mov	edx, 196823				; 000300d7H
	mov	cx, 208					; 000000d0H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 394  : 
; 395  : 	for (int i = 0; i < 10000; i++)

	mov	DWORD PTR i$5[rsp], 0
	jmp	SHORT $LN4@e1000_init
$LN3@e1000_init:
	mov	eax, DWORD PTR i$5[rsp]
	inc	eax
	mov	DWORD PTR i$5[rsp], eax
$LN4@e1000_init:
	cmp	DWORD PTR i$5[rsp], 10000		; 00002710H
	jge	SHORT $LN2@e1000_init

; 396  : 		;

	jmp	SHORT $LN3@e1000_init
$LN2@e1000_init:

; 397  : 
; 398  : 	if (e1000_read_mac_address()) {

	call	?e1000_read_mac_address@@YA_NXZ		; e1000_read_mac_address
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@e1000_init

; 399  : 		//! Set the MAC address code
; 400  : 		_debug_print_ ("MAC Address read successfully\n");

	lea	rcx, OFFSET FLAT:$SG3601
	call	?_debug_print_@@YAXPEADZZ		; _debug_print_
$LN1@e1000_init:

; 401  : 	}
; 402  : 	_debug_print_ ("e1000 setup completed\n");

	lea	rcx, OFFSET FLAT:$SG3602
	call	?_debug_print_@@YAXPEADZZ		; _debug_print_
$LN26@e1000_init:

; 403  : }

	add	rsp, 120				; 00000078H
	ret	0
?e1000_initialize@@YAXXZ ENDP				; e1000_initialize
_TEXT	ENDS
END
