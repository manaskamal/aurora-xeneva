; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?e1000_base@@3_KA				; e1000_base
PUBLIC	?e1000_mem_base@@3_KA				; e1000_mem_base
PUBLIC	?eerprom_exists@@3_NA				; eerprom_exists
PUBLIC	?e1000_irq@@3IA					; e1000_irq
PUBLIC	?mac@@3PAEA					; mac
_BSS	SEGMENT
?e1000_base@@3_KA DQ 01H DUP (?)			; e1000_base
?e1000_mem_base@@3_KA DQ 01H DUP (?)			; e1000_mem_base
?eerprom_exists@@3_NA DB 01H DUP (?)			; eerprom_exists
	ALIGN	4

?e1000_irq@@3IA DD 01H DUP (?)				; e1000_irq
?mac@@3PAEA DB	06H DUP (?)				; mac
_BSS	ENDS
CONST	SEGMENT
$SG3284	DB	'EEPROM exist', 0aH, 00H
	ORG $+2
$SG3287	DB	'Applying memory map', 0aH, 00H
	ORG $+3
$SG3302	DB	'E1000 Interrupt fired', 0aH, 00H
	ORG $+1
$SG3318	DB	'E1000 Reset completed', 0aH, 00H
	ORG $+1
$SG3324	DB	'Intel Ethernet not found', 0aH, 00H
	ORG $+2
$SG3333	DB	'%c', 00H
	ORG $+1
$SG3325	DB	'E1000 Base -> %x, mmio-> %x', 0aH, 00H
	ORG $+3
$SG3327	DB	'E1000 MAC address received', 0aH, 00H
$SG3334	DB	0aH, 00H
	ORG $+2
$SG3328	DB	'E1000 MAC Address -> ', 0aH, 00H
CONST	ENDS
PUBLIC	?e1000_initialize@@YAXXZ			; e1000_initialize
PUBLIC	?e1000_read_command@@YAIG@Z			; e1000_read_command
PUBLIC	?e1000_write_command@@YAXGI@Z			; e1000_write_command
PUBLIC	?e1000_detect_eeprom@@YA_NXZ			; e1000_detect_eeprom
PUBLIC	?e1000_eerprom_read@@YAIE@Z			; e1000_eerprom_read
PUBLIC	?e1000_read_mac_address@@YA_NXZ			; e1000_read_mac_address
PUBLIC	?e1000_interrupt_handler@@YAX_KPEAX@Z		; e1000_interrupt_handler
PUBLIC	?e1000_setup_interrupt@@YAXXZ			; e1000_setup_interrupt
PUBLIC	?e1000_reset@@YAXXZ				; e1000_reset
EXTRN	x64_inportd:PROC
EXTRN	x64_outportd:PROC
EXTRN	?interrupt_end@@YAXI@Z:PROC			; interrupt_end
EXTRN	?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z:PROC	; interrupt_set
EXTRN	?pci_find_device_class@@YA_NEEPEATpci_device_info@@@Z:PROC ; pci_find_device_class
EXTRN	?pci_print_capabilities@@YAXPEATpci_device_info@@@Z:PROC ; pci_print_capabilities
EXTRN	?pmmngr_alloc@@YAPEAXXZ:PROC			; pmmngr_alloc
EXTRN	?printf@@YAXPEBDZZ:PROC				; printf
pdata	SEGMENT
$pdata$?e1000_initialize@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+334
	DD	imagerel $unwind$?e1000_initialize@@YAXXZ
$pdata$?e1000_read_command@@YAIG@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?e1000_read_command@@YAIG@Z
$pdata$?e1000_write_command@@YAXGI@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?e1000_write_command@@YAXGI@Z
$pdata$?e1000_detect_eeprom@@YA_NXZ DD imagerel $LN8
	DD	imagerel $LN8+121
	DD	imagerel $unwind$?e1000_detect_eeprom@@YA_NXZ
$pdata$?e1000_eerprom_read@@YAIE@Z DD imagerel $LN9
	DD	imagerel $LN9+159
	DD	imagerel $unwind$?e1000_eerprom_read@@YAIE@Z
$pdata$?e1000_read_mac_address@@YA_NXZ DD imagerel $LN10
	DD	imagerel $LN10+371
	DD	imagerel $unwind$?e1000_read_mac_address@@YA_NXZ
$pdata$?e1000_interrupt_handler@@YAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?e1000_interrupt_handler@@YAX_KPEAX@Z
$pdata$?e1000_setup_interrupt@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?e1000_setup_interrupt@@YAXXZ
$pdata$?e1000_reset@@YAXXZ DD imagerel $LN11
	DD	imagerel $LN11+152
	DD	imagerel $unwind$?e1000_reset@@YAXXZ
pdata	ENDS
xdata	SEGMENT
$unwind$?e1000_initialize@@YAXXZ DD 010401H
	DD	06204H
$unwind$?e1000_read_command@@YAIG@Z DD 010901H
	DD	04209H
$unwind$?e1000_write_command@@YAXGI@Z DD 010d01H
	DD	0420dH
$unwind$?e1000_detect_eeprom@@YA_NXZ DD 010401H
	DD	06204H
$unwind$?e1000_eerprom_read@@YAIE@Z DD 010801H
	DD	06208H
$unwind$?e1000_read_mac_address@@YA_NXZ DD 010401H
	DD	08204H
$unwind$?e1000_interrupt_handler@@YAX_KPEAX@Z DD 010e01H
	DD	0420eH
$unwind$?e1000_setup_interrupt@@YAXXZ DD 010401H
	DD	04204H
$unwind$?e1000_reset@@YAXXZ DD 010401H
	DD	06204H
xdata	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
i$1 = 32
i$2 = 36
?e1000_reset@@YAXXZ PROC				; e1000_reset

; 110  : void e1000_reset () {

$LN11:
	sub	rsp, 56					; 00000038H

; 111  : 	e1000_write_command (REG_RCTRL, 0);

	xor	edx, edx
	mov	cx, 256					; 00000100H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 112  : 	e1000_write_command (REG_TCTRL, 0);

	xor	edx, edx
	mov	cx, 1024				; 00000400H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 113  : 
; 114  : 	e1000_write_command (REG_CTRL, CTL_PHY_RESET);

	xor	edx, edx
	xor	ecx, ecx
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 115  : 	for(int i = 0; i < 10; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN8@e1000_rese
$LN7@e1000_rese:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN8@e1000_rese:
	cmp	DWORD PTR i$1[rsp], 10
	jge	SHORT $LN6@e1000_rese

; 116  : 		;

	jmp	SHORT $LN7@e1000_rese
$LN6@e1000_rese:

; 117  : 	e1000_write_command (REG_CTRL, CTL_RESET);

	mov	edx, 67108864				; 04000000H
	xor	ecx, ecx
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 118  : 	for (int i = 0; i < 10; i++);

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN5@e1000_rese
$LN4@e1000_rese:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN5@e1000_rese:
	cmp	DWORD PTR i$2[rsp], 10
	jge	SHORT $LN3@e1000_rese
	jmp	SHORT $LN4@e1000_rese
$LN3@e1000_rese:
$LN2@e1000_rese:

; 119  : 	while (e1000_read_command (REG_CTRL) & CTL_RESET);

	xor	ecx, ecx
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command
	and	eax, 67108864				; 04000000H
	test	eax, eax
	je	SHORT $LN1@e1000_rese
	jmp	SHORT $LN2@e1000_rese
$LN1@e1000_rese:

; 120  : 
; 121  : 	e1000_write_command (REG_CTRL, CTL_AUTO_SPEED | CTL_LINK_UP);

	mov	edx, 96					; 00000060H
	xor	ecx, ecx
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 122  : 	printf ("E1000 Reset completed\n");

	lea	rcx, OFFSET FLAT:$SG3318
	call	?printf@@YAXPEBDZZ			; printf

; 123  : }

	add	rsp, 56					; 00000038H
	ret	0
?e1000_reset@@YAXXZ ENDP				; e1000_reset
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
?e1000_setup_interrupt@@YAXXZ PROC			; e1000_setup_interrupt

; 104  : void e1000_setup_interrupt () {

$LN3:
	sub	rsp, 40					; 00000028H

; 105  : 	e1000_write_command (0xD8, 0xFFFF);

	mov	edx, 65535				; 0000ffffH
	mov	cx, 216					; 000000d8H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 106  : 	e1000_write_command (0xD0, 0xFFFF);

	mov	edx, 65535				; 0000ffffH
	mov	cx, 208					; 000000d0H
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 107  : 	e1000_read_command (0xc0);

	mov	cx, 192					; 000000c0H
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command

; 108  : }

	add	rsp, 40					; 00000028H
	ret	0
?e1000_setup_interrupt@@YAXXZ ENDP			; e1000_setup_interrupt
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
v$ = 48
p$ = 56
?e1000_interrupt_handler@@YAX_KPEAX@Z PROC		; e1000_interrupt_handler

; 97   : void e1000_interrupt_handler (size_t v, void* p) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 98   : 	printf ("E1000 Interrupt fired\n");

	lea	rcx, OFFSET FLAT:$SG3302
	call	?printf@@YAXPEBDZZ			; printf

; 99   : 	//apic_local_eoi();
; 100  : 	interrupt_end(e1000_irq);

	mov	ecx, DWORD PTR ?e1000_irq@@3IA		; e1000_irq
	call	?interrupt_end@@YAXI@Z			; interrupt_end

; 101  : }

	add	rsp, 40					; 00000028H
	ret	0
?e1000_interrupt_handler@@YAX_KPEAX@Z ENDP		; e1000_interrupt_handler
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
temp$1 = 32
i$2 = 36
mem_base_mac_32$3 = 40
mem_base_mac_8$4 = 48
?e1000_read_mac_address@@YA_NXZ PROC			; e1000_read_mac_address

; 68   : bool e1000_read_mac_address () {

$LN10:
	sub	rsp, 72					; 00000048H

; 69   : 	if (eerprom_exists) {

	movzx	eax, BYTE PTR ?eerprom_exists@@3_NA	; eerprom_exists
	test	eax, eax
	je	$LN7@e1000_read

; 70   : 		printf ("EEPROM exist\n");

	lea	rcx, OFFSET FLAT:$SG3284
	call	?printf@@YAXPEBDZZ			; printf

; 71   : 		uint32_t temp;
; 72   : 		temp = e1000_eerprom_read (0);

	xor	ecx, ecx
	call	?e1000_eerprom_read@@YAIE@Z		; e1000_eerprom_read
	mov	DWORD PTR temp$1[rsp], eax

; 73   : 		mac[0] = temp & 0xff;

	mov	eax, DWORD PTR temp$1[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, 0
	lea	rdx, OFFSET FLAT:?mac@@3PAEA		; mac
	mov	BYTE PTR [rdx+rcx], al

; 74   : 		mac[1] = temp >> 8;

	mov	eax, DWORD PTR temp$1[rsp]
	shr	eax, 8
	mov	ecx, 1
	imul	rcx, 1
	lea	rdx, OFFSET FLAT:?mac@@3PAEA		; mac
	mov	BYTE PTR [rdx+rcx], al

; 75   : 		temp = e1000_eerprom_read (1);

	mov	cl, 1
	call	?e1000_eerprom_read@@YAIE@Z		; e1000_eerprom_read
	mov	DWORD PTR temp$1[rsp], eax

; 76   : 		mac[2] = temp & 0xff;

	mov	eax, DWORD PTR temp$1[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, 2
	lea	rdx, OFFSET FLAT:?mac@@3PAEA		; mac
	mov	BYTE PTR [rdx+rcx], al

; 77   : 		mac[3] = temp >> 8;

	mov	eax, DWORD PTR temp$1[rsp]
	shr	eax, 8
	mov	ecx, 1
	imul	rcx, 3
	lea	rdx, OFFSET FLAT:?mac@@3PAEA		; mac
	mov	BYTE PTR [rdx+rcx], al

; 78   : 		temp = e1000_eerprom_read (2);

	mov	cl, 2
	call	?e1000_eerprom_read@@YAIE@Z		; e1000_eerprom_read
	mov	DWORD PTR temp$1[rsp], eax

; 79   : 		mac[4] = temp & 0xff;

	mov	eax, DWORD PTR temp$1[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, 4
	lea	rdx, OFFSET FLAT:?mac@@3PAEA		; mac
	mov	BYTE PTR [rdx+rcx], al

; 80   : 		mac[5] = temp >> 8;

	mov	eax, DWORD PTR temp$1[rsp]
	shr	eax, 8
	mov	ecx, 1
	imul	rcx, 5
	lea	rdx, OFFSET FLAT:?mac@@3PAEA		; mac
	mov	BYTE PTR [rdx+rcx], al

; 81   : 	} else {

	jmp	$LN6@e1000_read
$LN7@e1000_read:

; 82   : 		printf ("Applying memory map\n");

	lea	rcx, OFFSET FLAT:$SG3287
	call	?printf@@YAXPEBDZZ			; printf

; 83   : 		uint8_t * mem_base_mac_8 = (uint8_t*)(e1000_mem_base + 0x5400);

	mov	rax, QWORD PTR ?e1000_mem_base@@3_KA	; e1000_mem_base
	add	rax, 21504				; 00005400H
	mov	QWORD PTR mem_base_mac_8$4[rsp], rax

; 84   : 		uint32_t * mem_base_mac_32 = (uint32_t*) (e1000_mem_base + 0x5400);

	mov	rax, QWORD PTR ?e1000_mem_base@@3_KA	; e1000_mem_base
	add	rax, 21504				; 00005400H
	mov	QWORD PTR mem_base_mac_32$3[rsp], rax

; 85   : 		if (mem_base_mac_32[0] != 0) {

	mov	eax, 4
	imul	rax, 0
	mov	rcx, QWORD PTR mem_base_mac_32$3[rsp]
	cmp	DWORD PTR [rcx+rax], 0
	je	SHORT $LN5@e1000_read

; 86   : 			for (int i = 0; i < 6; i++) {

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@e1000_read
$LN3@e1000_read:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN4@e1000_read:
	cmp	DWORD PTR i$2[rsp], 6
	jge	SHORT $LN2@e1000_read

; 87   : 				mac[i] = mem_base_mac_8[i];

	movsxd	rax, DWORD PTR i$2[rsp]
	movsxd	rcx, DWORD PTR i$2[rsp]
	lea	rdx, OFFSET FLAT:?mac@@3PAEA		; mac
	mov	r8, QWORD PTR mem_base_mac_8$4[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al

; 88   : 			}

	jmp	SHORT $LN3@e1000_read
$LN2@e1000_read:
	jmp	SHORT $LN1@e1000_read
$LN5@e1000_read:

; 89   : 		}else {
; 90   : 			return false;

	xor	al, al
	jmp	SHORT $LN8@e1000_read
$LN1@e1000_read:
$LN6@e1000_read:

; 91   : 		}
; 92   : 	}
; 93   : 
; 94   : 	return true;

	mov	al, 1
$LN8@e1000_read:

; 95   : }

	add	rsp, 72					; 00000048H
	ret	0
?e1000_read_mac_address@@YA_NXZ ENDP			; e1000_read_mac_address
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
data$ = 32
tmp$ = 36
addr$ = 64
?e1000_eerprom_read@@YAIE@Z PROC			; e1000_eerprom_read

; 52   : uint32_t e1000_eerprom_read (uint8_t addr) {

$LN9:
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 56					; 00000038H

; 53   : 	
; 54   : 	uint16_t data = 0;

	xor	eax, eax
	mov	WORD PTR data$[rsp], ax

; 55   : 	uint32_t tmp = 0;

	mov	DWORD PTR tmp$[rsp], 0

; 56   : 	if (eerprom_exists) {

	movzx	eax, BYTE PTR ?eerprom_exists@@3_NA	; eerprom_exists
	test	eax, eax
	je	SHORT $LN6@e1000_eerp

; 57   : 		e1000_write_command (REG_EEPROM, (1) | ((uint32_t)(addr) << 8));

	movzx	eax, BYTE PTR addr$[rsp]
	shl	eax, 8
	or	eax, 1
	mov	edx, eax
	mov	cx, 20
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command
$LN5@e1000_eerp:

; 58   : 		while (! ((tmp = e1000_read_command (REG_EEPROM)) & (1 << 4)));

	mov	cx, 20
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command
	mov	DWORD PTR tmp$[rsp], eax
	mov	eax, DWORD PTR tmp$[rsp]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN4@e1000_eerp
	jmp	SHORT $LN5@e1000_eerp
$LN4@e1000_eerp:

; 59   : 	} else {

	jmp	SHORT $LN3@e1000_eerp
$LN6@e1000_eerp:

; 60   : 		e1000_write_command ( REG_EEPROM, (1) | ((uint32_t)(addr) << 2));

	movzx	eax, BYTE PTR addr$[rsp]
	shl	eax, 2
	or	eax, 1
	mov	edx, eax
	mov	cx, 20
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command
$LN2@e1000_eerp:

; 61   : 		while (!((tmp = e1000_read_command (REG_EEPROM)) & (1 << 1)));

	mov	cx, 20
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command
	mov	DWORD PTR tmp$[rsp], eax
	mov	eax, DWORD PTR tmp$[rsp]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN1@e1000_eerp
	jmp	SHORT $LN2@e1000_eerp
$LN1@e1000_eerp:
$LN3@e1000_eerp:

; 62   : 	}
; 63   : 	data = (uint16_t)((tmp >> 16) & 0xFFFF);

	mov	eax, DWORD PTR tmp$[rsp]
	shr	eax, 16
	and	eax, 65535				; 0000ffffH
	mov	WORD PTR data$[rsp], ax

; 64   : 	return data;

	movzx	eax, WORD PTR data$[rsp]

; 65   : }

	add	rsp, 56					; 00000038H
	ret	0
?e1000_eerprom_read@@YAIE@Z ENDP			; e1000_eerprom_read
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
i$1 = 32
val$ = 36
?e1000_detect_eeprom@@YA_NXZ PROC			; e1000_detect_eeprom

; 35   : bool e1000_detect_eeprom () {

$LN8:
	sub	rsp, 56					; 00000038H

; 36   : 	
; 37   : 	uint32_t val = 0;

	mov	DWORD PTR val$[rsp], 0

; 38   : 	e1000_write_command (REG_EEPROM, 0x1);

	mov	edx, 1
	mov	cx, 20
	call	?e1000_write_command@@YAXGI@Z		; e1000_write_command

; 39   : 
; 40   : 	for (int i = 0; i < 1000 && ! eerprom_exists; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN5@e1000_dete
$LN4@e1000_dete:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN5@e1000_dete:
	cmp	DWORD PTR i$1[rsp], 1000		; 000003e8H
	jge	SHORT $LN3@e1000_dete
	movzx	eax, BYTE PTR ?eerprom_exists@@3_NA	; eerprom_exists
	test	eax, eax
	jne	SHORT $LN3@e1000_dete

; 41   : 		val = e1000_read_command (REG_EEPROM);

	mov	cx, 20
	call	?e1000_read_command@@YAIG@Z		; e1000_read_command
	mov	DWORD PTR val$[rsp], eax

; 42   : 		if (val & 0x10)

	mov	eax, DWORD PTR val$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN2@e1000_dete

; 43   : 			eerprom_exists = true;

	mov	BYTE PTR ?eerprom_exists@@3_NA, 1	; eerprom_exists

; 44   : 		else

	jmp	SHORT $LN1@e1000_dete
$LN2@e1000_dete:

; 45   : 			eerprom_exists = false;

	mov	BYTE PTR ?eerprom_exists@@3_NA, 0	; eerprom_exists
$LN1@e1000_dete:

; 46   : 	}

	jmp	SHORT $LN4@e1000_dete
$LN3@e1000_dete:

; 47   : 
; 48   : 	return eerprom_exists;

	movzx	eax, BYTE PTR ?eerprom_exists@@3_NA	; eerprom_exists

; 49   : }

	add	rsp, 56					; 00000038H
	ret	0
?e1000_detect_eeprom@@YA_NXZ ENDP			; e1000_detect_eeprom
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
p_address$ = 48
p_value$ = 56
?e1000_write_command@@YAXGI@Z PROC			; e1000_write_command

; 30   : void e1000_write_command (uint16_t p_address, uint32_t p_value) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 40					; 00000028H

; 31   : 	x64_outportd (e1000_base, p_address);

	movzx	eax, WORD PTR p_address$[rsp]
	mov	edx, eax
	movzx	ecx, WORD PTR ?e1000_base@@3_KA
	call	x64_outportd

; 32   : 	x64_outportd (e1000_base + 4, p_value);

	mov	rax, QWORD PTR ?e1000_base@@3_KA	; e1000_base
	add	rax, 4
	mov	edx, DWORD PTR p_value$[rsp]
	movzx	ecx, ax
	call	x64_outportd

; 33   : }

	add	rsp, 40					; 00000028H
	ret	0
?e1000_write_command@@YAXGI@Z ENDP			; e1000_write_command
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
p_address$ = 48
?e1000_read_command@@YAIG@Z PROC			; e1000_read_command

; 25   : uint32_t e1000_read_command (uint16_t p_address) {

$LN3:
	mov	WORD PTR [rsp+8], cx
	sub	rsp, 40					; 00000028H

; 26   : 	x64_outportd (e1000_base,p_address);

	movzx	eax, WORD PTR p_address$[rsp]
	mov	edx, eax
	movzx	ecx, WORD PTR ?e1000_base@@3_KA
	call	x64_outportd

; 27   : 	return x64_inportd (e1000_base + 4);

	mov	rax, QWORD PTR ?e1000_base@@3_KA	; e1000_base
	add	rax, 4
	movzx	ecx, ax
	call	x64_inportd

; 28   : }

	add	rsp, 40					; 00000028H
	ret	0
?e1000_read_command@@YAIG@Z ENDP			; e1000_read_command
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\net\e1000.cpp
_TEXT	SEGMENT
i$1 = 32
dev$ = 40
?e1000_initialize@@YAXXZ PROC				; e1000_initialize

; 126  : void e1000_initialize () {

$LN9:
	sub	rsp, 56					; 00000038H

; 127  : 	pci_device_info *dev = (pci_device_info*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR dev$[rsp], rax

; 128  : 	if (!pci_find_device_class (0x02,0x00,dev)) {

	mov	r8, QWORD PTR dev$[rsp]
	xor	edx, edx
	mov	cl, 2
	call	?pci_find_device_class@@YA_NEEPEATpci_device_info@@@Z ; pci_find_device_class
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN6@e1000_init

; 129  : 		printf ("Intel Ethernet not found\n");

	lea	rcx, OFFSET FLAT:$SG3324
	call	?printf@@YAXPEBDZZ			; printf
$LN6@e1000_init:

; 130  : 	}
; 131  : 
; 132  : 	e1000_base = dev->device.nonBridge.baseAddress[2] & ~1;  //TODO:Auto search 

	mov	eax, 4
	imul	rax, 2
	mov	rcx, QWORD PTR dev$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	and	eax, -2					; fffffffeH
	mov	eax, eax
	mov	QWORD PTR ?e1000_base@@3_KA, rax	; e1000_base

; 133  : 	e1000_mem_base = dev->device.nonBridge.baseAddress[4] & ~3;  //TODO:Auto search  4

	mov	eax, 4
	imul	rax, 4
	mov	rcx, QWORD PTR dev$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	and	eax, -4					; fffffffcH
	mov	eax, eax
	mov	QWORD PTR ?e1000_mem_base@@3_KA, rax	; e1000_mem_base

; 134  : 	printf ("E1000 Base -> %x, mmio-> %x\n", e1000_base, e1000_mem_base);

	mov	r8, QWORD PTR ?e1000_mem_base@@3_KA	; e1000_mem_base
	mov	rdx, QWORD PTR ?e1000_base@@3_KA	; e1000_base
	lea	rcx, OFFSET FLAT:$SG3325
	call	?printf@@YAXPEBDZZ			; printf

; 135  : 	e1000_irq = dev->device.nonBridge.interruptLine;

	mov	rax, QWORD PTR dev$[rsp]
	movzx	eax, BYTE PTR [rax+60]
	mov	DWORD PTR ?e1000_irq@@3IA, eax		; e1000_irq

; 136  : 	e1000_detect_eeprom();

	call	?e1000_detect_eeprom@@YA_NXZ		; e1000_detect_eeprom

; 137  : 	if (e1000_read_mac_address()) {

	call	?e1000_read_mac_address@@YA_NXZ		; e1000_read_mac_address
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@e1000_init

; 138  : 		printf ("E1000 MAC address received\n");

	lea	rcx, OFFSET FLAT:$SG3327
	call	?printf@@YAXPEBDZZ			; printf

; 139  : 		printf ("E1000 MAC Address -> \n");

	lea	rcx, OFFSET FLAT:$SG3328
	call	?printf@@YAXPEBDZZ			; printf

; 140  : 		for (int i = 0; i < 6; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@e1000_init
$LN3@e1000_init:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@e1000_init:
	cmp	DWORD PTR i$1[rsp], 6
	jge	SHORT $LN2@e1000_init

; 141  : 			printf ("%c", mac[i]);

	movsxd	rax, DWORD PTR i$1[rsp]
	lea	rcx, OFFSET FLAT:?mac@@3PAEA		; mac
	movzx	eax, BYTE PTR [rcx+rax]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG3333
	call	?printf@@YAXPEBDZZ			; printf
	jmp	SHORT $LN3@e1000_init
$LN2@e1000_init:

; 142  : 		printf ("\n");

	lea	rcx, OFFSET FLAT:$SG3334
	call	?printf@@YAXPEBDZZ			; printf
$LN5@e1000_init:

; 143  : 	}
; 144  : 
; 145  : 	if (dev->device.nonBridge.interruptLine != 0xFF)

	mov	rax, QWORD PTR dev$[rsp]
	movzx	eax, BYTE PTR [rax+60]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN1@e1000_init

; 146  : 		interrupt_set (dev->device.nonBridge.interruptLine, e1000_interrupt_handler,dev->device.nonBridge.interruptLine);

	mov	rax, QWORD PTR dev$[rsp]
	movzx	eax, BYTE PTR [rax+60]
	mov	rcx, QWORD PTR dev$[rsp]
	movzx	r8d, BYTE PTR [rcx+60]
	lea	rdx, OFFSET FLAT:?e1000_interrupt_handler@@YAX_KPEAX@Z ; e1000_interrupt_handler
	mov	ecx, eax
	call	?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z	; interrupt_set
$LN1@e1000_init:

; 147  : 	e1000_reset();

	call	?e1000_reset@@YAXXZ			; e1000_reset

; 148  : 	e1000_setup_interrupt();

	call	?e1000_setup_interrupt@@YAXXZ		; e1000_setup_interrupt

; 149  : 	
; 150  : 	
; 151  : 	pci_print_capabilities(dev);

	mov	rcx, QWORD PTR dev$[rsp]
	call	?pci_print_capabilities@@YAXPEATpci_device_info@@@Z ; pci_print_capabilities

; 152  : }

	add	rsp, 56					; 00000038H
	ret	0
?e1000_initialize@@YAXXZ ENDP				; e1000_initialize
_TEXT	ENDS
END
