; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_ihd_audio@@3U_hd_audio_@@A			; _ihd_audio
PUBLIC	?rirbrp@@3GA					; rirbrp
PUBLIC	?corbwp@@3GA					; corbwp
_BSS	SEGMENT
?_ihd_audio@@3U_hd_audio_@@A DB 029H DUP (?)		; _ihd_audio
	ALIGN	4

?rirbrp@@3GA DW	01H DUP (?)				; rirbrp
	ALIGN	4

?corbwp@@3GA DW	01H DUP (?)				; corbwp
_BSS	ENDS
CONST	SEGMENT
$SG3409	DB	'HD-Audio Interrupt fired++', 0aH, 00H
	ORG $+4
$SG3434	DB	'HD Audio: No supported RIRB size !!', 0aH, 00H
	ORG $+3
$SG3499	DB	'Initializing output ->codec -> %d, nid -> %d', 0aH, 00H
	ORG $+2
$SG3516	DB	'output', 00H
	ORG $+1
$SG3518	DB	'input', 00H
	ORG $+2
$SG3520	DB	'mixer', 00H
	ORG $+2
$SG3522	DB	'selector', 00H
	ORG $+3
$SG3526	DB	'power', 00H
	ORG $+6
$SG3524	DB	'pin complex', 00H
	ORG $+4
$SG3528	DB	'volume knob', 00H
	ORG $+4
$SG3530	DB	'beep generator', 00H
	ORG $+1
$SG3532	DB	'vendor defined', 00H
	ORG $+1
$SG3534	DB	'unknown', 00H
$SG3546	DB	'[HD-Audio]:Widget type Output in codec -> %d at node -> '
	DB	'%d', 0aH, 00H
	ORG $+4
$SG3559	DB	'[HD_Audio]: Num Function Group -> %d, fg_start -> %d', 0aH
	DB	00H
	ORG $+2
$SG3561	DB	'[HD-Audio]:Widget device id -> %x, vendor id -> %x', 0aH
	DB	00H
	ORG $+4
$SG3563	DB	'[HD-Audio]:Widget version -> %d.%d, r0%d', 0aH, 00H
	ORG $+6
$SG3585	DB	'Unable to put HD-Audio in reset mode', 0aH, 00H
	ORG $+2
$SG3600	DB	'HD-Audio device stuck in reset', 0aH, 00H
$SG3613	DB	'No HD-Audio was found', 0aH, 00H
	ORG $+1
$SG3615	DB	'HD Audio found vendor -> %x, device -> %x', 0aH, 00H
	ORG $+5
$SG3616	DB	'HD-Audio interrupt line -> %d', 0aH, 00H
	ORG $+1
$SG3622	DB	'HD-Audio 64-OK', 0aH, 00H
$SG3629	DB	'IHD Audio Initialized successfully', 0aH, 00H
CONST	ENDS
PUBLIC	?hda_initialize@@YAXXZ				; hda_initialize
PUBLIC	?_aud_outl_@@YAXHI@Z				; _aud_outl_
PUBLIC	?_aud_inl_@@YAIH@Z				; _aud_inl_
PUBLIC	?_aud_outw_@@YAXHG@Z				; _aud_outw_
PUBLIC	?_aud_inw_@@YAGH@Z				; _aud_inw_
PUBLIC	?_aud_outb_@@YAXHE@Z				; _aud_outb_
PUBLIC	?_aud_inb_@@YAEH@Z				; _aud_inb_
PUBLIC	?hda_handler@@YAX_KPEAX@Z			; hda_handler
PUBLIC	?setup_corb@@YAXXZ				; setup_corb
PUBLIC	?setup_rirb@@YAXXZ				; setup_rirb
PUBLIC	?hda_start_stream@@YAXXZ			; hda_start_stream
PUBLIC	?hda_set_volume@@YAXE@Z				; hda_set_volume
PUBLIC	?init_output@@YAXXZ				; init_output
PUBLIC	?widget_init@@YAXHH@Z				; widget_init
PUBLIC	?hda_reset@@YAXXZ				; hda_reset
EXTRN	x64_cli:PROC
EXTRN	x64_sti:PROC
EXTRN	?interrupt_end@@YAXI@Z:PROC			; interrupt_end
EXTRN	?pci_find_device_class@@YA_NEEPEATpci_device_info@@PEAH11@Z:PROC ; pci_find_device_class
EXTRN	?pci_alloc_msi@@YA_NHHHP6AX_KPEAX@Z@Z:PROC	; pci_alloc_msi
EXTRN	?pmmngr_alloc@@YAPEAXXZ:PROC			; pmmngr_alloc
EXTRN	?map_page@@YA_N_K0@Z:PROC			; map_page
EXTRN	?get_physical_address@@YAPEA_K_K@Z:PROC		; get_physical_address
EXTRN	?memset@@YAXPEAXEI@Z:PROC			; memset
EXTRN	?printf@@YAXPEBDZZ:PROC				; printf
EXTRN	__ImageBase:BYTE
pdata	SEGMENT
$pdata$?hda_initialize@@YAXXZ DD imagerel $LN10
	DD	imagerel $LN10+420
	DD	imagerel $unwind$?hda_initialize@@YAXXZ
$pdata$?_aud_outl_@@YAXHI@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?_aud_outl_@@YAXHI@Z
$pdata$?_aud_inl_@@YAIH@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?_aud_inl_@@YAIH@Z
$pdata$?_aud_outw_@@YAXHG@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?_aud_outw_@@YAXHG@Z
$pdata$?_aud_inw_@@YAGH@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?_aud_inw_@@YAGH@Z
$pdata$?_aud_outb_@@YAXHE@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?_aud_outb_@@YAXHE@Z
$pdata$?_aud_inb_@@YAEH@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?_aud_inb_@@YAEH@Z
$pdata$?hda_handler@@YAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$?hda_handler@@YAX_KPEAX@Z
$pdata$?setup_corb@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+317
	DD	imagerel $unwind$?setup_corb@@YAXXZ
$pdata$?setup_rirb@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+329
	DD	imagerel $unwind$?setup_rirb@@YAXXZ
$pdata$?corb_write@@YAXI@Z DD imagerel ?corb_write@@YAXI@Z
	DD	imagerel ?corb_write@@YAXI@Z+228
	DD	imagerel $unwind$?corb_write@@YAXI@Z
$pdata$?rirb_read@@YAXPEA_K@Z DD imagerel ?rirb_read@@YAXPEA_K@Z
	DD	imagerel ?rirb_read@@YAXPEA_K@Z+177
	DD	imagerel $unwind$?rirb_read@@YAXPEA_K@Z
$pdata$?codec_query@@YAIHHI@Z DD imagerel ?codec_query@@YAIHHI@Z
	DD	imagerel ?codec_query@@YAIHHI@Z+132
	DD	imagerel $unwind$?codec_query@@YAIHHI@Z
$pdata$?hda_start_stream@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+333
	DD	imagerel $unwind$?hda_start_stream@@YAXXZ
$pdata$?hda_set_volume@@YAXE@Z DD imagerel $LN5
	DD	imagerel $LN5+122
	DD	imagerel $unwind$?hda_set_volume@@YAXE@Z
$pdata$?init_output@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+244
	DD	imagerel $unwind$?init_output@@YAXXZ
$pdata$?widget_init@@YAXHH@Z DD imagerel $LN25
	DD	imagerel $LN25+752
	DD	imagerel $unwind$?widget_init@@YAXHH@Z
$pdata$?codec_enumerate_widgets@@YAXH@Z DD imagerel ?codec_enumerate_widgets@@YAXH@Z
	DD	imagerel ?codec_enumerate_widgets@@YAXH@Z+403
	DD	imagerel $unwind$?codec_enumerate_widgets@@YAXH@Z
$pdata$?hda_reset@@YAXXZ DD imagerel $LN26
	DD	imagerel $LN26+435
	DD	imagerel $unwind$?hda_reset@@YAXXZ
pdata	ENDS
xdata	SEGMENT
$unwind$?hda_initialize@@YAXXZ DD 020701H
	DD	02b0107H
$unwind$?_aud_outl_@@YAXHI@Z DD 010c01H
	DD	0220cH
$unwind$?_aud_inl_@@YAIH@Z DD 010801H
	DD	02208H
$unwind$?_aud_outw_@@YAXHG@Z DD 010d01H
	DD	0220dH
$unwind$?_aud_inw_@@YAGH@Z DD 010801H
	DD	02208H
$unwind$?_aud_outb_@@YAXHE@Z DD 010c01H
	DD	0220cH
$unwind$?_aud_inb_@@YAEH@Z DD 010801H
	DD	02208H
$unwind$?hda_handler@@YAX_KPEAX@Z DD 010e01H
	DD	0420eH
$unwind$?setup_corb@@YAXXZ DD 010401H
	DD	08204H
$unwind$?setup_rirb@@YAXXZ DD 010401H
	DD	08204H
$unwind$?corb_write@@YAXI@Z DD 010801H
	DD	06208H
$unwind$?rirb_read@@YAXPEA_K@Z DD 010901H
	DD	06209H
$unwind$?codec_query@@YAIHHI@Z DD 011101H
	DD	08211H
$unwind$?hda_start_stream@@YAXXZ DD 010401H
	DD	0a204H
$unwind$?hda_set_volume@@YAXE@Z DD 010801H
	DD	06208H
$unwind$?init_output@@YAXXZ DD 010401H
	DD	06204H
$unwind$?widget_init@@YAXHH@Z DD 010c01H
	DD	0a20cH
$unwind$?codec_enumerate_widgets@@YAXH@Z DD 010801H
	DD	0a208H
$unwind$?hda_reset@@YAXXZ DD 010401H
	DD	08204H
xdata	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
gctl$ = 32
i$1 = 36
j$2 = 40
i$3 = 44
i$4 = 48
count$ = 52
i$5 = 56
?hda_reset@@YAXXZ PROC					; hda_reset

; 460  : void hda_reset() {

$LN26:
	sub	rsp, 72					; 00000048H

; 461  : 	_aud_outb_(CORBCTL, 0);

	xor	edx, edx
	mov	ecx, 76					; 0000004cH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 462  : 	_aud_outb_(RIRBCTL, 0);

	xor	edx, edx
	mov	ecx, 92					; 0000005cH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 463  : 	//_aud_outw_(RIRBWP, 0);
; 464  : 
; 465  : 	_aud_outl_ (DPIBLBASE, 0x0);

	xor	edx, edx
	mov	ecx, 112				; 00000070H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 466  : 	_aud_outl_ (DPIBUBASE, 0x0);

	xor	edx, edx
	mov	ecx, 116				; 00000074H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 467  : 
; 468  : 	_aud_outl_(GCTL, 0);

	xor	edx, edx
	mov	ecx, 8
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 469  : 	uint32_t gctl;
; 470  : 	for(int i = 0; i < 1000; i++){

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN23@hda_reset
$LN22@hda_reset:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN23@hda_reset:
	cmp	DWORD PTR i$1[rsp], 1000		; 000003e8H
	jge	SHORT $LN21@hda_reset

; 471  : 		gctl = _aud_inl_(GCTL);

	mov	ecx, 8
	call	?_aud_inl_@@YAIH@Z			; _aud_inl_
	mov	DWORD PTR gctl$[rsp], eax

; 472  : 		if (!(gctl & 0x00000001))

	mov	eax, DWORD PTR gctl$[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN20@hda_reset

; 473  : 			break;

	jmp	SHORT $LN21@hda_reset
$LN20@hda_reset:

; 474  : 		for (int j = 0; j < 10; j++)

	mov	DWORD PTR j$2[rsp], 0
	jmp	SHORT $LN19@hda_reset
$LN18@hda_reset:
	mov	eax, DWORD PTR j$2[rsp]
	inc	eax
	mov	DWORD PTR j$2[rsp], eax
$LN19@hda_reset:
	cmp	DWORD PTR j$2[rsp], 10
	jge	SHORT $LN17@hda_reset

; 475  : 			;		

	jmp	SHORT $LN18@hda_reset
$LN17@hda_reset:

; 476  : 	}

	jmp	SHORT $LN22@hda_reset
$LN21@hda_reset:

; 477  : 
; 478  : 	if (gctl & 0x00000001) {

	mov	eax, DWORD PTR gctl$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN16@hda_reset

; 479  : 		printf ("Unable to put HD-Audio in reset mode\n");

	lea	rcx, OFFSET FLAT:$SG3585
	call	?printf@@YAXPEBDZZ			; printf

; 480  : 		return;

	jmp	$LN24@hda_reset
$LN16@hda_reset:

; 481  : 	}
; 482  : 
; 483  : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN15@hda_reset
$LN14@hda_reset:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN15@hda_reset:
	cmp	DWORD PTR i$3[rsp], 1000		; 000003e8H
	jge	SHORT $LN13@hda_reset

; 484  : 		;

	jmp	SHORT $LN14@hda_reset
$LN13@hda_reset:

; 485  : 
; 486  : 	gctl = _aud_inl_(GCTL);

	mov	ecx, 8
	call	?_aud_inl_@@YAIH@Z			; _aud_inl_
	mov	DWORD PTR gctl$[rsp], eax

; 487  : 	_aud_outl_ (GCTL, gctl | 0x00000001);

	mov	eax, DWORD PTR gctl$[rsp]
	or	eax, 1
	mov	edx, eax
	mov	ecx, 8
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 488  : 	
; 489  : 	int count = 10000;

	mov	DWORD PTR count$[rsp], 10000		; 00002710H
$LN12@hda_reset:

; 490  : 	do {
; 491  : 		gctl = _aud_inl_(GCTL);

	mov	ecx, 8
	call	?_aud_inl_@@YAIH@Z			; _aud_inl_
	mov	DWORD PTR gctl$[rsp], eax

; 492  : 		if (gctl & 0x00000001)

	mov	eax, DWORD PTR gctl$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN9@hda_reset

; 493  : 			break;

	jmp	SHORT $LN10@hda_reset
$LN9@hda_reset:

; 494  : 		for (int i = 0; i < 10; i++)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN8@hda_reset
$LN7@hda_reset:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN8@hda_reset:
	cmp	DWORD PTR i$4[rsp], 10
	jge	SHORT $LN6@hda_reset

; 495  : 			;

	jmp	SHORT $LN7@hda_reset
$LN6@hda_reset:

; 496  : 	}while (--count);

	mov	eax, DWORD PTR count$[rsp]
	dec	eax
	mov	DWORD PTR count$[rsp], eax
	cmp	DWORD PTR count$[rsp], 0
	jne	SHORT $LN12@hda_reset
$LN10@hda_reset:

; 497  : 
; 498  : 	if (!(gctl & 0x00000001)){

	mov	eax, DWORD PTR gctl$[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN5@hda_reset

; 499  : 		printf ("HD-Audio device stuck in reset\n");

	lea	rcx, OFFSET FLAT:$SG3600
	call	?printf@@YAXPEBDZZ			; printf

; 500  : 		return;

	jmp	SHORT $LN24@hda_reset
$LN5@hda_reset:

; 501  : 	}
; 502  : 
; 503  : 	
; 504  : 	if((_aud_inw_(ICIS) & 1)==0){

	mov	ecx, 104				; 00000068H
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	movzx	eax, ax
	and	eax, 1

; 505  : 		//printf ("ICIS ICB bit is clear\n");
; 506  : 	}
; 507  : 	
; 508  : 	_ihd_audio.immediate_use = false;

	mov	BYTE PTR ?_ihd_audio@@3U_hd_audio_@@A+32, 0

; 509  :     _aud_outw_(WAKEEN, 0x01);

	mov	dx, 1
	mov	ecx, 12
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 510  : 	for (int i = 0; i < 10000; i++)

	mov	DWORD PTR i$5[rsp], 0
	jmp	SHORT $LN3@hda_reset
$LN2@hda_reset:
	mov	eax, DWORD PTR i$5[rsp]
	inc	eax
	mov	DWORD PTR i$5[rsp], eax
$LN3@hda_reset:
	cmp	DWORD PTR i$5[rsp], 10000		; 00002710H
	jge	SHORT $LN1@hda_reset

; 511  : 		;

	jmp	SHORT $LN2@hda_reset
$LN1@hda_reset:

; 512  : 
; 513  : 	//! Setup CORB and RIRB
; 514  : 	setup_corb ();

	call	?setup_corb@@YAXXZ			; setup_corb

; 515  : 	setup_rirb ();

	call	?setup_rirb@@YAXXZ			; setup_rirb
$LN24@hda_reset:

; 516  : }

	add	rsp, 72					; 00000048H
	ret	0
?hda_reset@@YAXXZ ENDP					; hda_reset
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
param$ = 32
i$ = 36
i$1 = 40
fg_start$ = 44
rev_id$ = 48
num_fg$ = 52
vendor_id$ = 56
num_widgets$ = 60
widgets_start$ = 64
codec$ = 96
?codec_enumerate_widgets@@YAXH@Z PROC			; codec_enumerate_widgets

; 410  : static void codec_enumerate_widgets(int codec) {

	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 88					; 00000058H

; 411  : 
; 412  : 	uint32_t param;
; 413  : 	int num_fg, num_widgets;
; 414  : 	int fg_start, widgets_start;
; 415  : 	int i, j;
; 416  : 
; 417  : 
; 418  : 	param = codec_query (codec, 0, VERB_GET_PARAMETER | PARAM_NODE_COUNT);

	mov	r8d, 983044				; 000f0004H
	xor	edx, edx
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR param$[rsp], eax

; 419  : 
; 420  : 	num_fg = (param >> 0) & 0xff;

	mov	eax, DWORD PTR param$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR num_fg$[rsp], eax

; 421  : 	fg_start = (param >> 16) & 0xff;

	mov	eax, DWORD PTR param$[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	DWORD PTR fg_start$[rsp], eax

; 422  : 
; 423  : 
; 424  : 	printf ("[HD_Audio]: Num Function Group -> %d, fg_start -> %d\n", num_fg, fg_start);

	mov	r8d, DWORD PTR fg_start$[rsp]
	mov	edx, DWORD PTR num_fg$[rsp]
	lea	rcx, OFFSET FLAT:$SG3559
	call	?printf@@YAXPEBDZZ			; printf

; 425  : 
; 426  : 	uint32_t vendor_id = codec_query (codec, 0, VERB_GET_PARAMETER | PARAM_VENDOR_ID);

	mov	r8d, 983040				; 000f0000H
	xor	edx, edx
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR vendor_id$[rsp], eax

; 427  : 	printf ("[HD-Audio]:Widget device id -> %x, vendor id -> %x\n", vendor_id , (vendor_id >> 16 ));

	mov	eax, DWORD PTR vendor_id$[rsp]
	shr	eax, 16
	mov	r8d, eax
	mov	edx, DWORD PTR vendor_id$[rsp]
	lea	rcx, OFFSET FLAT:$SG3561
	call	?printf@@YAXPEBDZZ			; printf

; 428  : 	
; 429  : 	uint32_t rev_id = codec_query (codec, 0, VERB_GET_PARAMETER | PARAM_REV_ID);

	mov	r8d, 983042				; 000f0002H
	xor	edx, edx
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR rev_id$[rsp], eax

; 430  : 	printf ("[HD-Audio]:Widget version -> %d.%d, r0%d\n", rev_id>>20, rev_id>>16, rev_id>>8);

	mov	eax, DWORD PTR rev_id$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR rev_id$[rsp]
	shr	ecx, 16
	mov	edx, DWORD PTR rev_id$[rsp]
	shr	edx, 20
	mov	r9d, eax
	mov	r8d, ecx
	lea	rcx, OFFSET FLAT:$SG3563
	call	?printf@@YAXPEBDZZ			; printf

; 431  : 
; 432  : 	
; 433  : 	for (i = 0; i < num_fg; i++) {

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@codec_enum
$LN6@codec_enum:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@codec_enum:
	mov	eax, DWORD PTR num_fg$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN5@codec_enum

; 434  : 		param = codec_query (codec, fg_start + i, 
; 435  : 			VERB_GET_PARAMETER | PARAM_NODE_COUNT);

	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR fg_start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	r8d, 983044				; 000f0004H
	mov	edx, eax
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR param$[rsp], eax

; 436  : 
; 437  : 		num_widgets = param & 0xff;

	mov	eax, DWORD PTR param$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR num_widgets$[rsp], eax

; 438  : 		widgets_start = (param >> 16) & 0xff;

	mov	eax, DWORD PTR param$[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	DWORD PTR widgets_start$[rsp], eax

; 439  : 
; 440  : 
; 441  : 		param = codec_query (codec, fg_start + i, VERB_GET_PARAMETER | PARAM_FN_GROUP_TYPE);

	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR fg_start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	r8d, 983045				; 000f0005H
	mov	edx, eax
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR param$[rsp], eax

; 442  : 		param &= 0x7f;

	mov	eax, DWORD PTR param$[rsp]
	and	eax, 127				; 0000007fH
	mov	DWORD PTR param$[rsp], eax

; 443  : 		if (param != FN_GROUP_AUDIO) 

	cmp	DWORD PTR param$[rsp], 1
	je	SHORT $LN4@codec_enum

; 444  : 			continue;

	jmp	$LN6@codec_enum
$LN4@codec_enum:

; 445  : 
; 446  : 		for (int i = 0; i < num_widgets; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@codec_enum
$LN2@codec_enum:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@codec_enum:
	mov	eax, DWORD PTR num_widgets$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN1@codec_enum

; 447  : 			widget_init (codec, widgets_start + i);

	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR widgets_start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	ecx, DWORD PTR codec$[rsp]
	call	?widget_init@@YAXHH@Z			; widget_init

; 448  : 		}

	jmp	SHORT $LN2@codec_enum
$LN1@codec_enum:

; 449  : 		
; 450  : 	}

	jmp	$LN6@codec_enum
$LN5@codec_enum:

; 451  : 
; 452  : 
; 453  : 	//return output.nid ? 0 : -2;
; 454  : }

	add	rsp, 88					; 00000058H
	ret	0
?codec_enumerate_widgets@@YAXH@Z ENDP			; codec_enumerate_widgets
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
s$ = 32
widget_cap$ = 40
ctl$1 = 44
tv91 = 48
tv79 = 52
eapd_btl$ = 56
amp_gain$ = 60
type$ = 64
pin_cap$2 = 68
amp_cap$ = 72
conf$3 = 76
codec$ = 96
nid$ = 104
?widget_init@@YAXHH@Z PROC				; widget_init

; 321  : void widget_init (int codec, int nid) {

$LN25:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 88					; 00000058H

; 322  : 
; 323  : 	uint32_t widget_cap;
; 324  : 	uint32_t type;
; 325  : 	uint32_t amp_cap;
; 326  : 	uint32_t eapd_btl;
; 327  : 
; 328  : 	//! send a command for audio widget capabilites
; 329  : 	widget_cap = codec_query (codec, nid, VERB_GET_PARAMETER | PARAM_AUDIO_WID_CAP);

	mov	r8d, 983049				; 000f0009H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR widget_cap$[rsp], eax

; 330  : 	if (widget_cap == 0) {

	cmp	DWORD PTR widget_cap$[rsp], 0
	jne	SHORT $LN21@widget_ini

; 331  : 		//! serious problem occured
; 332  : 		return;

	jmp	$LN22@widget_ini
$LN21@widget_ini:

; 333  : 	}
; 334  : 
; 335  : 	type = (widget_cap & WIDGET_CAP_TYPE_MASK) >> WIDGET_CAP_TYPE_SHIFT;

	mov	eax, DWORD PTR widget_cap$[rsp]
	and	eax, 15728640				; 00f00000H
	shr	eax, 20
	mov	DWORD PTR type$[rsp], eax

; 336  : 	amp_cap = codec_query (codec, nid, VERB_GET_PARAMETER | PARAM_OUT_AMP_CAP);

	mov	r8d, 983058				; 000f0012H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR amp_cap$[rsp], eax

; 337  : 	eapd_btl = codec_query (codec, nid, VERB_GET_EAPD_BTL);

	mov	r8d, 986112				; 000f0c00H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR eapd_btl$[rsp], eax

; 338  : 
; 339  : 
; 340  : 
; 341  : 	uint32_t amp_gain;
; 342  : 	const char* s;
; 343  : 
; 344  : 	switch(type) {

	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv79[rsp], eax
	cmp	DWORD PTR tv79[rsp], 16
	ja	$LN9@widget_ini
	mov	eax, DWORD PTR tv79[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN24@widget_ini[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN18@widget_ini:

; 345  : 	case 0:  s = "output"; break;

	lea	rax, OFFSET FLAT:$SG3516
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN19@widget_ini
$LN17@widget_ini:

; 346  : 	case 1:  s = "input"; break;

	lea	rax, OFFSET FLAT:$SG3518
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN19@widget_ini
$LN16@widget_ini:

; 347  : 	case 2:  s = "mixer"; break;

	lea	rax, OFFSET FLAT:$SG3520
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN19@widget_ini
$LN15@widget_ini:

; 348  : 	case 3:  s = "selector"; break;

	lea	rax, OFFSET FLAT:$SG3522
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN19@widget_ini
$LN14@widget_ini:

; 349  : 	case 4:  s = "pin complex"; break;

	lea	rax, OFFSET FLAT:$SG3524
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN19@widget_ini
$LN13@widget_ini:

; 350  : 	case 5:  s = "power"; break;

	lea	rax, OFFSET FLAT:$SG3526
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN19@widget_ini
$LN12@widget_ini:

; 351  : 	case 6:  s = "volume knob"; break;

	lea	rax, OFFSET FLAT:$SG3528
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN19@widget_ini
$LN11@widget_ini:

; 352  : 	case 7:  s = "beep generator"; break;

	lea	rax, OFFSET FLAT:$SG3530
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN19@widget_ini
$LN10@widget_ini:

; 353  : 	case 16: s = "vendor defined"; break;

	lea	rax, OFFSET FLAT:$SG3532
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN19@widget_ini
$LN9@widget_ini:

; 354  : 	default: s = "unknown"; break;

	lea	rax, OFFSET FLAT:$SG3534
	mov	QWORD PTR s$[rsp], rax
$LN19@widget_ini:

; 355  : 
; 356  : 	}
; 357  : 
; 358  : 	amp_gain = codec_query(codec, nid, VERB_GET_AMP_GAIN_MUTE | 0x8000) << 8;

	mov	r8d, 753664				; 000b8000H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	shl	eax, 8
	mov	DWORD PTR amp_gain$[rsp], eax

; 359  : 	amp_gain |= codec_query(codec, nid, VERB_GET_AMP_GAIN_MUTE | 0xa000);

	mov	r8d, 761856				; 000ba000H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	ecx, DWORD PTR amp_gain$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR amp_gain$[rsp], eax

; 360  : 
; 361  : 	/*printf ("[HD-Audio]: widget %s at node %d; \n",
; 362  : 		s, nid);*/
; 363  : 
; 364  : 	switch (type) {

	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv91[rsp], eax
	cmp	DWORD PTR tv91[rsp], 0
	je	$LN4@widget_ini
	cmp	DWORD PTR tv91[rsp], 4
	je	SHORT $LN6@widget_ini
	jmp	$LN2@widget_ini
$LN6@widget_ini:

; 365  : 	case WIDGET_PIN:
; 366  : 		{
; 367  : 			uint32_t pin_cap, ctl;
; 368  : 			uint32_t conf = codec_query(codec, nid, VERB_GET_CONFIG_DEFAULT);

	mov	r8d, 990208				; 000f1c00H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR conf$3[rsp], eax

; 369  : 			//printf ("pin config: %x\n", conf);
; 370  : 
; 371  : 			pin_cap = codec_query (codec, nid, VERB_GET_PARAMETER | PARAM_PIN_CAP);

	mov	r8d, 983052				; 000f000cH
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR pin_cap$2[rsp], eax

; 372  : 
; 373  : 			if ((pin_cap & PIN_CAP_OUTPUT) == 0) {

	mov	eax, DWORD PTR pin_cap$2[rsp]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN5@widget_ini

; 374  : 				return;

	jmp	$LN22@widget_ini
$LN5@widget_ini:

; 375  : 			}
; 376  : 
; 377  : 			ctl = codec_query (codec, nid, VERB_GET_PIN_CONTROL);

	mov	r8d, 984832				; 000f0700H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR ctl$1[rsp], eax

; 378  : 			//printf ("ctl: %x\n", ctl);
; 379  : 
; 380  : 			ctl |= PIN_CTL_ENABLE_OUTPUT;

	mov	eax, DWORD PTR ctl$1[rsp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR ctl$1[rsp], eax

; 381  : 			codec_query(codec, nid, VERB_SET_PIN_CONTROL | ctl);

	mov	eax, DWORD PTR ctl$1[rsp]
	or	eax, 460544				; 00070700H
	mov	r8d, eax
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query

; 382  : 			codec_query(codec, nid, VERB_SET_EAPD_BTL | eapd_btl | 0x2);

	mov	eax, DWORD PTR eapd_btl$[rsp]
	or	eax, 461824				; 00070c00H
	or	eax, 2
	mov	r8d, eax
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query

; 383  : 			break;

	jmp	SHORT $LN7@widget_ini
$LN4@widget_ini:

; 384  : 		}
; 385  : 
; 386  : 	case WIDGET_OUTPUT:
; 387  : 		{
; 388  : 			if (!_ihd_audio.output->nid) {

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, WORD PTR [rax+2]
	test	eax, eax
	jne	SHORT $LN3@widget_ini

; 389  : 				_ihd_audio.output->codec = codec;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR codec$[rsp]
	mov	BYTE PTR [rax], cl

; 390  : 				_ihd_audio.output->nid = nid;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, WORD PTR nid$[rsp]
	mov	WORD PTR [rax+2], cx

; 391  : 				_ihd_audio.output->amp_gain_steps = (amp_cap >> 8) & 0x7f;

	mov	eax, DWORD PTR amp_cap$[rsp]
	shr	eax, 8
	and	eax, 127				; 0000007fH
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	mov	DWORD PTR [rcx+8], eax
$LN3@widget_ini:

; 392  : 			}
; 393  : 			printf ("[HD-Audio]:Widget type Output in codec -> %d at node -> %d\n", codec, nid);

	mov	r8d, DWORD PTR nid$[rsp]
	mov	edx, DWORD PTR codec$[rsp]
	lea	rcx, OFFSET FLAT:$SG3546
	call	?printf@@YAXPEBDZZ			; printf

; 394  : 			codec_query (codec, nid, VERB_SET_EAPD_BTL | eapd_btl | 0x2);

	mov	eax, DWORD PTR eapd_btl$[rsp]
	or	eax, 461824				; 00070c00H
	or	eax, 2
	mov	r8d, eax
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query

; 395  : 			break;

	jmp	SHORT $LN7@widget_ini
$LN2@widget_ini:

; 396  : 		}
; 397  : 
; 398  : 	default:
; 399  : 		return;

	jmp	SHORT $LN22@widget_ini
$LN7@widget_ini:

; 400  : 
; 401  : 	}
; 402  : 
; 403  : 	if (widget_cap & WIDGET_CAP_POWER_CNTRL) {

	mov	eax, DWORD PTR widget_cap$[rsp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN1@widget_ini

; 404  : 		codec_query(codec, nid, VERB_SET_POWER_STATE | 0x0);

	mov	r8d, 460032				; 00070500H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
$LN1@widget_ini:
$LN22@widget_ini:

; 405  : 	}
; 406  : }

	add	rsp, 88					; 00000058H
	ret	0
	npad	1
$LN24@widget_ini:
	DD	$LN18@widget_ini
	DD	$LN17@widget_ini
	DD	$LN16@widget_ini
	DD	$LN15@widget_ini
	DD	$LN14@widget_ini
	DD	$LN13@widget_ini
	DD	$LN12@widget_ini
	DD	$LN11@widget_ini
	DD	$LN9@widget_ini
	DD	$LN9@widget_ini
	DD	$LN9@widget_ini
	DD	$LN9@widget_ini
	DD	$LN9@widget_ini
	DD	$LN9@widget_ini
	DD	$LN9@widget_ini
	DD	$LN9@widget_ini
	DD	$LN10@widget_ini
?widget_init@@YAXHH@Z ENDP				; widget_init
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
format$ = 32
stream_format$ = 36
tv73 = 40
tv90 = 44
?init_output@@YAXXZ PROC				; init_output

; 295  : void init_output () {

$LN3:
	sub	rsp, 56					; 00000038H

; 296  : 	uint32_t stream_format = 0;

	mov	DWORD PTR stream_format$[rsp], 0

; 297  : 	stream_format |= (1<<0);

	mov	eax, DWORD PTR stream_format$[rsp]
	or	eax, 1
	mov	DWORD PTR stream_format$[rsp], eax

; 298  : 	stream_format |= (1<<4);

	mov	eax, DWORD PTR stream_format$[rsp]
	or	eax, 16
	mov	DWORD PTR stream_format$[rsp], eax

; 299  : 	codec_query (_ihd_audio.output->codec, _ihd_audio.output->nid, 
; 300  : 		VERB_SET_STREAM_CHANNEL | stream_format);   //0x10

	mov	eax, DWORD PTR stream_format$[rsp]
	or	eax, 460288				; 00070600H
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, WORD PTR [rcx+2]
	mov	rdx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	edx, BYTE PTR [rdx]
	mov	DWORD PTR tv73[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv73[rsp]
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 301  : 
; 302  : 	_ihd_audio.output->sample_rate = 0;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	mov	DWORD PTR [rax+4], 0

; 303  : 	_ihd_audio.output->num_channels = 2;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	mov	DWORD PTR [rax+12], 2

; 304  : 
; 305  : 	uint16_t format = (4<<4) | _ihd_audio.output->sample_rate | 
; 306  : 		(_ihd_audio.output->num_channels - 1);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	mov	eax, DWORD PTR [rax+4]
	or	eax, 64					; 00000040H
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	mov	ecx, DWORD PTR [rcx+12]
	dec	ecx
	or	eax, ecx
	mov	WORD PTR format$[rsp], ax

; 307  : 
; 308  : 	codec_query (_ihd_audio.output->codec, _ihd_audio.output->nid, VERB_SET_FORMAT | format);

	movzx	eax, WORD PTR format$[rsp]
	bts	eax, 17
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, WORD PTR [rcx+2]
	mov	rdx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	edx, BYTE PTR [rdx]
	mov	DWORD PTR tv90[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv90[rsp]
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 309  : 
; 310  : 	hda_set_volume (100);

	mov	cl, 100					; 00000064H
	call	?hda_set_volume@@YAXE@Z			; hda_set_volume

; 311  : 	printf ("Initializing output ->codec -> %d, nid -> %d\n", _ihd_audio.output->codec, _ihd_audio.output->nid);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:$SG3499
	call	?printf@@YAXPEBDZZ			; printf

; 312  : 
; 313  : }

	add	rsp, 56					; 00000038H
	ret	0
?init_output@@YAXXZ ENDP				; init_output
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
meta$ = 32
tv80 = 36
volume$ = 64
?hda_set_volume@@YAXE@Z PROC				; hda_set_volume

; 277  : void hda_set_volume (uint8_t volume) {

$LN5:
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 56					; 00000038H

; 278  : 	int meta = 0xb000;

	mov	DWORD PTR meta$[rsp], 45056		; 0000b000H

; 279  : 
; 280  : 	if (volume == 0) {

	movzx	eax, BYTE PTR volume$[rsp]
	test	eax, eax
	jne	SHORT $LN2@hda_set_vo

; 281  : 		/* set up the mute bit */
; 282  : 		volume = 0x80;

	mov	BYTE PTR volume$[rsp], 128		; 00000080H

; 283  : 	} else {

	jmp	SHORT $LN1@hda_set_vo
$LN2@hda_set_vo:

; 284  : 		/* scale to num steps */
; 285  : 		volume = volume * _ihd_audio.output->amp_gain_steps / 255;

	movzx	eax, BYTE PTR volume$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	imul	eax, DWORD PTR [rcx+8]
	cdq
	mov	ecx, 255				; 000000ffH
	idiv	ecx
	mov	BYTE PTR volume$[rsp], al
$LN1@hda_set_vo:

; 286  : 	}
; 287  : 
; 288  : 	codec_query (_ihd_audio.output->codec, _ihd_audio.output->nid, VERB_SET_AMP_GAIN_MUTE | meta | volume);

	mov	eax, DWORD PTR meta$[rsp]
	or	eax, 196608				; 00030000H
	movzx	ecx, BYTE PTR volume$[rsp]
	or	eax, ecx
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, WORD PTR [rcx+2]
	mov	rdx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	edx, BYTE PTR [rdx]
	mov	DWORD PTR tv80[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 289  : }

	add	rsp, 56					; 00000038H
	ret	0
?hda_set_volume@@YAXE@Z ENDP				; hda_set_volume
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
i$1 = 32
i$2 = 36
bdl_base$ = 40
bdl$ = 48
dma_pos$ = 56
tv75 = 64
?hda_start_stream@@YAXXZ PROC				; hda_start_stream

; 250  : void hda_start_stream () {

$LN9:
	sub	rsp, 88					; 00000058H

; 251  : 	_aud_outb_ (REG_O0_CTLU,0x10);

	mov	dl, 16
	mov	ecx, 258				; 00000102H
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 252  : 	_aud_outl_ (REG_O0_CBL, 4 * 0x100000);

	mov	edx, 4194304				; 00400000H
	mov	ecx, 264				; 00000108H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 253  : 	_aud_outw_(REG_O0_STLVI, 4 - 1);

	mov	dx, 3
	mov	ecx, 268				; 0000010cH
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 254  : 
; 255  : 	for (int i = 0; i < 0x400000 / 4096; i++)

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN6@hda_start_
$LN5@hda_start_:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN6@hda_start_:
	cmp	DWORD PTR i$2[rsp], 1024		; 00000400H
	jge	SHORT $LN4@hda_start_

; 256  : 		map_page ((uint64_t)pmmngr_alloc(), 0x0000000080000000 + i * 4096);

	mov	eax, DWORD PTR i$2[rsp]
	imul	eax, 4096				; 00001000H
	add	eax, -2147483648			; 80000000H
	mov	eax, eax
	mov	QWORD PTR tv75[rsp], rax
	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	rcx, QWORD PTR tv75[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	?map_page@@YA_N_K0@Z			; map_page
	jmp	SHORT $LN5@hda_start_
$LN4@hda_start_:

; 257  : 
; 258  : 	uint64_t bdl_base = (uint64_t)get_physical_address  ((uint64_t) 0x0000000080000000);

	mov	ecx, -2147483648			; 80000000H
	call	?get_physical_address@@YAPEA_K_K@Z	; get_physical_address
	mov	QWORD PTR bdl_base$[rsp], rax

; 259  : 	_aud_outl_ (REG_O0_BDLPL, bdl_base);

	mov	edx, DWORD PTR bdl_base$[rsp]
	mov	ecx, 280				; 00000118H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 260  : 	_aud_outl_ (REG_O0_BDLPU, bdl_base >> 32);

	mov	rax, QWORD PTR bdl_base$[rsp]
	shr	rax, 32					; 00000020H
	mov	edx, eax
	mov	ecx, 284				; 0000011cH
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 261  : 	ihda_bdl_entry *bdl = (ihda_bdl_entry*)bdl_base;

	mov	rax, QWORD PTR bdl_base$[rsp]
	mov	QWORD PTR bdl$[rsp], rax

; 262  : 
; 263  : 	for (int i = 0; i < 4; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@hda_start_
$LN2@hda_start_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@hda_start_:
	cmp	DWORD PTR i$1[rsp], 4
	jge	SHORT $LN1@hda_start_

; 264  : 		bdl[i].paddr = (uint64_t)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	movsxd	rcx, DWORD PTR i$1[rsp]
	imul	rcx, 16
	mov	rdx, QWORD PTR bdl$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 265  : 		bdl[i].length = 4096;

	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, 16
	mov	rcx, QWORD PTR bdl$[rsp]
	mov	DWORD PTR [rcx+rax+8], 4096		; 00001000H

; 266  : 		bdl[i].flags = 1;

	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, 16
	mov	rcx, QWORD PTR bdl$[rsp]
	mov	DWORD PTR [rcx+rax+12], 1

; 267  : 	}

	jmp	SHORT $LN2@hda_start_
$LN1@hda_start_:

; 268  : 
; 269  : 	uint64_t dma_pos = (uint64_t)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR dma_pos$[rsp], rax

; 270  : 	_aud_outl_(DPIBLBASE, dma_pos | 0x1);

	mov	rax, QWORD PTR dma_pos$[rsp]
	or	rax, 1
	mov	edx, eax
	mov	ecx, 112				; 00000070H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 271  : 	_aud_outl_(DPIBUBASE, dma_pos >> 32);

	mov	rax, QWORD PTR dma_pos$[rsp]
	shr	rax, 32					; 00000020H
	mov	edx, eax
	mov	ecx, 116				; 00000074H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 272  : 
; 273  : }

	add	rsp, 88					; 00000058H
	ret	0
?hda_start_stream@@YAXXZ ENDP				; hda_start_stream
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
rirb_status$ = 32
verb$ = 36
icount$ = 40
response$ = 48
codec$ = 80
nid$ = 88
payload$ = 96
?codec_query@@YAIHHI@Z PROC				; codec_query

; 227  : static uint32_t codec_query (int codec, int nid, uint32_t payload) {

	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H

; 228  : 	uint64_t response;// = (uint32_t)pmmngr_alloc();
; 229  : 	uint32_t icount = 10000;

	mov	DWORD PTR icount$[rsp], 10000		; 00002710H

; 230  : 	uint32_t verb = ((codec & 0xf) << 28) | 
; 231  : 		((nid & 0xff) << 20) | 
; 232  : 		(payload & 0xfffff);

	mov	eax, DWORD PTR codec$[rsp]
	and	eax, 15
	shl	eax, 28
	mov	ecx, DWORD PTR nid$[rsp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 20
	or	eax, ecx
	mov	ecx, DWORD PTR payload$[rsp]
	and	ecx, 1048575				; 000fffffH
	or	eax, ecx
	mov	DWORD PTR verb$[rsp], eax

; 233  : 
; 234  : 	//printf ("RIRB Status -> %d\n", (_aud_inl_(RIRBSTS >> 0)) & 0xff);
; 235  : 	corb_write(verb);

	mov	ecx, DWORD PTR verb$[rsp]
	call	?corb_write@@YAXI@Z			; corb_write
$LN3@codec_quer:

; 236  : 	uint8_t rirb_status;
; 237  : 	do {
; 238  : 		rirb_status = _aud_inb_(RIRBSTS);

	mov	ecx, 93					; 0000005dH
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	mov	BYTE PTR rirb_status$[rsp], al

; 239  : 	}while ((rirb_status & 1) == 0);

	movzx	eax, BYTE PTR rirb_status$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@codec_quer

; 240  : 
; 241  : 
; 242  : 	rirb_read(&response);

	lea	rcx, QWORD PTR response$[rsp]
	call	?rirb_read@@YAXPEA_K@Z			; rirb_read

; 243  : 	//_aud_outb_(RIRBSTS, 0);
; 244  : 	return response & 0xffffffff;

	mov	eax, -1					; ffffffffH
	mov	rcx, QWORD PTR response$[rsp]
	and	rcx, rax
	mov	rax, rcx

; 245  : }

	add	rsp, 72					; 00000048H
	ret	0
?codec_query@@YAIHHI@Z ENDP				; codec_query
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
rp$ = 32
wp$ = 36
old_rp$ = 40
response$ = 64
?rirb_read@@YAXPEA_K@Z PROC				; rirb_read

; 202  : static void rirb_read (uint64_t *response) {

	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 203  : 	uint16_t wp = _aud_inb_ (RIRBWP);

	mov	ecx, 88					; 00000058H
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	movzx	eax, al
	mov	WORD PTR wp$[rsp], ax

; 204  : 	uint16_t rp = rirbrp;

	movzx	eax, WORD PTR ?rirbrp@@3GA		; rirbrp
	mov	WORD PTR rp$[rsp], ax

; 205  : 	uint16_t old_rp = rp;

	movzx	eax, WORD PTR rp$[rsp]
	mov	WORD PTR old_rp$[rsp], ax
$LN4@rirb_read:

; 206  : 
; 207  : 
; 208  : 	/*Wait for an unread entry in the RIRB */
; 209  : 	while (rirbrp == wp) {

	movzx	eax, WORD PTR ?rirbrp@@3GA		; rirbrp
	movzx	ecx, WORD PTR wp$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN3@rirb_read

; 210  : 		wp = _aud_inb_(RIRBWP);

	mov	ecx, 88					; 00000058H
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	movzx	eax, al
	mov	WORD PTR wp$[rsp], ax

; 211  : 	}

	jmp	SHORT $LN4@rirb_read
$LN3@rirb_read:
$LN2@rirb_read:

; 212  : 
; 213  : 	while (rp != wp) {	

	movzx	eax, WORD PTR rp$[rsp]
	movzx	ecx, WORD PTR wp$[rsp]
	cmp	eax, ecx
	je	SHORT $LN1@rirb_read

; 214  : 		rp++;

	movzx	eax, WORD PTR rp$[rsp]
	inc	ax
	mov	WORD PTR rp$[rsp], ax

; 215  : 		rp %= _ihd_audio.rirb_entries;

	movzx	eax, WORD PTR rp$[rsp]
	xor	edx, edx
	div	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24
	mov	eax, edx
	mov	WORD PTR rp$[rsp], ax

; 216  : 		rirbrp = rp;

	movzx	eax, WORD PTR rp$[rsp]
	mov	WORD PTR ?rirbrp@@3GA, ax		; rirbrp

; 217  : 		*response = _ihd_audio.rirb[rirbrp];

	movzx	eax, WORD PTR ?rirbrp@@3GA		; rirbrp
	mov	rcx, QWORD PTR response$[rsp]
	mov	rdx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+16
	mov	rax, QWORD PTR [rdx+rax*8]
	mov	QWORD PTR [rcx], rax

; 218  : 	}

	jmp	SHORT $LN2@rirb_read
$LN1@rirb_read:

; 219  : 
; 220  : 	return;
; 221  : }

	add	rsp, 56					; 00000038H
	ret	0
?rirb_read@@YAXPEA_K@Z ENDP				; rirb_read
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
rp$ = 32
wp$ = 36
verb$ = 64
?corb_write@@YAXI@Z PROC				; corb_write

; 168  : static void corb_write (uint32_t verb) {

	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H

; 169  : 
; 170  : 	//! Check for immediate use
; 171  : 	if (_ihd_audio.immediate_use) {

	movzx	eax, BYTE PTR ?_ihd_audio@@3U_hd_audio_@@A+32
	test	eax, eax
	je	SHORT $LN4@corb_write

; 172  : 		_aud_outl_(ICOI,verb);

	mov	edx, DWORD PTR verb$[rsp]
	mov	ecx, 96					; 00000060H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 173  : 		_aud_outl_(ICIS,1);

	mov	edx, 1
	mov	ecx, 104				; 00000068H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 174  : 		return;

	jmp	$LN5@corb_write
$LN4@corb_write:

; 175  : 	}
; 176  : 
; 177  : 	//! else use standard command transmitting method
; 178  : 	uint16_t wp = _aud_inw_(CORBWP) & 0xff;

	mov	ecx, 72					; 00000048H
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	movzx	eax, ax
	and	eax, 255				; 000000ffH
	mov	WORD PTR wp$[rsp], ax

; 179  : 	uint16_t rp = _aud_inw_(CORBRP) & 0xff;

	mov	ecx, 74					; 0000004aH
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	movzx	eax, ax
	and	eax, 255				; 000000ffH
	mov	WORD PTR rp$[rsp], ax

; 180  :     corbwp = 0;

	xor	eax, eax
	mov	WORD PTR ?corbwp@@3GA, ax		; corbwp

; 181  : 	corbwp = (rp + 1);

	movzx	eax, WORD PTR rp$[rsp]
	inc	eax
	mov	WORD PTR ?corbwp@@3GA, ax		; corbwp

; 182  : 	corbwp %= _ihd_audio.corb_entries;

	movzx	eax, WORD PTR ?corbwp@@3GA		; corbwp
	xor	edx, edx
	div	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28
	mov	eax, edx
	mov	WORD PTR ?corbwp@@3GA, ax		; corbwp
$LN3@corb_write:

; 183  : 	
; 184  : 	/*Wait until there's a free entry in the CORB */
; 185  : 	do {
; 186  : 		rp = _aud_inw_(CORBRP) & 0xff;

	mov	ecx, 74					; 0000004aH
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	movzx	eax, ax
	and	eax, 255				; 000000ffH
	mov	WORD PTR rp$[rsp], ax

; 187  : 	}while (rp == corbwp);

	movzx	eax, WORD PTR rp$[rsp]
	movzx	ecx, WORD PTR ?corbwp@@3GA		; corbwp
	cmp	eax, ecx
	je	SHORT $LN3@corb_write

; 188  : 
; 189  : 	
; 190  : 	/* Write to CORB */	
; 191  : 	_ihd_audio.corb[corbwp] = verb;	

	movzx	eax, WORD PTR ?corbwp@@3GA		; corbwp
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+8
	mov	edx, DWORD PTR verb$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx

; 192  :     _aud_outw_(CORBWP, corbwp);

	movzx	edx, WORD PTR ?corbwp@@3GA		; corbwp
	mov	ecx, 72					; 00000048H
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_
$LN5@corb_write:

; 193  : 
; 194  : }

	add	rsp, 56					; 00000038H
	ret	0
?corb_write@@YAXI@Z ENDP				; corb_write
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
reg$ = 32
rirbctl$ = 36
rirb_entries$ = 40
rirb_base$ = 48
?setup_rirb@@YAXXZ PROC					; setup_rirb

; 118  : void setup_rirb() {

$LN9:
	sub	rsp, 72					; 00000048H

; 119  : 
; 120  : 	uint8_t reg;
; 121  : 	uint64_t rirb_base;
; 122  : 	uint32_t rirb_entries = 0;

	mov	DWORD PTR rirb_entries$[rsp], 0

; 123  : 
; 124  : 	
; 125  : 	//_aud_outw_(RIRBCTL, 0);
; 126  : 
; 127  : 	reg = _aud_inb_ (RIRBSIZE);

	mov	ecx, 94					; 0000005eH
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	mov	BYTE PTR reg$[rsp], al

; 128  : 	/* Check RIRB size capabilities and choose the largest size */
; 129  : 	if (reg & (1 << 6)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN6@setup_rirb

; 130  : 		_ihd_audio.rirb_entries = 256;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24, 256 ; 00000100H

; 131  : 		reg |= 0x2;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 2
	mov	BYTE PTR reg$[rsp], al
	jmp	SHORT $LN5@setup_rirb
$LN6@setup_rirb:

; 132  : 	} else if (reg & (1 << 5)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN4@setup_rirb

; 133  : 		_ihd_audio.rirb_entries = 16;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24, 16

; 134  : 		reg |= 0x1;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 1
	mov	BYTE PTR reg$[rsp], al
	jmp	SHORT $LN3@setup_rirb
$LN4@setup_rirb:

; 135  : 	}else if (reg & (1 << 4)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN2@setup_rirb

; 136  : 		_ihd_audio.rirb_entries = 2;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24, 2

; 137  : 		reg |= 0x0;

	movzx	eax, BYTE PTR reg$[rsp]
	mov	BYTE PTR reg$[rsp], al

; 138  : 	}else {

	jmp	SHORT $LN1@setup_rirb
$LN2@setup_rirb:

; 139  : 		printf ("HD Audio: No supported RIRB size !!\n");

	lea	rcx, OFFSET FLAT:$SG3434
	call	?printf@@YAXPEBDZZ			; printf

; 140  : 		_ihd_audio.rirb_entries = 256;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24, 256 ; 00000100H

; 141  : 		reg |= 0x2;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 2
	mov	BYTE PTR reg$[rsp], al
$LN1@setup_rirb:
$LN3@setup_rirb:
$LN5@setup_rirb:

; 142  : 	}
; 143  : 
; 144  : 	_aud_outb_(RIRBSIZE,reg);

	movzx	edx, BYTE PTR reg$[rsp]
	mov	ecx, 94					; 0000005eH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 145  : 
; 146  : 	/* Set RIRB Base address */
; 147  : 	rirb_base = (uint64_t)_ihd_audio.rirb;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+16
	mov	QWORD PTR rirb_base$[rsp], rax

; 148  : 	_aud_outl_(RIRBLBASE, rirb_base);

	mov	edx, DWORD PTR rirb_base$[rsp]
	mov	ecx, 80					; 00000050H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 149  : 	_aud_outl_(RIRBUBASE, rirb_base >> 32);

	mov	rax, QWORD PTR rirb_base$[rsp]
	shr	rax, 32					; 00000020H
	mov	edx, eax
	mov	ecx, 84					; 00000054H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 150  : 
; 151  : 	_aud_outw_ (RIRBWP, 0x8000);

	mov	dx, 32768				; 00008000H
	mov	ecx, 88					; 00000058H
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 152  : 	/*for (int i = 0; i < 1000; i++)
; 153  : 		;*/
; 154  : 	_aud_outw_(RINTCNT, _ihd_audio.rirb_entries / 2);

	xor	edx, edx
	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24
	mov	ecx, 2
	div	ecx
	movzx	edx, ax
	mov	ecx, 90					; 0000005aH
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 155  : 
; 156  : 	_aud_outb_ (RIRBCTL,0x1);

	mov	dl, 1
	mov	ecx, 92					; 0000005cH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 157  : 	/* Start DMA Engine */
; 158  : 	uint32_t rirbctl = _aud_inb_ (RIRBCTL);

	mov	ecx, 92					; 0000005cH
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	movzx	eax, al
	mov	DWORD PTR rirbctl$[rsp], eax

; 159  : 	rirbctl |= 0x2;

	mov	eax, DWORD PTR rirbctl$[rsp]
	or	eax, 2
	mov	DWORD PTR rirbctl$[rsp], eax

; 160  : 	_aud_outb_ (RIRBCTL,rirbctl);

	movzx	edx, BYTE PTR rirbctl$[rsp]
	mov	ecx, 92					; 0000005cH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 161  : 
; 162  : }

	add	rsp, 72					; 00000048H
	ret	0
?setup_rirb@@YAXXZ ENDP					; setup_rirb
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
reg$ = 32
corbctl$ = 36
corb_entries$ = 40
corb_base$ = 48
?setup_corb@@YAXXZ PROC					; setup_corb

; 75   : void setup_corb () {

$LN9:
	sub	rsp, 72					; 00000048H

; 76   : 	
; 77   : 	uint8_t reg;
; 78   : 	uint64_t corb_base;
; 79   : 	unsigned int corb_entries = 0;

	mov	DWORD PTR corb_entries$[rsp], 0

; 80   : 
; 81   : 	reg = _aud_inb_(CORBSIZE);

	mov	ecx, 78					; 0000004eH
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	mov	BYTE PTR reg$[rsp], al

; 82   : 	/* Check CORB size capabilities and choose the largest size */
; 83   : 	if (reg & (1 << 6)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN6@setup_corb

; 84   : 		_ihd_audio.corb_entries = 256;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28, 256 ; 00000100H

; 85   : 		reg |= 0x2;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 2
	mov	BYTE PTR reg$[rsp], al
	jmp	SHORT $LN5@setup_corb
$LN6@setup_corb:

; 86   : 	} else if (reg & (1 << 5)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN4@setup_corb

; 87   : 		_ihd_audio.corb_entries = 16;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28, 16

; 88   : 		reg |= 0x1;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 1
	mov	BYTE PTR reg$[rsp], al
	jmp	SHORT $LN3@setup_corb
$LN4@setup_corb:

; 89   : 	} else if (reg & (1 << 4)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN2@setup_corb

; 90   : 		_ihd_audio.corb_entries = 2;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28, 2

; 91   : 		reg |= 0x0;

	movzx	eax, BYTE PTR reg$[rsp]
	mov	BYTE PTR reg$[rsp], al

; 92   : 	} else {

	jmp	SHORT $LN1@setup_corb
$LN2@setup_corb:

; 93   : 		_ihd_audio.corb_entries = 256;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28, 256 ; 00000100H

; 94   : 		reg |= 0x2;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 2
	mov	BYTE PTR reg$[rsp], al
$LN1@setup_corb:
$LN3@setup_corb:
$LN5@setup_corb:

; 95   : 	}
; 96   : 
; 97   : 	_aud_outb_(CORBSIZE, reg);

	movzx	edx, BYTE PTR reg$[rsp]
	mov	ecx, 78					; 0000004eH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 98   : 
; 99   : 
; 100  : 	/* Set CORB Base Address */
; 101  : 	corb_base = (uintptr_t)_ihd_audio.corb;

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+8
	mov	QWORD PTR corb_base$[rsp], rax

; 102  : 	_aud_outl_(CORBLBASE, corb_base);

	mov	edx, DWORD PTR corb_base$[rsp]
	mov	ecx, 64					; 00000040H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 103  : 	_aud_outl_(CORBUBASE, corb_base >> 32);

	mov	rax, QWORD PTR corb_base$[rsp]
	shr	rax, 32					; 00000020H
	mov	edx, eax
	mov	ecx, 68					; 00000044H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 104  : 
; 105  : 	_aud_outw_ (CORBWP, corbwp);

	movzx	edx, WORD PTR ?corbwp@@3GA		; corbwp
	mov	ecx, 72					; 00000048H
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 106  : 	_aud_outw_ (CORBRP, 0x8000);

	mov	dx, 32768				; 00008000H
	mov	ecx, 74					; 0000004aH
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 107  : 	_aud_outw_ (CORBRP, 0x0);

	xor	edx, edx
	mov	ecx, 74					; 0000004aH
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 108  : 	
; 109  : 	/* Start DMA engine */
; 110  : 	_aud_outb_(CORBCTL, 0x1);

	mov	dl, 1
	mov	ecx, 76					; 0000004cH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 111  : 	uint32_t corbctl = _aud_inb_(CORBCTL);

	mov	ecx, 76					; 0000004cH
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	movzx	eax, al
	mov	DWORD PTR corbctl$[rsp], eax

; 112  : 	corbctl |= 0x2;

	mov	eax, DWORD PTR corbctl$[rsp]
	or	eax, 2
	mov	DWORD PTR corbctl$[rsp], eax

; 113  : 	_aud_outb_ (CORBCTL, corbctl);

	movzx	edx, BYTE PTR corbctl$[rsp]
	mov	ecx, 76					; 0000004cH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 114  : }

	add	rsp, 72					; 00000048H
	ret	0
?setup_corb@@YAXXZ ENDP					; setup_corb
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
v$ = 48
p$ = 56
?hda_handler@@YAX_KPEAX@Z PROC				; hda_handler

; 66   : void hda_handler (size_t v, void* p) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 67   : 	printf ("HD-Audio Interrupt fired++\n");

	lea	rcx, OFFSET FLAT:$SG3409
	call	?printf@@YAXPEBDZZ			; printf

; 68   : 	//apic_local_eoi();
; 69   : 	interrupt_end(0);

	xor	ecx, ecx
	call	?interrupt_end@@YAXI@Z			; interrupt_end

; 70   : }

	add	rsp, 40					; 00000028H
	ret	0
?hda_handler@@YAX_KPEAX@Z ENDP				; hda_handler
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
?_aud_inb_@@YAEH@Z PROC					; _aud_inb_

; 55   : uint8_t _aud_inb_ (int reg) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 56   : 	volatile uint8_t* mmio = (uint8_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 57   : 	return *mmio;

	mov	rax, QWORD PTR mmio$[rsp]
	movzx	eax, BYTE PTR [rax]

; 58   : }

	add	rsp, 24
	ret	0
?_aud_inb_@@YAEH@Z ENDP					; _aud_inb_
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
value$ = 40
?_aud_outb_@@YAXHE@Z PROC				; _aud_outb_

; 49   : void _aud_outb_ (int reg, uint8_t value) {

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 50   : 	 volatile uint8_t* mmio = (uint8_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 51   : 	*mmio = value;

	mov	rax, QWORD PTR mmio$[rsp]
	movzx	ecx, BYTE PTR value$[rsp]
	mov	BYTE PTR [rax], cl

; 52   : }

	add	rsp, 24
	ret	0
?_aud_outb_@@YAXHE@Z ENDP				; _aud_outb_
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
?_aud_inw_@@YAGH@Z PROC					; _aud_inw_

; 43   : uint16_t _aud_inw_(int reg) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 44   : 	volatile uint16_t* mmio = (uint16_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 45   : 	return *mmio;

	mov	rax, QWORD PTR mmio$[rsp]
	movzx	eax, WORD PTR [rax]

; 46   : }

	add	rsp, 24
	ret	0
?_aud_inw_@@YAGH@Z ENDP					; _aud_inw_
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
value$ = 40
?_aud_outw_@@YAXHG@Z PROC				; _aud_outw_

; 37   : void _aud_outw_ (int reg, uint16_t value) {

$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 38   : 	volatile uint16_t* mmio = (uint16_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 39   : 	*mmio = value;

	mov	rax, QWORD PTR mmio$[rsp]
	movzx	ecx, WORD PTR value$[rsp]
	mov	WORD PTR [rax], cx

; 40   : }

	add	rsp, 24
	ret	0
?_aud_outw_@@YAXHG@Z ENDP				; _aud_outw_
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
?_aud_inl_@@YAIH@Z PROC					; _aud_inl_

; 31   : uint32_t _aud_inl_ (int reg) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 32   :     volatile uint32_t* mmio = (uint32_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 33   : 	return *mmio;

	mov	rax, QWORD PTR mmio$[rsp]
	mov	eax, DWORD PTR [rax]

; 34   : }

	add	rsp, 24
	ret	0
?_aud_inl_@@YAIH@Z ENDP					; _aud_inl_
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
value$ = 40
?_aud_outl_@@YAXHI@Z PROC				; _aud_outl_

; 25   : void _aud_outl_(int reg, uint32_t value) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 26   : 	 volatile uint32_t* mmio = (uint32_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 27   : 	*mmio = value;

	mov	rax, QWORD PTR mmio$[rsp]
	mov	ecx, DWORD PTR value$[rsp]
	mov	DWORD PTR [rax], ecx

; 28   : }

	add	rsp, 24
	ret	0
?_aud_outl_@@YAXHI@Z ENDP				; _aud_outl_
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
pci_status$ = 48
i$1 = 52
statests$ = 56
bus$ = 60
func$ = 64
dev$ = 68
pci_dev$ = 80
?hda_initialize@@YAXXZ PROC				; hda_initialize

; 523  : void hda_initialize () {

$LN10:
	sub	rsp, 344				; 00000158H

; 524  : 	pci_device_info pci_dev;
; 525  : 	int bus, dev, func;
; 526  : 
; 527  : 	if (!pci_find_device_class (0x04, 0x03, &pci_dev, &bus, &dev, &func)){

	lea	rax, QWORD PTR func$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR dev$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR bus$[rsp]
	lea	r8, QWORD PTR pci_dev$[rsp]
	mov	dl, 3
	mov	cl, 4
	call	?pci_find_device_class@@YA_NEEPEATpci_device_info@@PEAH11@Z ; pci_find_device_class
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@hda_initia

; 528  : 		printf ("No HD-Audio was found\n");

	lea	rcx, OFFSET FLAT:$SG3613
	call	?printf@@YAXPEBDZZ			; printf

; 529  : 		return;

	jmp	$LN8@hda_initia
$LN7@hda_initia:

; 530  : 	}
; 531  : 
; 532  : 	x64_cli();

	call	x64_cli

; 533  : 
; 534  : 	_ihd_audio.output = (hda_output*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33, rax

; 535  : 	memset (_ihd_audio.output, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	call	?memset@@YAXPEAXEI@Z			; memset

; 536  : 
; 537  : 	printf ("HD Audio found vendor -> %x, device -> %x\n", pci_dev.device.vendorID, pci_dev.device.deviceID);

	movzx	eax, WORD PTR pci_dev$[rsp+2]
	movzx	ecx, WORD PTR pci_dev$[rsp]
	mov	r8d, eax
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:$SG3615
	call	?printf@@YAXPEBDZZ			; printf

; 538  : 	printf ("HD-Audio interrupt line -> %d\n", pci_dev.device.nonBridge.interruptLine);

	movzx	eax, BYTE PTR pci_dev$[rsp+60]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG3616
	call	?printf@@YAXPEBDZZ			; printf

; 539  : 
; 540  : 
; 541  : 	bool pci_status = pci_alloc_msi (func, dev, bus, hda_handler);

	lea	r9, OFFSET FLAT:?hda_handler@@YAX_KPEAX@Z ; hda_handler
	mov	r8d, DWORD PTR bus$[rsp]
	mov	edx, DWORD PTR dev$[rsp]
	mov	ecx, DWORD PTR func$[rsp]
	call	?pci_alloc_msi@@YA_NHHHP6AX_KPEAX@Z@Z	; pci_alloc_msi
	mov	BYTE PTR pci_status$[rsp], al

; 542  : 	if (!pci_status) {

	movzx	eax, BYTE PTR pci_status$[rsp]

; 543  : 		//! fall to legacy interrupt handling mode
; 544  : 		//interrupt_set (pci_dev.device.nonBridge.interruptLine, hda_handler, pci_dev.device.nonBridge.interruptLine);
; 545  : 	}
; 546  : 
; 547  : 	_ihd_audio.mmio = pci_dev.device.nonBridge.baseAddress[0] & ~3;

	mov	eax, 4
	imul	rax, 0
	mov	eax, DWORD PTR pci_dev$[rsp+rax+16]
	and	eax, -4					; fffffffcH
	mov	eax, eax
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A, rax

; 548  : 	_ihd_audio.corb = (uint32_t*)pmmngr_alloc(); //for 256 entries only 1 kb will be used

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+8, rax

; 549  : 	_ihd_audio.rirb = (uint64_t*)pmmngr_alloc(); //(ring_address + 1024);

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+16, rax

; 550  : 	memset (_ihd_audio.corb, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+8
	call	?memset@@YAXPEAXEI@Z			; memset

; 551  : 	memset (_ihd_audio.rirb, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+16
	call	?memset@@YAXPEAXEI@Z			; memset

; 552  : 
; 553  : 	if (_aud_inw_ (GCAP) & 1) {

	xor	ecx, ecx
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	movzx	eax, ax
	and	eax, 1
	test	eax, eax
	je	SHORT $LN5@hda_initia

; 554  : 		printf ("HD-Audio 64-OK\n");

	lea	rcx, OFFSET FLAT:$SG3622
	call	?printf@@YAXPEBDZZ			; printf
$LN5@hda_initia:

; 555  : 	}
; 556  : 	
; 557  : 	hda_reset();

	call	?hda_reset@@YAXXZ			; hda_reset

; 558  :     
; 559  :    
; 560  : 	uint16_t statests = _aud_inw_ (STATESTS);

	mov	ecx, 14
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	mov	WORD PTR statests$[rsp], ax

; 561  : 	for (int i = 0; i < 15; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@hda_initia
$LN3@hda_initia:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@hda_initia:
	cmp	DWORD PTR i$1[rsp], 15
	jge	SHORT $LN2@hda_initia

; 562  : 		if (statests & (1 << i)){

	movzx	eax, WORD PTR statests$[rsp]
	mov	ecx, DWORD PTR i$1[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN1@hda_initia

; 563  : 			codec_enumerate_widgets(i);

	mov	ecx, DWORD PTR i$1[rsp]
	call	?codec_enumerate_widgets@@YAXH@Z	; codec_enumerate_widgets
$LN1@hda_initia:

; 564  : 		}
; 565  : 	} 

	jmp	SHORT $LN3@hda_initia
$LN2@hda_initia:

; 566  : 
; 567  : 
; 568  : 	//! Initialize audio output
; 569  : 	init_output();

	call	?init_output@@YAXXZ			; init_output

; 570  : 
; 571  :     x64_sti();

	call	x64_sti

; 572  :    
; 573  : 	printf ("IHD Audio Initialized successfully\n");

	lea	rcx, OFFSET FLAT:$SG3629
	call	?printf@@YAXPEBDZZ			; printf
$LN8@hda_initia:

; 574  : }

	add	rsp, 344				; 00000158H
	ret	0
?hda_initialize@@YAXXZ ENDP				; hda_initialize
_TEXT	ENDS
END
