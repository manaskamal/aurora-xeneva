; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_ihd_audio@@3U_hd_audio_@@A			; _ihd_audio
PUBLIC	?rirbrp@@3GA					; rirbrp
PUBLIC	?corbwp@@3GA					; corbwp
_BSS	SEGMENT
?_ihd_audio@@3U_hd_audio_@@A DB 04dH DUP (?)		; _ihd_audio
	ALIGN	4

?rirbrp@@3GA DW	01H DUP (?)				; rirbrp
	ALIGN	4

?corbwp@@3GA DW	01H DUP (?)				; corbwp
_BSS	ENDS
CONST	SEGMENT
$SG3439	DB	'HD-Audio Interrupt fired++', 0aH, 00H
	ORG $+4
$SG3464	DB	'HD Audio: No supported RIRB size !!', 0aH, 00H
	ORG $+3
$SG3502	DB	'Volume Currenty Setuped is -> %d', 0aH, 00H
	ORG $+6
$SG3504	DB	'Volume -> %d', 0aH, 00H
	ORG $+2
$SG3507	DB	'Initializing Output Codec -> %d, Node -> %d', 0aH, 00H
	ORG $+3
$SG3552	DB	'output', 00H
	ORG $+1
$SG3554	DB	'input', 00H
	ORG $+2
$SG3556	DB	'mixer', 00H
	ORG $+2
$SG3558	DB	'selector', 00H
	ORG $+3
$SG3562	DB	'power', 00H
	ORG $+6
$SG3560	DB	'pin complex', 00H
	ORG $+4
$SG3564	DB	'volume knob', 00H
	ORG $+4
$SG3566	DB	'beep generator', 00H
	ORG $+1
$SG3568	DB	'vendor defined', 00H
	ORG $+1
$SG3570	DB	'unknown', 00H
$SG3591	DB	'Output Node -> %d', 0aH, 00H
	ORG $+5
$SG3607	DB	'[HD_Audio]: Num Function Group -> %d, fg_start -> %d', 0aH
	DB	00H
	ORG $+2
$SG3609	DB	'[HD-Audio]:Widget device id -> %x, vendor id -> %x', 0aH
	DB	00H
	ORG $+4
$SG3611	DB	'[HD-Audio]:Widget version -> %d.%d, r0%d', 0aH, 00H
	ORG $+6
$SG3615	DB	'Widget start -> %d', 0aH, 00H
	ORG $+4
$SG3634	DB	'Unable to put HD-Audio in reset mode', 0aH, 00H
	ORG $+2
$SG3649	DB	'HD-Audio device stuck in reset', 0aH, 00H
$SG3668	DB	'No HD-Audio was found', 0aH, 00H
	ORG $+1
$SG3671	DB	'HD Audio found vendor -> %x, device -> %x', 0aH, 00H
	ORG $+5
$SG3672	DB	'HD-Audio interrupt line -> %d', 0aH, 00H
	ORG $+1
$SG3685	DB	'HD-Audio 64-OK', 0aH, 00H
$SG3692	DB	'Codecs -> %d', 0aH, 00H
	ORG $+2
$SG3695	DB	'IHD Audio Initialized successfully', 0aH, 00H
CONST	ENDS
PUBLIC	?hda_initialize@@YAXXZ				; hda_initialize
PUBLIC	?hda_set_volume@@YAXE@Z				; hda_set_volume
PUBLIC	?hda_audio_add_pcm@@YAXPEAX_K@Z			; hda_audio_add_pcm
PUBLIC	?_aud_outl_@@YAXHI@Z				; _aud_outl_
PUBLIC	?_aud_inl_@@YAIH@Z				; _aud_inl_
PUBLIC	?_aud_outw_@@YAXHG@Z				; _aud_outw_
PUBLIC	?_aud_inw_@@YAGH@Z				; _aud_inw_
PUBLIC	?_aud_outb_@@YAXHE@Z				; _aud_outb_
PUBLIC	?_aud_inb_@@YAEH@Z				; _aud_inb_
PUBLIC	?hda_handler@@YAX_KPEAX@Z			; hda_handler
PUBLIC	?setup_corb@@YAXXZ				; setup_corb
PUBLIC	?setup_rirb@@YAXXZ				; setup_rirb
PUBLIC	?init_output@@YAXXZ				; init_output
PUBLIC	?hda_init_output_stream@@YAXXZ			; hda_init_output_stream
PUBLIC	?widget_init@@YAXHH@Z				; widget_init
PUBLIC	?hda_reset@@YAXXZ				; hda_reset
PUBLIC	?hda_output_start@@YAXXZ			; hda_output_start
PUBLIC	?hda_output_stop@@YAXXZ				; hda_output_stop
EXTRN	?interrupt_end@@YAXI@Z:PROC			; interrupt_end
EXTRN	?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z:PROC	; interrupt_set
EXTRN	?pci_find_device_class@@YA_NEEPEATpci_device_info@@PEAH11@Z:PROC ; pci_find_device_class
EXTRN	?pci_alloc_msi@@YA_NHHHP6AX_KPEAX@Z@Z:PROC	; pci_alloc_msi
EXTRN	?pmmngr_alloc@@YAPEAXXZ:PROC			; pmmngr_alloc
EXTRN	?pmmngr_alloc_blocks@@YAPEAXH@Z:PROC		; pmmngr_alloc_blocks
EXTRN	?map_page@@YA_N_K0E@Z:PROC			; map_page
EXTRN	?get_physical_address@@YAPEA_K_K@Z:PROC		; get_physical_address
EXTRN	?memset@@YAXPEAXEI@Z:PROC			; memset
EXTRN	?printf@@YAXPEBDZZ:PROC				; printf
EXTRN	__ImageBase:BYTE
pdata	SEGMENT
$pdata$?hda_initialize@@YAXXZ DD imagerel $LN14
	DD	imagerel $LN14+743
	DD	imagerel $unwind$?hda_initialize@@YAXXZ
$pdata$?hda_set_volume@@YAXE@Z DD imagerel $LN4
	DD	imagerel $LN4+200
	DD	imagerel $unwind$?hda_set_volume@@YAXE@Z
$pdata$?_aud_outl_@@YAXHI@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?_aud_outl_@@YAXHI@Z
$pdata$?_aud_inl_@@YAIH@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?_aud_inl_@@YAIH@Z
$pdata$?_aud_outw_@@YAXHG@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?_aud_outw_@@YAXHG@Z
$pdata$?_aud_inw_@@YAGH@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?_aud_inw_@@YAGH@Z
$pdata$?_aud_outb_@@YAXHE@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?_aud_outb_@@YAXHE@Z
$pdata$?_aud_inb_@@YAEH@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?_aud_inb_@@YAEH@Z
$pdata$?hda_handler@@YAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$?hda_handler@@YAX_KPEAX@Z
$pdata$?setup_corb@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+317
	DD	imagerel $unwind$?setup_corb@@YAXXZ
$pdata$?setup_rirb@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+329
	DD	imagerel $unwind$?setup_rirb@@YAXXZ
$pdata$?corb_write@@YAXI@Z DD imagerel ?corb_write@@YAXI@Z
	DD	imagerel ?corb_write@@YAXI@Z+228
	DD	imagerel $unwind$?corb_write@@YAXI@Z
$pdata$?rirb_read@@YAXPEA_K@Z DD imagerel ?rirb_read@@YAXPEA_K@Z
	DD	imagerel ?rirb_read@@YAXPEA_K@Z+157
	DD	imagerel $unwind$?rirb_read@@YAXPEA_K@Z
$pdata$?codec_query@@YAIHHI@Z DD imagerel ?codec_query@@YAIHHI@Z
	DD	imagerel ?codec_query@@YAIHHI@Z+132
	DD	imagerel $unwind$?codec_query@@YAIHHI@Z
$pdata$?init_output@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+389
	DD	imagerel $unwind$?init_output@@YAXXZ
$pdata$?hda_init_output_stream@@YAXXZ DD imagerel $LN12
	DD	imagerel $LN12+455
	DD	imagerel $unwind$?hda_init_output_stream@@YAXXZ
$pdata$?widget_init@@YAXHH@Z DD imagerel $LN32
	DD	imagerel $LN32+1000
	DD	imagerel $unwind$?widget_init@@YAXHH@Z
$pdata$?codec_enumerate_widgets@@YAHH@Z DD imagerel ?codec_enumerate_widgets@@YAHH@Z
	DD	imagerel ?codec_enumerate_widgets@@YAHH@Z+485
	DD	imagerel $unwind$?codec_enumerate_widgets@@YAHH@Z
$pdata$?hda_reset@@YAXXZ DD imagerel $LN26
	DD	imagerel $LN26+435
	DD	imagerel $unwind$?hda_reset@@YAXXZ
$pdata$?hda_output_start@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?hda_output_start@@YAXXZ
$pdata$?hda_output_stop@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?hda_output_stop@@YAXXZ
pdata	ENDS
xdata	SEGMENT
$unwind$?hda_initialize@@YAXXZ DD 020701H
	DD	02d0107H
$unwind$?hda_set_volume@@YAXE@Z DD 010801H
	DD	06208H
$unwind$?_aud_outl_@@YAXHI@Z DD 010c01H
	DD	0220cH
$unwind$?_aud_inl_@@YAIH@Z DD 010801H
	DD	02208H
$unwind$?_aud_outw_@@YAXHG@Z DD 010d01H
	DD	0220dH
$unwind$?_aud_inw_@@YAGH@Z DD 010801H
	DD	02208H
$unwind$?_aud_outb_@@YAXHE@Z DD 010c01H
	DD	0220cH
$unwind$?_aud_inb_@@YAEH@Z DD 010801H
	DD	02208H
$unwind$?hda_handler@@YAX_KPEAX@Z DD 010e01H
	DD	0420eH
$unwind$?setup_corb@@YAXXZ DD 010401H
	DD	08204H
$unwind$?setup_rirb@@YAXXZ DD 010401H
	DD	08204H
$unwind$?corb_write@@YAXI@Z DD 010801H
	DD	06208H
$unwind$?rirb_read@@YAXPEA_K@Z DD 010901H
	DD	06209H
$unwind$?codec_query@@YAIHHI@Z DD 011101H
	DD	08211H
$unwind$?init_output@@YAXXZ DD 010401H
	DD	08204H
$unwind$?hda_init_output_stream@@YAXXZ DD 010401H
	DD	0a204H
$unwind$?widget_init@@YAXHH@Z DD 010c01H
	DD	0e20cH
$unwind$?codec_enumerate_widgets@@YAHH@Z DD 010801H
	DD	0a208H
$unwind$?hda_reset@@YAXXZ DD 010401H
	DD	08204H
$unwind$?hda_output_start@@YAXXZ DD 010401H
	DD	06204H
$unwind$?hda_output_stop@@YAXXZ DD 010401H
	DD	06204H
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
value$ = 32
?hda_output_stop@@YAXXZ PROC				; hda_output_stop

; 556  : void hda_output_stop () {

$LN3:
	sub	rsp, 56					; 00000038H

; 557  : 	uint32_t value = _aud_inl_(REG_O0_CTLL(_ihd_audio));

	mov	ecx, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	call	?_aud_inl_@@YAIH@Z			; _aud_inl_
	mov	DWORD PTR value$[rsp], eax

; 558  : 	_aud_outw_ (REG_O0_CTLL(_ihd_audio),0);

	xor	edx, edx
	mov	ecx, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 559  : }

	add	rsp, 56					; 00000038H
	ret	0
?hda_output_stop@@YAXXZ ENDP				; hda_output_stop
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
value$ = 32
?hda_output_start@@YAXXZ PROC				; hda_output_start

; 549  : void hda_output_start () {

$LN3:
	sub	rsp, 56					; 00000038H

; 550  : 	uint32_t value = _aud_inl_(REG_O0_CTLL(_ihd_audio));

	mov	ecx, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	call	?_aud_inl_@@YAIH@Z			; _aud_inl_
	mov	DWORD PTR value$[rsp], eax

; 551  : 	value |= 0x2;

	mov	eax, DWORD PTR value$[rsp]
	or	eax, 2
	mov	DWORD PTR value$[rsp], eax

; 552  :     _aud_outw_(REG_O0_CTLL(_ihd_audio),value);

	movzx	edx, WORD PTR value$[rsp]
	mov	ecx, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 553  : }

	add	rsp, 56					; 00000038H
	ret	0
?hda_output_start@@YAXXZ ENDP				; hda_output_start
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
gctl$ = 32
i$1 = 36
j$2 = 40
i$3 = 44
i$4 = 48
count$ = 52
i$5 = 56
?hda_reset@@YAXXZ PROC					; hda_reset

; 490  : void hda_reset() {

$LN26:
	sub	rsp, 72					; 00000048H

; 491  : 	_aud_outb_(CORBCTL, 0);

	xor	edx, edx
	mov	ecx, 76					; 0000004cH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 492  : 	_aud_outb_(RIRBCTL, 0);

	xor	edx, edx
	mov	ecx, 92					; 0000005cH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 493  : 	//_aud_outw_(RIRBWP, 0);
; 494  : 
; 495  : 	_aud_outl_ (DPIBLBASE, 0x0);

	xor	edx, edx
	mov	ecx, 112				; 00000070H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 496  : 	_aud_outl_ (DPIBUBASE, 0x0);

	xor	edx, edx
	mov	ecx, 116				; 00000074H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 497  : 
; 498  : 	_aud_outl_(GCTL, 0);

	xor	edx, edx
	mov	ecx, 8
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 499  : 	uint32_t gctl;
; 500  : 	for(int i = 0; i < 1000; i++){

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN23@hda_reset
$LN22@hda_reset:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN23@hda_reset:
	cmp	DWORD PTR i$1[rsp], 1000		; 000003e8H
	jge	SHORT $LN21@hda_reset

; 501  : 		gctl = _aud_inl_(GCTL);

	mov	ecx, 8
	call	?_aud_inl_@@YAIH@Z			; _aud_inl_
	mov	DWORD PTR gctl$[rsp], eax

; 502  : 		if (!(gctl & 0x00000001))

	mov	eax, DWORD PTR gctl$[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN20@hda_reset

; 503  : 			break;

	jmp	SHORT $LN21@hda_reset
$LN20@hda_reset:

; 504  : 		for (int j = 0; j < 10; j++)

	mov	DWORD PTR j$2[rsp], 0
	jmp	SHORT $LN19@hda_reset
$LN18@hda_reset:
	mov	eax, DWORD PTR j$2[rsp]
	inc	eax
	mov	DWORD PTR j$2[rsp], eax
$LN19@hda_reset:
	cmp	DWORD PTR j$2[rsp], 10
	jge	SHORT $LN17@hda_reset

; 505  : 			;		

	jmp	SHORT $LN18@hda_reset
$LN17@hda_reset:

; 506  : 	}

	jmp	SHORT $LN22@hda_reset
$LN21@hda_reset:

; 507  : 
; 508  : 	if (gctl & 0x00000001) {

	mov	eax, DWORD PTR gctl$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN16@hda_reset

; 509  : 		printf ("Unable to put HD-Audio in reset mode\n");

	lea	rcx, OFFSET FLAT:$SG3634
	call	?printf@@YAXPEBDZZ			; printf

; 510  : 		return;

	jmp	$LN24@hda_reset
$LN16@hda_reset:

; 511  : 	}
; 512  : 
; 513  : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN15@hda_reset
$LN14@hda_reset:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN15@hda_reset:
	cmp	DWORD PTR i$3[rsp], 1000		; 000003e8H
	jge	SHORT $LN13@hda_reset

; 514  : 		;

	jmp	SHORT $LN14@hda_reset
$LN13@hda_reset:

; 515  : 
; 516  : 	gctl = _aud_inl_(GCTL);

	mov	ecx, 8
	call	?_aud_inl_@@YAIH@Z			; _aud_inl_
	mov	DWORD PTR gctl$[rsp], eax

; 517  : 	_aud_outl_ (GCTL, gctl | 0x00000001);

	mov	eax, DWORD PTR gctl$[rsp]
	or	eax, 1
	mov	edx, eax
	mov	ecx, 8
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 518  : 	
; 519  : 	int count = 10000;

	mov	DWORD PTR count$[rsp], 10000		; 00002710H
$LN12@hda_reset:

; 520  : 	do {
; 521  : 		gctl = _aud_inl_(GCTL);

	mov	ecx, 8
	call	?_aud_inl_@@YAIH@Z			; _aud_inl_
	mov	DWORD PTR gctl$[rsp], eax

; 522  : 		if (gctl & 0x00000001)

	mov	eax, DWORD PTR gctl$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN9@hda_reset

; 523  : 			break;

	jmp	SHORT $LN10@hda_reset
$LN9@hda_reset:

; 524  : 		for (int i = 0; i < 10; i++)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN8@hda_reset
$LN7@hda_reset:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN8@hda_reset:
	cmp	DWORD PTR i$4[rsp], 10
	jge	SHORT $LN6@hda_reset

; 525  : 			;

	jmp	SHORT $LN7@hda_reset
$LN6@hda_reset:

; 526  : 	}while (--count);

	mov	eax, DWORD PTR count$[rsp]
	dec	eax
	mov	DWORD PTR count$[rsp], eax
	cmp	DWORD PTR count$[rsp], 0
	jne	SHORT $LN12@hda_reset
$LN10@hda_reset:

; 527  : 
; 528  : 	if (!(gctl & 0x00000001)){

	mov	eax, DWORD PTR gctl$[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN5@hda_reset

; 529  : 		printf ("HD-Audio device stuck in reset\n");

	lea	rcx, OFFSET FLAT:$SG3649
	call	?printf@@YAXPEBDZZ			; printf

; 530  : 		return;

	jmp	SHORT $LN24@hda_reset
$LN5@hda_reset:

; 531  : 	}
; 532  : 
; 533  : 	
; 534  : 	if((_aud_inw_(ICIS) & 1)==0){

	mov	ecx, 104				; 00000068H
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	movzx	eax, ax
	and	eax, 1

; 535  : 		//printf ("ICIS ICB bit is clear\n");
; 536  : 	}
; 537  : 	
; 538  : 	_ihd_audio.immediate_use = false;

	mov	BYTE PTR ?_ihd_audio@@3U_hd_audio_@@A+32, 0

; 539  :     _aud_outw_(WAKEEN, 0x01);

	mov	dx, 1
	mov	ecx, 12
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 540  : 	for (int i = 0; i < 10000; i++)

	mov	DWORD PTR i$5[rsp], 0
	jmp	SHORT $LN3@hda_reset
$LN2@hda_reset:
	mov	eax, DWORD PTR i$5[rsp]
	inc	eax
	mov	DWORD PTR i$5[rsp], eax
$LN3@hda_reset:
	cmp	DWORD PTR i$5[rsp], 10000		; 00002710H
	jge	SHORT $LN1@hda_reset

; 541  : 		;

	jmp	SHORT $LN2@hda_reset
$LN1@hda_reset:

; 542  : 
; 543  : 	//! Setup CORB and RIRB
; 544  : 	setup_corb ();

	call	?setup_corb@@YAXXZ			; setup_corb

; 545  : 	setup_rirb ();

	call	?setup_rirb@@YAXXZ			; setup_rirb
$LN24@hda_reset:

; 546  : }

	add	rsp, 72					; 00000048H
	ret	0
?hda_reset@@YAXXZ ENDP					; hda_reset
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
param$ = 32
i$ = 36
fg_start$ = 40
j$1 = 44
rev_id$ = 48
widgets_start$ = 52
vendor_id$ = 56
tv156 = 60
num_fg$ = 64
num_widgets$ = 68
codec$ = 96
?codec_enumerate_widgets@@YAHH@Z PROC			; codec_enumerate_widgets

; 438  : static int codec_enumerate_widgets(int codec) {

	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 88					; 00000058H

; 439  : 
; 440  : 	uint32_t param;
; 441  : 	int num_fg, num_widgets;
; 442  : 	int fg_start, widgets_start;
; 443  : 	int i, j;
; 444  : 
; 445  : 
; 446  : 	param = codec_query (codec, 0, VERB_GET_PARAMETER | PARAM_NODE_COUNT);

	mov	r8d, 983044				; 000f0004H
	xor	edx, edx
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR param$[rsp], eax

; 447  : 
; 448  : 	num_fg = param & 0xff;

	mov	eax, DWORD PTR param$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR num_fg$[rsp], eax

; 449  : 	fg_start = (param >> 16) & 0xff;

	mov	eax, DWORD PTR param$[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	DWORD PTR fg_start$[rsp], eax

; 450  : 
; 451  : 
; 452  : 	printf ("[HD_Audio]: Num Function Group -> %d, fg_start -> %d\n", num_fg, fg_start);

	mov	r8d, DWORD PTR fg_start$[rsp]
	mov	edx, DWORD PTR num_fg$[rsp]
	lea	rcx, OFFSET FLAT:$SG3607
	call	?printf@@YAXPEBDZZ			; printf

; 453  : 
; 454  : 	uint32_t vendor_id = codec_query (codec, 0, VERB_GET_PARAMETER | PARAM_VENDOR_ID);

	mov	r8d, 983040				; 000f0000H
	xor	edx, edx
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR vendor_id$[rsp], eax

; 455  : 	printf ("[HD-Audio]:Widget device id -> %x, vendor id -> %x\n", vendor_id , (vendor_id >> 16 ));

	mov	eax, DWORD PTR vendor_id$[rsp]
	shr	eax, 16
	mov	r8d, eax
	mov	edx, DWORD PTR vendor_id$[rsp]
	lea	rcx, OFFSET FLAT:$SG3609
	call	?printf@@YAXPEBDZZ			; printf

; 456  : 	
; 457  : 	uint32_t rev_id = codec_query (codec, 0, VERB_GET_PARAMETER | PARAM_REV_ID);

	mov	r8d, 983042				; 000f0002H
	xor	edx, edx
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR rev_id$[rsp], eax

; 458  : 	printf ("[HD-Audio]:Widget version -> %d.%d, r0%d\n", rev_id>>20, rev_id>>16, rev_id>>8);

	mov	eax, DWORD PTR rev_id$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR rev_id$[rsp]
	shr	ecx, 16
	mov	edx, DWORD PTR rev_id$[rsp]
	shr	edx, 20
	mov	r9d, eax
	mov	r8d, ecx
	lea	rcx, OFFSET FLAT:$SG3611
	call	?printf@@YAXPEBDZZ			; printf

; 459  : 
; 460  : 	
; 461  : 	for (i = 0; i < num_fg; i++) {

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@codec_enum
$LN6@codec_enum:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@codec_enum:
	mov	eax, DWORD PTR num_fg$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN5@codec_enum

; 462  : 		param = codec_query (codec, fg_start + i, 
; 463  : 			VERB_GET_PARAMETER | PARAM_NODE_COUNT);

	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR fg_start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	r8d, 983044				; 000f0004H
	mov	edx, eax
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR param$[rsp], eax

; 464  : 
; 465  : 		num_widgets = param & 0xff;

	mov	eax, DWORD PTR param$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR num_widgets$[rsp], eax

; 466  : 		widgets_start = (param >> 16) & 0xff;

	mov	eax, DWORD PTR param$[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	DWORD PTR widgets_start$[rsp], eax

; 467  : 		printf ("Widget start -> %d\n", widgets_start);

	mov	edx, DWORD PTR widgets_start$[rsp]
	lea	rcx, OFFSET FLAT:$SG3615
	call	?printf@@YAXPEBDZZ			; printf

; 468  : 
; 469  : 		param = codec_query (codec, fg_start + i, VERB_GET_PARAMETER | PARAM_FN_GROUP_TYPE);

	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR fg_start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	r8d, 983045				; 000f0005H
	mov	edx, eax
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR param$[rsp], eax

; 470  : 		param &= 0x7f;

	mov	eax, DWORD PTR param$[rsp]
	and	eax, 127				; 0000007fH
	mov	DWORD PTR param$[rsp], eax

; 471  : 		if (param != FN_GROUP_AUDIO) 

	cmp	DWORD PTR param$[rsp], 1
	je	SHORT $LN4@codec_enum

; 472  : 			continue;

	jmp	$LN6@codec_enum
$LN4@codec_enum:

; 473  : 
; 474  : 		codec_query (codec, fg_start + i, VERB_SET_POWER_STATE | 0x0);

	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR fg_start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	r8d, 460032				; 00070500H
	mov	edx, eax
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query

; 475  : 
; 476  : 		for (int j = 0; j < num_widgets; j++) {

	mov	DWORD PTR j$1[rsp], 0
	jmp	SHORT $LN3@codec_enum
$LN2@codec_enum:
	mov	eax, DWORD PTR j$1[rsp]
	inc	eax
	mov	DWORD PTR j$1[rsp], eax
$LN3@codec_enum:
	mov	eax, DWORD PTR num_widgets$[rsp]
	cmp	DWORD PTR j$1[rsp], eax
	jge	SHORT $LN1@codec_enum

; 477  : 			widget_init (codec, widgets_start + j);

	mov	eax, DWORD PTR j$1[rsp]
	mov	ecx, DWORD PTR widgets_start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	ecx, DWORD PTR codec$[rsp]
	call	?widget_init@@YAXHH@Z			; widget_init

; 478  : 		}

	jmp	SHORT $LN2@codec_enum
$LN1@codec_enum:

; 479  : 		
; 480  : 	}

	jmp	$LN6@codec_enum
$LN5@codec_enum:

; 481  : 
; 482  : 
; 483  : 	return _ihd_audio.output->nid ? 0 : -1;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, WORD PTR [rax+2]
	test	eax, eax
	je	SHORT $LN10@codec_enum
	mov	DWORD PTR tv156[rsp], 0
	jmp	SHORT $LN11@codec_enum
$LN10@codec_enum:
	mov	DWORD PTR tv156[rsp], -1
$LN11@codec_enum:
	mov	eax, DWORD PTR tv156[rsp]

; 484  : }

	add	rsp, 88					; 00000058H
	ret	0
?codec_enumerate_widgets@@YAHH@Z ENDP			; codec_enumerate_widgets
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
i$1 = 32
j$2 = 36
ctl$3 = 40
s$ = 48
eapd_btl$ = 56
tv89 = 60
type$ = 64
con_list_len$4 = 68
node_id$5 = 72
tv79 = 76
widget_cap$ = 80
value$6 = 84
pin_cap$7 = 88
value$8 = 92
amp_cap$ = 96
amp_gain$ = 100
codec$ = 128
nid$ = 136
?widget_init@@YAXHH@Z PROC				; widget_init

; 342  : void widget_init (int codec, int nid) {

$LN32:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 120				; 00000078H

; 343  : 
; 344  : 	uint32_t widget_cap;
; 345  : 	uint32_t type;
; 346  : 	uint32_t amp_cap;
; 347  : 	uint32_t eapd_btl;
; 348  : 
; 349  : 	//! send a command for audio widget capabilites
; 350  : 	widget_cap = codec_query (codec, nid, VERB_GET_PARAMETER | PARAM_AUDIO_WID_CAP);

	mov	r8d, 983049				; 000f0009H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR widget_cap$[rsp], eax

; 351  : 	if (widget_cap == 0) {

	cmp	DWORD PTR widget_cap$[rsp], 0
	jne	SHORT $LN28@widget_ini

; 352  : 		//! serious problem occured
; 353  : 		return;

	jmp	$LN29@widget_ini
$LN28@widget_ini:

; 354  : 	}
; 355  : 
; 356  : 	type = (widget_cap & WIDGET_CAP_TYPE_MASK) >> WIDGET_CAP_TYPE_SHIFT;

	mov	eax, DWORD PTR widget_cap$[rsp]
	and	eax, 15728640				; 00f00000H
	shr	eax, 20
	mov	DWORD PTR type$[rsp], eax

; 357  : 	amp_cap = codec_query (codec, nid, VERB_GET_PARAMETER | PARAM_OUT_AMP_CAP);

	mov	r8d, 983058				; 000f0012H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR amp_cap$[rsp], eax

; 358  : 	eapd_btl = codec_query (codec, nid, VERB_GET_EAPD_BTL);

	mov	r8d, 986112				; 000f0c00H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR eapd_btl$[rsp], eax

; 359  : 
; 360  : 
; 361  : 
; 362  : 	uint32_t amp_gain;
; 363  : 	const char* s;
; 364  : 
; 365  : 	switch(type) {

	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv79[rsp], eax
	cmp	DWORD PTR tv79[rsp], 16
	ja	$LN16@widget_ini
	mov	eax, DWORD PTR tv79[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN31@widget_ini[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN25@widget_ini:

; 366  : 	case 0:  s = "output"; break;

	lea	rax, OFFSET FLAT:$SG3552
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN26@widget_ini
$LN24@widget_ini:

; 367  : 	case 1:  s = "input"; break;

	lea	rax, OFFSET FLAT:$SG3554
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN26@widget_ini
$LN23@widget_ini:

; 368  : 	case 2:  s = "mixer"; break;

	lea	rax, OFFSET FLAT:$SG3556
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN26@widget_ini
$LN22@widget_ini:

; 369  : 	case 3:  s = "selector"; break;

	lea	rax, OFFSET FLAT:$SG3558
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN26@widget_ini
$LN21@widget_ini:

; 370  : 	case 4:  s = "pin complex"; break;

	lea	rax, OFFSET FLAT:$SG3560
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN26@widget_ini
$LN20@widget_ini:

; 371  : 	case 5:  s = "power"; break;

	lea	rax, OFFSET FLAT:$SG3562
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN26@widget_ini
$LN19@widget_ini:

; 372  : 	case 6:  s = "volume knob"; break;

	lea	rax, OFFSET FLAT:$SG3564
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN26@widget_ini
$LN18@widget_ini:

; 373  : 	case 7:  s = "beep generator"; break;

	lea	rax, OFFSET FLAT:$SG3566
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN26@widget_ini
$LN17@widget_ini:

; 374  : 	case 16: s = "vendor defined"; break;

	lea	rax, OFFSET FLAT:$SG3568
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN26@widget_ini
$LN16@widget_ini:

; 375  : 	default: s = "unknown"; break;

	lea	rax, OFFSET FLAT:$SG3570
	mov	QWORD PTR s$[rsp], rax
$LN26@widget_ini:

; 376  : 
; 377  : 	}
; 378  : 
; 379  : 	amp_gain = codec_query(codec, nid, PARAM_OUT_AMP_CAP);

	mov	r8d, 18
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR amp_gain$[rsp], eax

; 380  : 	eapd_btl = codec_query (codec, nid, VERB_GET_EAPD_BTL);	

	mov	r8d, 986112				; 000f0c00H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR eapd_btl$[rsp], eax

; 381  : 	
; 382  : 	switch (type) {

	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv89[rsp], eax
	cmp	DWORD PTR tv89[rsp], 0
	je	$LN4@widget_ini
	cmp	DWORD PTR tv89[rsp], 4
	je	SHORT $LN13@widget_ini
	cmp	DWORD PTR tv89[rsp], 6
	je	$LN2@widget_ini
	jmp	$LN1@widget_ini
$LN13@widget_ini:

; 383  : 	case WIDGET_PIN:
; 384  : 		{
; 385  : 			uint32_t pin_cap, ctl;
; 386  : 			pin_cap = codec_query(codec,nid,VERB_GET_PARAMETER | PARAM_PIN_CAP);

	mov	r8d, 983052				; 000f000cH
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR pin_cap$7[rsp], eax

; 387  : 			if ((pin_cap & PIN_CAP_OUTPUT) == 0) {

	mov	eax, DWORD PTR pin_cap$7[rsp]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN12@widget_ini

; 388  : 				return;

	jmp	$LN29@widget_ini
$LN12@widget_ini:

; 389  : 			}
; 390  : 
; 391  : 
; 392  : 			uint32_t value = codec_query (codec, nid, VERB_GET_PARAMETER | PARAM_CONN_LIST_LEN);

	mov	r8d, 983054				; 000f000eH
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR value$6[rsp], eax

; 393  : 			int con_list_len = value & 0x07;

	mov	eax, DWORD PTR value$6[rsp]
	and	eax, 7
	mov	DWORD PTR con_list_len$4[rsp], eax

; 394  : 			for (uint8_t i = 0; i * 4 < con_list_len; i++) {

	mov	BYTE PTR i$1[rsp], 0
	jmp	SHORT $LN11@widget_ini
$LN10@widget_ini:
	movzx	eax, BYTE PTR i$1[rsp]
	inc	al
	mov	BYTE PTR i$1[rsp], al
$LN11@widget_ini:
	movzx	eax, BYTE PTR i$1[rsp]
	shl	eax, 2
	cmp	eax, DWORD PTR con_list_len$4[rsp]
	jge	$LN9@widget_ini

; 395  : 				uint32_t value = codec_query (codec, nid, VERB_GET_CONN_LIST | i);

	movzx	eax, BYTE PTR i$1[rsp]
	or	eax, 983552				; 000f0200H
	mov	r8d, eax
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR value$8[rsp], eax

; 396  : 				for (int j = 0; i + j < con_list_len && j < 4; j++) {

	mov	DWORD PTR j$2[rsp], 0
	jmp	SHORT $LN8@widget_ini
$LN7@widget_ini:
	mov	eax, DWORD PTR j$2[rsp]
	inc	eax
	mov	DWORD PTR j$2[rsp], eax
$LN8@widget_ini:
	movzx	eax, BYTE PTR i$1[rsp]
	add	eax, DWORD PTR j$2[rsp]
	cmp	eax, DWORD PTR con_list_len$4[rsp]
	jge	SHORT $LN6@widget_ini
	cmp	DWORD PTR j$2[rsp], 4
	jge	SHORT $LN6@widget_ini

; 397  : 					int node_id = (value >> (8 * j)) & 0xff;

	mov	eax, DWORD PTR j$2[rsp]
	shl	eax, 3
	movzx	ecx, al
	mov	eax, DWORD PTR value$8[rsp]
	shr	eax, cl
	and	eax, 255				; 000000ffH
	mov	DWORD PTR node_id$5[rsp], eax

; 398  : 					printf ("Output Node -> %d\n", node_id);

	mov	edx, DWORD PTR node_id$5[rsp]
	lea	rcx, OFFSET FLAT:$SG3591
	call	?printf@@YAXPEBDZZ			; printf

; 399  : 					if (node_id > 0) {

	cmp	DWORD PTR node_id$5[rsp], 0
	jle	SHORT $LN5@widget_ini

; 400  : 						/*if (_ihd_audio.output->nid == 0) {
; 401  : 							_ihd_audio.output->codec = codec;
; 402  : 							_ihd_audio.output->nid = node_id;
; 403  : 						
; 404  : 						}	*/
; 405  : 						break;

	jmp	SHORT $LN6@widget_ini
$LN5@widget_ini:

; 406  : 					}
; 407  : 				}

	jmp	SHORT $LN7@widget_ini
$LN6@widget_ini:

; 408  : 			}

	jmp	$LN10@widget_ini
$LN9@widget_ini:

; 409  : 			ctl = codec_query(codec, nid, VERB_GET_PIN_CONTROL);

	mov	r8d, 984832				; 000f0700H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR ctl$3[rsp], eax

; 410  : 			ctl |= (1<<6);

	mov	eax, DWORD PTR ctl$3[rsp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR ctl$3[rsp], eax

; 411  : 			ctl |= (1<<7);

	mov	eax, DWORD PTR ctl$3[rsp]
	bts	eax, 7
	mov	DWORD PTR ctl$3[rsp], eax

; 412  : 			codec_query (codec, nid, VERB_SET_PIN_CONTROL | 0xC0);

	mov	r8d, 460736				; 000707c0H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query

; 413  : 			codec_query (codec, nid, VERB_SET_EAPD_BTL | eapd_btl | 0x2);

	mov	eax, DWORD PTR eapd_btl$[rsp]
	or	eax, 461824				; 00070c00H
	or	eax, 2
	mov	r8d, eax
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query

; 414  : 			break;

	jmp	$LN14@widget_ini
$LN4@widget_ini:

; 415  : 		}
; 416  : 	case WIDGET_OUTPUT:
; 417  : 		if (!_ihd_audio.output->nid) {

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, WORD PTR [rax+2]
	test	eax, eax
	jne	SHORT $LN3@widget_ini

; 418  : 			_ihd_audio.output->codec = codec;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR codec$[rsp]
	mov	BYTE PTR [rax], cl

; 419  : 			_ihd_audio.output->nid = nid;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, WORD PTR nid$[rsp]
	mov	WORD PTR [rax+2], cx
$LN3@widget_ini:

; 420  : 		}
; 421  : 		codec_query (codec, nid, VERB_SET_EAPD_BTL | eapd_btl | 0x2);

	mov	eax, DWORD PTR eapd_btl$[rsp]
	or	eax, 461824				; 00070c00H
	or	eax, 2
	mov	r8d, eax
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query

; 422  : 		break;

	jmp	SHORT $LN14@widget_ini
$LN2@widget_ini:

; 423  : 
; 424  : 	case WIDGET_VOLUME_KNOB :
; 425  : 		_ihd_audio.vol->codec = codec;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+41
	movzx	ecx, BYTE PTR codec$[rsp]
	mov	BYTE PTR [rax], cl

; 426  : 		_ihd_audio.vol->nid = nid;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+41
	movzx	ecx, WORD PTR nid$[rsp]
	mov	WORD PTR [rax+2], cx

; 427  : 		codec_query (codec, nid, VERB_SET_POWER_STATE | 0x0000);

	mov	r8d, 460032				; 00070500H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
$LN1@widget_ini:
$LN14@widget_ini:
$LN29@widget_ini:

; 428  : 		break;
; 429  : 
; 430  : 	default:
; 431  : 		return;
; 432  : 
; 433  : 	}
; 434  : }

	add	rsp, 120				; 00000078H
	ret	0
$LN31@widget_ini:
	DD	$LN25@widget_ini
	DD	$LN24@widget_ini
	DD	$LN23@widget_ini
	DD	$LN22@widget_ini
	DD	$LN21@widget_ini
	DD	$LN20@widget_ini
	DD	$LN19@widget_ini
	DD	$LN18@widget_ini
	DD	$LN16@widget_ini
	DD	$LN16@widget_ini
	DD	$LN16@widget_ini
	DD	$LN16@widget_ini
	DD	$LN16@widget_ini
	DD	$LN16@widget_ini
	DD	$LN16@widget_ini
	DD	$LN16@widget_ini
	DD	$LN17@widget_ini
?widget_init@@YAXHH@Z ENDP				; widget_init
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
format$ = 32
i$1 = 36
i$2 = 40
i$3 = 44
bdl$ = 48
bdl_base$ = 56
dma_pos$ = 64
?hda_init_output_stream@@YAXXZ PROC			; hda_init_output_stream

; 301  : void hda_init_output_stream () {

$LN12:
	sub	rsp, 88					; 00000058H

; 302  : 	_aud_outl_ (REG_O0_CTLL(_ihd_audio), 1); //clear the run bit

	mov	edx, 1
	mov	ecx, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 303  : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN9@hda_init_o
$LN8@hda_init_o:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN9@hda_init_o:
	cmp	DWORD PTR i$3[rsp], 1000		; 000003e8H
	jge	SHORT $LN7@hda_init_o

; 304  : 		;

	jmp	SHORT $LN8@hda_init_o
$LN7@hda_init_o:

; 305  : 
; 306  : 	_aud_outl_ (REG_O0_CTLL(_ihd_audio), 0);

	xor	edx, edx
	mov	ecx, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 307  : 	uint64_t bdl_base = (uint64_t)(_ihd_audio.corb + 3072);  //pmmngr_alloc();   //get_physical_address  ((uint64_t) 0x0000000000000000);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+8
	add	rax, 12288				; 00003000H
	mov	QWORD PTR bdl_base$[rsp], rax

; 308  : 	ihda_bdl_entry *bdl = (ihda_bdl_entry*)bdl_base;  //(_ihd_audio.corb + 3072);

	mov	rax, QWORD PTR bdl_base$[rsp]
	mov	QWORD PTR bdl$[rsp], rax

; 309  : 	for (int i = 0; i < 4; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN6@hda_init_o
$LN5@hda_init_o:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN6@hda_init_o:
	cmp	DWORD PTR i$1[rsp], 4
	jge	SHORT $LN4@hda_init_o

; 310  : 		bdl[i].paddr = (uint64_t)get_physical_address((uint64_t)_ihd_audio.buffer + i * 0x10000);

	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, 65536				; 00010000H
	cdqe
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+61
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?get_physical_address@@YAPEA_K_K@Z	; get_physical_address
	movsxd	rcx, DWORD PTR i$1[rsp]
	imul	rcx, 16
	mov	rdx, QWORD PTR bdl$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 311  : 		bdl[i].length = 0x10000;

	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, 16
	mov	rcx, QWORD PTR bdl$[rsp]
	mov	DWORD PTR [rcx+rax+8], 65536		; 00010000H

; 312  : 		bdl[i].flags = 1;

	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, 16
	mov	rcx, QWORD PTR bdl$[rsp]
	mov	DWORD PTR [rcx+rax+12], 1

; 313  : 	}

	jmp	SHORT $LN5@hda_init_o
$LN4@hda_init_o:

; 314  : 
; 315  : 	_aud_outl_ (REG_O0_CTLU(_ihd_audio),0x10); 

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	add	eax, 2
	mov	edx, 16
	mov	ecx, eax
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 316  : 	//_aud_outl_ (REG_O0_CTLL(_ihd_audio), (0<<20)); 0x10
; 317  : 	_aud_outl_ (REG_O0_CBL(_ihd_audio), 4*0x10000);

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	add	eax, 8
	mov	edx, 262144				; 00040000H
	mov	ecx, eax
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 318  : 	_aud_outw_(REG_O0_STLVI(_ihd_audio), 4-1);

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	add	eax, 12
	mov	dx, 3
	mov	ecx, eax
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 319  : 
; 320  : 	_aud_outl_ (REG_O0_BDLPL(_ihd_audio), bdl_base);

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	add	eax, 24
	mov	edx, DWORD PTR bdl_base$[rsp]
	mov	ecx, eax
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 321  : 	_aud_outl_ (REG_O0_BDLPU(_ihd_audio), bdl_base >> 32);

	mov	rax, QWORD PTR bdl_base$[rsp]
	shr	rax, 32					; 00000020H
	mov	ecx, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	add	ecx, 28
	mov	edx, eax
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 322  : 
; 323  : 	uint16_t format = (0<<14)  | (1<<4) | 1;  // (0<<14) | (0<<11) | (0<<8) | (1<<4) | 1;

	mov	eax, 17
	mov	WORD PTR format$[rsp], ax

; 324  : 	_aud_outw_ (REG_O0_FMT(_ihd_audio), format);

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	add	eax, 18
	movzx	edx, WORD PTR format$[rsp]
	mov	ecx, eax
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 325  : 
; 326  : 	//_aud_outb_(REG_O0_STS(_ihd_audio), (1<<2) | (1<<3) | (1<<4));
; 327  : 
; 328  : 	uint64_t* dma_pos = (uint64_t*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR dma_pos$[rsp], rax

; 329  : 	for (int i = 0; i < 8; i++) {

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN3@hda_init_o
$LN2@hda_init_o:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN3@hda_init_o:
	cmp	DWORD PTR i$2[rsp], 8
	jge	SHORT $LN1@hda_init_o

; 330  : 		dma_pos[i] = 0;

	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR dma_pos$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0

; 331  : 	}

	jmp	SHORT $LN2@hda_init_o
$LN1@hda_init_o:

; 332  : 
; 333  : 	_aud_outl_ (DPIBLBASE, (uint32_t)dma_pos | 0x1);

	mov	eax, DWORD PTR dma_pos$[rsp]
	or	eax, 1
	mov	edx, eax
	mov	ecx, 112				; 00000070H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 334  : 	_aud_outl_ (DPIBUBASE, (uint32_t)dma_pos >> 32);

	mov	eax, DWORD PTR dma_pos$[rsp]
	shr	eax, 32					; 00000020H
	mov	edx, eax
	mov	ecx, 116				; 00000074H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 335  : }

	add	rsp, 88					; 00000058H
	ret	0
?hda_init_output_stream@@YAXXZ ENDP			; hda_init_output_stream
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
format$ = 32
ctl$ = 36
tv79 = 40
eapd_btl$ = 44
tv137 = 48
?init_output@@YAXXZ PROC				; init_output

; 271  : void init_output () {

$LN3:
	sub	rsp, 72					; 00000048H

; 272  : 	printf ("Initializing Output Codec -> %d, Node -> %d\n", _ihd_audio.output->codec, _ihd_audio.output->nid);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:$SG3507
	call	?printf@@YAXPEBDZZ			; printf

; 273  : 
; 274  : 
; 275  : 	uint16_t format =   (0<<14)  | (1<<4) | 1;

	mov	eax, 17
	mov	WORD PTR format$[rsp], ax

; 276  : 	codec_query (_ihd_audio.output->codec, _ihd_audio.output->nid, VERB_SET_FORMAT | format);

	movzx	eax, WORD PTR format$[rsp]
	bts	eax, 17
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, WORD PTR [rcx+2]
	mov	rdx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	edx, BYTE PTR [rdx]
	mov	DWORD PTR tv79[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv79[rsp]
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 277  : 	codec_query (_ihd_audio.output->codec, _ihd_audio.output->nid, VERB_SET_STREAM_CHANNEL |  0x10);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, 460304				; 00070610H
	mov	edx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 278  : 
; 279  : 
; 280  : 	_ihd_audio.output->sample_rate = SR_48_KHZ;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	mov	DWORD PTR [rax+4], 0

; 281  : 	_ihd_audio.output->num_channels = 2;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	mov	DWORD PTR [rax+12], 2

; 282  : 
; 283  : 
; 284  : 	uint32_t eapd_btl = codec_query (_ihd_audio.output->codec, _ihd_audio.output->nid, VERB_GET_EAPD_BTL);	

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, 986112				; 000f0c00H
	mov	edx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR eapd_btl$[rsp], eax

; 285  : 	codec_query (_ihd_audio.output->codec, _ihd_audio.output->nid,VERB_SET_EAPD_BTL | eapd_btl | 0x2);

	mov	eax, DWORD PTR eapd_btl$[rsp]
	or	eax, 461824				; 00070c00H
	or	eax, 2
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, WORD PTR [rcx+2]
	mov	rdx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	edx, BYTE PTR [rdx]
	mov	DWORD PTR tv137[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv137[rsp]
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 286  : 
; 287  : 	//!Set Pin control : enable the output bit
; 288  : 	uint32_t ctl = codec_query(_ihd_audio.output->codec, _ihd_audio.output->nid, VERB_GET_PIN_CONTROL);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, 984832				; 000f0700H
	mov	edx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR ctl$[rsp], eax

; 289  : 	ctl |= (1<<6);

	mov	eax, DWORD PTR ctl$[rsp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR ctl$[rsp], eax

; 290  : 	ctl |= (1<<7);

	mov	eax, DWORD PTR ctl$[rsp]
	bts	eax, 7
	mov	DWORD PTR ctl$[rsp], eax

; 291  : 
; 292  : 	codec_query (_ihd_audio.output->codec, _ihd_audio.output->nid, VERB_SET_PIN_CONTROL | 0xC0);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, 460736				; 000707c0H
	mov	edx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 293  : 
; 294  : 	codec_query(_ihd_audio.output->codec, _ihd_audio.output->nid, VERB_SET_POWER_STATE | 0x0000);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, 460032				; 00070500H
	mov	edx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 295  : 	//_aud_outl_(SSYNC,1);
; 296  : 
; 297  : }

	add	rsp, 72					; 00000048H
	ret	0
?init_output@@YAXXZ ENDP				; init_output
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
rirb_status$ = 32
verb$ = 36
icount$ = 40
response$ = 48
codec$ = 80
nid$ = 88
payload$ = 96
?codec_query@@YAIHHI@Z PROC				; codec_query

; 232  : static uint32_t codec_query (int codec, int nid, uint32_t payload) {

	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H

; 233  : 	uint64_t response;// = (uint32_t)pmmngr_alloc();
; 234  : 	uint32_t icount = 10000;

	mov	DWORD PTR icount$[rsp], 10000		; 00002710H

; 235  : 	uint32_t verb = ((codec & 0xf) << 28) | 
; 236  : 		((nid & 0xff) << 20) | 
; 237  : 		(payload & 0xfffff);

	mov	eax, DWORD PTR codec$[rsp]
	and	eax, 15
	shl	eax, 28
	mov	ecx, DWORD PTR nid$[rsp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 20
	or	eax, ecx
	mov	ecx, DWORD PTR payload$[rsp]
	and	ecx, 1048575				; 000fffffH
	or	eax, ecx
	mov	DWORD PTR verb$[rsp], eax

; 238  : 
; 239  : 	//printf ("RIRB Status -> %d\n", (_aud_inl_(RIRBSTS >> 0)) & 0xff);
; 240  : 	corb_write(verb);

	mov	ecx, DWORD PTR verb$[rsp]
	call	?corb_write@@YAXI@Z			; corb_write
$LN3@codec_quer:

; 241  : 	uint8_t rirb_status;
; 242  : 	do {
; 243  : 		rirb_status = _aud_inb_(RIRBSTS);

	mov	ecx, 93					; 0000005dH
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	mov	BYTE PTR rirb_status$[rsp], al

; 244  : 	}while ((rirb_status & 1) == 0);

	movzx	eax, BYTE PTR rirb_status$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@codec_quer

; 245  : 
; 246  : 
; 247  : 	rirb_read(&response);

	lea	rcx, QWORD PTR response$[rsp]
	call	?rirb_read@@YAXPEA_K@Z			; rirb_read

; 248  : 	//_aud_outb_(RIRBSTS, 0);
; 249  : 	return response & 0xffffffff;

	mov	eax, -1					; ffffffffH
	mov	rcx, QWORD PTR response$[rsp]
	and	rcx, rax
	mov	rax, rcx

; 250  : }

	add	rsp, 72					; 00000048H
	ret	0
?codec_query@@YAIHHI@Z ENDP				; codec_query
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
rp$ = 32
wp$ = 36
old_rp$ = 40
response$ = 64
?rirb_read@@YAXPEA_K@Z PROC				; rirb_read

; 203  : static void rirb_read (uint64_t *response) {

	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 204  : 	uint16_t wp = _aud_inb_ (RIRBWP);

	mov	ecx, 88					; 00000058H
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	movzx	eax, al
	mov	WORD PTR wp$[rsp], ax

; 205  : 	uint16_t rp = rirbrp;

	movzx	eax, WORD PTR ?rirbrp@@3GA		; rirbrp
	mov	WORD PTR rp$[rsp], ax

; 206  : 	uint16_t old_rp = rp;

	movzx	eax, WORD PTR rp$[rsp]
	mov	WORD PTR old_rp$[rsp], ax
$LN2@rirb_read:

; 207  : 
; 208  : 
; 209  : 	/*Wait for an unread entry in the RIRB */
; 210  : 	while (rirbrp == wp) {

	movzx	eax, WORD PTR ?rirbrp@@3GA		; rirbrp
	movzx	ecx, WORD PTR wp$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN1@rirb_read

; 211  : 		wp = _aud_inw_(RIRBWP);  //_aud_inb_(RIRBWP);

	mov	ecx, 88					; 00000058H
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	mov	WORD PTR wp$[rsp], ax

; 212  : 	}

	jmp	SHORT $LN2@rirb_read
$LN1@rirb_read:

; 213  : 
; 214  : 	/*while (rp != wp) {	
; 215  : 		rp++;
; 216  : 		rp %= _ihd_audio.rirb_entries;
; 217  : 		rirbrp = rp;
; 218  : 		*response = _ihd_audio.rirb[rirbrp];
; 219  : 	}*/
; 220  : 
; 221  : 	rp = (rp + 1) % _ihd_audio.rirb_entries;

	movzx	eax, WORD PTR rp$[rsp]
	inc	eax
	xor	edx, edx
	div	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24
	mov	eax, edx
	mov	WORD PTR rp$[rsp], ax

; 222  : 	rirbrp = rp;

	movzx	eax, WORD PTR rp$[rsp]
	mov	WORD PTR ?rirbrp@@3GA, ax		; rirbrp

; 223  : 	*response = _ihd_audio.rirb[rp];

	movzx	eax, WORD PTR rp$[rsp]
	mov	rcx, QWORD PTR response$[rsp]
	mov	rdx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+16
	mov	rax, QWORD PTR [rdx+rax*8]
	mov	QWORD PTR [rcx], rax

; 224  : 	_aud_outb_ (RIRBSTS, 0x5);

	mov	dl, 5
	mov	ecx, 93					; 0000005dH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 225  : 	return;
; 226  : }

	add	rsp, 56					; 00000038H
	ret	0
?rirb_read@@YAXPEA_K@Z ENDP				; rirb_read
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
rp$ = 32
wp$ = 36
verb$ = 64
?corb_write@@YAXI@Z PROC				; corb_write

; 169  : static void corb_write (uint32_t verb) {

	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H

; 170  : 
; 171  : 	//! Check for immediate use
; 172  : 	if (_ihd_audio.immediate_use) {

	movzx	eax, BYTE PTR ?_ihd_audio@@3U_hd_audio_@@A+32
	test	eax, eax
	je	SHORT $LN4@corb_write

; 173  : 		_aud_outl_(ICOI,verb);

	mov	edx, DWORD PTR verb$[rsp]
	mov	ecx, 96					; 00000060H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 174  : 		_aud_outl_(ICIS,1);

	mov	edx, 1
	mov	ecx, 104				; 00000068H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 175  : 		return;

	jmp	$LN5@corb_write
$LN4@corb_write:

; 176  : 	}
; 177  : 
; 178  : 	//! else use standard command transmitting method
; 179  : 	uint16_t wp = _aud_inw_(CORBWP) & 0xff;

	mov	ecx, 72					; 00000048H
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	movzx	eax, ax
	and	eax, 255				; 000000ffH
	mov	WORD PTR wp$[rsp], ax

; 180  : 	uint16_t rp = _aud_inw_(CORBRP) & 0xff;

	mov	ecx, 74					; 0000004aH
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	movzx	eax, ax
	and	eax, 255				; 000000ffH
	mov	WORD PTR rp$[rsp], ax

; 181  :     corbwp = 0;

	xor	eax, eax
	mov	WORD PTR ?corbwp@@3GA, ax		; corbwp

; 182  : 	corbwp = (rp + 1);

	movzx	eax, WORD PTR rp$[rsp]
	inc	eax
	mov	WORD PTR ?corbwp@@3GA, ax		; corbwp

; 183  : 	corbwp %= _ihd_audio.corb_entries;

	movzx	eax, WORD PTR ?corbwp@@3GA		; corbwp
	xor	edx, edx
	div	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28
	mov	eax, edx
	mov	WORD PTR ?corbwp@@3GA, ax		; corbwp
$LN3@corb_write:

; 184  : 	
; 185  : 	/*Wait until there's a free entry in the CORB */
; 186  : 	do {
; 187  : 		rp = _aud_inw_(CORBRP) & 0xff;

	mov	ecx, 74					; 0000004aH
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	movzx	eax, ax
	and	eax, 255				; 000000ffH
	mov	WORD PTR rp$[rsp], ax

; 188  : 	}while (rp == corbwp);

	movzx	eax, WORD PTR rp$[rsp]
	movzx	ecx, WORD PTR ?corbwp@@3GA		; corbwp
	cmp	eax, ecx
	je	SHORT $LN3@corb_write

; 189  : 
; 190  : 	
; 191  : 	/* Write to CORB */	
; 192  : 	_ihd_audio.corb[corbwp] = verb;	

	movzx	eax, WORD PTR ?corbwp@@3GA		; corbwp
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+8
	mov	edx, DWORD PTR verb$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx

; 193  :     _aud_outw_(CORBWP, corbwp);

	movzx	edx, WORD PTR ?corbwp@@3GA		; corbwp
	mov	ecx, 72					; 00000048H
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_
$LN5@corb_write:

; 194  : 
; 195  : }

	add	rsp, 56					; 00000038H
	ret	0
?corb_write@@YAXI@Z ENDP				; corb_write
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
reg$ = 32
rirbctl$ = 36
rirb_entries$ = 40
rirb_base$ = 48
?setup_rirb@@YAXXZ PROC					; setup_rirb

; 119  : void setup_rirb() {

$LN9:
	sub	rsp, 72					; 00000048H

; 120  : 
; 121  : 	uint8_t reg;
; 122  : 	uint64_t rirb_base;
; 123  : 	uint32_t rirb_entries = 0;

	mov	DWORD PTR rirb_entries$[rsp], 0

; 124  : 
; 125  : 	
; 126  : 	//_aud_outw_(RIRBCTL, 0);
; 127  : 
; 128  : 	reg = _aud_inb_ (RIRBSIZE);

	mov	ecx, 94					; 0000005eH
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	mov	BYTE PTR reg$[rsp], al

; 129  : 	/* Check RIRB size capabilities and choose the largest size */
; 130  : 	if (reg & (1 << 6)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN6@setup_rirb

; 131  : 		_ihd_audio.rirb_entries = 256;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24, 256 ; 00000100H

; 132  : 		reg |= 0x2;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 2
	mov	BYTE PTR reg$[rsp], al
	jmp	SHORT $LN5@setup_rirb
$LN6@setup_rirb:

; 133  : 	} else if (reg & (1 << 5)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN4@setup_rirb

; 134  : 		_ihd_audio.rirb_entries = 16;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24, 16

; 135  : 		reg |= 0x1;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 1
	mov	BYTE PTR reg$[rsp], al
	jmp	SHORT $LN3@setup_rirb
$LN4@setup_rirb:

; 136  : 	}else if (reg & (1 << 4)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN2@setup_rirb

; 137  : 		_ihd_audio.rirb_entries = 2;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24, 2

; 138  : 		reg |= 0x0;

	movzx	eax, BYTE PTR reg$[rsp]
	mov	BYTE PTR reg$[rsp], al

; 139  : 	}else {

	jmp	SHORT $LN1@setup_rirb
$LN2@setup_rirb:

; 140  : 		printf ("HD Audio: No supported RIRB size !!\n");

	lea	rcx, OFFSET FLAT:$SG3464
	call	?printf@@YAXPEBDZZ			; printf

; 141  : 		_ihd_audio.rirb_entries = 256;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24, 256 ; 00000100H

; 142  : 		reg |= 0x2;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 2
	mov	BYTE PTR reg$[rsp], al
$LN1@setup_rirb:
$LN3@setup_rirb:
$LN5@setup_rirb:

; 143  : 	}
; 144  : 
; 145  : 	_aud_outb_(RIRBSIZE,reg);

	movzx	edx, BYTE PTR reg$[rsp]
	mov	ecx, 94					; 0000005eH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 146  : 
; 147  : 	/* Set RIRB Base address */
; 148  : 	rirb_base = (uint64_t)_ihd_audio.rirb;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+16
	mov	QWORD PTR rirb_base$[rsp], rax

; 149  : 	_aud_outl_(RIRBLBASE, rirb_base);

	mov	edx, DWORD PTR rirb_base$[rsp]
	mov	ecx, 80					; 00000050H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 150  : 	_aud_outl_(RIRBUBASE, rirb_base >> 32);

	mov	rax, QWORD PTR rirb_base$[rsp]
	shr	rax, 32					; 00000020H
	mov	edx, eax
	mov	ecx, 84					; 00000054H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 151  : 
; 152  : 	_aud_outw_ (RIRBWP, 0x8000);

	mov	dx, 32768				; 00008000H
	mov	ecx, 88					; 00000058H
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 153  : 	/*for (int i = 0; i < 1000; i++)
; 154  : 		;*/
; 155  : 	_aud_outw_(RINTCNT, _ihd_audio.rirb_entries / 2);

	xor	edx, edx
	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24
	mov	ecx, 2
	div	ecx
	movzx	edx, ax
	mov	ecx, 90					; 0000005aH
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 156  : 
; 157  : 	_aud_outb_ (RIRBCTL,0x1);

	mov	dl, 1
	mov	ecx, 92					; 0000005cH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 158  : 	/* Start DMA Engine */
; 159  : 	uint32_t rirbctl = _aud_inb_ (RIRBCTL);

	mov	ecx, 92					; 0000005cH
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	movzx	eax, al
	mov	DWORD PTR rirbctl$[rsp], eax

; 160  : 	rirbctl |= 0x2;

	mov	eax, DWORD PTR rirbctl$[rsp]
	or	eax, 2
	mov	DWORD PTR rirbctl$[rsp], eax

; 161  : 	_aud_outb_ (RIRBCTL,rirbctl);

	movzx	edx, BYTE PTR rirbctl$[rsp]
	mov	ecx, 92					; 0000005cH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 162  : 
; 163  : }

	add	rsp, 72					; 00000048H
	ret	0
?setup_rirb@@YAXXZ ENDP					; setup_rirb
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
reg$ = 32
corbctl$ = 36
corb_entries$ = 40
corb_base$ = 48
?setup_corb@@YAXXZ PROC					; setup_corb

; 76   : void setup_corb () {

$LN9:
	sub	rsp, 72					; 00000048H

; 77   : 	
; 78   : 	uint8_t reg;
; 79   : 	uint64_t corb_base;
; 80   : 	unsigned int corb_entries = 0;

	mov	DWORD PTR corb_entries$[rsp], 0

; 81   : 
; 82   : 	reg = _aud_inb_(CORBSIZE);

	mov	ecx, 78					; 0000004eH
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	mov	BYTE PTR reg$[rsp], al

; 83   : 	/* Check CORB size capabilities and choose the largest size */
; 84   : 	if (reg & (1 << 6)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN6@setup_corb

; 85   : 		_ihd_audio.corb_entries = 256;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28, 256 ; 00000100H

; 86   : 		reg |= 0x2;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 2
	mov	BYTE PTR reg$[rsp], al
	jmp	SHORT $LN5@setup_corb
$LN6@setup_corb:

; 87   : 	} else if (reg & (1 << 5)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN4@setup_corb

; 88   : 		_ihd_audio.corb_entries = 16;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28, 16

; 89   : 		reg |= 0x1;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 1
	mov	BYTE PTR reg$[rsp], al
	jmp	SHORT $LN3@setup_corb
$LN4@setup_corb:

; 90   : 	} else if (reg & (1 << 4)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN2@setup_corb

; 91   : 		_ihd_audio.corb_entries = 2;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28, 2

; 92   : 		reg |= 0x0;

	movzx	eax, BYTE PTR reg$[rsp]
	mov	BYTE PTR reg$[rsp], al

; 93   : 	} else {

	jmp	SHORT $LN1@setup_corb
$LN2@setup_corb:

; 94   : 		_ihd_audio.corb_entries = 256;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28, 256 ; 00000100H

; 95   : 		reg |= 0x2;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 2
	mov	BYTE PTR reg$[rsp], al
$LN1@setup_corb:
$LN3@setup_corb:
$LN5@setup_corb:

; 96   : 	}
; 97   : 
; 98   : 	_aud_outb_(CORBSIZE, reg);

	movzx	edx, BYTE PTR reg$[rsp]
	mov	ecx, 78					; 0000004eH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 99   : 
; 100  : 
; 101  : 	/* Set CORB Base Address */
; 102  : 	corb_base = (uintptr_t)_ihd_audio.corb;

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+8
	mov	QWORD PTR corb_base$[rsp], rax

; 103  : 	_aud_outl_(CORBLBASE, corb_base);

	mov	edx, DWORD PTR corb_base$[rsp]
	mov	ecx, 64					; 00000040H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 104  : 	_aud_outl_(CORBUBASE, corb_base >> 32);

	mov	rax, QWORD PTR corb_base$[rsp]
	shr	rax, 32					; 00000020H
	mov	edx, eax
	mov	ecx, 68					; 00000044H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 105  : 
; 106  : 	_aud_outw_ (CORBWP, corbwp);

	movzx	edx, WORD PTR ?corbwp@@3GA		; corbwp
	mov	ecx, 72					; 00000048H
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 107  : 	_aud_outw_ (CORBRP, 0x8000);

	mov	dx, 32768				; 00008000H
	mov	ecx, 74					; 0000004aH
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 108  : 	_aud_outw_ (CORBRP, 0x0);

	xor	edx, edx
	mov	ecx, 74					; 0000004aH
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 109  : 	
; 110  : 	/* Start DMA engine */
; 111  : 	_aud_outb_(CORBCTL, 0x1);

	mov	dl, 1
	mov	ecx, 76					; 0000004cH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 112  : 	uint32_t corbctl = _aud_inb_(CORBCTL);

	mov	ecx, 76					; 0000004cH
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	movzx	eax, al
	mov	DWORD PTR corbctl$[rsp], eax

; 113  : 	corbctl |= 0x2;

	mov	eax, DWORD PTR corbctl$[rsp]
	or	eax, 2
	mov	DWORD PTR corbctl$[rsp], eax

; 114  : 	_aud_outb_ (CORBCTL, corbctl);

	movzx	edx, BYTE PTR corbctl$[rsp]
	mov	ecx, 76					; 0000004cH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 115  : }

	add	rsp, 72					; 00000048H
	ret	0
?setup_corb@@YAXXZ ENDP					; setup_corb
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
v$ = 48
p$ = 56
?hda_handler@@YAX_KPEAX@Z PROC				; hda_handler

; 67   : void hda_handler (size_t v, void* p) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 68   : 	printf ("HD-Audio Interrupt fired++\n");

	lea	rcx, OFFSET FLAT:$SG3439
	call	?printf@@YAXPEBDZZ			; printf

; 69   : 	//apic_local_eoi();
; 70   : 	interrupt_end(0);

	xor	ecx, ecx
	call	?interrupt_end@@YAXI@Z			; interrupt_end

; 71   : }

	add	rsp, 40					; 00000028H
	ret	0
?hda_handler@@YAX_KPEAX@Z ENDP				; hda_handler
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
?_aud_inb_@@YAEH@Z PROC					; _aud_inb_

; 56   : uint8_t _aud_inb_ (int reg) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 57   : 	volatile uint8_t* mmio = (uint8_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 58   : 	return *mmio;

	mov	rax, QWORD PTR mmio$[rsp]
	movzx	eax, BYTE PTR [rax]

; 59   : }

	add	rsp, 24
	ret	0
?_aud_inb_@@YAEH@Z ENDP					; _aud_inb_
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
value$ = 40
?_aud_outb_@@YAXHE@Z PROC				; _aud_outb_

; 50   : void _aud_outb_ (int reg, uint8_t value) {

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 51   : 	 volatile uint8_t* mmio = (uint8_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 52   : 	*mmio = value;

	mov	rax, QWORD PTR mmio$[rsp]
	movzx	ecx, BYTE PTR value$[rsp]
	mov	BYTE PTR [rax], cl

; 53   : }

	add	rsp, 24
	ret	0
?_aud_outb_@@YAXHE@Z ENDP				; _aud_outb_
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
?_aud_inw_@@YAGH@Z PROC					; _aud_inw_

; 44   : uint16_t _aud_inw_(int reg) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 45   : 	volatile uint16_t* mmio = (uint16_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 46   : 	return *mmio;

	mov	rax, QWORD PTR mmio$[rsp]
	movzx	eax, WORD PTR [rax]

; 47   : }

	add	rsp, 24
	ret	0
?_aud_inw_@@YAGH@Z ENDP					; _aud_inw_
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
value$ = 40
?_aud_outw_@@YAXHG@Z PROC				; _aud_outw_

; 38   : void _aud_outw_ (int reg, uint16_t value) {

$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 39   : 	volatile uint16_t* mmio = (uint16_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 40   : 	*mmio = value;

	mov	rax, QWORD PTR mmio$[rsp]
	movzx	ecx, WORD PTR value$[rsp]
	mov	WORD PTR [rax], cx

; 41   : }

	add	rsp, 24
	ret	0
?_aud_outw_@@YAXHG@Z ENDP				; _aud_outw_
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
?_aud_inl_@@YAIH@Z PROC					; _aud_inl_

; 32   : uint32_t _aud_inl_ (int reg) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 33   :     volatile uint32_t* mmio = (uint32_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 34   : 	return *mmio;

	mov	rax, QWORD PTR mmio$[rsp]
	mov	eax, DWORD PTR [rax]

; 35   : }

	add	rsp, 24
	ret	0
?_aud_inl_@@YAIH@Z ENDP					; _aud_inl_
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
value$ = 40
?_aud_outl_@@YAXHI@Z PROC				; _aud_outl_

; 26   : void _aud_outl_(int reg, uint32_t value) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 27   : 	 volatile uint32_t* mmio = (uint32_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 28   : 	*mmio = value;

	mov	rax, QWORD PTR mmio$[rsp]
	mov	ecx, DWORD PTR value$[rsp]
	mov	DWORD PTR [rax], ecx

; 29   : }

	add	rsp, 24
	ret	0
?_aud_outl_@@YAXHI@Z ENDP				; _aud_outl_
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
data$ = 8
length$ = 16
?hda_audio_add_pcm@@YAXPEAX_K@Z PROC			; hda_audio_add_pcm

; 639  : void hda_audio_add_pcm (void *data, size_t length) {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 640  : }

	ret	0
?hda_audio_add_pcm@@YAXPEAX_K@Z ENDP			; hda_audio_add_pcm
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
vol$1 = 32
meta$ = 36
tv128 = 40
volume$ = 64
?hda_set_volume@@YAXE@Z PROC				; hda_set_volume

; 254  : void hda_set_volume (uint8_t volume) {

$LN4:
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 56					; 00000038H

; 255  : 	if (_ihd_audio.vol->nid != 0) {

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+41
	movzx	eax, WORD PTR [rax+2]
	test	eax, eax
	je	SHORT $LN1@hda_set_vo

; 256  : 		codec_query (_ihd_audio.vol->codec, _ihd_audio.vol->nid, VERB_SET_VOLUME_CONTROL |(1<<0));

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+41
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+41
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, 462593				; 00070f01H
	mov	edx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 257  : 		uint32_t vol = codec_query (_ihd_audio.vol->codec, _ihd_audio.vol->nid, VERB_GET_VOLUME_CONTROL);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+41
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+41
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, 986880				; 000f0f00H
	mov	edx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR vol$1[rsp], eax

; 258  : 		printf ("Volume Currenty Setuped is -> %d\n", vol);

	mov	edx, DWORD PTR vol$1[rsp]
	lea	rcx, OFFSET FLAT:$SG3502
	call	?printf@@YAXPEBDZZ			; printf
$LN1@hda_set_vo:

; 259  : 	} 
; 260  : 	int meta = 0xb000;

	mov	DWORD PTR meta$[rsp], 45056		; 0000b000H

; 261  : 
; 262  : 	printf ("Volume -> %d\n", volume);

	movzx	eax, BYTE PTR volume$[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG3504
	call	?printf@@YAXPEBDZZ			; printf

; 263  : 	codec_query (_ihd_audio.output->codec, _ihd_audio.output->nid, VERB_SET_AMP_GAIN_MUTE | meta | volume);

	mov	eax, DWORD PTR meta$[rsp]
	or	eax, 196608				; 00030000H
	movzx	ecx, BYTE PTR volume$[rsp]
	or	eax, ecx
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, WORD PTR [rcx+2]
	mov	rdx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	edx, BYTE PTR [rdx]
	mov	DWORD PTR tv128[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv128[rsp]
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 264  : 	
; 265  : }

	add	rsp, 56					; 00000038H
	ret	0
?hda_set_volume@@YAXE@Z ENDP				; hda_set_volume
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
pci_status$ = 48
i$1 = 52
gcap$ = 56
i$2 = 60
statests$ = 64
bus$ = 68
dev$ = 72
func$ = 76
pos$ = 80
tv148 = 88
pci_dev$ = 96
?hda_initialize@@YAXXZ PROC				; hda_initialize

; 564  : void hda_initialize () {

$LN14:
	sub	rsp, 360				; 00000168H

; 565  : 	pci_device_info pci_dev;
; 566  : 	int bus, dev, func;
; 567  : 
; 568  : 	if (!pci_find_device_class (0x04, 0x03, &pci_dev, &bus, &dev, &func)){

	lea	rax, QWORD PTR func$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR dev$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR bus$[rsp]
	lea	r8, QWORD PTR pci_dev$[rsp]
	mov	dl, 3
	mov	cl, 4
	call	?pci_find_device_class@@YA_NEEPEATpci_device_info@@PEAH11@Z ; pci_find_device_class
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN11@hda_initia

; 569  : 		printf ("No HD-Audio was found\n");

	lea	rcx, OFFSET FLAT:$SG3668
	call	?printf@@YAXPEBDZZ			; printf

; 570  : 		return;

	jmp	$LN12@hda_initia
$LN11@hda_initia:

; 571  : 	}
; 572  : 
; 573  : 
; 574  : 	_ihd_audio.output = (hda_output*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33, rax

; 575  : 	_ihd_audio.vol = (hda_volume*)pmmngr_alloc();

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+41, rax

; 576  : 	memset (_ihd_audio.output, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	call	?memset@@YAXPEAXEI@Z			; memset

; 577  : 
; 578  : 	printf ("HD Audio found vendor -> %x, device -> %x\n", pci_dev.device.vendorID, pci_dev.device.deviceID);

	movzx	eax, WORD PTR pci_dev$[rsp+2]
	movzx	ecx, WORD PTR pci_dev$[rsp]
	mov	r8d, eax
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:$SG3671
	call	?printf@@YAXPEBDZZ			; printf

; 579  : 	printf ("HD-Audio interrupt line -> %d\n", pci_dev.device.nonBridge.interruptLine);

	movzx	eax, BYTE PTR pci_dev$[rsp+60]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG3672
	call	?printf@@YAXPEBDZZ			; printf

; 580  : 
; 581  : 
; 582  : 	bool pci_status = pci_alloc_msi (func, dev, bus, hda_handler);

	lea	r9, OFFSET FLAT:?hda_handler@@YAX_KPEAX@Z ; hda_handler
	mov	r8d, DWORD PTR bus$[rsp]
	mov	edx, DWORD PTR dev$[rsp]
	mov	ecx, DWORD PTR func$[rsp]
	call	?pci_alloc_msi@@YA_NHHHP6AX_KPEAX@Z@Z	; pci_alloc_msi
	mov	BYTE PTR pci_status$[rsp], al

; 583  : 	if (!pci_status) {

	movzx	eax, BYTE PTR pci_status$[rsp]
	test	eax, eax
	jne	SHORT $LN10@hda_initia

; 584  : 		//! fall to legacy interrupt handling mode
; 585  : 		interrupt_set (10, hda_handler, pci_dev.device.nonBridge.interruptLine);

	movzx	r8d, BYTE PTR pci_dev$[rsp+60]
	lea	rdx, OFFSET FLAT:?hda_handler@@YAX_KPEAX@Z ; hda_handler
	mov	ecx, 10
	call	?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z	; interrupt_set
$LN10@hda_initia:

; 586  : 	}
; 587  : 
; 588  : 
; 589  : 	_ihd_audio.mmio = pci_dev.device.nonBridge.baseAddress[0] & ~3;

	mov	eax, 4
	imul	rax, 0
	mov	eax, DWORD PTR pci_dev$[rsp+rax+16]
	and	eax, -4					; fffffffcH
	mov	eax, eax
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A, rax

; 590  : 	_ihd_audio.corb = (uint32_t*)pmmngr_alloc_blocks(2); //pmmngr_alloc() //for 256 entries only 1 kb will be used

	mov	ecx, 2
	call	?pmmngr_alloc_blocks@@YAPEAXH@Z		; pmmngr_alloc_blocks
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+8, rax

; 591  : 	_ihd_audio.rirb = (uint64_t*)(_ihd_audio.corb + 1024);          //pmmngr_alloc(); //(ring_address + 1024);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+8
	add	rax, 4096				; 00001000H
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+16, rax

; 592  : 	memset (_ihd_audio.corb, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+8
	call	?memset@@YAXPEAXEI@Z			; memset

; 593  : 	memset (_ihd_audio.rirb, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+16
	call	?memset@@YAXPEAXEI@Z			; memset

; 594  : 
; 595  : 	uint64_t pos = 0xFFFFE00000100000;

	mov	rax, -35184371040256			; ffffe00000100000H
	mov	QWORD PTR pos$[rsp], rax

; 596  : 	for (int i = 0; i < 4*0x10000 / 4096; i++) {

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN9@hda_initia
$LN8@hda_initia:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN9@hda_initia:
	cmp	DWORD PTR i$2[rsp], 64			; 00000040H
	jge	SHORT $LN7@hda_initia

; 597  : 		map_page ((uint64_t)pmmngr_alloc(),pos + i * 4096, 0);

	mov	eax, DWORD PTR i$2[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR pos$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv148[rsp], rax
	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	xor	r8d, r8d
	mov	rcx, QWORD PTR tv148[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	?map_page@@YA_N_K0E@Z			; map_page

; 598  : 	}

	jmp	SHORT $LN8@hda_initia
$LN7@hda_initia:

; 599  : 
; 600  : 	_ihd_audio.buffer = (uint64_t*)0xFFFFE00000100000;

	mov	rax, -35184371040256			; ffffe00000100000H
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+61, rax

; 601  : 	memset (_ihd_audio.buffer, 0, 4*0x10000);

	mov	r8d, 262144				; 00040000H
	xor	edx, edx
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+61
	call	?memset@@YAXPEAXEI@Z			; memset

; 602  : 	if (_aud_inw_ (GCAP) & 1) {

	xor	ecx, ecx
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	movzx	eax, ax
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@hda_initia

; 603  : 		printf ("HD-Audio 64-OK\n");

	lea	rcx, OFFSET FLAT:$SG3685
	call	?printf@@YAXPEBDZZ			; printf
$LN6@hda_initia:

; 604  : 	}
; 605  : 
; 606  : 
; 607  : 	hda_reset();

	call	?hda_reset@@YAXXZ			; hda_reset

; 608  : 
; 609  : 	
; 610  : 
; 611  :      uint16_t statests = _aud_inw_ (STATESTS);

	mov	ecx, 14
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	mov	WORD PTR statests$[rsp], ax

; 612  : 	for (int i = 0; i < 15; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN5@hda_initia
$LN4@hda_initia:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN5@hda_initia:
	cmp	DWORD PTR i$1[rsp], 15
	jge	SHORT $LN3@hda_initia

; 613  : 		if (statests & (1 << i)){

	movzx	eax, WORD PTR statests$[rsp]
	mov	ecx, DWORD PTR i$1[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN2@hda_initia

; 614  : 			printf ("Codecs -> %d\n", i);

	mov	edx, DWORD PTR i$1[rsp]
	lea	rcx, OFFSET FLAT:$SG3692
	call	?printf@@YAXPEBDZZ			; printf

; 615  : 			if (codec_enumerate_widgets(i)) {

	mov	ecx, DWORD PTR i$1[rsp]
	call	?codec_enumerate_widgets@@YAHH@Z	; codec_enumerate_widgets
	test	eax, eax
	je	SHORT $LN1@hda_initia

; 616  : 				break;

	jmp	SHORT $LN3@hda_initia
$LN1@hda_initia:
$LN2@hda_initia:

; 617  : 			}
; 618  : 		}
; 619  : 	}  

	jmp	SHORT $LN4@hda_initia
$LN3@hda_initia:

; 620  : 	
; 621  : 	
; 622  : 
; 623  :      uint16_t gcap = _aud_inw_(GCAP);

	xor	ecx, ecx
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	mov	WORD PTR gcap$[rsp], ax

; 624  : 	_ihd_audio.num_oss = HDA_GCAP_OSS(gcap);

	movzx	eax, WORD PTR gcap$[rsp]
	and	eax, 61440				; 0000f000H
	sar	eax, 12
	mov	WORD PTR ?_ihd_audio@@3U_hd_audio_@@A+51, ax

; 625  : 	_ihd_audio.num_iss = HDA_GCAP_ISS(gcap);

	movzx	eax, WORD PTR gcap$[rsp]
	and	eax, 3840				; 00000f00H
	sar	eax, 8
	mov	WORD PTR ?_ihd_audio@@3U_hd_audio_@@A+49, ax

; 626  : 	_ihd_audio.stream_0_x = 0x80 + (_ihd_audio.num_iss * 0x20);

	movzx	eax, WORD PTR ?_ihd_audio@@3U_hd_audio_@@A+49
	imul	eax, 32					; 00000020H
	add	eax, 128				; 00000080H
	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53, eax

; 627  : 	_ihd_audio.stream_0_y = 0x80 + (_ihd_audio.num_iss * 0x20) + (_ihd_audio.num_oss * 0x20);

	movzx	eax, WORD PTR ?_ihd_audio@@3U_hd_audio_@@A+49
	imul	eax, 32					; 00000020H
	movzx	ecx, WORD PTR ?_ihd_audio@@3U_hd_audio_@@A+51
	imul	ecx, 32					; 00000020H
	lea	eax, DWORD PTR [rax+rcx+128]
	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+57, eax

; 628  :    
; 629  : 	
; 630  : 	init_output();

	call	?init_output@@YAXXZ			; init_output

; 631  : 	hda_set_volume(0);

	xor	ecx, ecx
	call	?hda_set_volume@@YAXE@Z			; hda_set_volume

; 632  :   
; 633  : 	hda_init_output_stream();

	call	?hda_init_output_stream@@YAXXZ		; hda_init_output_stream

; 634  : 	hda_output_start();

	call	?hda_output_start@@YAXXZ		; hda_output_start

; 635  : 	printf ("IHD Audio Initialized successfully\n");

	lea	rcx, OFFSET FLAT:$SG3695
	call	?printf@@YAXPEBDZZ			; printf
$LN12@hda_initia:

; 636  : }

	add	rsp, 360				; 00000168H
	ret	0
?hda_initialize@@YAXXZ ENDP				; hda_initialize
_TEXT	ENDS
END
