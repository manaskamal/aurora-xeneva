; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_ihd_audio@@3U_hd_audio_@@A			; _ihd_audio
PUBLIC	?rirbrp@@3GA					; rirbrp
PUBLIC	?corbrp@@3GA					; corbrp
_BSS	SEGMENT
?_ihd_audio@@3U_hd_audio_@@A DB 020H DUP (?)		; _ihd_audio
?rirbrp@@3GA DW	01H DUP (?)				; rirbrp
	ALIGN	4

?corbrp@@3GA DW	01H DUP (?)				; corbrp
_BSS	ENDS
CONST	SEGMENT
$SG3352	DB	'HD-Audio Interrupt fired++', 0aH, 00H
	ORG $+4
$SG3358	DB	'CORB Size -> %x', 0aH, 00H
	ORG $+3
$SG3421	DB	'output', 00H
	ORG $+5
$SG3360	DB	'CORB size -> 256', 0aH, 00H
	ORG $+6
$SG3363	DB	'Corb size -> 16', 0aH, 00H
	ORG $+3
$SG3423	DB	'input', 00H
	ORG $+6
$SG3366	DB	'Corb size -> 2', 0aH, 00H
$SG3368	DB	'HD Audio: No Supported CORB Size!', 0aH, 00H
	ORG $+5
$SG3375	DB	'RIRB SIZE reg -> %x', 0aH, 00H
	ORG $+3
$SG3377	DB	'RIRB size -> 256', 0aH, 00H
	ORG $+6
$SG3380	DB	'RIRB size -> 16', 0aH, 00H
	ORG $+3
$SG3425	DB	'mixer', 00H
	ORG $+6
$SG3383	DB	'RIRB size -> 2', 0aH, 00H
$SG3385	DB	'HD Audio: No supported RIRB size !!', 0aH, 00H
	ORG $+3
$SG3427	DB	'selector', 00H
	ORG $+3
$SG3431	DB	'power', 00H
	ORG $+6
$SG3429	DB	'pin complex', 00H
	ORG $+4
$SG3433	DB	'volume knob', 00H
	ORG $+4
$SG3435	DB	'beep generator', 00H
	ORG $+1
$SG3437	DB	'vendor defined', 00H
	ORG $+1
$SG3439	DB	'unknown', 00H
$SG3440	DB	'[HD-Audio]: widget %s at node %d; ', 0aH, 00H
	ORG $+4
$SG3449	DB	'pin config: %x', 0aH, 00H
$SG3451	DB	'ctl: %x', 0aH, 00H
	ORG $+7
$SG3453	DB	'Widget type Output in codec -> %d at node -> %d', 0aH, 00H
	ORG $+7
$SG3480	DB	'ICIS ICB bit is clear', 0aH, 00H
	ORG $+1
$SG3491	DB	'No HD-Audio was found', 0aH, 00H
	ORG $+1
$SG3496	DB	'HD-Audio 64-OK', 0aH, 00H
$SG3497	DB	'HD-Audio Version - %d.%d', 0aH, 00H
CONST	ENDS
PUBLIC	?hda_initialize@@YAXXZ				; hda_initialize
PUBLIC	?_aud_outl_@@YAXHI@Z				; _aud_outl_
PUBLIC	?_aud_inl_@@YAIH@Z				; _aud_inl_
PUBLIC	?_aud_outw_@@YAXHG@Z				; _aud_outw_
PUBLIC	?_aud_inw_@@YAGH@Z				; _aud_inw_
PUBLIC	?_aud_outb_@@YAXHE@Z				; _aud_outb_
PUBLIC	?_aud_inb_@@YAEH@Z				; _aud_inb_
PUBLIC	?hda_handler@@YAX_KPEAX@Z			; hda_handler
PUBLIC	?setup_corb@@YAXXZ				; setup_corb
PUBLIC	?setup_rirb@@YAXXZ				; setup_rirb
PUBLIC	?widget_init@@YAXHH@Z				; widget_init
PUBLIC	?hda_reset@@YAXXZ				; hda_reset
EXTRN	x64_cli:PROC
EXTRN	x64_sti:PROC
EXTRN	?interrupt_end@@YAXI@Z:PROC			; interrupt_end
EXTRN	?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z:PROC	; interrupt_set
EXTRN	?pci_find_device_class@@YA_NEEPEATpci_device_info@@@Z:PROC ; pci_find_device_class
EXTRN	?pmmngr_alloc@@YAPEAXXZ:PROC			; pmmngr_alloc
EXTRN	?printf@@YAXPEBDZZ:PROC				; printf
EXTRN	__ImageBase:BYTE
pdata	SEGMENT
$pdata$?hda_initialize@@YAXXZ DD imagerel $LN6
	DD	imagerel $LN6+229
	DD	imagerel $unwind$?hda_initialize@@YAXXZ
$pdata$?_aud_outl_@@YAXHI@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?_aud_outl_@@YAXHI@Z
$pdata$?_aud_inl_@@YAIH@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?_aud_inl_@@YAIH@Z
$pdata$?_aud_outw_@@YAXHG@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?_aud_outw_@@YAXHG@Z
$pdata$?_aud_inw_@@YAGH@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?_aud_inw_@@YAGH@Z
$pdata$?_aud_outb_@@YAXHE@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?_aud_outb_@@YAXHE@Z
$pdata$?_aud_inb_@@YAEH@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?_aud_inb_@@YAEH@Z
$pdata$?hda_handler@@YAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$?hda_handler@@YAX_KPEAX@Z
$pdata$?setup_corb@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+303
	DD	imagerel $unwind$?setup_corb@@YAXXZ
$pdata$?setup_rirb@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+320
	DD	imagerel $unwind$?setup_rirb@@YAXXZ
$pdata$?corb_write@@YAXI@Z DD imagerel ?corb_write@@YAXI@Z
	DD	imagerel ?corb_write@@YAXI@Z+42
	DD	imagerel $unwind$?corb_write@@YAXI@Z
$pdata$?rirb_read@@YAXPEA_K@Z DD imagerel ?rirb_read@@YAXPEA_K@Z
	DD	imagerel ?rirb_read@@YAXPEA_K@Z+49
	DD	imagerel $unwind$?rirb_read@@YAXPEA_K@Z
$pdata$?codec_query@@YAIHHI@Z DD imagerel ?codec_query@@YAIHHI@Z
	DD	imagerel ?codec_query@@YAIHHI@Z+160
	DD	imagerel $unwind$?codec_query@@YAIHHI@Z
$pdata$?widget_init@@YAXHH@Z DD imagerel $LN24
	DD	imagerel $LN24+740
	DD	imagerel $unwind$?widget_init@@YAXHH@Z
$pdata$?codec_enumerate_widgets@@YAXH@Z DD imagerel ?codec_enumerate_widgets@@YAXH@Z
	DD	imagerel ?codec_enumerate_widgets@@YAXH@Z+316
	DD	imagerel $unwind$?codec_enumerate_widgets@@YAXH@Z
$pdata$?hda_reset@@YAXXZ DD imagerel $LN10
	DD	imagerel $LN10+191
	DD	imagerel $unwind$?hda_reset@@YAXXZ
pdata	ENDS
xdata	SEGMENT
$unwind$?hda_initialize@@YAXXZ DD 020701H
	DD	0270107H
$unwind$?_aud_outl_@@YAXHI@Z DD 010c01H
	DD	0220cH
$unwind$?_aud_inl_@@YAIH@Z DD 010801H
	DD	02208H
$unwind$?_aud_outw_@@YAXHG@Z DD 010d01H
	DD	0220dH
$unwind$?_aud_inw_@@YAGH@Z DD 010801H
	DD	02208H
$unwind$?_aud_outb_@@YAXHE@Z DD 010c01H
	DD	0220cH
$unwind$?_aud_inb_@@YAEH@Z DD 010801H
	DD	02208H
$unwind$?hda_handler@@YAX_KPEAX@Z DD 010e01H
	DD	0420eH
$unwind$?setup_corb@@YAXXZ DD 010401H
	DD	06204H
$unwind$?setup_rirb@@YAXXZ DD 010401H
	DD	06204H
$unwind$?corb_write@@YAXI@Z DD 010801H
	DD	04208H
$unwind$?rirb_read@@YAXPEA_K@Z DD 010901H
	DD	04209H
$unwind$?codec_query@@YAIHHI@Z DD 011101H
	DD	06211H
$unwind$?widget_init@@YAXHH@Z DD 010c01H
	DD	0a20cH
$unwind$?codec_enumerate_widgets@@YAXH@Z DD 010801H
	DD	08208H
$unwind$?hda_reset@@YAXXZ DD 010401H
	DD	06204H
xdata	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
statests$ = 32
i$1 = 36
?hda_reset@@YAXXZ PROC					; hda_reset

; 345  : void hda_reset() {

$LN10:
	sub	rsp, 56					; 00000038H

; 346  : 	_aud_outl_(CORBCTL, 0);

	xor	edx, edx
	mov	ecx, 76					; 0000004cH
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 347  : 	_aud_outl_(RIRBCTL, 0);

	xor	edx, edx
	mov	ecx, 92					; 0000005cH
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 348  : 	//_aud_outw_(RIRBWP, 0);
; 349  : 	_aud_outl_(GCTL, 1);

	mov	edx, 1
	mov	ecx, 8
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_
$LN7@hda_reset:

; 350  : 	while ((_aud_inl_ (GCTL >> 0) & 0x3) != 1)

	mov	ecx, 8
	call	?_aud_inl_@@YAIH@Z			; _aud_inl_
	and	eax, 3
	cmp	eax, 1
	je	SHORT $LN6@hda_reset

; 351  : 		;

	jmp	SHORT $LN7@hda_reset
$LN6@hda_reset:

; 352  : 
; 353  : 	_aud_outw_ (WAKEEN, 1);

	mov	dx, 1
	mov	ecx, 12
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 354  : 	//_aud_outw_ (STATESTS, 1);
; 355  : 	
; 356  : 	if((_aud_inw_(ICIS) & 1)==0)

	mov	ecx, 104				; 00000068H
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	movzx	eax, ax
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN5@hda_reset

; 357  : 		printf ("ICIS ICB bit is clear\n");

	lea	rcx, OFFSET FLAT:$SG3480
	call	?printf@@YAXPEBDZZ			; printf
$LN5@hda_reset:

; 358  : 	
; 359  : 	uint16_t statests = _aud_inw_ (STATESTS);

	mov	ecx, 14
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	mov	WORD PTR statests$[rsp], ax

; 360  : 
; 361  : 	for (int i = 0; i < 15; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@hda_reset
$LN3@hda_reset:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@hda_reset:
	cmp	DWORD PTR i$1[rsp], 15
	jge	SHORT $LN2@hda_reset

; 362  : 		if (statests & (1 << i)){

	movzx	eax, WORD PTR statests$[rsp]
	mov	ecx, DWORD PTR i$1[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN1@hda_reset

; 363  : 			codec_enumerate_widgets(i);

	mov	ecx, DWORD PTR i$1[rsp]
	call	?codec_enumerate_widgets@@YAXH@Z	; codec_enumerate_widgets
$LN1@hda_reset:

; 364  : 		}
; 365  : 	}

	jmp	SHORT $LN3@hda_reset
$LN2@hda_reset:

; 366  : }

	add	rsp, 56					; 00000038H
	ret	0
?hda_reset@@YAXXZ ENDP					; hda_reset
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
param$ = 32
i$ = 36
j$ = 40
fg_start$ = 44
num_fg$ = 48
num_widgets$ = 52
widgets_start$ = 56
codec$ = 80
?codec_enumerate_widgets@@YAXH@Z PROC			; codec_enumerate_widgets

; 297  : static void codec_enumerate_widgets(int codec) {

	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H

; 298  : 
; 299  : 	uint32_t param;
; 300  : 	int num_fg, num_widgets;
; 301  : 	int fg_start, widgets_start;
; 302  : 	int i, j;
; 303  : 
; 304  : 
; 305  : 	param = codec_query (codec, 0, VERB_GET_PARAMETER | PARAM_NODE_COUNT);

	mov	r8d, 983044				; 000f0004H
	xor	edx, edx
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR param$[rsp], eax

; 306  : 
; 307  : 	num_fg = (param >> 0) & 0xff;

	mov	eax, DWORD PTR param$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR num_fg$[rsp], eax

; 308  : 	fg_start = (param >> 16) & 0xff;

	mov	eax, DWORD PTR param$[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	DWORD PTR fg_start$[rsp], eax

; 309  : 
; 310  : 	//printf ("Param Returned -> %x\n", param);
; 311  : 	//printf ("[HD_Audio]: Num Function Group -> %d, fg_start -> %d\n", num_fg, fg_start);	
; 312  : 
; 313  : 	if (num_fg == 0) 

	cmp	DWORD PTR num_fg$[rsp], 0
	jne	SHORT $LN8@codec_enum

; 314  : 		return;

	jmp	$LN9@codec_enum
$LN8@codec_enum:

; 315  : 	
; 316  : 	for (i = 0; i < num_fg; i++) {

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@codec_enum
$LN6@codec_enum:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@codec_enum:
	mov	eax, DWORD PTR num_fg$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN5@codec_enum

; 317  : 		param = codec_query (codec, fg_start + i, 
; 318  : 			VERB_GET_PARAMETER | PARAM_NODE_COUNT);

	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR fg_start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	r8d, 983044				; 000f0004H
	mov	edx, eax
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR param$[rsp], eax

; 319  : 
; 320  : 		num_widgets = param & 0xff;

	mov	eax, DWORD PTR param$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR num_widgets$[rsp], eax

; 321  : 		widgets_start = (param >> 16) & 0xff;

	mov	eax, DWORD PTR param$[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	DWORD PTR widgets_start$[rsp], eax

; 322  : 
; 323  : 
; 324  : 		param = codec_query (codec, fg_start + i, VERB_GET_PARAMETER | PARAM_FN_GROUP_TYPE);

	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR fg_start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	r8d, 983045				; 000f0005H
	mov	edx, eax
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR param$[rsp], eax

; 325  : 		param &= 0x7f;

	mov	eax, DWORD PTR param$[rsp]
	and	eax, 127				; 0000007fH
	mov	DWORD PTR param$[rsp], eax

; 326  : 		if (param != FN_GROUP_AUDIO) {

	cmp	DWORD PTR param$[rsp], 1
	je	SHORT $LN4@codec_enum

; 327  : 			continue;

	jmp	$LN6@codec_enum
$LN4@codec_enum:

; 328  : 		}
; 329  : 
; 330  : 		codec_query (codec, fg_start + i, VERB_SET_POWER_STATE | 0x0);

	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR fg_start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	r8d, 460032				; 00070500H
	mov	edx, eax
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query

; 331  : 
; 332  : 		for (j = 0; j < num_widgets; j++) {

	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN3@codec_enum
$LN2@codec_enum:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN3@codec_enum:
	mov	eax, DWORD PTR num_widgets$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN1@codec_enum

; 333  : 			widget_init(codec, widgets_start + j);

	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR widgets_start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	ecx, DWORD PTR codec$[rsp]
	call	?widget_init@@YAXHH@Z			; widget_init

; 334  : 		}

	jmp	SHORT $LN2@codec_enum
$LN1@codec_enum:

; 335  : 	}

	jmp	$LN6@codec_enum
$LN5@codec_enum:
$LN9@codec_enum:

; 336  : 
; 337  : 
; 338  : 	//return output.nid ? 0 : -2;
; 339  : }

	add	rsp, 72					; 00000048H
	ret	0
?codec_enumerate_widgets@@YAXH@Z ENDP			; codec_enumerate_widgets
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
s$ = 32
ctl$1 = 40
widget_cap$ = 44
tv94 = 48
tv79 = 52
eapd_btl$ = 56
amp_gain$ = 60
type$ = 64
conf$2 = 68
pin_cap$3 = 72
amp_cap$ = 76
codec$ = 96
nid$ = 104
?widget_init@@YAXHH@Z PROC				; widget_init

; 210  : void widget_init (int codec, int nid) {

$LN24:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 88					; 00000058H

; 211  : 
; 212  : 	//printf ("[HD-Audio]: initializing widgets\n");
; 213  : 	uint32_t widget_cap;
; 214  : 	uint32_t type;
; 215  : 	uint32_t amp_cap;
; 216  : 	uint32_t eapd_btl;
; 217  : 
; 218  : 	widget_cap = codec_query (codec, nid, VERB_GET_PARAMETER | PARAM_AUDIO_WID_CAP);

	mov	r8d, 983049				; 000f0009H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR widget_cap$[rsp], eax

; 219  : 
; 220  : 	if (widget_cap == 0) {

	cmp	DWORD PTR widget_cap$[rsp], 0
	jne	SHORT $LN20@widget_ini

; 221  : 		//printf ("Widget capabilities 0\n");
; 222  : 		return;

	jmp	$LN21@widget_ini
$LN20@widget_ini:

; 223  : 	}
; 224  : 
; 225  : 	type = (widget_cap & WIDGET_CAP_TYPE_MASK) >> WIDGET_CAP_TYPE_SHIFT;

	mov	eax, DWORD PTR widget_cap$[rsp]
	and	eax, 15728640				; 00f00000H
	shr	eax, 20
	mov	DWORD PTR type$[rsp], eax

; 226  : 	amp_cap = codec_query (codec, nid, VERB_GET_PARAMETER | PARAM_OUT_AMP_CAP);

	mov	r8d, 983058				; 000f0012H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR amp_cap$[rsp], eax

; 227  : 	eapd_btl = codec_query (codec, nid, VERB_GET_EAPD_BTL);

	mov	r8d, 986112				; 000f0c00H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR eapd_btl$[rsp], eax

; 228  : 
; 229  : 	uint32_t amp_gain;
; 230  : 	const char* s;
; 231  : 
; 232  : 	switch(type) {

	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv79[rsp], eax
	cmp	DWORD PTR tv79[rsp], 16
	ja	$LN8@widget_ini
	mov	eax, DWORD PTR tv79[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN23@widget_ini[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN17@widget_ini:

; 233  : 	case 0:  s = "output"; break;

	lea	rax, OFFSET FLAT:$SG3421
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN18@widget_ini
$LN16@widget_ini:

; 234  : 	case 1:  s = "input"; break;

	lea	rax, OFFSET FLAT:$SG3423
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN18@widget_ini
$LN15@widget_ini:

; 235  : 	case 2:  s = "mixer"; break;

	lea	rax, OFFSET FLAT:$SG3425
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN18@widget_ini
$LN14@widget_ini:

; 236  : 	case 3:  s = "selector"; break;

	lea	rax, OFFSET FLAT:$SG3427
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN18@widget_ini
$LN13@widget_ini:

; 237  : 	case 4:  s = "pin complex"; break;

	lea	rax, OFFSET FLAT:$SG3429
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN18@widget_ini
$LN12@widget_ini:

; 238  : 	case 5:  s = "power"; break;

	lea	rax, OFFSET FLAT:$SG3431
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN18@widget_ini
$LN11@widget_ini:

; 239  : 	case 6:  s = "volume knob"; break;

	lea	rax, OFFSET FLAT:$SG3433
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN18@widget_ini
$LN10@widget_ini:

; 240  : 	case 7:  s = "beep generator"; break;

	lea	rax, OFFSET FLAT:$SG3435
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN18@widget_ini
$LN9@widget_ini:

; 241  : 	case 16: s = "vendor defined"; break;

	lea	rax, OFFSET FLAT:$SG3437
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN18@widget_ini
$LN8@widget_ini:

; 242  : 	default: s = "unknown"; break;

	lea	rax, OFFSET FLAT:$SG3439
	mov	QWORD PTR s$[rsp], rax
$LN18@widget_ini:

; 243  : 
; 244  : 	}
; 245  : 
; 246  : 	amp_gain = codec_query(codec, nid, VERB_GET_AMP_GAIN_MUTE | 0x8000) << 8;

	mov	r8d, 753664				; 000b8000H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	shl	eax, 8
	mov	DWORD PTR amp_gain$[rsp], eax

; 247  : 	amp_gain |= codec_query(codec, nid, VERB_GET_AMP_GAIN_MUTE | 0xa000);

	mov	r8d, 761856				; 000ba000H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	ecx, DWORD PTR amp_gain$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR amp_gain$[rsp], eax

; 248  : 
; 249  : 	printf ("[HD-Audio]: widget %s at node %d; \n",
; 250  : 		s, nid);

	mov	r8d, DWORD PTR nid$[rsp]
	mov	rdx, QWORD PTR s$[rsp]
	lea	rcx, OFFSET FLAT:$SG3440
	call	?printf@@YAXPEBDZZ			; printf

; 251  : 
; 252  : 	switch (type) {

	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv94[rsp], eax
	cmp	DWORD PTR tv94[rsp], 0
	je	$LN3@widget_ini
	cmp	DWORD PTR tv94[rsp], 4
	je	SHORT $LN5@widget_ini
	jmp	$LN2@widget_ini
$LN5@widget_ini:

; 253  : 	case WIDGET_PIN:
; 254  : 		{
; 255  : 			uint32_t pin_cap, ctl;
; 256  : 			uint32_t conf = codec_query(codec, nid, VERB_GET_CONFIG_DEFAULT);

	mov	r8d, 990208				; 000f1c00H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR conf$2[rsp], eax

; 257  : 			printf ("pin config: %x\n", conf);

	mov	edx, DWORD PTR conf$2[rsp]
	lea	rcx, OFFSET FLAT:$SG3449
	call	?printf@@YAXPEBDZZ			; printf

; 258  : 
; 259  : 			pin_cap = codec_query (codec, nid, VERB_GET_PARAMETER | PARAM_PIN_CAP);

	mov	r8d, 983052				; 000f000cH
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR pin_cap$3[rsp], eax

; 260  : 
; 261  : 			if ((pin_cap & PIN_CAP_OUTPUT) == 0) {

	mov	eax, DWORD PTR pin_cap$3[rsp]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN4@widget_ini

; 262  : 				return;

	jmp	$LN21@widget_ini
$LN4@widget_ini:

; 263  : 			}
; 264  : 
; 265  : 			ctl = codec_query (codec, nid, VERB_GET_PIN_CONTROL);

	mov	r8d, 984832				; 000f0700H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR ctl$1[rsp], eax

; 266  : 			printf ("ctl: %x\n", ctl);

	mov	edx, DWORD PTR ctl$1[rsp]
	lea	rcx, OFFSET FLAT:$SG3451
	call	?printf@@YAXPEBDZZ			; printf

; 267  : 
; 268  : 			ctl |= PIN_CTL_ENABLE_OUTPUT;

	mov	eax, DWORD PTR ctl$1[rsp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR ctl$1[rsp], eax

; 269  : 			codec_query(codec, nid, VERB_SET_PIN_CONTROL | ctl);

	mov	eax, DWORD PTR ctl$1[rsp]
	or	eax, 460544				; 00070700H
	mov	r8d, eax
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query

; 270  : 			codec_query(codec, nid, VERB_SET_EAPD_BTL | eapd_btl | 0x2);

	mov	eax, DWORD PTR eapd_btl$[rsp]
	or	eax, 461824				; 00070c00H
	or	eax, 2
	mov	r8d, eax
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query

; 271  : 			break;

	jmp	SHORT $LN6@widget_ini
$LN3@widget_ini:

; 272  : 		}
; 273  : 
; 274  : 	case WIDGET_OUTPUT:
; 275  : 		{
; 276  : 			/*if (!output.nid) {
; 277  : 				kprintf ("using output at ID %d\n", nid);
; 278  : 				output.codec = codec;
; 279  : 				output.nid = nid;
; 280  : 				output.amp_gain_steps = (amp_cap >> 8) & 0x7f;
; 281  : 			}*/
; 282  : 			printf ("Widget type Output in codec -> %d at node -> %d\n", codec, nid);

	mov	r8d, DWORD PTR nid$[rsp]
	mov	edx, DWORD PTR codec$[rsp]
	lea	rcx, OFFSET FLAT:$SG3453
	call	?printf@@YAXPEBDZZ			; printf

; 283  : 			codec_query (codec, nid, VERB_SET_EAPD_BTL | eapd_btl | 0x2);

	mov	eax, DWORD PTR eapd_btl$[rsp]
	or	eax, 461824				; 00070c00H
	or	eax, 2
	mov	r8d, eax
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query

; 284  : 			break;

	jmp	SHORT $LN6@widget_ini
$LN2@widget_ini:

; 285  : 		}
; 286  : 
; 287  : 	default:
; 288  : 		return;

	jmp	SHORT $LN21@widget_ini
$LN6@widget_ini:

; 289  : 
; 290  : 	}
; 291  : 
; 292  : 	if (widget_cap & WIDGET_CAP_POWER_CNTRL) {

	mov	eax, DWORD PTR widget_cap$[rsp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN1@widget_ini

; 293  : 		codec_query(codec, nid, VERB_SET_POWER_STATE | 0x0);

	mov	r8d, 460032				; 00070500H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
$LN1@widget_ini:
$LN21@widget_ini:

; 294  : 	}
; 295  : }

	add	rsp, 88					; 00000058H
	ret	0
$LN23@widget_ini:
	DD	$LN17@widget_ini
	DD	$LN16@widget_ini
	DD	$LN15@widget_ini
	DD	$LN14@widget_ini
	DD	$LN13@widget_ini
	DD	$LN12@widget_ini
	DD	$LN11@widget_ini
	DD	$LN10@widget_ini
	DD	$LN8@widget_ini
	DD	$LN8@widget_ini
	DD	$LN8@widget_ini
	DD	$LN8@widget_ini
	DD	$LN8@widget_ini
	DD	$LN8@widget_ini
	DD	$LN8@widget_ini
	DD	$LN8@widget_ini
	DD	$LN9@widget_ini
?widget_init@@YAXHH@Z ENDP				; widget_init
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
icount$ = 32
verb$ = 36
response$ = 40
codec$ = 64
nid$ = 72
payload$ = 80
?codec_query@@YAIHHI@Z PROC				; codec_query

; 188  : static uint32_t codec_query (int codec, int nid, uint32_t payload) {

	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H

; 189  : 	uint64_t response; //= (uint64_t*)pmmngr_alloc();
; 190  : 	uint32_t icount = 1000;

	mov	DWORD PTR icount$[rsp], 1000		; 000003e8H

; 191  : 	uint32_t verb = ((codec & 0xf) << 28) | 
; 192  : 		((nid & 0xff) << 20) | 
; 193  : 		(payload & 0xfffff);

	mov	eax, DWORD PTR codec$[rsp]
	and	eax, 15
	shl	eax, 28
	mov	ecx, DWORD PTR nid$[rsp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 20
	or	eax, ecx
	mov	ecx, DWORD PTR payload$[rsp]
	and	ecx, 1048575				; 000fffffH
	or	eax, ecx
	mov	DWORD PTR verb$[rsp], eax

; 194  : 
; 195  : 	corb_write(verb);

	mov	ecx, DWORD PTR verb$[rsp]
	call	?corb_write@@YAXI@Z			; corb_write
$LN3@codec_quer:

; 196  : 	while (( _aud_inw_(ICIS) & 1) == 1){

	mov	ecx, 104				; 00000068H
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	movzx	eax, ax
	and	eax, 1
	cmp	eax, 1
	jne	SHORT $LN2@codec_quer

; 197  : 		if(icount == 0){

	cmp	DWORD PTR icount$[rsp], 0
	jne	SHORT $LN1@codec_quer

; 198  : 			_aud_outw_(ICIS, 0);

	xor	edx, edx
	mov	ecx, 104				; 00000068H
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 199  : 			break;

	jmp	SHORT $LN2@codec_quer
$LN1@codec_quer:

; 200  : 		}
; 201  : 		icount--;

	mov	eax, DWORD PTR icount$[rsp]
	dec	eax
	mov	DWORD PTR icount$[rsp], eax

; 202  : 	}

	jmp	SHORT $LN3@codec_quer
$LN2@codec_quer:

; 203  : 
; 204  : 	rirb_read(&response);

	lea	rcx, QWORD PTR response$[rsp]
	call	?rirb_read@@YAXPEA_K@Z			; rirb_read

; 205  : 	return response & 0xffffffff;

	mov	eax, -1					; ffffffffH
	mov	rcx, QWORD PTR response$[rsp]
	and	rcx, rax
	mov	rax, rcx

; 206  : }

	add	rsp, 56					; 00000038H
	ret	0
?codec_query@@YAIHHI@Z ENDP				; codec_query
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
response$ = 48
?rirb_read@@YAXPEA_K@Z PROC				; rirb_read

; 171  : static void rirb_read (uint64_t *response) {

	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 172  : 	//uint16_t wp;
; 173  : 	//uint16_t rp = rirbrp;
; 174  : 
; 175  : 	///*Wait for an unread entry in the RIRB */
; 176  : 	//do {
; 177  : 	//   wp = _aud_inw_(RIRBWP) & 0xff;
; 178  : 	//} while (wp == rp);
; 179  : 
; 180  : 	///*Read from RIRIB */
; 181  : 	//rp = (rp + 1) % _ihd_audio.rirb_entries;   //rirb_entries;
; 182  : 	//rirbrp = rp;
; 183  : 	*response = _aud_inl_(ICII);             //_ihd_audio.rirb[rp];

	mov	ecx, 100				; 00000064H
	call	?_aud_inl_@@YAIH@Z			; _aud_inl_
	mov	eax, eax
	mov	rcx, QWORD PTR response$[rsp]
	mov	QWORD PTR [rcx], rax

; 184  : 	//printf ("RIRB WP -> %x\n", _aud_inl_(ICII));
; 185  : 	_aud_outl_(ICIS, ~(1<<1));

	mov	edx, -3					; fffffffdH
	mov	ecx, 104				; 00000068H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 186  : }

	add	rsp, 40					; 00000028H
	ret	0
?rirb_read@@YAXPEA_K@Z ENDP				; rirb_read
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
verb$ = 48
?corb_write@@YAXI@Z PROC				; corb_write

; 151  : static void corb_write (uint32_t verb) {

	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H

; 152  : 
; 153  : 	//uint16_t wp = _aud_inw_(CORBWP) & 0xff;
; 154  : 	//uint16_t rp;
; 155  : 	//uint16_t next;
; 156  : 
; 157  : 	///*Wait until there's a free entry in the CORB */
; 158  : 	//next = (wp + 1) % _ihd_audio.corb_entries;   //corb_entries;
; 159  : 
; 160  : 	//do {
; 161  : 	//	rp = _aud_inw_(CORBRP) & 0xff;
; 162  : 	//}while (next == rp);
; 163  : 
; 164  : 	///* Write to CORB */
; 165  : 	//_ihd_audio.corb[next] = verb;
; 166  : 	//_aud_outw_(CORBWP, next);
; 167  : 	_aud_outl_(ICOI,verb);

	mov	edx, DWORD PTR verb$[rsp]
	mov	ecx, 96					; 00000060H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 168  : 	_aud_outl_(ICIS,1);

	mov	edx, 1
	mov	ecx, 104				; 00000068H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 169  : }

	add	rsp, 40					; 00000028H
	ret	0
?corb_write@@YAXI@Z ENDP				; corb_write
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
reg$ = 32
rirb_entries$ = 36
rirb_base$ = 40
?setup_rirb@@YAXXZ PROC					; setup_rirb

; 106  : void setup_rirb() {

$LN9:
	sub	rsp, 56					; 00000038H

; 107  : 
; 108  : 	uint8_t reg;
; 109  : 	uint64_t rirb_base;
; 110  : 	uint32_t rirb_entries = 0;

	mov	DWORD PTR rirb_entries$[rsp], 0

; 111  : 
; 112  : 	
; 113  : 	//_aud_outw_(RIRBCTL, 0);
; 114  : 
; 115  : 	reg = _aud_inb_ (RIRBSIZE);

	mov	ecx, 94					; 0000005eH
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	mov	BYTE PTR reg$[rsp], al

; 116  : 	printf ("RIRB SIZE reg -> %x\n", reg);

	movzx	eax, BYTE PTR reg$[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG3375
	call	?printf@@YAXPEBDZZ			; printf

; 117  : 	/* Check RIRB size capabilities and choose the largest size */
; 118  : 	if (reg & (1 << 6)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN6@setup_rirb

; 119  : 		_ihd_audio.rirb_entries = 256;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24, 256 ; 00000100H

; 120  : 		printf ("RIRB size -> 256\n");

	lea	rcx, OFFSET FLAT:$SG3377
	call	?printf@@YAXPEBDZZ			; printf

; 121  : 		reg |= 0x2;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 2
	mov	BYTE PTR reg$[rsp], al
	jmp	SHORT $LN5@setup_rirb
$LN6@setup_rirb:

; 122  : 	} else if (reg & (1 << 5)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN4@setup_rirb

; 123  : 		_ihd_audio.rirb_entries = 16;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24, 16

; 124  : 		printf ("RIRB size -> 16\n");

	lea	rcx, OFFSET FLAT:$SG3380
	call	?printf@@YAXPEBDZZ			; printf

; 125  : 		reg |= 0x1;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 1
	mov	BYTE PTR reg$[rsp], al
	jmp	SHORT $LN3@setup_rirb
$LN4@setup_rirb:

; 126  : 	}else if (reg & (1 << 4)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN2@setup_rirb

; 127  : 		_ihd_audio.rirb_entries = 2;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24, 2

; 128  : 		printf ("RIRB size -> 2\n");

	lea	rcx, OFFSET FLAT:$SG3383
	call	?printf@@YAXPEBDZZ			; printf

; 129  : 		reg |= 0x0;

	movzx	eax, BYTE PTR reg$[rsp]
	mov	BYTE PTR reg$[rsp], al

; 130  : 	}else {

	jmp	SHORT $LN1@setup_rirb
$LN2@setup_rirb:

; 131  : 		printf ("HD Audio: No supported RIRB size !!\n");

	lea	rcx, OFFSET FLAT:$SG3385
	call	?printf@@YAXPEBDZZ			; printf
$LN1@setup_rirb:
$LN3@setup_rirb:
$LN5@setup_rirb:

; 132  : 		//_ihd_audio.rirb_entries = 256;
; 133  : 		//reg |= 0x2;
; 134  : 	}
; 135  : 
; 136  : 	_aud_outb_(RIRBSIZE,reg);

	movzx	edx, BYTE PTR reg$[rsp]
	mov	ecx, 94					; 0000005eH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 137  : 
; 138  : 	/* Set RIRB Base address */
; 139  : 	rirb_base = (uintptr_t)_ihd_audio.rirb;

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+16
	mov	QWORD PTR rirb_base$[rsp], rax

; 140  : 	_aud_outl_(RIRBLBASE, rirb_base & 0xffffffff);

	mov	eax, -1					; ffffffffH
	mov	rcx, QWORD PTR rirb_base$[rsp]
	and	rcx, rax
	mov	rax, rcx
	mov	edx, eax
	mov	ecx, 80					; 00000050H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 141  : 	_aud_outl_(RIRBUBASE, rirb_base >> 32);

	mov	rax, QWORD PTR rirb_base$[rsp]
	shr	rax, 32					; 00000020H
	mov	edx, eax
	mov	ecx, 84					; 00000054H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 142  : 
; 143  : 	_aud_outb_(RINTCNT, 0x42);

	mov	dl, 66					; 00000042H
	mov	ecx, 90					; 0000005aH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 144  : 	/* Start DMA Engine */
; 145  : 	_aud_outl_(RIRBCTL, 0x1);

	mov	edx, 1
	mov	ecx, 92					; 0000005cH
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 146  : 	_aud_outl_(RIRBCTL, (1<<1));

	mov	edx, 2
	mov	ecx, 92					; 0000005cH
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 147  : }

	add	rsp, 56					; 00000038H
	ret	0
?setup_rirb@@YAXXZ ENDP					; setup_rirb
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
reg$ = 32
corb_entries$ = 36
corb_base$ = 40
?setup_corb@@YAXXZ PROC					; setup_corb

; 62   : void setup_corb () {

$LN9:
	sub	rsp, 56					; 00000038H

; 63   : 	
; 64   : 	uint8_t reg;
; 65   : 	uint64_t corb_base;
; 66   : 	unsigned int corb_entries = 0;

	mov	DWORD PTR corb_entries$[rsp], 0

; 67   : 
; 68   : 	reg = _aud_inw_(CORBSIZE);

	mov	ecx, 78					; 0000004eH
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	mov	BYTE PTR reg$[rsp], al

; 69   : 	printf ("CORB Size -> %x\n", reg);

	movzx	eax, BYTE PTR reg$[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG3358
	call	?printf@@YAXPEBDZZ			; printf

; 70   : 	/* Check CORB size capabilities and choose the largest size */
; 71   : 	if (reg & (1 << 6)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN6@setup_corb

; 72   : 		_ihd_audio.corb_entries = 256;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28, 256 ; 00000100H

; 73   : 		printf ("CORB size -> 256\n");

	lea	rcx, OFFSET FLAT:$SG3360
	call	?printf@@YAXPEBDZZ			; printf

; 74   : 		reg |= 0x2;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 2
	mov	BYTE PTR reg$[rsp], al
	jmp	SHORT $LN5@setup_corb
$LN6@setup_corb:

; 75   : 	} else if (reg & (1 << 5)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN4@setup_corb

; 76   : 		_ihd_audio.corb_entries = 16;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28, 16

; 77   : 		printf ("Corb size -> 16\n");

	lea	rcx, OFFSET FLAT:$SG3363
	call	?printf@@YAXPEBDZZ			; printf

; 78   : 		reg |= 0x1;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 1
	mov	BYTE PTR reg$[rsp], al
	jmp	SHORT $LN3@setup_corb
$LN4@setup_corb:

; 79   : 	} else if (reg & (1 << 4)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN2@setup_corb

; 80   : 		_ihd_audio.corb_entries = 2;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28, 2

; 81   : 		printf ("Corb size -> 2\n");

	lea	rcx, OFFSET FLAT:$SG3366
	call	?printf@@YAXPEBDZZ			; printf

; 82   : 		reg |= 0x0;

	movzx	eax, BYTE PTR reg$[rsp]
	mov	BYTE PTR reg$[rsp], al

; 83   : 	} else {

	jmp	SHORT $LN1@setup_corb
$LN2@setup_corb:

; 84   : 		printf ("HD Audio: No Supported CORB Size!\n");

	lea	rcx, OFFSET FLAT:$SG3368
	call	?printf@@YAXPEBDZZ			; printf

; 85   : 		_ihd_audio.corb_entries = 256;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28, 256 ; 00000100H
$LN1@setup_corb:
$LN3@setup_corb:
$LN5@setup_corb:

; 86   : 		//reg |= 0x2;*/
; 87   : 	}
; 88   : 
; 89   : 	_aud_outb_(CORBSIZE, reg);

	movzx	edx, BYTE PTR reg$[rsp]
	mov	ecx, 78					; 0000004eH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 90   : 
; 91   : 	//printf ("CORB Entries -> %d\n", corb_entries);
; 92   : 
; 93   : 	/* Set CORB Base Address */
; 94   : 	corb_base = (uintptr_t)_ihd_audio.corb;

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+8
	mov	QWORD PTR corb_base$[rsp], rax

; 95   : 	_aud_outl_(CORBLBASE, corb_base & 0xffffffff);

	mov	eax, -1					; ffffffffH
	mov	rcx, QWORD PTR corb_base$[rsp]
	and	rcx, rax
	mov	rax, rcx
	mov	edx, eax
	mov	ecx, 64					; 00000040H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 96   : 	_aud_outl_(CORBUBASE, corb_base >> 32);

	mov	rax, QWORD PTR corb_base$[rsp]
	shr	rax, 32					; 00000020H
	mov	edx, eax
	mov	ecx, 68					; 00000044H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 97   : 
; 98   : 	//printf ("CORB BASE LO -> %x\n", corb_base & 0xffffffff);
; 99   : 	//printf ("CORB BASE HI -> %x\n", corb_base >> 32);
; 100  : 	/* Start DMA engine */
; 101  : 	_aud_outl_(CORBCTL, 0x02);

	mov	edx, 2
	mov	ecx, 76					; 0000004cH
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 102  : }

	add	rsp, 56					; 00000038H
	ret	0
?setup_corb@@YAXXZ ENDP					; setup_corb
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
v$ = 48
p$ = 56
?hda_handler@@YAX_KPEAX@Z PROC				; hda_handler

; 53   : void hda_handler (size_t v, void* p) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 54   : 	printf ("HD-Audio Interrupt fired++\n");

	lea	rcx, OFFSET FLAT:$SG3352
	call	?printf@@YAXPEBDZZ			; printf

; 55   : 	//apic_local_eoi();
; 56   : 	interrupt_end(0);

	xor	ecx, ecx
	call	?interrupt_end@@YAXI@Z			; interrupt_end

; 57   : }

	add	rsp, 40					; 00000028H
	ret	0
?hda_handler@@YAX_KPEAX@Z ENDP				; hda_handler
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
?_aud_inb_@@YAEH@Z PROC					; _aud_inb_

; 47   : uint8_t _aud_inb_ (int reg) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 48   : 	volatile uint8_t* mmio = (uint8_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 49   : 	return *mmio;

	mov	rax, QWORD PTR mmio$[rsp]
	movzx	eax, BYTE PTR [rax]

; 50   : }

	add	rsp, 24
	ret	0
?_aud_inb_@@YAEH@Z ENDP					; _aud_inb_
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
value$ = 40
?_aud_outb_@@YAXHE@Z PROC				; _aud_outb_

; 42   : void _aud_outb_ (int reg, uint8_t value) {

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 43   : 	volatile uint8_t* mmio = (uint8_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 44   : 	*mmio = value;

	mov	rax, QWORD PTR mmio$[rsp]
	movzx	ecx, BYTE PTR value$[rsp]
	mov	BYTE PTR [rax], cl

; 45   : }

	add	rsp, 24
	ret	0
?_aud_outb_@@YAXHE@Z ENDP				; _aud_outb_
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
?_aud_inw_@@YAGH@Z PROC					; _aud_inw_

; 36   : uint16_t _aud_inw_(int reg) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 37   : 	volatile uint16_t* mmio = (uint16_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 38   : 	return *mmio;

	mov	rax, QWORD PTR mmio$[rsp]
	movzx	eax, WORD PTR [rax]

; 39   : }

	add	rsp, 24
	ret	0
?_aud_inw_@@YAGH@Z ENDP					; _aud_inw_
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
value$ = 40
?_aud_outw_@@YAXHG@Z PROC				; _aud_outw_

; 31   : void _aud_outw_ (int reg, uint16_t value) {

$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 32   : 	uint16_t* mmio = (uint16_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 33   : 	*mmio = value;

	mov	rax, QWORD PTR mmio$[rsp]
	movzx	ecx, WORD PTR value$[rsp]
	mov	WORD PTR [rax], cx

; 34   : }

	add	rsp, 24
	ret	0
?_aud_outw_@@YAXHG@Z ENDP				; _aud_outw_
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
?_aud_inl_@@YAIH@Z PROC					; _aud_inl_

; 26   : uint32_t _aud_inl_ (int reg) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 27   : 	volatile uint32_t* mmio = (uint32_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 28   : 	return *mmio;

	mov	rax, QWORD PTR mmio$[rsp]
	mov	eax, DWORD PTR [rax]

; 29   : }

	add	rsp, 24
	ret	0
?_aud_inl_@@YAIH@Z ENDP					; _aud_inl_
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
value$ = 40
?_aud_outl_@@YAXHI@Z PROC				; _aud_outl_

; 21   : void _aud_outl_(int reg, uint32_t value) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 22   : 	 volatile uint32_t* mmio = (uint32_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 23   : 	*mmio = value;

	mov	rax, QWORD PTR mmio$[rsp]
	mov	ecx, DWORD PTR value$[rsp]
	mov	DWORD PTR [rax], ecx

; 24   : }

	add	rsp, 24
	ret	0
?_aud_outl_@@YAXHI@Z ENDP				; _aud_outl_
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
tv90 = 32
pci_dev$ = 48
?hda_initialize@@YAXXZ PROC				; hda_initialize

; 369  : void hda_initialize () {

$LN6:
	sub	rsp, 312				; 00000138H

; 370  : 	pci_device_info pci_dev;
; 371  : 	if (!pci_find_device_class (0x04, 0x03, &pci_dev)){

	lea	r8, QWORD PTR pci_dev$[rsp]
	mov	dl, 3
	mov	cl, 4
	call	?pci_find_device_class@@YA_NEEPEATpci_device_info@@@Z ; pci_find_device_class
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@hda_initia

; 372  : 		printf ("No HD-Audio was found\n");

	lea	rcx, OFFSET FLAT:$SG3491
	call	?printf@@YAXPEBDZZ			; printf

; 373  : 		return;

	jmp	$LN4@hda_initia
$LN3@hda_initia:

; 374  : 	}
; 375  : 
; 376  : 	x64_cli();

	call	x64_cli

; 377  : 
; 378  : 	//printf ("HD Audio found vendor -> %x, device -> %x\n", pci_dev.device.vendorID, pci_dev.device.deviceID);
; 379  : 
; 380  : 	/*uint64_t* ring_address = (uint64_t*)malloc(1024 + 2048 + BDL_BYTES_ROUNDED + 128);
; 381  : 	memset (ring_address, 100, 1024 + 2048 + BDL_BYTES_ROUNDED + 128);*/
; 382  : 
; 383  : 	if (pci_dev.device.nonBridge.interruptLine < 255) 

	movzx	eax, BYTE PTR pci_dev$[rsp+60]
	cmp	eax, 255				; 000000ffH
	jge	SHORT $LN2@hda_initia

; 384  : 		interrupt_set (pci_dev.device.nonBridge.interruptLine, hda_handler, pci_dev.device.nonBridge.interruptLine);

	movzx	eax, BYTE PTR pci_dev$[rsp+60]
	movzx	r8d, BYTE PTR pci_dev$[rsp+60]
	lea	rdx, OFFSET FLAT:?hda_handler@@YAX_KPEAX@Z ; hda_handler
	mov	ecx, eax
	call	?interrupt_set@@YAX_KP6AX0PEAX@ZE@Z	; interrupt_set
$LN2@hda_initia:

; 385  : 	_ihd_audio.mmio = pci_dev.device.nonBridge.baseAddress[0]; //& ~3);

	mov	eax, 4
	imul	rax, 0
	mov	eax, DWORD PTR pci_dev$[rsp+rax+16]
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A, rax

; 386  : 	_ihd_audio.corb = (uint64_t*)pmmngr_alloc(); //ring_address;   //for 256 entries only 1 kb will be used

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+8, rax

; 387  : 	_ihd_audio.rirb = (uint64_t*)pmmngr_alloc(); //(ring_address + 1024);

	call	?pmmngr_alloc@@YAPEAXXZ			; pmmngr_alloc
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+16, rax

; 388  : 	if (_aud_inw_ (GCAP) & 1) {

	xor	ecx, ecx
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	movzx	eax, ax
	and	eax, 1
	test	eax, eax
	je	SHORT $LN1@hda_initia

; 389  : 		printf ("HD-Audio 64-OK\n");

	lea	rcx, OFFSET FLAT:$SG3496
	call	?printf@@YAXPEBDZZ			; printf
$LN1@hda_initia:

; 390  : 	}
; 391  : 
; 392  : 	printf ("HD-Audio Version - %d.%d\n", _aud_inb_(VMAJ), _aud_inb_(VMIN));

	mov	ecx, 2
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	movzx	eax, al
	mov	DWORD PTR tv90[rsp], eax
	mov	ecx, 3
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	movzx	eax, al
	mov	ecx, DWORD PTR tv90[rsp]
	mov	r8d, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG3497
	call	?printf@@YAXPEBDZZ			; printf

; 393  : 	hda_reset();

	call	?hda_reset@@YAXXZ			; hda_reset

; 394  : 	x64_sti();

	call	x64_sti
$LN4@hda_initia:

; 395  : }

	add	rsp, 312				; 00000138H
	ret	0
?hda_initialize@@YAXXZ ENDP				; hda_initialize
_TEXT	ENDS
END
