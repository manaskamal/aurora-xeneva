; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_ihd_audio@@3U_hd_audio_@@A			; _ihd_audio
PUBLIC	?rirbrp@@3GA					; rirbrp
PUBLIC	?corbwp@@3GA					; corbwp
PUBLIC	?play_data@@3PEAEEA				; play_data
PUBLIC	?play_length@@3IA				; play_length
PUBLIC	?default_data@@3PEAEEA				; default_data
PUBLIC	?play_pos@@3PEAEEA				; play_pos
_BSS	SEGMENT
?_ihd_audio@@3U_hd_audio_@@A DB 051H DUP (?)		; _ihd_audio
	ALIGN	4

?rirbrp@@3GA DW	01H DUP (?)				; rirbrp
	ALIGN	4

?corbwp@@3GA DW	01H DUP (?)				; corbwp
	ALIGN	4

hdaudio_initialized DB 01H DUP (?)
	ALIGN	8

?play_data@@3PEAEEA DQ 01H DUP (?)			; play_data
?play_length@@3IA DD 01H DUP (?)			; play_length
	ALIGN	8

?default_data@@3PEAEEA DQ 01H DUP (?)			; default_data
?play_pos@@3PEAEEA DQ 01H DUP (?)			; play_pos
_BSS	ENDS
CONST	SEGMENT
$SG3748	DB	'AUD:INB -> %x ', 0dH, 0aH, 00H
	ORG $+7
$SG3755	DB	'AUD:OUTB -> %x ', 0dH, 0aH, 00H
	ORG $+6
$SG3766	DB	'HDA Handler called ', 0dH, 0aH, 00H
	ORG $+2
$SG3794	DB	'HD Audio: No supported RIRB size !!', 0aH, 00H
	ORG $+3
$SG3797	DB	'RIRB DMA Engine started', 0aH, 00H
	ORG $+3
$SG3893	DB	'output', 00H
	ORG $+5
$SG3833	DB	'Setting volume ', 0dH, 0aH, 00H
	ORG $+2
$SG3895	DB	'input', 00H
	ORG $+2
$SG3897	DB	'mixer', 00H
	ORG $+6
$SG3899	DB	'selector', 00H
	ORG $+3
$SG3903	DB	'power', 00H
	ORG $+6
$SG3901	DB	'pin complex', 00H
	ORG $+4
$SG3905	DB	'volume knob', 00H
	ORG $+4
$SG3907	DB	'beep generator', 00H
	ORG $+1
$SG3909	DB	'vendor defined', 00H
	ORG $+1
$SG3911	DB	'unknown', 00H
$SG3930	DB	'[HD_Audio]: Num Function Group -> %d, fg_start -> %d', 0aH
	DB	00H
	ORG $+2
$SG3932	DB	'[HD-Audio]:Widget device id -> %x, vendor id -> %x', 0aH
	DB	00H
	ORG $+4
$SG3934	DB	'[HD-Audio]:Widget version -> %d.%d, r0%d', 0aH, 00H
	ORG $+6
$SG3938	DB	'Widget start -> %d, num widgets -> %d', 0aH, 00H
	ORG $+1
$SG3940	DB	'FG not audio group', 0aH, 00H
	ORG $+4
$SG3967	DB	'Writing HDA ', 0dH, 0aH, 00H
	ORG $+1
$SG3973	DB	'[HD-Audio]: INterrupt int -> %d', 0aH, 00H
	ORG $+7
$SG3976	DB	'_IHD_MMIO -> %x ', 0dH, 0aH, 00H
	ORG $+5
$SG3979	DB	'_IHD Corb -> %x, RIRB -> %x ', 0dH, 0aH, 00H
	ORG $+1
$SG3988	DB	'HD-Audio 64-OK', 0aH, 00H
$SG3998	DB	'HDA Device found at index ->%d', 0aH, 00H
$SG4002	DB	'IHD-Audio Initialized successfully', 0aH, 00H
CONST	ENDS
PUBLIC	?hda_initialize@@YAXXZ				; hda_initialize
PUBLIC	?codec_query@@YAIHHI@Z				; codec_query
PUBLIC	?hda_set_volume@@YAXE@Z				; hda_set_volume
PUBLIC	?hda_audio_add_pcm@@YAXPEAE_KI@Z		; hda_audio_add_pcm
PUBLIC	?hda_audio_play@@YAXXZ				; hda_audio_play
PUBLIC	?hda_output_stop@@YAXXZ				; hda_output_stop
PUBLIC	?hda_handler@@YAX_KPEAX@Z			; hda_handler
PUBLIC	?is_hdaudio_initialized@@YA_NXZ			; is_hdaudio_initialized
PUBLIC	?hda_get_buffer_number@@YAHXZ			; hda_get_buffer_number
PUBLIC	?_aud_outl_@@YAXHI@Z				; _aud_outl_
PUBLIC	?_aud_inl_@@YAIH@Z				; _aud_inl_
PUBLIC	?_aud_outw_@@YAXHG@Z				; _aud_outw_
PUBLIC	?_aud_inw_@@YAGH@Z				; _aud_inw_
PUBLIC	?_aud_inb_@@YAEH@Z				; _aud_inb_
PUBLIC	?_aud_outb_@@YAXHE@Z				; _aud_outb_
PUBLIC	?setup_corb@@YAXXZ				; setup_corb
PUBLIC	?setup_rirb@@YAXXZ				; setup_rirb
PUBLIC	?hda_init_output_stream@@YAXXZ			; hda_init_output_stream
PUBLIC	?hda_init_output@@YAXXZ				; hda_init_output
PUBLIC	?widget_init@@YAXHH@Z				; widget_init
PUBLIC	?hda_reset@@YAXXZ				; hda_reset
PUBLIC	?hda_output_start@@YAXXZ			; hda_output_start
PUBLIC	?hda_write@@YAXPEAE_K@Z				; hda_write
EXTRN	memset:PROC
EXTRN	memcpy:PROC
EXTRN	AuPmmngrAlloc:PROC
EXTRN	p2v:PROC
EXTRN	v2p:PROC
EXTRN	x64_read_cr3:PROC
EXTRN	AuMapPage:PROC
EXTRN	AuGetPhysicalAddress:PROC
EXTRN	AuMapMMIO:PROC
EXTRN	malloc:PROC
EXTRN	AuInterruptEnd:PROC
EXTRN	AuInterruptSet:PROC
EXTRN	printf:PROC
EXTRN	AuSoundRegisterDevice:PROC
EXTRN	_debug_print_:PROC
EXTRN	__ImageBase:BYTE
pdata	SEGMENT
$pdata$?hda_initialize@@YAXXZ DD imagerel $LN12
	DD	imagerel $LN12+746
	DD	imagerel $unwind$?hda_initialize@@YAXXZ
$pdata$?codec_query@@YAIHHI@Z DD imagerel $LN6
	DD	imagerel $LN6+132
	DD	imagerel $unwind$?codec_query@@YAIHHI@Z
$pdata$?hda_set_volume@@YAXE@Z DD imagerel $LN4
	DD	imagerel $LN4+377
	DD	imagerel $unwind$?hda_set_volume@@YAXE@Z
$pdata$?hda_audio_add_pcm@@YAXPEAE_KI@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?hda_audio_add_pcm@@YAXPEAE_KI@Z
$pdata$?hda_audio_play@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+21
	DD	imagerel $unwind$?hda_audio_play@@YAXXZ
$pdata$?hda_output_stop@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?hda_output_stop@@YAXXZ
$pdata$?hda_handler@@YAX_KPEAX@Z DD imagerel $LN4
	DD	imagerel $LN4+189
	DD	imagerel $unwind$?hda_handler@@YAX_KPEAX@Z
$pdata$?_aud_outl_@@YAXHI@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?_aud_outl_@@YAXHI@Z
$pdata$?_aud_inl_@@YAIH@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?_aud_inl_@@YAIH@Z
$pdata$?_aud_outw_@@YAXHG@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?_aud_outw_@@YAXHG@Z
$pdata$?_aud_inw_@@YAGH@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?_aud_inw_@@YAGH@Z
$pdata$?_aud_inb_@@YAEH@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$?_aud_inb_@@YAEH@Z
$pdata$?_aud_outb_@@YAXHE@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$?_aud_outb_@@YAXHE@Z
$pdata$?setup_corb@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+317
	DD	imagerel $unwind$?setup_corb@@YAXXZ
$pdata$?setup_rirb@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+341
	DD	imagerel $unwind$?setup_rirb@@YAXXZ
$pdata$?corb_write@@YAXI@Z DD imagerel ?corb_write@@YAXI@Z
	DD	imagerel ?corb_write@@YAXI@Z+228
	DD	imagerel $unwind$?corb_write@@YAXI@Z
$pdata$?rirb_read@@YAXPEA_K@Z DD imagerel ?rirb_read@@YAXPEA_K@Z
	DD	imagerel ?rirb_read@@YAXPEA_K@Z+157
	DD	imagerel $unwind$?rirb_read@@YAXPEA_K@Z
$pdata$?hda_init_output_stream@@YAXXZ DD imagerel $LN15
	DD	imagerel $LN15+599
	DD	imagerel $unwind$?hda_init_output_stream@@YAXXZ
$pdata$?hda_init_output@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+921
	DD	imagerel $unwind$?hda_init_output@@YAXXZ
$pdata$?widget_init@@YAXHH@Z DD imagerel $LN23
	DD	imagerel $LN23+608
	DD	imagerel $unwind$?widget_init@@YAXHH@Z
$pdata$?codec_enumerate_widgets@@YAHH@Z DD imagerel ?codec_enumerate_widgets@@YAHH@Z
	DD	imagerel ?codec_enumerate_widgets@@YAHH@Z+483
	DD	imagerel $unwind$?codec_enumerate_widgets@@YAHH@Z
$pdata$?hda_reset@@YAXXZ DD imagerel $LN10
	DD	imagerel $LN10+185
	DD	imagerel $unwind$?hda_reset@@YAXXZ
$pdata$?hda_output_start@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$?hda_output_start@@YAXXZ
$pdata$?hda_write@@YAXPEAE_K@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?hda_write@@YAXPEAE_K@Z
pdata	ENDS
xdata	SEGMENT
$unwind$?hda_initialize@@YAXXZ DD 010401H
	DD	0c204H
$unwind$?codec_query@@YAIHHI@Z DD 011101H
	DD	08211H
$unwind$?hda_set_volume@@YAXE@Z DD 010801H
	DD	06208H
$unwind$?hda_audio_add_pcm@@YAXPEAE_KI@Z DD 011301H
	DD	04213H
$unwind$?hda_audio_play@@YAXXZ DD 010401H
	DD	04204H
$unwind$?hda_output_stop@@YAXXZ DD 010401H
	DD	06204H
$unwind$?hda_handler@@YAX_KPEAX@Z DD 010e01H
	DD	0620eH
$unwind$?_aud_outl_@@YAXHI@Z DD 010c01H
	DD	0220cH
$unwind$?_aud_inl_@@YAIH@Z DD 010801H
	DD	02208H
$unwind$?_aud_outw_@@YAXHG@Z DD 010d01H
	DD	0220dH
$unwind$?_aud_inw_@@YAGH@Z DD 010801H
	DD	02208H
$unwind$?_aud_inb_@@YAEH@Z DD 010801H
	DD	06208H
$unwind$?_aud_outb_@@YAXHE@Z DD 010c01H
	DD	0620cH
$unwind$?setup_corb@@YAXXZ DD 010401H
	DD	08204H
$unwind$?setup_rirb@@YAXXZ DD 010401H
	DD	08204H
$unwind$?corb_write@@YAXI@Z DD 010801H
	DD	06208H
$unwind$?rirb_read@@YAXPEA_K@Z DD 010901H
	DD	06209H
$unwind$?hda_init_output_stream@@YAXXZ DD 010401H
	DD	0c204H
$unwind$?hda_init_output@@YAXXZ DD 010401H
	DD	08204H
$unwind$?widget_init@@YAXHH@Z DD 010c01H
	DD	0a20cH
$unwind$?codec_enumerate_widgets@@YAHH@Z DD 010801H
	DD	0a208H
$unwind$?hda_reset@@YAXXZ DD 010401H
	DD	04204H
$unwind$?hda_output_start@@YAXXZ DD 010401H
	DD	06204H
$unwind$?hda_write@@YAXPEAE_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
buffer$ = 48
length$ = 56
?hda_write@@YAXPEAE_K@Z PROC				; hda_write

; 540  : void hda_write (uint8_t* buffer, size_t length) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 541  : 	_debug_print_ ("Writing HDA \r\n");

	lea	rcx, OFFSET FLAT:$SG3967
	call	_debug_print_

; 542  : 	hda_audio_add_pcm(buffer,0,length);

	mov	r8d, DWORD PTR length$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR buffer$[rsp]
	call	?hda_audio_add_pcm@@YAXPEAE_KI@Z	; hda_audio_add_pcm

; 543  : }

	add	rsp, 40					; 00000028H
	ret	0
?hda_write@@YAXPEAE_K@Z ENDP				; hda_write
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
value$ = 32
?hda_output_start@@YAXXZ PROC				; hda_output_start

; 524  : void hda_output_start () {

$LN3:
	sub	rsp, 56					; 00000038H

; 525  : 	//_aud_outb_(REG_O0_STS(_ihd_audio), (1<<2) | (1<<3) | (1<<4));
; 526  : 
; 527  : 	uint32_t value = _aud_inl_(REG_O0_CTLL(_ihd_audio));

	mov	ecx, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	call	?_aud_inl_@@YAIH@Z			; _aud_inl_
	mov	DWORD PTR value$[rsp], eax

; 528  : 	value |= 0x4;

	mov	eax, DWORD PTR value$[rsp]
	or	eax, 4
	mov	DWORD PTR value$[rsp], eax

; 529  : 	value |= 0x2;

	mov	eax, DWORD PTR value$[rsp]
	or	eax, 2
	mov	DWORD PTR value$[rsp], eax

; 530  :     _aud_outw_(REG_O0_CTLL(_ihd_audio),value);

	movzx	edx, WORD PTR value$[rsp]
	mov	ecx, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 531  : }

	add	rsp, 56					; 00000038H
	ret	0
?hda_output_start@@YAXXZ ENDP				; hda_output_start
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
?hda_reset@@YAXXZ PROC					; hda_reset

; 504  : void hda_reset() {

$LN10:
	sub	rsp, 40					; 00000028H

; 505  : 	_aud_outl_(CORBCTL, 0);

	xor	edx, edx
	mov	ecx, 76					; 0000004cH
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 506  : 	_aud_outl_(RIRBCTL, 0);

	xor	edx, edx
	mov	ecx, 92					; 0000005cH
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 507  : 	_aud_outw_(RIRBWP, 0);

	xor	edx, edx
	mov	ecx, 88					; 00000058H
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_
$LN7@hda_reset:

; 508  : 	while ((_aud_inl_(CORBCTL) & CORBCTL_CORBRUN) ||
; 509  : 		(_aud_inl_(RIRBCTL) & RIRBCTL_RIRBRUN));

	mov	ecx, 76					; 0000004cH
	call	?_aud_inl_@@YAIH@Z			; _aud_inl_
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN5@hda_reset
	mov	ecx, 92					; 0000005cH
	call	?_aud_inl_@@YAIH@Z			; _aud_inl_
	and	eax, 2
	test	eax, eax
	je	SHORT $LN6@hda_reset
$LN5@hda_reset:
	jmp	SHORT $LN7@hda_reset
$LN6@hda_reset:

; 510  : 
; 511  : 	_aud_outl_(GCTL, 0);

	xor	edx, edx
	mov	ecx, 8
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_
$LN4@hda_reset:

; 512  : 	while ((_aud_inl_(GCTL) & GCTL_RESET));

	mov	ecx, 8
	call	?_aud_inl_@@YAIH@Z			; _aud_inl_
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@hda_reset
	jmp	SHORT $LN4@hda_reset
$LN3@hda_reset:

; 513  : 
; 514  : 	_aud_outl_ (GCTL, GCTL_RESET);

	mov	edx, 1
	mov	ecx, 8
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_
$LN2@hda_reset:

; 515  : 	while ((_aud_inl_(GCTL) & GCTL_RESET) == 0);

	mov	ecx, 8
	call	?_aud_inl_@@YAIH@Z			; _aud_inl_
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN1@hda_reset
	jmp	SHORT $LN2@hda_reset
$LN1@hda_reset:

; 516  : 
; 517  : 	_aud_outw_(WAKEEN, 0xffff);

	mov	dx, 65535				; 0000ffffH
	mov	ecx, 12
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 518  : 	_aud_outl_(INTCTL,0x800000ff);

	mov	edx, -2147483393			; 800000ffH
	mov	ecx, 32					; 00000020H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 519  : 	setup_corb();

	call	?setup_corb@@YAXXZ			; setup_corb

; 520  : 	setup_rirb();

	call	?setup_rirb@@YAXXZ			; setup_rirb

; 521  : }

	add	rsp, 40					; 00000028H
	ret	0
?hda_reset@@YAXXZ ENDP					; hda_reset
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
param$ = 32
i$ = 36
j$1 = 40
fg_start$ = 44
rev_id$ = 48
num_fg$ = 52
num_widgets$ = 56
widgets_start$ = 60
vendor_id$ = 64
tv155 = 68
codec$ = 96
?codec_enumerate_widgets@@YAHH@Z PROC			; codec_enumerate_widgets

; 451  : static int codec_enumerate_widgets(int codec) {

	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 88					; 00000058H

; 452  : 
; 453  : 	uint32_t param;
; 454  : 	int num_fg, num_widgets;
; 455  : 	int fg_start, widgets_start;
; 456  : 	int i, j;
; 457  : 
; 458  : 
; 459  : 	param = codec_query (codec, 0, VERB_GET_PARAMETER | PARAM_NODE_COUNT);

	mov	r8d, 983044				; 000f0004H
	xor	edx, edx
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR param$[rsp], eax

; 460  : 
; 461  : 	num_fg = param & 0x000000ff;

	mov	eax, DWORD PTR param$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR num_fg$[rsp], eax

; 462  : 	fg_start = (param & 0x00ff0000) >> 16;

	mov	eax, DWORD PTR param$[rsp]
	and	eax, 16711680				; 00ff0000H
	shr	eax, 16
	mov	DWORD PTR fg_start$[rsp], eax

; 463  : 
; 464  : 
; 465  : 	printf ("[HD_Audio]: Num Function Group -> %d, fg_start -> %d\n", num_fg, fg_start);

	mov	r8d, DWORD PTR fg_start$[rsp]
	mov	edx, DWORD PTR num_fg$[rsp]
	lea	rcx, OFFSET FLAT:$SG3930
	call	printf

; 466  : 
; 467  : 	uint32_t vendor_id = codec_query (codec, 0, VERB_GET_PARAMETER | PARAM_VENDOR_ID);

	mov	r8d, 983040				; 000f0000H
	xor	edx, edx
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR vendor_id$[rsp], eax

; 468  : 	printf ("[HD-Audio]:Widget device id -> %x, vendor id -> %x\n", vendor_id & 0xffff , (vendor_id >> 16 ));

	mov	eax, DWORD PTR vendor_id$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR vendor_id$[rsp]
	and	ecx, 65535				; 0000ffffH
	mov	r8d, eax
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:$SG3932
	call	printf

; 469  : 	
; 470  : 	uint32_t rev_id = codec_query (codec, 0, VERB_GET_PARAMETER | PARAM_REV_ID);

	mov	r8d, 983042				; 000f0002H
	xor	edx, edx
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR rev_id$[rsp], eax

; 471  : 	printf ("[HD-Audio]:Widget version -> %d.%d, r0%d\n", rev_id>>20, rev_id>>16, rev_id>>8);

	mov	eax, DWORD PTR rev_id$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR rev_id$[rsp]
	shr	ecx, 16
	mov	edx, DWORD PTR rev_id$[rsp]
	shr	edx, 20
	mov	r9d, eax
	mov	r8d, ecx
	lea	rcx, OFFSET FLAT:$SG3934
	call	printf

; 472  : 
; 473  : 	
; 474  : 	for (i = 0; i < num_fg; i++) {

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@codec_enum
$LN6@codec_enum:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@codec_enum:
	mov	eax, DWORD PTR num_fg$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN5@codec_enum

; 475  : 
; 476  : 		param = codec_query (codec, fg_start + i, 
; 477  : 			VERB_GET_PARAMETER | PARAM_NODE_COUNT);

	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR fg_start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	r8d, 983044				; 000f0004H
	mov	edx, eax
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR param$[rsp], eax

; 478  : 
; 479  : 		num_widgets = param & 0xff;

	mov	eax, DWORD PTR param$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR num_widgets$[rsp], eax

; 480  : 		widgets_start = (param >> 16) & 0xff;

	mov	eax, DWORD PTR param$[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	DWORD PTR widgets_start$[rsp], eax

; 481  : 		printf ("Widget start -> %d, num widgets -> %d\n", widgets_start, num_widgets);

	mov	r8d, DWORD PTR num_widgets$[rsp]
	mov	edx, DWORD PTR widgets_start$[rsp]
	lea	rcx, OFFSET FLAT:$SG3938
	call	printf

; 482  : 		
; 483  : 		param = codec_query (codec, fg_start + i, VERB_GET_PARAMETER | PARAM_FN_GROUP_TYPE);

	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR fg_start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	r8d, 983045				; 000f0005H
	mov	edx, eax
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR param$[rsp], eax

; 484  : 		param &= 0x000000ff;

	mov	eax, DWORD PTR param$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR param$[rsp], eax

; 485  : 		if (param != FN_GROUP_AUDIO) {

	cmp	DWORD PTR param$[rsp], 1
	je	SHORT $LN4@codec_enum

; 486  : 			printf ("FG not audio group\n");

	lea	rcx, OFFSET FLAT:$SG3940
	call	printf

; 487  : 			continue;

	jmp	$LN6@codec_enum
$LN4@codec_enum:

; 488  : 		}
; 489  : 
; 490  : 		//codec_query (codec, fg_start + i, VERB_SET_POWER_STATE | 0x0);
; 491  : 
; 492  : 		for (int j = 0; j < num_widgets; j++) {

	mov	DWORD PTR j$1[rsp], 0
	jmp	SHORT $LN3@codec_enum
$LN2@codec_enum:
	mov	eax, DWORD PTR j$1[rsp]
	inc	eax
	mov	DWORD PTR j$1[rsp], eax
$LN3@codec_enum:
	mov	eax, DWORD PTR num_widgets$[rsp]
	cmp	DWORD PTR j$1[rsp], eax
	jge	SHORT $LN1@codec_enum

; 493  : 			widget_init (codec, widgets_start + j);

	mov	eax, DWORD PTR j$1[rsp]
	mov	ecx, DWORD PTR widgets_start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	ecx, DWORD PTR codec$[rsp]
	call	?widget_init@@YAXHH@Z			; widget_init

; 494  : 		}

	jmp	SHORT $LN2@codec_enum
$LN1@codec_enum:

; 495  : 		
; 496  : 	}

	jmp	$LN6@codec_enum
$LN5@codec_enum:

; 497  : 
; 498  : 
; 499  : 	return _ihd_audio.output->nid ? 0 : -1;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, WORD PTR [rax+2]
	test	eax, eax
	je	SHORT $LN10@codec_enum
	mov	DWORD PTR tv155[rsp], 0
	jmp	SHORT $LN11@codec_enum
$LN10@codec_enum:
	mov	DWORD PTR tv155[rsp], -1
$LN11@codec_enum:
	mov	eax, DWORD PTR tv155[rsp]

; 500  : }

	add	rsp, 88					; 00000058H
	ret	0
?codec_enumerate_widgets@@YAHH@Z ENDP			; codec_enumerate_widgets
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
s$ = 32
widget_cap$ = 40
amp_gain$ = 44
type$ = 48
tv81 = 52
eapd_btl$ = 56
eapd_$1 = 60
amp_cap$ = 64
tv132 = 68
codec$ = 96
nid$ = 104
?widget_init@@YAXHH@Z PROC				; widget_init

; 389  : void widget_init (int codec, int nid) {

$LN23:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 88					; 00000058H

; 390  : 
; 391  : 	uint32_t widget_cap;
; 392  : 	uint32_t type;
; 393  : 	uint32_t amp_cap;
; 394  : 	uint32_t eapd_btl;
; 395  : 
; 396  : 	//! send a command for audio widget capabilites
; 397  : 	widget_cap = codec_query (codec, nid, VERB_GET_PARAMETER | PARAM_AUDIO_WID_CAP);

	mov	r8d, 983049				; 000f0009H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR widget_cap$[rsp], eax

; 398  : 	if (widget_cap == 0) {

	cmp	DWORD PTR widget_cap$[rsp], 0
	jne	SHORT $LN19@widget_ini

; 399  : 		//! serious problem occured
; 400  : 		return;

	jmp	$LN20@widget_ini
$LN19@widget_ini:

; 401  : 	}
; 402  : 
; 403  : 	type = (widget_cap & WIDGET_CAP_TYPE_MASK) >> WIDGET_CAP_TYPE_SHIFT;

	mov	eax, DWORD PTR widget_cap$[rsp]
	and	eax, 15728640				; 00f00000H
	shr	eax, 20
	mov	DWORD PTR type$[rsp], eax

; 404  : 	amp_cap = codec_query (codec, nid, VERB_GET_PARAMETER | PARAM_OUT_AMP_CAP);

	mov	r8d, 983058				; 000f0012H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR amp_cap$[rsp], eax

; 405  : 	eapd_btl = codec_query (codec, nid, VERB_GET_EAPD_BTL);

	mov	r8d, 986112				; 000f0c00H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR eapd_btl$[rsp], eax

; 406  : 
; 407  : 	if (widget_cap & WIDGET_CAP_POWER_CNTRL) {

	mov	eax, DWORD PTR widget_cap$[rsp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN18@widget_ini

; 408  : 		codec_query(codec, nid, VERB_SET_POWER_STATE | 0x0);

	mov	r8d, 460032				; 00070500H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
$LN18@widget_ini:

; 409  : 	}
; 410  : 
; 411  : 	uint32_t amp_gain;
; 412  : 	const char* s;
; 413  : 
; 414  : 	switch(type) {

	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv81[rsp], eax
	cmp	DWORD PTR tv81[rsp], 16
	ja	$LN6@widget_ini
	mov	eax, DWORD PTR tv81[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN22@widget_ini[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN15@widget_ini:

; 415  : 	case 0:  s = "output"; break;

	lea	rax, OFFSET FLAT:$SG3893
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN16@widget_ini
$LN14@widget_ini:

; 416  : 	case 1:  s = "input"; break;

	lea	rax, OFFSET FLAT:$SG3895
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN16@widget_ini
$LN13@widget_ini:

; 417  : 	case 2:  s = "mixer"; break;

	lea	rax, OFFSET FLAT:$SG3897
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN16@widget_ini
$LN12@widget_ini:

; 418  : 	case 3:  s = "selector"; break;

	lea	rax, OFFSET FLAT:$SG3899
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN16@widget_ini
$LN11@widget_ini:

; 419  : 	case 4:  s = "pin complex"; break;

	lea	rax, OFFSET FLAT:$SG3901
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN16@widget_ini
$LN10@widget_ini:

; 420  : 	case 5:  s = "power"; break;

	lea	rax, OFFSET FLAT:$SG3903
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN16@widget_ini
$LN9@widget_ini:

; 421  : 	case 6:  s = "volume knob"; break;

	lea	rax, OFFSET FLAT:$SG3905
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN16@widget_ini
$LN8@widget_ini:

; 422  : 	case 7:  s = "beep generator"; break;

	lea	rax, OFFSET FLAT:$SG3907
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN16@widget_ini
$LN7@widget_ini:

; 423  : 	case 16: s = "vendor defined"; break;

	lea	rax, OFFSET FLAT:$SG3909
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN16@widget_ini
$LN6@widget_ini:

; 424  : 	default: s = "unknown"; break;

	lea	rax, OFFSET FLAT:$SG3911
	mov	QWORD PTR s$[rsp], rax
$LN16@widget_ini:

; 425  : 
; 426  : 	}
; 427  : 	amp_gain = codec_query(codec, nid, VERB_GET_AMP_GAIN_MUTE | 0x8000) << 8;

	mov	r8d, 753664				; 000b8000H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	shl	eax, 8
	mov	DWORD PTR amp_gain$[rsp], eax

; 428  : 	amp_gain |= codec_query(codec, nid, VERB_GET_AMP_GAIN_MUTE | 0xa000);

	mov	r8d, 761856				; 000ba000H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	ecx, DWORD PTR amp_gain$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR amp_gain$[rsp], eax

; 429  : 
; 430  : 	eapd_btl = codec_query (codec, nid, VERB_GET_EAPD_BTL);	

	mov	r8d, 986112				; 000f0c00H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR eapd_btl$[rsp], eax

; 431  : 	
; 432  : 	switch (type) {

	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv132[rsp], eax
	cmp	DWORD PTR tv132[rsp], 0
	je	SHORT $LN3@widget_ini
	jmp	SHORT $LN1@widget_ini
$LN3@widget_ini:

; 433  : 	case WIDGET_OUTPUT:{
; 434  : 		if (!_ihd_audio.output->nid) {

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, WORD PTR [rax+2]
	test	eax, eax
	jne	SHORT $LN2@widget_ini

; 435  : 			_ihd_audio.output->codec = codec;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR codec$[rsp]
	mov	BYTE PTR [rax], cl

; 436  : 			_ihd_audio.output->nid = nid;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, WORD PTR nid$[rsp]
	mov	WORD PTR [rax+2], cx

; 437  : 			_ihd_audio.output->amp_gain_steps = (amp_cap >> 8) & 0x7f;

	mov	eax, DWORD PTR amp_cap$[rsp]
	shr	eax, 8
	and	eax, 127				; 0000007fH
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	mov	DWORD PTR [rcx+8], eax
$LN2@widget_ini:

; 438  : 		}
; 439  : 
; 440  : 		uint32_t eapd_ = codec_query (codec,nid, VERB_GET_EAPD_BTL);	

	mov	r8d, 986112				; 000f0c00H
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR eapd_$1[rsp], eax

; 441  : 		codec_query (codec, nid,VERB_SET_EAPD_BTL | eapd_ | 0x2);

	mov	eax, DWORD PTR eapd_$1[rsp]
	or	eax, 461824				; 00070c00H
	or	eax, 2
	mov	r8d, eax
	mov	edx, DWORD PTR nid$[rsp]
	mov	ecx, DWORD PTR codec$[rsp]
	call	?codec_query@@YAIHHI@Z			; codec_query
$LN1@widget_ini:
$LN20@widget_ini:

; 442  : 		break;
; 443  : 		}
; 444  : 	default:
; 445  : 		return;
; 446  : 
; 447  : 	}	
; 448  : }

	add	rsp, 88					; 00000058H
	ret	0
	npad	1
$LN22@widget_ini:
	DD	$LN15@widget_ini
	DD	$LN14@widget_ini
	DD	$LN13@widget_ini
	DD	$LN12@widget_ini
	DD	$LN11@widget_ini
	DD	$LN10@widget_ini
	DD	$LN9@widget_ini
	DD	$LN8@widget_ini
	DD	$LN6@widget_ini
	DD	$LN6@widget_ini
	DD	$LN6@widget_ini
	DD	$LN6@widget_ini
	DD	$LN6@widget_ini
	DD	$LN6@widget_ini
	DD	$LN6@widget_ini
	DD	$LN6@widget_ini
	DD	$LN7@widget_ini
?widget_init@@YAXHH@Z ENDP				; widget_init
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
format$ = 32
ctl$ = 36
eapd_btl1$ = 40
eapd_btl2$ = 44
eapd_btl3$ = 48
eapd_btl4$ = 52
eapd_btl5$ = 56
stream$ = 60
?hda_init_output@@YAXXZ PROC				; hda_init_output

; 338  : void hda_init_output () {

$LN3:
	sub	rsp, 72					; 00000048H

; 339  : 	uint16_t format = (0<<14) | (0<<11) | (0<<8)| (1<<4) | (1<<0);  //0<<15 | 0<<14 | 1<<4 | 1;

	mov	eax, 17
	mov	WORD PTR format$[rsp], ax

; 340  : 	codec_query (_ihd_audio.output->codec, 2, VERB_SET_FORMAT | format);

	movzx	eax, WORD PTR format$[rsp]
	bts	eax, 17
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 2
	call	?codec_query@@YAIHHI@Z			; codec_query

; 341  : 	codec_query (_ihd_audio.output->codec, 3, VERB_SET_FORMAT | format);

	movzx	eax, WORD PTR format$[rsp]
	bts	eax, 17
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 3
	call	?codec_query@@YAIHHI@Z			; codec_query

; 342  : 	codec_query (_ihd_audio.output->codec, 4, VERB_SET_FORMAT | format);

	movzx	eax, WORD PTR format$[rsp]
	bts	eax, 17
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 4
	call	?codec_query@@YAIHHI@Z			; codec_query

; 343  : 	codec_query (_ihd_audio.output->codec, 5, VERB_SET_FORMAT | format);

	movzx	eax, WORD PTR format$[rsp]
	bts	eax, 17
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 5
	call	?codec_query@@YAIHHI@Z			; codec_query

; 344  : 	codec_query (_ihd_audio.output->codec, 6, VERB_SET_FORMAT | format);

	movzx	eax, WORD PTR format$[rsp]
	bts	eax, 17
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 6
	call	?codec_query@@YAIHHI@Z			; codec_query

; 345  : 
; 346  : 	codec_query (_ihd_audio.output->codec, 2, VERB_SET_STREAM_CHANNEL | 0x10);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, BYTE PTR [rax]
	mov	r8d, 460304				; 00070610H
	mov	edx, 2
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 347  : 	codec_query (_ihd_audio.output->codec, 3, VERB_SET_STREAM_CHANNEL | 0x10);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, BYTE PTR [rax]
	mov	r8d, 460304				; 00070610H
	mov	edx, 3
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 348  : 	codec_query (_ihd_audio.output->codec, 4, VERB_SET_STREAM_CHANNEL | 0x10);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, BYTE PTR [rax]
	mov	r8d, 460304				; 00070610H
	mov	edx, 4
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 349  : 	codec_query (_ihd_audio.output->codec, 5, VERB_SET_STREAM_CHANNEL | 0x10);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, BYTE PTR [rax]
	mov	r8d, 460304				; 00070610H
	mov	edx, 5
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 350  : 	codec_query (_ihd_audio.output->codec, 6, VERB_SET_STREAM_CHANNEL | 0x10);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, BYTE PTR [rax]
	mov	r8d, 460304				; 00070610H
	mov	edx, 6
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 351  : 
; 352  :     uint32_t stream = codec_query (_ihd_audio.output->codec, _ihd_audio.output->nid, 0xF0600);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, 984576				; 000f0600H
	mov	edx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR stream$[rsp], eax

; 353  : 
; 354  : 	_ihd_audio.output->sample_rate = SR_48_KHZ;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	mov	DWORD PTR [rax+4], 0

; 355  : 	_ihd_audio.output->num_channels = 2;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	mov	DWORD PTR [rax+12], 2

; 356  : 
; 357  : 
; 358  : 	uint32_t eapd_btl1 = codec_query (_ihd_audio.output->codec, 2, VERB_GET_EAPD_BTL);	

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, BYTE PTR [rax]
	mov	r8d, 986112				; 000f0c00H
	mov	edx, 2
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR eapd_btl1$[rsp], eax

; 359  : 	codec_query (_ihd_audio.output->codec, 2,VERB_SET_EAPD_BTL |eapd_btl1 | 0x2);

	mov	eax, DWORD PTR eapd_btl1$[rsp]
	or	eax, 461824				; 00070c00H
	or	eax, 2
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 2
	call	?codec_query@@YAIHHI@Z			; codec_query

; 360  : 	uint32_t eapd_btl2 = codec_query (_ihd_audio.output->codec, 3, VERB_GET_EAPD_BTL);	

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, BYTE PTR [rax]
	mov	r8d, 986112				; 000f0c00H
	mov	edx, 3
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR eapd_btl2$[rsp], eax

; 361  : 	codec_query (_ihd_audio.output->codec, 3,VERB_SET_EAPD_BTL |eapd_btl2 | 0x2);

	mov	eax, DWORD PTR eapd_btl2$[rsp]
	or	eax, 461824				; 00070c00H
	or	eax, 2
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 3
	call	?codec_query@@YAIHHI@Z			; codec_query

; 362  : 	uint32_t eapd_btl3 = codec_query (_ihd_audio.output->codec, 4, VERB_GET_EAPD_BTL);	

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, BYTE PTR [rax]
	mov	r8d, 986112				; 000f0c00H
	mov	edx, 4
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR eapd_btl3$[rsp], eax

; 363  : 	codec_query (_ihd_audio.output->codec, 4,VERB_SET_EAPD_BTL |eapd_btl3 | 0x2);

	mov	eax, DWORD PTR eapd_btl3$[rsp]
	or	eax, 461824				; 00070c00H
	or	eax, 2
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 4
	call	?codec_query@@YAIHHI@Z			; codec_query

; 364  : 	uint32_t eapd_btl4 = codec_query (_ihd_audio.output->codec, 5, VERB_GET_EAPD_BTL);	

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, BYTE PTR [rax]
	mov	r8d, 986112				; 000f0c00H
	mov	edx, 5
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR eapd_btl4$[rsp], eax

; 365  : 	codec_query (_ihd_audio.output->codec, 5,VERB_SET_EAPD_BTL |eapd_btl4 | 0x2);

	mov	eax, DWORD PTR eapd_btl4$[rsp]
	or	eax, 461824				; 00070c00H
	or	eax, 2
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 5
	call	?codec_query@@YAIHHI@Z			; codec_query

; 366  : 	uint32_t eapd_btl5 = codec_query (_ihd_audio.output->codec, 6, VERB_GET_EAPD_BTL);	

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, BYTE PTR [rax]
	mov	r8d, 986112				; 000f0c00H
	mov	edx, 6
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR eapd_btl5$[rsp], eax

; 367  : 	codec_query (_ihd_audio.output->codec, 6,VERB_SET_EAPD_BTL |eapd_btl5 | 0x2);

	mov	eax, DWORD PTR eapd_btl5$[rsp]
	or	eax, 461824				; 00070c00H
	or	eax, 2
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 6
	call	?codec_query@@YAIHHI@Z			; codec_query

; 368  : 
; 369  : 	//!Set Pin control : enable the output bit
; 370  : 	uint32_t ctl = codec_query(_ihd_audio.output->codec, _ihd_audio.output->nid, VERB_GET_PIN_CONTROL);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, WORD PTR [rax+2]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, 984832				; 000f0700H
	mov	edx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query
	mov	DWORD PTR ctl$[rsp], eax

; 371  : 	ctl |= (1<<6);

	mov	eax, DWORD PTR ctl$[rsp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR ctl$[rsp], eax

; 372  : 	ctl |= (1<<7);

	mov	eax, DWORD PTR ctl$[rsp]
	bts	eax, 7
	mov	DWORD PTR ctl$[rsp], eax

; 373  : 
; 374  : 	codec_query (_ihd_audio.output->codec, 2, VERB_SET_PIN_CONTROL | 0xc0);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, BYTE PTR [rax]
	mov	r8d, 460736				; 000707c0H
	mov	edx, 2
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 375  : 	codec_query (_ihd_audio.output->codec, 3, VERB_SET_PIN_CONTROL | 0xc0);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, BYTE PTR [rax]
	mov	r8d, 460736				; 000707c0H
	mov	edx, 3
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 376  : 	codec_query (_ihd_audio.output->codec, 4, VERB_SET_PIN_CONTROL | 0xc0);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, BYTE PTR [rax]
	mov	r8d, 460736				; 000707c0H
	mov	edx, 4
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 377  : 	codec_query (_ihd_audio.output->codec, 5, VERB_SET_PIN_CONTROL | 0xc0);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, BYTE PTR [rax]
	mov	r8d, 460736				; 000707c0H
	mov	edx, 5
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 378  : 	codec_query (_ihd_audio.output->codec, 6, VERB_SET_PIN_CONTROL | 0xc0);

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	eax, BYTE PTR [rax]
	mov	r8d, 460736				; 000707c0H
	mov	edx, 6
	mov	ecx, eax
	call	?codec_query@@YAIHHI@Z			; codec_query

; 379  : 
; 380  : }

	add	rsp, 72					; 00000048H
	ret	0
?hda_init_output@@YAXXZ ENDP				; hda_init_output
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
j$ = 32
i$1 = 36
i$2 = 40
i$3 = 44
format$ = 48
bdl$ = 56
dma_pos$ = 64
bdl_base$ = 72
tv82 = 80
?hda_init_output_stream@@YAXXZ PROC			; hda_init_output_stream

; 289  : void hda_init_output_stream () {

$LN15:
	sub	rsp, 104				; 00000068H

; 290  : 	_aud_outl_ (REG_O0_CTLL(_ihd_audio), 1); //clear the run bit

	mov	edx, 1
	mov	ecx, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 291  : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN12@hda_init_o
$LN11@hda_init_o:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN12@hda_init_o:
	cmp	DWORD PTR i$3[rsp], 1000		; 000003e8H
	jge	SHORT $LN10@hda_init_o

; 292  : 		;

	jmp	SHORT $LN11@hda_init_o
$LN10@hda_init_o:

; 293  : 
; 294  : 	_aud_outl_ (REG_O0_CTLL(_ihd_audio), 0);

	xor	edx, edx
	mov	ecx, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 295  : 	for (int i = 0; i < 1000; i++)

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN9@hda_init_o
$LN8@hda_init_o:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN9@hda_init_o:
	cmp	DWORD PTR i$2[rsp], 1000		; 000003e8H
	jge	SHORT $LN7@hda_init_o

; 296  : 		;

	jmp	SHORT $LN8@hda_init_o
$LN7@hda_init_o:

; 297  : 	uint64_t bdl_base = (uint64_t)AuPmmngrAlloc();   //get_physical_address  ((uint64_t) 0x0000000000000000);

	call	AuPmmngrAlloc
	mov	QWORD PTR bdl_base$[rsp], rax

; 298  : 	ihda_bdl_entry *bdl = (ihda_bdl_entry*)bdl_base;  //(_ihd_audio.corb + 3072);

	mov	rax, QWORD PTR bdl_base$[rsp]
	mov	QWORD PTR bdl$[rsp], rax

; 299  : 	int j = 0;

	mov	DWORD PTR j$[rsp], 0

; 300  : 	for (j = 0; j < BDL_SIZE; j++) {

	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN6@hda_init_o
$LN5@hda_init_o:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN6@hda_init_o:
	cmp	DWORD PTR j$[rsp], 4
	jge	SHORT $LN4@hda_init_o

; 301  : 		bdl[j].paddr = (uint64_t)AuGetPhysicalAddress(x64_read_cr3(),(uint64_t)_ihd_audio.buffer + j * 512);

	mov	eax, DWORD PTR j$[rsp]
	imul	eax, 512				; 00000200H
	cdqe
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+61
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv82[rsp], rax
	call	x64_read_cr3
	mov	rcx, QWORD PTR tv82[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	AuGetPhysicalAddress
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, 16
	mov	rdx, QWORD PTR bdl$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 302  : 		bdl[j].length = 2048;

	movsxd	rax, DWORD PTR j$[rsp]
	imul	rax, 16
	mov	rcx, QWORD PTR bdl$[rsp]
	mov	DWORD PTR [rcx+rax+8], 2048		; 00000800H

; 303  : 		bdl[j].flags = 0;

	movsxd	rax, DWORD PTR j$[rsp]
	imul	rax, 16
	mov	rcx, QWORD PTR bdl$[rsp]
	mov	DWORD PTR [rcx+rax+12], 0

; 304  : 	}

	jmp	$LN5@hda_init_o
$LN4@hda_init_o:

; 305  : 
; 306  : 	bdl[j-1].flags = 1;

	mov	eax, DWORD PTR j$[rsp]
	dec	eax
	cdqe
	imul	rax, 16
	mov	rcx, QWORD PTR bdl$[rsp]
	mov	DWORD PTR [rcx+rax+12], 1

; 307  : 
; 308  : 	_aud_outl_ (REG_O0_CTLL(_ihd_audio),(1<<20)); 

	mov	edx, 1048576				; 00100000H
	mov	ecx, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 309  : 	_aud_outl_ (REG_O0_CTLU(_ihd_audio),(1<<20));

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	add	eax, 2
	mov	edx, 1048576				; 00100000H
	mov	ecx, eax
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 310  : 
; 311  : 	_aud_outl_ (REG_O0_CBL(_ihd_audio),BDL_SIZE*2048);

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	add	eax, 8
	mov	edx, 8192				; 00002000H
	mov	ecx, eax
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 312  : 	_aud_outw_(REG_O0_STLVI(_ihd_audio), BDL_SIZE-1);

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	add	eax, 12
	mov	dx, 3
	mov	ecx, eax
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 313  : 
; 314  : 	_aud_outl_ (REG_O0_BDLPL(_ihd_audio), bdl_base);

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	add	eax, 24
	mov	edx, DWORD PTR bdl_base$[rsp]
	mov	ecx, eax
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 315  : 	_aud_outl_ (REG_O0_BDLPU(_ihd_audio), bdl_base >> 32);

	mov	rax, QWORD PTR bdl_base$[rsp]
	shr	rax, 32					; 00000020H
	mov	ecx, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	add	ecx, 28
	mov	edx, eax
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 316  : 
; 317  : 	uint16_t format =  (0<<14) | (0<<11) | (0<<8)| (1<<4) | (1<<0);

	mov	eax, 17
	mov	WORD PTR format$[rsp], ax

; 318  : 	_aud_outw_ (REG_O0_FMT(_ihd_audio), format);

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	add	eax, 18
	movzx	edx, WORD PTR format$[rsp]
	mov	ecx, eax
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 319  : 
; 320  : 	_aud_outb_(REG_O0_STS(_ihd_audio), (1<<2) | (1<<3) | (1<<4));

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	add	eax, 3
	mov	dl, 28
	mov	ecx, eax
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 321  : 
; 322  : 	uint64_t* dma_pos = (uint64_t*)p2v((size_t)AuPmmngrAlloc());

	call	AuPmmngrAlloc
	mov	rcx, rax
	call	p2v
	mov	QWORD PTR dma_pos$[rsp], rax

; 323  : 	for (int i = 0; i < 8; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN3@hda_init_o
$LN2@hda_init_o:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN3@hda_init_o:
	cmp	DWORD PTR i$1[rsp], 8
	jge	SHORT $LN1@hda_init_o

; 324  : 		dma_pos[i] = 0;

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR dma_pos$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0

; 325  : 	}

	jmp	SHORT $LN2@hda_init_o
$LN1@hda_init_o:

; 326  : 
; 327  : 	_ihd_audio.dma_pos = dma_pos;

	mov	rax, QWORD PTR dma_pos$[rsp]
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+69, rax

; 328  : 
; 329  : 	_aud_outl_ (DPIBLBASE, (uint32_t)v2p((size_t)dma_pos) | 0x1);

	mov	rcx, QWORD PTR dma_pos$[rsp]
	call	v2p
	or	eax, 1
	mov	edx, eax
	mov	ecx, 112				; 00000070H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 330  : 	_aud_outl_ (DPIBUBASE, (uint32_t)v2p((size_t)dma_pos) >> 32);

	mov	rcx, QWORD PTR dma_pos$[rsp]
	call	v2p
	shr	eax, 32					; 00000020H
	mov	edx, eax
	mov	ecx, 116				; 00000074H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 331  : 
; 332  : }

	add	rsp, 104				; 00000068H
	ret	0
?hda_init_output_stream@@YAXXZ ENDP			; hda_init_output_stream
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
rp$ = 32
wp$ = 36
old_rp$ = 40
response$ = 64
?rirb_read@@YAXPEA_K@Z PROC				; rirb_read

; 223  : static void rirb_read (uint64_t *response) {

	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 224  : 	uint16_t wp = _aud_inb_ (RIRBWP);

	mov	ecx, 88					; 00000058H
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	movzx	eax, al
	mov	WORD PTR wp$[rsp], ax

; 225  : 	uint16_t rp = rirbrp;

	movzx	eax, WORD PTR ?rirbrp@@3GA		; rirbrp
	mov	WORD PTR rp$[rsp], ax

; 226  : 	uint16_t old_rp = rp;

	movzx	eax, WORD PTR rp$[rsp]
	mov	WORD PTR old_rp$[rsp], ax
$LN2@rirb_read:

; 227  : 
; 228  : 
; 229  : 	/*Wait for an unread entry in the RIRB */
; 230  : 	while (rirbrp == wp) {

	movzx	eax, WORD PTR ?rirbrp@@3GA		; rirbrp
	movzx	ecx, WORD PTR wp$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN1@rirb_read

; 231  : 		wp = _aud_inw_(RIRBWP);  //_aud_inb_(RIRBWP);

	mov	ecx, 88					; 00000058H
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	mov	WORD PTR wp$[rsp], ax

; 232  : 	}

	jmp	SHORT $LN2@rirb_read
$LN1@rirb_read:

; 233  : 
; 234  : 	rp = (rp + 1) % _ihd_audio.rirb_entries;

	movzx	eax, WORD PTR rp$[rsp]
	inc	eax
	xor	edx, edx
	div	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24
	mov	eax, edx
	mov	WORD PTR rp$[rsp], ax

; 235  : 	rirbrp = rp;

	movzx	eax, WORD PTR rp$[rsp]
	mov	WORD PTR ?rirbrp@@3GA, ax		; rirbrp

; 236  : 	*response = _ihd_audio.rirb[rp];

	movzx	eax, WORD PTR rp$[rsp]
	mov	rcx, QWORD PTR response$[rsp]
	mov	rdx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+16
	mov	rax, QWORD PTR [rdx+rax*8]
	mov	QWORD PTR [rcx], rax

; 237  : 	_aud_outb_ (RIRBSTS, 0x5);

	mov	dl, 5
	mov	ecx, 93					; 0000005dH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 238  : 	return;
; 239  : }

	add	rsp, 56					; 00000038H
	ret	0
?rirb_read@@YAXPEA_K@Z ENDP				; rirb_read
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
rp$ = 32
wp$ = 36
verb$ = 64
?corb_write@@YAXI@Z PROC				; corb_write

; 189  : static void corb_write (uint32_t verb) {

	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H

; 190  : 
; 191  : 	//! Check for immediate use
; 192  : 	if (_ihd_audio.immediate_use) {

	movzx	eax, BYTE PTR ?_ihd_audio@@3U_hd_audio_@@A+32
	test	eax, eax
	je	SHORT $LN4@corb_write

; 193  : 		_aud_outl_(ICOI,verb);

	mov	edx, DWORD PTR verb$[rsp]
	mov	ecx, 96					; 00000060H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 194  : 		_aud_outl_(ICIS,1);

	mov	edx, 1
	mov	ecx, 104				; 00000068H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 195  : 		return;

	jmp	$LN5@corb_write
$LN4@corb_write:

; 196  : 	}
; 197  : 
; 198  : 	//! else use standard command transmitting method
; 199  : 	uint16_t wp = _aud_inw_(CORBWP) & 0xff;

	mov	ecx, 72					; 00000048H
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	movzx	eax, ax
	and	eax, 255				; 000000ffH
	mov	WORD PTR wp$[rsp], ax

; 200  : 	uint16_t rp = _aud_inw_(CORBRP) & 0xff;

	mov	ecx, 74					; 0000004aH
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	movzx	eax, ax
	and	eax, 255				; 000000ffH
	mov	WORD PTR rp$[rsp], ax

; 201  :     corbwp = 0;

	xor	eax, eax
	mov	WORD PTR ?corbwp@@3GA, ax		; corbwp

; 202  : 	corbwp = (rp + 1);

	movzx	eax, WORD PTR rp$[rsp]
	inc	eax
	mov	WORD PTR ?corbwp@@3GA, ax		; corbwp

; 203  : 	corbwp %= _ihd_audio.corb_entries;

	movzx	eax, WORD PTR ?corbwp@@3GA		; corbwp
	xor	edx, edx
	div	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28
	mov	eax, edx
	mov	WORD PTR ?corbwp@@3GA, ax		; corbwp
$LN3@corb_write:

; 204  : 	
; 205  : 	/*Wait until there's a free entry in the CORB */
; 206  : 	do {
; 207  : 		rp = _aud_inw_(CORBRP) & 0xff;

	mov	ecx, 74					; 0000004aH
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	movzx	eax, ax
	and	eax, 255				; 000000ffH
	mov	WORD PTR rp$[rsp], ax

; 208  : 	}while (rp == corbwp);

	movzx	eax, WORD PTR rp$[rsp]
	movzx	ecx, WORD PTR ?corbwp@@3GA		; corbwp
	cmp	eax, ecx
	je	SHORT $LN3@corb_write

; 209  : 
; 210  : 	
; 211  : 	/* Write to CORB */	
; 212  : 	_ihd_audio.corb[corbwp] = verb;	

	movzx	eax, WORD PTR ?corbwp@@3GA		; corbwp
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+8
	mov	edx, DWORD PTR verb$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx

; 213  :     _aud_outw_(CORBWP, corbwp);

	movzx	edx, WORD PTR ?corbwp@@3GA		; corbwp
	mov	ecx, 72					; 00000048H
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_
$LN5@corb_write:

; 214  : 
; 215  : }

	add	rsp, 56					; 00000038H
	ret	0
?corb_write@@YAXI@Z ENDP				; corb_write
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
reg$ = 32
rirbctl$ = 36
rirb_entries$ = 40
rirb_base$ = 48
?setup_rirb@@YAXXZ PROC					; setup_rirb

; 142  : void setup_rirb() {

$LN9:
	sub	rsp, 72					; 00000048H

; 143  : 
; 144  : 	uint8_t reg;
; 145  : 	uint64_t rirb_base;
; 146  : 	uint32_t rirb_entries = 0;

	mov	DWORD PTR rirb_entries$[rsp], 0

; 147  : 
; 148  : 	
; 149  : 	//_aud_outw_(RIRBCTL, 0);
; 150  : 
; 151  : 	reg = _aud_inb_ (RIRBSIZE);

	mov	ecx, 94					; 0000005eH
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	mov	BYTE PTR reg$[rsp], al

; 152  : 	/* Check RIRB size capabilities and choose the largest size */
; 153  : 	if (reg & (1 << 6)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN6@setup_rirb

; 154  : 		_ihd_audio.rirb_entries = 256;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24, 256 ; 00000100H

; 155  : 		reg |= 0x2;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 2
	mov	BYTE PTR reg$[rsp], al
	jmp	SHORT $LN5@setup_rirb
$LN6@setup_rirb:

; 156  : 	} else if (reg & (1 << 5)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN4@setup_rirb

; 157  : 		_ihd_audio.rirb_entries = 16;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24, 16

; 158  : 		reg |= 0x1;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 1
	mov	BYTE PTR reg$[rsp], al
	jmp	SHORT $LN3@setup_rirb
$LN4@setup_rirb:

; 159  : 	}else if (reg & (1 << 4)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN2@setup_rirb

; 160  : 		_ihd_audio.rirb_entries = 2;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24, 2

; 161  : 		reg |= 0x0;

	movzx	eax, BYTE PTR reg$[rsp]
	mov	BYTE PTR reg$[rsp], al

; 162  : 	}else {

	jmp	SHORT $LN1@setup_rirb
$LN2@setup_rirb:

; 163  : 		printf ("HD Audio: No supported RIRB size !!\n");

	lea	rcx, OFFSET FLAT:$SG3794
	call	printf

; 164  : 		_ihd_audio.rirb_entries = 256;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24, 256 ; 00000100H

; 165  : 		reg |= 0x2;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 2
	mov	BYTE PTR reg$[rsp], al
$LN1@setup_rirb:
$LN3@setup_rirb:
$LN5@setup_rirb:

; 166  : 	}
; 167  : 
; 168  : 	_aud_outb_(RIRBSIZE,reg);

	movzx	edx, BYTE PTR reg$[rsp]
	mov	ecx, 94					; 0000005eH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 169  : 	/* Set RIRB Base address */
; 170  : 	rirb_base = (uint64_t)_ihd_audio.rirb;

	mov	rax, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+16
	mov	QWORD PTR rirb_base$[rsp], rax

; 171  : 	_aud_outl_(RIRBLBASE, rirb_base);

	mov	edx, DWORD PTR rirb_base$[rsp]
	mov	ecx, 80					; 00000050H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 172  : 	_aud_outl_(RIRBUBASE, rirb_base >> 32);

	mov	rax, QWORD PTR rirb_base$[rsp]
	shr	rax, 32					; 00000020H
	mov	edx, eax
	mov	ecx, 84					; 00000054H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 173  : 	
; 174  : 	_aud_outw_ (RIRBWP, 0x8000);

	mov	dx, 32768				; 00008000H
	mov	ecx, 88					; 00000058H
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 175  : 	_aud_outw_(RINTCNT, _ihd_audio.rirb_entries / 2);

	xor	edx, edx
	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+24
	mov	ecx, 2
	div	ecx
	movzx	edx, ax
	mov	ecx, 90					; 0000005aH
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 176  : 	_aud_outb_ (RIRBCTL,0x1);

	mov	dl, 1
	mov	ecx, 92					; 0000005cH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 177  : 	/* Start DMA Engine */
; 178  : 	uint32_t rirbctl = _aud_inb_ (RIRBCTL);

	mov	ecx, 92					; 0000005cH
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	movzx	eax, al
	mov	DWORD PTR rirbctl$[rsp], eax

; 179  : 	rirbctl |= 0x2;

	mov	eax, DWORD PTR rirbctl$[rsp]
	or	eax, 2
	mov	DWORD PTR rirbctl$[rsp], eax

; 180  : 	_aud_outb_ (RIRBCTL,rirbctl);

	movzx	edx, BYTE PTR rirbctl$[rsp]
	mov	ecx, 92					; 0000005cH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 181  : 	printf ("RIRB DMA Engine started\n");

	lea	rcx, OFFSET FLAT:$SG3797
	call	printf

; 182  : 
; 183  : }

	add	rsp, 72					; 00000048H
	ret	0
?setup_rirb@@YAXXZ ENDP					; setup_rirb
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
reg$ = 32
corbctl$ = 36
corb_entries$ = 40
corb_base$ = 48
?setup_corb@@YAXXZ PROC					; setup_corb

; 99   : void setup_corb () {

$LN9:
	sub	rsp, 72					; 00000048H

; 100  : 	
; 101  : 	uint8_t reg;
; 102  : 	uint64_t corb_base;
; 103  : 	unsigned int corb_entries = 0;

	mov	DWORD PTR corb_entries$[rsp], 0

; 104  : 
; 105  : 	reg = _aud_inb_(CORBSIZE);

	mov	ecx, 78					; 0000004eH
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	mov	BYTE PTR reg$[rsp], al

; 106  : 	/* Check CORB size capabilities and choose the largest size */
; 107  : 	if (reg & (1 << 6)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN6@setup_corb

; 108  : 		_ihd_audio.corb_entries = 256;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28, 256 ; 00000100H

; 109  : 		reg |= 0x2;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 2
	mov	BYTE PTR reg$[rsp], al
	jmp	SHORT $LN5@setup_corb
$LN6@setup_corb:

; 110  : 	} else if (reg & (1 << 5)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN4@setup_corb

; 111  : 		_ihd_audio.corb_entries = 16;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28, 16

; 112  : 		reg |= 0x1;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 1
	mov	BYTE PTR reg$[rsp], al
	jmp	SHORT $LN3@setup_corb
$LN4@setup_corb:

; 113  : 	} else if (reg & (1 << 4)) {

	movzx	eax, BYTE PTR reg$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN2@setup_corb

; 114  : 		_ihd_audio.corb_entries = 2;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28, 2

; 115  : 		reg |= 0x0;

	movzx	eax, BYTE PTR reg$[rsp]
	mov	BYTE PTR reg$[rsp], al

; 116  : 	} else {

	jmp	SHORT $LN1@setup_corb
$LN2@setup_corb:

; 117  : 		_ihd_audio.corb_entries = 256;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+28, 256 ; 00000100H

; 118  : 		reg |= 0x2;

	movzx	eax, BYTE PTR reg$[rsp]
	or	eax, 2
	mov	BYTE PTR reg$[rsp], al
$LN1@setup_corb:
$LN3@setup_corb:
$LN5@setup_corb:

; 119  : 	}
; 120  : 
; 121  : 	_aud_outb_(CORBSIZE, reg);

	movzx	edx, BYTE PTR reg$[rsp]
	mov	ecx, 78					; 0000004eH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 122  : 
; 123  : 
; 124  : 	/* Set CORB Base Address */
; 125  : 	corb_base = (uintptr_t)_ihd_audio.corb;

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+8
	mov	QWORD PTR corb_base$[rsp], rax

; 126  : 	_aud_outl_(CORBLBASE, corb_base);

	mov	edx, DWORD PTR corb_base$[rsp]
	mov	ecx, 64					; 00000040H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 127  : 	_aud_outl_(CORBUBASE, corb_base >> 32);

	mov	rax, QWORD PTR corb_base$[rsp]
	shr	rax, 32					; 00000020H
	mov	edx, eax
	mov	ecx, 68					; 00000044H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 128  : 
; 129  : 	_aud_outw_ (CORBWP, corbwp);

	movzx	edx, WORD PTR ?corbwp@@3GA		; corbwp
	mov	ecx, 72					; 00000048H
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 130  : 	_aud_outw_ (CORBRP, 0x8000);

	mov	dx, 32768				; 00008000H
	mov	ecx, 74					; 0000004aH
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 131  : 	_aud_outw_ (CORBRP, 0x0);

	xor	edx, edx
	mov	ecx, 74					; 0000004aH
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 132  : 	
; 133  : 	/* Start DMA engine */
; 134  : 	_aud_outb_(CORBCTL, 0x1);

	mov	dl, 1
	mov	ecx, 76					; 0000004cH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 135  : 	uint32_t corbctl = _aud_inb_(CORBCTL);

	mov	ecx, 76					; 0000004cH
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	movzx	eax, al
	mov	DWORD PTR corbctl$[rsp], eax

; 136  : 	corbctl |= 0x2;

	mov	eax, DWORD PTR corbctl$[rsp]
	or	eax, 2
	mov	DWORD PTR corbctl$[rsp], eax

; 137  : 	_aud_outb_ (CORBCTL, corbctl);

	movzx	edx, BYTE PTR corbctl$[rsp]
	mov	ecx, 76					; 0000004cH
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 138  : }

	add	rsp, 72					; 00000048H
	ret	0
?setup_corb@@YAXXZ ENDP					; setup_corb
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 32
reg$ = 64
value$ = 72
?_aud_outb_@@YAXHE@Z PROC				; _aud_outb_

; 59   : void _aud_outb_ (int reg, uint8_t value) {

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H

; 60   : 	 volatile uint8_t* mmio = (uint8_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 61   : 	 _debug_print_ ("AUD:OUTB -> %x \r\n", value);

	movzx	eax, BYTE PTR value$[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG3755
	call	_debug_print_

; 62   : 	*mmio = value;

	mov	rax, QWORD PTR mmio$[rsp]
	movzx	ecx, BYTE PTR value$[rsp]
	mov	BYTE PTR [rax], cl

; 63   : }

	add	rsp, 56					; 00000038H
	ret	0
?_aud_outb_@@YAXHE@Z ENDP				; _aud_outb_
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 32
reg$ = 64
?_aud_inb_@@YAEH@Z PROC					; _aud_inb_

; 53   : uint8_t _aud_inb_ (int reg) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H

; 54   : 	volatile uint8_t* mmio = (uint8_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 55   : 	_debug_print_ ("AUD:INB -> %x \r\n", *mmio);

	mov	rax, QWORD PTR mmio$[rsp]
	movzx	eax, BYTE PTR [rax]
	movzx	eax, al
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG3748
	call	_debug_print_

; 56   : 	return *mmio;

	mov	rax, QWORD PTR mmio$[rsp]
	movzx	eax, BYTE PTR [rax]

; 57   : }

	add	rsp, 56					; 00000038H
	ret	0
?_aud_inb_@@YAEH@Z ENDP					; _aud_inb_
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
?_aud_inw_@@YAGH@Z PROC					; _aud_inw_

; 47   : uint16_t _aud_inw_(int reg) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 48   : 	volatile uint16_t* mmio = (uint16_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 49   : 	return *mmio;

	mov	rax, QWORD PTR mmio$[rsp]
	movzx	eax, WORD PTR [rax]

; 50   : }

	add	rsp, 24
	ret	0
?_aud_inw_@@YAGH@Z ENDP					; _aud_inw_
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
value$ = 40
?_aud_outw_@@YAXHG@Z PROC				; _aud_outw_

; 41   : void _aud_outw_ (int reg, uint16_t value) {

$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 42   : 	volatile uint16_t* mmio = (uint16_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 43   : 	*mmio = value;

	mov	rax, QWORD PTR mmio$[rsp]
	movzx	ecx, WORD PTR value$[rsp]
	mov	WORD PTR [rax], cx

; 44   : }

	add	rsp, 24
	ret	0
?_aud_outw_@@YAXHG@Z ENDP				; _aud_outw_
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
?_aud_inl_@@YAIH@Z PROC					; _aud_inl_

; 35   : uint32_t _aud_inl_ (int reg) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 36   :     volatile uint32_t* mmio = (uint32_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 37   : 	return *mmio;

	mov	rax, QWORD PTR mmio$[rsp]
	mov	eax, DWORD PTR [rax]

; 38   : }

	add	rsp, 24
	ret	0
?_aud_inl_@@YAIH@Z ENDP					; _aud_inl_
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
mmio$ = 0
reg$ = 32
value$ = 40
?_aud_outl_@@YAXHI@Z PROC				; _aud_outl_

; 29   : void _aud_outl_(int reg, uint32_t value) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24

; 30   : 	 volatile uint32_t* mmio = (uint32_t*)(_ihd_audio.mmio + reg);

	movsxd	rax, DWORD PTR reg$[rsp]
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mmio$[rsp], rax

; 31   : 	*mmio = value;

	mov	rax, QWORD PTR mmio$[rsp]
	mov	ecx, DWORD PTR value$[rsp]
	mov	DWORD PTR [rax], ecx

; 32   : }

	add	rsp, 24
	ret	0
?_aud_outl_@@YAXHI@Z ENDP				; _aud_outl_
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
?hda_get_buffer_number@@YAHXZ PROC			; hda_get_buffer_number

; 647  : 	return _ihd_audio.buffer_completed;

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+77

; 648  : }

	ret	0
?hda_get_buffer_number@@YAHXZ ENDP			; hda_get_buffer_number
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
?is_hdaudio_initialized@@YA_NXZ PROC			; is_hdaudio_initialized

; 657  : 	return hdaudio_initialized;

	movzx	eax, BYTE PTR hdaudio_initialized

; 658  : }

	ret	0
?is_hdaudio_initialized@@YA_NXZ ENDP			; is_hdaudio_initialized
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
sts$ = 32
isr$ = 36
buffer$1 = 40
v$ = 64
p$ = 72
?hda_handler@@YAX_KPEAX@Z PROC				; hda_handler

; 79   : void hda_handler (size_t v, void* p) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 80   : 	uint32_t isr = _aud_inl_(INTSTS);

	mov	ecx, 36					; 00000024H
	call	?_aud_inl_@@YAIH@Z			; _aud_inl_
	mov	DWORD PTR isr$[rsp], eax

; 81   : 	uint8_t sts = _aud_inb_(REG_O0_STS(_ihd_audio));

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	add	eax, 3
	mov	ecx, eax
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	mov	BYTE PTR sts$[rsp], al

; 82   : 	_debug_print_ ("HDA Handler called \r\n");

	lea	rcx, OFFSET FLAT:$SG3766
	call	_debug_print_

; 83   : 	if (sts & 0x4) {

	movzx	eax, BYTE PTR sts$[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN1@hda_handle

; 84   : 		uint8_t* buffer = (uint8_t*)(_ihd_audio.buffer + _ihd_audio.buffer_completed * 4096);

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+77
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+61
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR buffer$1[rsp], rax

; 85   : 		//AuSoundRequestNext(buffer);
; 86   : 		//hda_output_stop();
; 87   : 		_ihd_audio.buffer_completed++;

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+77
	inc	eax
	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+77, eax

; 88   : 		_ihd_audio.buffer_completed %= BDL_SIZE;

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+77
	cdq
	and	edx, 3
	add	eax, edx
	and	eax, 3
	sub	eax, edx
	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+77, eax
$LN1@hda_handle:

; 89   : 	}
; 90   : 	_aud_outl_(INTSTS, isr);

	mov	edx, DWORD PTR isr$[rsp]
	mov	ecx, 36					; 00000024H
	call	?_aud_outl_@@YAXHI@Z			; _aud_outl_

; 91   : 	_aud_outb_ (REG_O0_STS(_ihd_audio),sts);

	mov	eax, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	add	eax, 3
	movzx	edx, BYTE PTR sts$[rsp]
	mov	ecx, eax
	call	?_aud_outb_@@YAXHE@Z			; _aud_outb_

; 92   : 	//apic_local_eoi();
; 93   : 	AuInterruptEnd(1);

	mov	ecx, 1
	call	AuInterruptEnd

; 94   : }

	add	rsp, 56					; 00000038H
	ret	0
?hda_handler@@YAX_KPEAX@Z ENDP				; hda_handler
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
value$ = 32
?hda_output_stop@@YAXXZ PROC				; hda_output_stop

; 534  : void hda_output_stop () {

$LN3:
	sub	rsp, 56					; 00000038H

; 535  : 	uint32_t value = _aud_inl_(REG_O0_CTLL(_ihd_audio));

	mov	ecx, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	call	?_aud_inl_@@YAIH@Z			; _aud_inl_
	mov	DWORD PTR value$[rsp], eax

; 536  : 	_aud_outw_ (REG_O0_CTLL(_ihd_audio),0);

	xor	edx, edx
	mov	ecx, DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53
	call	?_aud_outw_@@YAXHG@Z			; _aud_outw_

; 537  : }

	add	rsp, 56					; 00000038H
	ret	0
?hda_output_stop@@YAXXZ ENDP				; hda_output_stop
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
?hda_audio_play@@YAXXZ PROC				; hda_audio_play

; 651  : void hda_audio_play () {

$LN3:
	sub	rsp, 40					; 00000028H

; 652  : 	hda_output_start();

	call	?hda_output_start@@YAXXZ		; hda_output_start

; 653  : 	hda_set_volume (119);

	mov	cl, 119					; 00000077H
	call	?hda_set_volume@@YAXE@Z			; hda_set_volume

; 654  : }

	add	rsp, 40					; 00000028H
	ret	0
?hda_audio_play@@YAXXZ ENDP				; hda_audio_play
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
data$ = 48
buff_num$ = 56
offset$ = 64
?hda_audio_add_pcm@@YAXPEAE_KI@Z PROC			; hda_audio_add_pcm

; 641  : void hda_audio_add_pcm (unsigned char *data, size_t buff_num,uint32_t offset) {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 642  : 	memcpy (_ihd_audio.buffer + buff_num * 2048,data,BDL_SIZE*2048);

	mov	rax, QWORD PTR buff_num$[rsp]
	imul	rax, 2048				; 00000800H
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+61
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	r8d, 8192				; 00002000H
	mov	rdx, QWORD PTR data$[rsp]
	mov	rcx, rax
	call	memcpy

; 643  : }

	add	rsp, 40					; 00000028H
	ret	0
?hda_audio_add_pcm@@YAXPEAE_KI@Z ENDP			; hda_audio_add_pcm
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
meta$ = 32
volume$ = 64
?hda_set_volume@@YAXE@Z PROC				; hda_set_volume

; 266  : void hda_set_volume (uint8_t volume) {

$LN4:
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 56					; 00000038H

; 267  : 	int meta = 0xb000;

	mov	DWORD PTR meta$[rsp], 45056		; 0000b000H

; 268  : 	if (volume == 0)

	movzx	eax, BYTE PTR volume$[rsp]
	test	eax, eax
	jne	SHORT $LN1@hda_set_vo

; 269  : 		volume = 0x80;  //mute bit

	mov	BYTE PTR volume$[rsp], 128		; 00000080H
$LN1@hda_set_vo:

; 270  : 	/*else
; 271  : 		volume = volume * 127 / 255;*/
; 272  : 	//codec_query (_ihd_audio.output->codec, _ihd_audio.output->nid, VERB_SET_AMP_GAIN_MUTE | 0xb000 | volume);
; 273  : 	_debug_print_ ("Setting volume \r\n");	

	lea	rcx, OFFSET FLAT:$SG3833
	call	_debug_print_

; 274  : 	codec_query (_ihd_audio.output->codec, 2, 0x39000 | volume);

	movzx	eax, BYTE PTR volume$[rsp]
	or	eax, 233472				; 00039000H
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 2
	call	?codec_query@@YAIHHI@Z			; codec_query

; 275  : 	codec_query (_ihd_audio.output->codec, 2, 0x3A000 | volume );

	movzx	eax, BYTE PTR volume$[rsp]
	or	eax, 237568				; 0003a000H
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 2
	call	?codec_query@@YAIHHI@Z			; codec_query

; 276  : 	codec_query (_ihd_audio.output->codec, 3, 0x39000 | volume);

	movzx	eax, BYTE PTR volume$[rsp]
	or	eax, 233472				; 00039000H
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 3
	call	?codec_query@@YAIHHI@Z			; codec_query

; 277  : 	codec_query (_ihd_audio.output->codec, 3, 0x3A000 | volume);

	movzx	eax, BYTE PTR volume$[rsp]
	or	eax, 237568				; 0003a000H
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 3
	call	?codec_query@@YAIHHI@Z			; codec_query

; 278  : 	codec_query (_ihd_audio.output->codec, 4, 0x39000 | volume);

	movzx	eax, BYTE PTR volume$[rsp]
	or	eax, 233472				; 00039000H
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 4
	call	?codec_query@@YAIHHI@Z			; codec_query

; 279  : 	codec_query (_ihd_audio.output->codec, 4, 0x3A000 | volume);

	movzx	eax, BYTE PTR volume$[rsp]
	or	eax, 237568				; 0003a000H
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 4
	call	?codec_query@@YAIHHI@Z			; codec_query

; 280  : 	codec_query (_ihd_audio.output->codec, 5, 0x39000 | volume);

	movzx	eax, BYTE PTR volume$[rsp]
	or	eax, 233472				; 00039000H
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 5
	call	?codec_query@@YAIHHI@Z			; codec_query

; 281  : 	codec_query (_ihd_audio.output->codec, 5, 0x3A000 | volume);

	movzx	eax, BYTE PTR volume$[rsp]
	or	eax, 237568				; 0003a000H
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 5
	call	?codec_query@@YAIHHI@Z			; codec_query

; 282  : 	codec_query (_ihd_audio.output->codec, 6, 0x39000 | volume);

	movzx	eax, BYTE PTR volume$[rsp]
	or	eax, 233472				; 00039000H
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 6
	call	?codec_query@@YAIHHI@Z			; codec_query

; 283  : 	codec_query (_ihd_audio.output->codec, 6, 0x3A000 | volume);

	movzx	eax, BYTE PTR volume$[rsp]
	or	eax, 237568				; 0003a000H
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	movzx	ecx, BYTE PTR [rcx]
	mov	r8d, eax
	mov	edx, 6
	call	?codec_query@@YAIHHI@Z			; codec_query

; 284  : 
; 285  : }

	add	rsp, 56					; 00000038H
	ret	0
?hda_set_volume@@YAXE@Z ENDP				; hda_set_volume
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
rirb_status$ = 32
verb$ = 36
icount$ = 40
response$ = 48
codec$ = 80
nid$ = 88
payload$ = 96
?codec_query@@YAIHHI@Z PROC				; codec_query

; 245  : uint32_t codec_query (int codec, int nid, uint32_t payload) {

$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H

; 246  : 	uint64_t response;// = (uint32_t)pmmngr_alloc();
; 247  : 	uint32_t icount = 10000;

	mov	DWORD PTR icount$[rsp], 10000		; 00002710H

; 248  : 	uint32_t verb = ((codec & 0xf) << 28) | 
; 249  : 		((nid & 0xff) << 20) | 
; 250  : 		(payload & 0xfffff);

	mov	eax, DWORD PTR codec$[rsp]
	and	eax, 15
	shl	eax, 28
	mov	ecx, DWORD PTR nid$[rsp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 20
	or	eax, ecx
	mov	ecx, DWORD PTR payload$[rsp]
	and	ecx, 1048575				; 000fffffH
	or	eax, ecx
	mov	DWORD PTR verb$[rsp], eax

; 251  : 
; 252  : 	
; 253  : 	corb_write(verb);

	mov	ecx, DWORD PTR verb$[rsp]
	call	?corb_write@@YAXI@Z			; corb_write
$LN3@codec_quer:

; 254  : 	uint8_t rirb_status;
; 255  : 	do {
; 256  : 		rirb_status = _aud_inb_(RIRBSTS);

	mov	ecx, 93					; 0000005dH
	call	?_aud_inb_@@YAEH@Z			; _aud_inb_
	mov	BYTE PTR rirb_status$[rsp], al

; 257  : 	}while ((rirb_status & 1) == 0);

	movzx	eax, BYTE PTR rirb_status$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@codec_quer

; 258  : 
; 259  : 	rirb_read(&response);

	lea	rcx, QWORD PTR response$[rsp]
	call	?rirb_read@@YAXPEA_K@Z			; rirb_read

; 260  : 	return response & 0xffffffff;

	mov	eax, -1					; ffffffffH
	mov	rcx, QWORD PTR response$[rsp]
	and	rcx, rax
	mov	rax, rcx

; 261  : }

	add	rsp, 72					; 00000048H
	ret	0
?codec_query@@YAIHHI@Z ENDP				; codec_query
_TEXT	ENDS
; Function compile flags: /Odtpy
; File e:\xeneva project\xeneva\aurora\aurora\drivers\hda\hda.cpp
_TEXT	SEGMENT
i$1 = 32
gcap$ = 36
i$2 = 40
device_found$ = 44
statests$ = 48
sound$ = 56
mmio$ = 64
intline$ = 68
pos$ = 72
tv130 = 80
?hda_initialize@@YAXXZ PROC				; hda_initialize

; 548  : void hda_initialize () {

$LN12:
	sub	rsp, 104				; 00000068H

; 549  : 
; 550  : 	/*uint32_t device = pci_scan_class (0x04, 0x03);
; 551  : 	if (device == 0xFFFFFFFF){
; 552  : 		printf ("No HD-Audio was found\n");
; 553  : 		return;
; 554  : 	}
; 555  : 
; 556  : 	uint16_t command = pci_read(device,PCI_COMMAND);
; 557  : 	if (((command >> 10) & 0xff) != 0) {
; 558  : 		printf ("[HD-Audio]: Interrupt disabled in PCI Config_Space %x\n", command);
; 559  : 	}*/
; 560  : 
; 561  : 	//command |= 0<<10;
; 562  : 	//command |= 0x2;
; 563  : 	//write_config_16 (0,bus,dev,func, 0x4,command);
; 564  : 
; 565  : 
; 566  : 
; 567  : 	_ihd_audio.output = (hda_output*)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33, rax

; 568  : 	_ihd_audio.vol = (hda_volume*)AuPmmngrAlloc();

	call	AuPmmngrAlloc
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+41, rax

; 569  : 	memset (_ihd_audio.output, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+33
	call	memset

; 570  : 
; 571  : 	int intline = 0; //pci_read(device, PCI_INTERRUPT_LINE);

	mov	DWORD PTR intline$[rsp], 0

; 572  : 	printf ("[HD-Audio]: INterrupt int -> %d\n", intline);

	mov	edx, DWORD PTR intline$[rsp]
	lea	rcx, OFFSET FLAT:$SG3973
	call	printf

; 573  : 	AuInterruptSet(10, hda_handler,10, false);

	xor	r9d, r9d
	mov	r8b, 10
	lea	rdx, OFFSET FLAT:?hda_handler@@YAX_KPEAX@Z ; hda_handler
	mov	ecx, 10
	call	AuInterruptSet

; 574  : 
; 575  : 
; 576  : 	uintptr_t mmio = 0; // pci_read(device,PCI_BAR0) & ~3;

	mov	DWORD PTR mmio$[rsp], 0

; 577  : 	_ihd_audio.mmio = (size_t)AuMapMMIO(mmio,2);

	mov	eax, DWORD PTR mmio$[rsp]
	mov	edx, 2
	mov	ecx, eax
	call	AuMapMMIO
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A, rax

; 578  : 	_debug_print_("_IHD_MMIO -> %x \r\n", _ihd_audio.mmio);

	mov	rdx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A
	lea	rcx, OFFSET FLAT:$SG3976
	call	_debug_print_

; 579  : 	_ihd_audio.corb = (uint32_t*)AuPmmngrAlloc(); 

	call	AuPmmngrAlloc
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+8, rax

; 580  : 	_ihd_audio.rirb = (uint64_t*)AuPmmngrAlloc(); 

	call	AuPmmngrAlloc
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+16, rax

; 581  : 	_debug_print_("_IHD Corb -> %x, RIRB -> %x \r\n", _ihd_audio.corb, _ihd_audio.rirb);

	mov	r8, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+16
	mov	rdx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+8
	lea	rcx, OFFSET FLAT:$SG3979
	call	_debug_print_

; 582  : 	memset (_ihd_audio.corb, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+8
	call	memset

; 583  : 	memset (_ihd_audio.rirb, 0, 4096);

	mov	r8d, 4096				; 00001000H
	xor	edx, edx
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+16
	call	memset

; 584  : 
; 585  : 	//! Allocate the main audio buffer area
; 586  : 	uint64_t pos = 0xFFFFD00000400000;

	mov	rax, -52776553938944			; ffffd00000400000H
	mov	QWORD PTR pos$[rsp], rax

; 587  : 	for (int i = 0; i < (BDL_SIZE*HDA_BUFFER_SIZE/ 4096)+1; i++) {

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN9@hda_initia
$LN8@hda_initia:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN9@hda_initia:
	cmp	DWORD PTR i$2[rsp], 3
	jge	SHORT $LN7@hda_initia

; 588  : 		AuMapPage ((uint64_t)AuPmmngrAlloc(),pos + i * 4096, 0);

	mov	eax, DWORD PTR i$2[rsp]
	imul	eax, 4096				; 00001000H
	cdqe
	mov	rcx, QWORD PTR pos$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv130[rsp], rax
	call	AuPmmngrAlloc
	xor	r8d, r8d
	mov	rcx, QWORD PTR tv130[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	AuMapPage

; 589  : 	}

	jmp	SHORT $LN8@hda_initia
$LN7@hda_initia:

; 590  : 
; 591  : 	_ihd_audio.buffer = (uint64_t*)0xFFFFD00000400000;

	mov	rax, -52776553938944			; ffffd00000400000H
	mov	QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+61, rax

; 592  : 	memset (_ihd_audio.buffer, 10000, BDL_SIZE*HDA_BUFFER_SIZE);

	mov	r8d, 8192				; 00002000H
	mov	dl, 16
	mov	rcx, QWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+61
	call	memset

; 593  : 
; 594  : 
; 595  : 	if (_aud_inw_ (GCAP) & 1) {

	xor	ecx, ecx
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	movzx	eax, ax
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@hda_initia

; 596  : 		printf ("HD-Audio 64-OK\n");

	lea	rcx, OFFSET FLAT:$SG3988
	call	printf
$LN6@hda_initia:

; 597  : 	}
; 598  : 
; 599  : 
; 600  : 	hda_reset();

	call	?hda_reset@@YAXXZ			; hda_reset

; 601  : 
; 602  :      uint16_t gcap = _aud_inw_(GCAP);

	xor	ecx, ecx
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	mov	WORD PTR gcap$[rsp], ax

; 603  : 	_ihd_audio.num_oss = HDA_GCAP_OSS(gcap);

	movzx	eax, WORD PTR gcap$[rsp]
	and	eax, 61440				; 0000f000H
	sar	eax, 12
	mov	WORD PTR ?_ihd_audio@@3U_hd_audio_@@A+51, ax

; 604  : 	_ihd_audio.num_iss = HDA_GCAP_ISS(gcap);

	movzx	eax, WORD PTR gcap$[rsp]
	and	eax, 3840				; 00000f00H
	sar	eax, 8
	mov	WORD PTR ?_ihd_audio@@3U_hd_audio_@@A+49, ax

; 605  : 	_ihd_audio.stream_0_x = 0x80 + (_ihd_audio.num_iss * 0x20);

	movzx	eax, WORD PTR ?_ihd_audio@@3U_hd_audio_@@A+49
	imul	eax, 32					; 00000020H
	add	eax, 128				; 00000080H
	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+53, eax

; 606  : 	_ihd_audio.stream_0_y = 0x80 + (_ihd_audio.num_iss * 0x20) + (_ihd_audio.num_oss * 0x20);

	movzx	eax, WORD PTR ?_ihd_audio@@3U_hd_audio_@@A+49
	imul	eax, 32					; 00000020H
	movzx	ecx, WORD PTR ?_ihd_audio@@3U_hd_audio_@@A+51
	imul	ecx, 32					; 00000020H
	lea	eax, DWORD PTR [rax+rcx+128]
	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+57, eax

; 607  : 	
; 608  : 
; 609  : 	bool device_found = false;

	mov	BYTE PTR device_found$[rsp], 0

; 610  : 	uint16_t statests = _aud_inw_ (STATESTS);

	mov	ecx, 14
	call	?_aud_inw_@@YAGH@Z			; _aud_inw_
	mov	WORD PTR statests$[rsp], ax

; 611  : 	for (int i = 0; i < 15; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN5@hda_initia
$LN4@hda_initia:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN5@hda_initia:
	cmp	DWORD PTR i$1[rsp], 15
	jge	SHORT $LN3@hda_initia

; 612  : 		if (statests & (1 >> i)){

	movzx	eax, WORD PTR statests$[rsp]
	mov	ecx, DWORD PTR i$1[rsp]
	mov	edx, 1
	sar	edx, cl
	mov	ecx, edx
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN2@hda_initia

; 613  : 			if (codec_enumerate_widgets(i)) {

	mov	ecx, DWORD PTR i$1[rsp]
	call	?codec_enumerate_widgets@@YAHH@Z	; codec_enumerate_widgets
	test	eax, eax
	je	SHORT $LN1@hda_initia

; 614  : 				printf ("HDA Device found at index ->%d\n", i);

	mov	edx, DWORD PTR i$1[rsp]
	lea	rcx, OFFSET FLAT:$SG3998
	call	printf

; 615  : 				break;

	jmp	SHORT $LN3@hda_initia
$LN1@hda_initia:
$LN2@hda_initia:

; 616  : 			}
; 617  : 		}
; 618  : 	} 

	jmp	SHORT $LN4@hda_initia
$LN3@hda_initia:

; 619  : 	
; 620  : 
; 621  : 	hda_init_output();

	call	?hda_init_output@@YAXXZ			; hda_init_output

; 622  : 	hda_init_output_stream();

	call	?hda_init_output_stream@@YAXXZ		; hda_init_output_stream

; 623  : 	hda_set_volume (119); //mute

	mov	cl, 119					; 00000077H
	call	?hda_set_volume@@YAXE@Z			; hda_set_volume

; 624  : 
; 625  : 	_ihd_audio.buffer_completed = 0;

	mov	DWORD PTR ?_ihd_audio@@3U_hd_audio_@@A+77, 0

; 626  : 	
; 627  : 	hdaudio_initialized = true;

	mov	BYTE PTR hdaudio_initialized, 1

; 628  : 
; 629  : 	sound_t *sound = (sound_t*)malloc(sizeof(sound_t));

	mov	ecx, 64					; 00000040H
	call	malloc
	mov	QWORD PTR sound$[rsp], rax

; 630  : 	sound->start_output_stream = hda_audio_play;

	mov	rax, QWORD PTR sound$[rsp]
	lea	rcx, OFFSET FLAT:?hda_audio_play@@YAXXZ	; hda_audio_play
	mov	QWORD PTR [rax+56], rcx

; 631  : 	sound->stop_output_stream = hda_output_stop;

	mov	rax, QWORD PTR sound$[rsp]
	lea	rcx, OFFSET FLAT:?hda_output_stop@@YAXXZ ; hda_output_stop
	mov	QWORD PTR [rax+48], rcx

; 632  : 	sound->write = 0; //hda_write;

	mov	rax, QWORD PTR sound$[rsp]
	mov	QWORD PTR [rax+32], 0

; 633  : 	sound->read = 0;

	mov	rax, QWORD PTR sound$[rsp]
	mov	QWORD PTR [rax+40], 0

; 634  : 	AuSoundRegisterDevice(sound);

	mov	rcx, QWORD PTR sound$[rsp]
	call	AuSoundRegisterDevice

; 635  : 
; 636  : 	printf ("IHD-Audio Initialized successfully\n");

	lea	rcx, OFFSET FLAT:$SG4002
	call	printf

; 637  : }

	add	rsp, 104				; 00000068H
	ret	0
?hda_initialize@@YAXXZ ENDP				; hda_initialize
_TEXT	ENDS
END
